/*
 * appsink.ccg
 *
 *  Created on: Jul 30, 2013
 *      Author: m.kolny
 */
/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


_PINCLUDE(gstreamermm/private/basesink_p.h)

extern "C"
{

GType gst_app_sink_gstreamermm_get_type()
{
  static GType type = 0;
  GstElementFactory* factory = 0;
  GstPluginFeature* feature = 0;

  if(!type)
  {
    factory = gst_element_factory_find("appsink");
    // Make sure that the feature is actually loaded:
    if(factory)
    {
      feature =
        gst_plugin_feature_load(GST_PLUGIN_FEATURE(factory));

      g_object_unref(factory);
      factory = GST_ELEMENT_FACTORY(feature);
      type = gst_element_factory_get_element_type(factory);
      g_object_unref(factory);

      // Register the new type with wrapping system
      Glib::wrap_register(type, &Gst::AppSink_Class::wrap_new);
    }
  }

  return type;
}

} // extern "C"

namespace Gst
{

AppSink::AppSink()
: _CONSTRUCT("name", static_cast<char*>(0))
{}

AppSink::AppSink(const Glib::ustring& name)
: _CONSTRUCT("name", name.c_str())
{}

Glib::RefPtr<Gst::Sample> AppSink::pull_preroll()
{
  GstSample* result;
  g_signal_emit_by_name(gobj(), "pull-preroll", &result, static_cast<void*>(0));
  return _CONVERT(`GstSample*', `Glib::RefPtr<Gst::Sample>', `result');
}

Glib::RefPtr<Gst::Sample> AppSink::pull_sample()
{
  GstSample* result;
  g_signal_emit_by_name(gobj(), "pull-sample", &result, static_cast<void*>(0));
  return _CONVERT(`GstSample*', `Glib::RefPtr<Gst::Sample>', `result');
}

}
namespace Glib
{

Glib::RefPtr<Gst::AppSink> wrap(GstAppSink* object, bool take_copy)
{
  static bool registered_wrap_new = false;
  if(!registered_wrap_new)
  {
    // Call get *_get_type() function which does the registration.
    gst_app_sink_gstreamermm_get_type();
    registered_wrap_new = true;
  }

  return Glib::RefPtr<Gst::AppSink>( dynamic_cast<Gst::AppSink*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
}

}
