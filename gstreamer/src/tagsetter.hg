// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gsttagsetter.h>
#include <glibmm/interface.h>
#include <gstreamermm/enums.h>
#include <gstreamermm/taglist.h>
#include <gstreamermm/structurevalue.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

/** Gst::TagSetter â€” Gst::Element interface that allows setting and retrieval
 * of media metadata.
 *
 * Elements that support changing a stream's metadata will implement this
 * interface. Examples of such elements are 'vorbisenc', 'theoraenc' and
 * 'id3v2mux'.
 *
 * If you just want to retrieve metadata in your application then all you need
 * to do is watch for tag messages on your pipeline's bus. This interface is
 * only for setting metadata, not for extracting it. To set tags from the
 * application, find tagsetter elements and set tags using e.g. merge_tags() or
 * add_tags(). The application should do that before the element goes to
 * Gst::STATE_PAUSED.
 */
class TagSetter : public Glib::Interface
{
  _CLASS_INTERFACE(TagSetter, GstTagSetter, GST_TAG_SETTER, GstTagSetterIFace)

public:
  _WRAP_METHOD(void merge_tags(const TagList& list, TagMergeMode mode=TAG_MERGE_PREPEND), gst_tag_setter_merge_tags)

  /** Adds the given Glib::ValueBase on the setter using the given merge mode. 
   *
   * @param tag The tag to set.
   * @param value The value to set the tag to.
   * @param mode The mode to use.
   */
   void add_tag(const Glib::ustring& tag, const Glib::ValueBase& value, TagMergeMode mode=TAG_MERGE_PREPEND);

  /** Adds the given value on the setter using the given merge mode. 
   *
   * @param tag The tag to set.
   * @param data The value to set the tag to.
   * @param mode The mode to use.
   */
   template <class DataType>
   void add_tag(const Glib::ustring& tag, const DataType& data, TagMergeMode mode=TAG_MERGE_PREPEND);

   _IGNORE(gst_tag_setter_add_tag_valist_values,
           gst_tag_setter_add_tag_valist,
           gst_tag_setter_add_tags,
           gst_tag_setter_add_tag_values)

   _WRAP_METHOD(TagList get_tag_list(), gst_tag_setter_get_tag_list)
   _WRAP_METHOD(void set_tag_merge_mode(TagMergeMode mode), gst_tag_setter_set_tag_merge_mode)
   _WRAP_METHOD(TagMergeMode qet_tag_merge_mode(), gst_tag_setter_get_tag_merge_mode)
};

#ifndef DOXYGEN_SHOULD_SKIP_THIS

/************************** Gst::TagSetter ***************************/

template <class DataType>
void TagSetter::add_tag(const Glib::ustring& tag, const DataType& data, TagMergeMode mode)
{
  typedef typename Gst::StructureValue<DataType> type_cppdata;
  typedef typename type_cppdata::ValueType ValueType;

  ValueType value;
  value.init(ValueType::value_type());
  value.set(data);
  this->add_tag(tag, (Glib::ValueBase)(value), mode);
}

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

} // namespace Gst

