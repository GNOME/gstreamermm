/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

_WRAP_ENUM(MixerTrackFlags, GstMixerTrackFlags)

/** A track in an element that implement the Gst::Mixer interface.
 * @ingroup GstInterfaces
 */
class MixerTrack : public Glib::Object
{
  _CLASS_GOBJECT(MixerTrack, GstMixerTrack, GST_MIXER_TRACK, Glib::Object, GObject)

public:
  /** Checks to see whether the mixer track has the specified flags.
   * @param flags The flags to check for.
   * @return Whether the mixer track has the specified flags or not.
   */
  bool has_flags(Gst::MixerTrackFlags flags);

  /** Get a string containing a descriptive name for this track.
   */
  _MEMBER_GET(label, label, Glib::ustring, gchar*) 
  /** Get the number of channels in the Gst::MixerTrack.
   */
  _MEMBER_GET(num_channels, num_channels, guint32, guint32)

  /** Get minimum volume of in the Gst::MixerTrack.
   */
  _MEMBER_GET(min_volume, min_volume, guint32, guint32)

  /** Get the maximum volume of the Gst::MixerTrack.
   */
  _MEMBER_GET(max_volume, max_volume, guint32, guint32)

  _WRAP_PROPERTY("flags", guint)
  _WRAP_PROPERTY("index", guint)
  _WRAP_PROPERTY("label", Glib::ustring)
  _WRAP_PROPERTY("max-volume", int)
  _WRAP_PROPERTY("min-volume", int)
  _WRAP_PROPERTY("num-channels", int)
  _WRAP_PROPERTY("untranslated-label", Glib::ustring)
};

} // namespace Gst
