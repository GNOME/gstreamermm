/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008-2009 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <cstring>
#include <gst/audio/audio-enumtypes.h>
_PINCLUDE(gstreamermm/private/object_p.h)

namespace
{

extern "C"
{

static void RingBuffer_Fill_gstreamermm_callback(GstRingBuffer*, guint8* data, guint len,
                                                 gpointer user_data)
{
  Gst::RingBuffer::SlotFill& slot_fill = *static_cast<Gst::RingBuffer::SlotFill*>(user_data);

#ifdef GLIBMM_EXCEPTIONS_ENABLED
  try
#endif
  {
    slot_fill(data, len);
  }
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  catch (...)
  {
    Glib::exception_handlers_invoke();
  }
#endif
}

} // extern "C"

} // anonymous namespace

namespace Gst
{

RingBufferSpec::RingBufferSpec(const GstRingBufferSpec* castitem)
{
  if(castitem)
    copy_fields_from(*castitem);
  else
  {
    GstRingBufferSpec empty;
    copy_fields_from(empty);
  }
}

void RingBufferSpec::copy_fields_from(const GstRingBufferSpec& spec)
{
  caps = Glib::wrap(spec.caps);

  type = static_cast<Gst::BufferFormatType>(spec.type);
  format = static_cast<Gst::BufferFormat>(spec.format);
  sign = spec.sign;
  bigend = spec.bigend;
  width = spec.width;
  depth = spec.depth;
  rate = spec.rate;
  channels = spec.channels;
  latency_time = spec.latency_time;
  buffer_time = spec.buffer_time;
  segsize = spec.segsize;
  segtotal = spec.segtotal;
  bytes_per_sample = spec.bytes_per_sample;
  seglatency = spec.seglatency;

  std::memcpy(silence_sample, spec.silence_sample, sizeof(silence_sample));
}

void RingBufferSpec::copy_fields_to(GstRingBufferSpec& spec) const
{
  spec.caps = Glib::unwrap(caps);
  spec.type = static_cast<GstBufferFormatType>(type);
  spec.format = static_cast<GstBufferFormat>(format);
  spec.sign = sign;
  spec.bigend = bigend;
  spec.width = width;
  spec.depth = depth;
  spec.rate = rate;
  spec.channels = channels;
  spec.latency_time = latency_time;
  spec.buffer_time = buffer_time;
  spec.segsize = segsize;
  spec.segtotal = segtotal;
  spec.bytes_per_sample = bytes_per_sample;
  spec.seglatency = seglatency;

  std::memcpy(spec.silence_sample, silence_sample, sizeof(spec.silence_sample));
}

RingBuffer::RingBuffer(const Glib::ConstructParams& construct_params)
:
  Gst::Object(construct_params),
  _slot_set(false)
{}

RingBuffer::RingBuffer(GstRingBuffer* castitem)
:
  Gst::Object(reinterpret_cast<GstObject*>(castitem)),
  _slot_set(false)
{}

void RingBuffer::set_fill_slot(const SlotFill& slot)
{
  // TODO: Not safe against self assignment, and not exception-safe.  Is the
  // separate _slot_set flag really needed?  Is dynamic allocation actually
  // needed at all?  This would not have to be a member at all if there were
  // an accessor to the callback user data in the C API.
  if(_slot_set)
    delete this->slot;

  this->slot = new SlotFill(slot);
  _slot_set = true;

  gst_ring_buffer_set_callback(gobj(), &RingBuffer_Fill_gstreamermm_callback,
    this->slot);
}

bool RingBuffer::acquire(const Gst::RingBufferSpec& spec)
{
  GstRingBufferSpec gst_spec;
  spec.copy_fields_to(gst_spec);
  return gst_ring_buffer_acquire(gobj(), &gst_spec);
}

bool RingBuffer::parse_caps(Gst::RingBufferSpec& spec, const Glib::RefPtr<Gst::Caps>& caps)
{
  GstRingBufferSpec gst_spec;
  spec.copy_fields_to(gst_spec);
  gboolean const result = gst_ring_buffer_parse_caps(&gst_spec, Glib::unwrap(caps));
  spec.copy_fields_from(gst_spec);
  return (result != 0);
}

RingBuffer::~RingBuffer()
{
    // Delete ringbuffer's slot upon destruction
  if(_slot_set)
    delete slot;
}

} // namespace Gst
