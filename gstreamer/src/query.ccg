// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstenumtypes.h>
#include <gstreamermm/iterator.h>

_PINCLUDE(gstreamermm/private/miniobject_p.h)

namespace Gst
{

QueryTypeDefinition::QueryTypeDefinition()
: value(Gst::QUERY_NONE),
  quark((GQuark)(0))
{}

QueryTypeDefinition::QueryTypeDefinition(GstQueryTypeDefinition* castitem)
: value(Gst::QUERY_NONE),
  quark((castitem) ? castitem->quark : 0)
{
  if (castitem)
  {
    value = (QueryType)(castitem->value);
    nick = castitem->nick;
    description = castitem->description;
  }
}

namespace Enums
{

Glib::ustring get_name(QueryType t)
{
  return gst_query_type_get_name(GstQueryType(t));
}

Glib::QueryQuark get_quark(QueryType t)
{
  return Glib::QueryQuark(gst_query_type_to_quark(GstQueryType(t)));
}

} //namespace Enums

Glib::RefPtr<Gst::Query> Query::copy() const
{
  return Gst::wrap(gst_query_copy(gobj()));
}

Glib::RefPtr<Gst::Query> Query::create_writable()
{
  return Gst::wrap(gst_query_make_writable(gobj()));
}

bool get_details(QueryType type, QueryTypeDefinition &def)
{
  const GstQueryTypeDefinition* gstdef = gst_query_type_get_details(GstQueryType(type));

  g_return_val_if_fail(gstdef != NULL, false);

  def.value = QueryType(gstdef->value);
  def.nick = gstdef->nick;
  def.description = gstdef->description;
  def.quark = gstdef->quark;

  return true;
}

QueryApplication::QueryApplication(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QueryApplication::create(QueryType type, Gst::Structure& structure)
{
  GstQuery* query = gst_query_new_application(GstQueryType(type),
    structure.gobj()); 
  return Gst::Query::wrap(query);
}

QueryConvert::QueryConvert(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QueryConvert::create(Format src_format, gint64 value, Format dest_format)
{
  GstQuery* query = gst_query_new_convert(GstFormat(src_format), value,
    GstFormat(dest_format));
  return Gst::Query::wrap(query);
}

void QueryConvert::set(Format src_format, gint64 src_value, Format dest_format, gint64 dest_value)
{
  gst_query_set_convert(gobj(), GstFormat(src_format), src_value, GstFormat(dest_format), dest_value);
}

void QueryConvert::parse(Format& src_format, gint64& src_value, Format& dest_format, gint64& dest_value) const
{
  gst_query_parse_convert(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&src_format), &src_value, (GstFormat*)(&dest_format),
    &dest_value);
}

void QueryConvert::parse(Format& dest_format, gint64& dest_value) const
{
  gst_query_parse_convert(const_cast<GstQuery*>(gobj()), NULL, NULL,
    (GstFormat*)(&dest_format), &dest_value);
}

Format QueryConvert::parse_src_format() const
{
  Format src_format;
  gst_query_parse_convert(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&src_format), NULL, NULL, NULL);
  return src_format;
}

gint64 QueryConvert::parse_src_value() const
{
  gint64 src_value;
  gst_query_parse_convert(const_cast<GstQuery*>(gobj()), NULL, &src_value,
    NULL, NULL);
  return src_value;
}

Format QueryConvert::parse_dest_format() const
{
  Format dest_format;
  gst_query_parse_convert(const_cast<GstQuery*>(gobj()), NULL, NULL,
    (GstFormat*)(&dest_format), NULL);
  return dest_format;
}

gint64 QueryConvert::parse_dest_value() const
{
  gint64 dest_value;
  gst_query_parse_convert(const_cast<GstQuery*>(gobj()), NULL, NULL, NULL,
    &dest_value);
  return dest_value;
}

QueryPosition::QueryPosition(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QueryPosition::create(Format format)
{
  GstQuery* query = gst_query_new_position(GstFormat(format));
  return Gst::Query::wrap(query);
}

void QueryPosition::set(Format format, gint64 position)
{
  gst_query_set_position(gobj(), GstFormat(format), position);
}

void QueryPosition::parse(Format& format, gint64& position) const
{
  gst_query_parse_position(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&format), &position);
}

gint64 QueryPosition::parse() const
{
  gint64 position;
  gst_query_parse_position(const_cast<GstQuery*>(gobj()), NULL, &position);
  return position;
}

Format QueryPosition::parse_format() const
{
  Format format;
  gst_query_parse_position(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&format), NULL);
  return format;
}

QueryDuration::QueryDuration(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QueryDuration::create(Format format)
{
  GstQuery* query = gst_query_new_duration(GstFormat(format));
  return Gst::Query::wrap(query);
}

void QueryDuration::set(Format format, gint64 duration)
{
  gst_query_set_duration(gobj(), GstFormat(format), duration);
}

void QueryDuration::parse(Format& format, gint64& duration) const
{
  gst_query_parse_duration(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&format), &duration);
}

gint64 QueryDuration::parse() const
{
  gint64 duration;
  gst_query_parse_duration(const_cast<GstQuery*>(gobj()), NULL, &duration);
  return duration;
}

Format QueryDuration::parse_format() const
{
  Format format;
  gst_query_parse_duration(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&format), NULL);
  return format;
}

QueryLatency::QueryLatency(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QueryLatency::create()
{
  GstQuery* query = gst_query_new_latency();
  return Gst::Query::wrap(query);
}

void QueryLatency::set(bool live, ClockTime min_latency, ClockTime max_latency)
{
  gst_query_set_latency(gobj(), live, GstClockTime(min_latency), GstClockTime(max_latency));
}

void QueryLatency::parse(bool& live, ClockTime& min_latency, ClockTime& max_latency) const
{
  gboolean glive;
  gst_query_parse_latency(const_cast<GstQuery*>(gobj()), &glive,
    (ClockTime*)(&min_latency), (ClockTime*)(&max_latency));
  live = glive;
}

bool QueryLatency::parse_live() const
{
  gboolean glive;
  gst_query_parse_latency(const_cast<GstQuery*>(gobj()), &glive, NULL, NULL);
  return glive;
}

ClockTime QueryLatency::parse_min() const
{
  ClockTime min;
  gst_query_parse_latency(const_cast<GstQuery*>(gobj()), NULL,
    (ClockTime*)(&min), NULL);
  return min;
}

ClockTime QueryLatency::parse_max() const
{
  ClockTime max;
  gst_query_parse_latency(const_cast<GstQuery*>(gobj()), NULL, NULL,
    (ClockTime*)(&max));
  return max;
}

QuerySeeking::QuerySeeking(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QuerySeeking::create(Format format)
{
  GstQuery* query = gst_query_new_seeking(GstFormat(format));
  return Gst::Query::wrap(query);
}

void QuerySeeking::set(Format format, bool seekable, gint64 segment_start, gint64 segment_end)
{
  gst_query_set_seeking(gobj(), GstFormat(format), seekable, segment_start, segment_end);
}

void QuerySeeking::parse(Format& format, bool& seekable, gint64& segment_start, gint64& segment_end) const
{
  gboolean gseekable;
  gst_query_parse_seeking(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&format), &gseekable, &segment_start, &segment_end);
  seekable = gseekable;
}

Format QuerySeeking::parse_format() const
{
  Format format;
  gst_query_parse_seeking(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&format), NULL, NULL, NULL);
  return format;
}

bool QuerySeeking::parse_seekable() const
{
  gboolean gseekable;
  gst_query_parse_seeking(const_cast<GstQuery*>(gobj()), NULL,
    &gseekable, NULL, NULL);
  return gseekable;
}

gint64 QuerySeeking::parse_start() const
{
  gint64 start;
  gst_query_parse_seeking(const_cast<GstQuery*>(gobj()), NULL, NULL,
    &start, NULL);
  return start;
}

gint64 QuerySeeking::parse_end() const
{
  gint64 end;
  gst_query_parse_seeking(const_cast<GstQuery*>(gobj()), NULL, NULL,NULL,
    &end);
  return end;
}

QueryFormats::QueryFormats(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QueryFormats::create()
{
  GstQuery* query = gst_query_new_formats();
  return Gst::Query::wrap(query);
}

void QueryFormats::set(const Glib::ArrayHandle<Format>& formats)
{
  gst_query_set_formatsv(gobj(), formats.size(), (GstFormat*)(formats.data()));
}

void QueryFormats::set(int n_formats, const Glib::ArrayHandle<Format>& formats)
{
  gst_query_set_formatsv(gobj(), n_formats, (GstFormat*)(formats.data()));
}

guint QueryFormats::parse_length() const
{
  guint n_formats;
  gst_query_parse_formats_length(const_cast<GstQuery*>(gobj()), &n_formats);
  return n_formats;
}

Format QueryFormats::parse(guint nth) const
{
  Format format;
  gst_query_parse_formats_nth(const_cast<GstQuery*>(gobj()), nth,
    (GstFormat*)(&format));
  return format;
}

QuerySegment::QuerySegment(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QuerySegment::create(Format format)
{
  GstQuery* query = gst_query_new_segment(GstFormat(format));
  return Gst::Query::wrap(query);
}

void QuerySegment::set(double rate, Format format, gint64 start_value, gint64 stop_value)
{
  gst_query_set_segment(gobj(), rate, GstFormat(format), start_value, stop_value);
}

void QuerySegment::parse(double& rate, Format& format, gint64& start_value, gint64& stop_value) const
{
  gst_query_parse_segment(const_cast<GstQuery*>(gobj()), &rate,
    (GstFormat*)(&format), &start_value, &stop_value);
}

double QuerySegment::parse_rate() const
{
  double rate;
  gst_query_parse_segment(const_cast<GstQuery*>(gobj()), &rate, NULL,
    NULL, NULL);
  return rate;
}

Format QuerySegment::parse_format() const
{
  Format format;
  gst_query_parse_segment(const_cast<GstQuery*>(gobj()), NULL,
    (GstFormat*)(&format), NULL, NULL);
  return format;
}

gint64 QuerySegment::parse_start() const
{
  gint64 start;
  gst_query_parse_segment(const_cast<GstQuery*>(gobj()), NULL, NULL,
    &start, NULL);
  return start;
}

gint64 QuerySegment::parse_stop() const
{
  gint64 stop;
  gst_query_parse_segment(const_cast<GstQuery*>(gobj()), NULL, NULL,
    NULL, &stop);
  return stop;
}

QueryBuffering::QueryBuffering(GstQuery* castitem) :
Query(castitem)
{
}

Glib::RefPtr<Gst::Query> QueryBuffering::create(Format format)
{
  GstQuery* query = gst_query_new_buffering(GstFormat(format));
  return Gst::Query::wrap(query);
}

void QueryBuffering::set(bool busy, int percent)
{
  gst_query_set_buffering_percent(gobj(), busy, percent);
}

void QueryBuffering::parse(bool& busy, int& percent) const
{
  gboolean gbusy;
  gst_query_parse_buffering_percent(const_cast<GstQuery*>(gobj()), &gbusy,
    &percent);
  busy = gbusy;
}

bool QueryBuffering::parse_busy() const
{
  gboolean gbusy;
  gst_query_parse_buffering_percent(const_cast<GstQuery*>(gobj()), &gbusy,
    NULL);
  return gbusy;
}

int QueryBuffering::parse_percent() const
{
  int percent;
  gst_query_parse_buffering_percent(const_cast<GstQuery*>(gobj()), NULL,
    &percent);
  return percent;
}

void QueryBuffering::set(BufferingMode mode, int avg_in, int avg_out, gint64 buffering_left)
{
  gst_query_set_buffering_stats(gobj(), (GstBufferingMode)(mode), avg_in,
    avg_out, buffering_left);
}

void QueryBuffering::parse(BufferingMode& mode, int& avg_in, int& avg_out, gint64 buffering_left) const
{
  gst_query_parse_buffering_stats(const_cast<GstQuery*>(gobj()),
    (GstBufferingMode*)(&mode), &avg_in, &avg_out, &buffering_left);
}

BufferingMode QueryBuffering::parse_mode() const
{
  BufferingMode mode;
  gst_query_parse_buffering_stats(const_cast<GstQuery*>(gobj()),
    (GstBufferingMode*)(&mode), NULL, NULL, NULL);
  return mode;
}

int QueryBuffering::parse_input_rate() const
{
  int avg_in;
  gst_query_parse_buffering_stats(const_cast<GstQuery*>(gobj()), NULL,
    &avg_in, NULL, NULL);
  return avg_in;
}

int QueryBuffering::parse_output_rate() const
{
  int avg_out;
  gst_query_parse_buffering_stats(const_cast<GstQuery*>(gobj()), NULL, NULL,
    &avg_out, NULL);
  return avg_out;
}

gint64 QueryBuffering::parse_time_left() const
{
  gint64 buffering_left;
  gst_query_parse_buffering_stats(const_cast<GstQuery*>(gobj()), NULL,
    NULL, NULL, &buffering_left);
  return buffering_left;
}

void QueryBuffering::set(Format format, gint64 start, gint64 stop, gint64 estimated_total)
{
  gst_query_set_buffering_range(gobj(), (GstFormat)(format), start, stop,
    estimated_total);
}

void QueryBuffering::parse(Format& format, gint64& start, gint64& stop, gint64& estimated_total) const
{
  gst_query_parse_buffering_range(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&format), &start, &stop, &estimated_total);
}

Format QueryBuffering::parse_format() const
{
  Format format;
  gst_query_parse_buffering_range(const_cast<GstQuery*>(gobj()),
    (GstFormat*)(&format), NULL, NULL, NULL);
  return format;
}

gint64 QueryBuffering::parse_start() const
{
  gint64 start;
  gst_query_parse_buffering_range(const_cast<GstQuery*>(gobj()), NULL,
    &start, NULL, NULL);
  return start;
}

gint64 QueryBuffering::parse_stop() const
{
  gint64 stop;
  gst_query_parse_buffering_range(const_cast<GstQuery*>(gobj()), NULL,
    NULL, &stop, NULL);
  return stop;
}

gint64 QueryBuffering::parse_total_time() const
{
  gint64 estimated_total;
  gst_query_parse_buffering_range(const_cast<GstQuery*>(gobj()), NULL,
    NULL, NULL, &estimated_total);
  return estimated_total;
}

Glib::RefPtr<Gst::Query> Query::wrap(GstQuery* query, bool take_copy) {

  Glib::RefPtr<Gst::Query> result;

  if(!query)
    return result;

  switch (GST_QUERY_TYPE(query)) {
    case GST_QUERY_POSITION:
      result = Glib::RefPtr<Gst::Query>( new Gst::QueryPosition(query) );
      break;
    case GST_QUERY_DURATION:
      result = Glib::RefPtr<Gst::Query>( new Gst::QueryDuration(query) );
      break;
    case GST_QUERY_LATENCY:
      result = Glib::RefPtr<Gst::Query>( new Gst::QueryLatency(query) );
      break;
    case GST_QUERY_SEEKING:
      result = Glib::RefPtr<Gst::Query>( new Gst::QuerySeeking(query) );
      break;
    case GST_QUERY_SEGMENT:
      result = Glib::RefPtr<Gst::Query>( new Gst::QuerySegment(query) );
      break;
    case GST_QUERY_CONVERT:
      result = Glib::RefPtr<Gst::Query>( new Gst::QueryConvert(query) );
      break;
    case GST_QUERY_FORMATS:
      result = Glib::RefPtr<Gst::Query>( new Gst::QueryFormats(query) );
      break;
    case GST_QUERY_BUFFERING:
      result = Glib::RefPtr<Gst::Query>( new Gst::QueryBuffering(query) );
      break;
    case GST_QUERY_NONE:
    case GST_QUERY_JITTER:
      result = Gst::wrap(query, false);
      break;
	/* The rest of the query types are custom ones */
    default:
      result = Glib::RefPtr<Gst::Query>( new Gst::QueryApplication(query) );
  }

  if(result && take_copy)
    result->reference();

  return result;
}

} //namesapce Gst
