// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/element.h>
#include <gstreamermm/enums.h>
#include <gstreamermm/childproxy.h>
_DEFS(gstreamermm,gst)
_PINCLUDE(glibmm/private/object_p.h)
_PINCLUDE(gstreamermm/private/element_p.h)

namespace Gst
{

class Pad;

class Bin
: public Element,
  public ChildProxy
{
  _CLASS_GOBJECT(Bin, GstBin, GST_BIN, Element, GstElement)
  _IMPLEMENTS_INTERFACE(ChildProxy)

protected:
  _CTOR_DEFAULT

public:
  //TODO: Why doesn't this use _WRAP_CREATE()?
  static Glib::RefPtr<Bin> create(const Glib::ustring& name);

  //TODO: Why do these throw exceptions?
  //If there is a good reason for it, document that in comments and doxygen documentation. murrayc.
  Glib::RefPtr<Bin> add(const Glib::RefPtr<Element>& element);
  Glib::RefPtr<Bin> remove(const Glib::RefPtr<Element>& element);

  Glib::RefPtr<Element> get_by_name(const Glib::ustring& element_name);
  Glib::RefPtr<Element> get_by_name_recurse_up(const Glib::ustring& element_name);
  _WRAP_METHOD(Glib::RefPtr<Element> get_by_interface(GType interface), gst_bin_get_by_interface)

  Glib::RefPtr<Pad> find_unconnected_pad(PadDirection direction);

  _IGNORE(gst_bin_add, gst_bin_remove, gst_bin_get_by_name, gst_bin_get_by_name_recurse_up)

#m4 _CONVERSION(`GstElement*',`const Glib::RefPtr<Element>&', `Glib::wrap($3, true)')
  //TODO: When wrap() works: _WRAP_SIGNAL(void element_added(const Glib::RefPtr<Element>& element), "element-added")
  //TODO: When wrap() works: _WRAP_SIGNAL(void element_removed(const Glib::RefPtr<Element>& element), "element-removed")
};

} //namespace Gst
