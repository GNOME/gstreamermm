// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstelement.h>
#include <gstreamermm/pluginfeature.h>

_DEFS(gstreamermm,gst)
_PINCLUDE(gstreamermm/private/pluginfeature_p.h)

namespace Gst
{

struct ElementDetails
{
  Glib::ustring         long_name;
  Glib::ustring         klass;
  Glib::ustring         description;
  Glib::ustring         author;
};

class Caps;
class Element;
class PadTemplate;
class Plugin;

/** ElementFactory â€” Create Elements from a factory.
 * ElementFactory is used to create instances of elements. A Elementfactory can
 * be added to a Plugin as it is also a PluginFeature.
 *
 * Use the find() and create() functions to create element instances. or use
 * the static create() as a convenient shortcut.
 *
 * The following code example shows you how to create a GstFileSrc element.
 *
 * TODO: Add code example from GStreamer docs
 *
 */
class ElementFactory : public PluginFeature
{
  _CLASS_GOBJECT(ElementFactory, GstElementFactory, GST_ELEMENT_FACTORY, PluginFeature, GstPluginFeature)

public:
  _WRAP_METHOD(static Glib::RefPtr<ElementFactory> find(const Glib::ustring& name), gst_element_factory_find)
  _WRAP_METHOD(GType get_element_type() const, gst_element_factory_get_element_type)
  _WRAP_METHOD(Glib::ustring get_long_name() const, gst_element_factory_get_longname)
  _WRAP_METHOD(Glib::ustring get_kclass() const, gst_element_factory_get_klass)
  _WRAP_METHOD(Glib::ustring get_description() const, gst_element_factory_get_description)
  _WRAP_METHOD(Glib::ustring get_author() const, gst_element_factory_get_author)
  _WRAP_METHOD(guint get_num_pad_templates() const, gst_element_factory_get_num_pad_templates)
  _WRAP_METHOD(int get_uri_type() const, gst_element_factory_get_uri_type)

  //TODO: Is the conversion from gchar** to Glb::StringArrayHandle used here valid?
  _WRAP_METHOD(Glib::StringArrayHandle get_uri_protocols() const, gst_element_factory_get_uri_protocols)

  _WRAP_METHOD(bool has_interface(const Glib::ustring& name) const, gst_element_factory_has_interface)
  _WRAP_METHOD(Glib::RefPtr<Element> create(const Glib::ustring& name), gst_element_factory_create)
  _WRAP_METHOD(static Glib::RefPtr<Element> create(const Glib::ustring& factory_name, const Glib::ustring& name), gst_element_factory_make)
  _WRAP_METHOD(bool can_sink_caps(const Glib::RefPtr<const Caps>& caps) const, gst_element_factory_can_sink_caps)
  _WRAP_METHOD(bool can_src_caps(const Glib::RefPtr<const Caps>& caps) const, gst_element_factory_can_src_caps)

#m4 _CONVERSION(`const GList*', `Glib::ListHandle< Glib::RefPtr<const PadTemplate> >', `$2(const_cast<GList*>($3), Glib::OWNERSHIP_NONE)')
  _WRAP_METHOD(Glib::ListHandle< Glib::RefPtr<const PadTemplate> > get_static_pad_templates(), gst_element_factory_get_static_pad_templates)

  _IGNORE(gst_element_register)
};

} // namespace Gst

