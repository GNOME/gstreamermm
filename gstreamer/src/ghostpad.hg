// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/pad.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

/** Gst::GhostPad â€” Pseudo link pads.
 * Gst::GhostPad are useful when organizing pipelines with Gst::Bin like elements.
 * The idea here is to create hierarchical element graphs. The bin element
 * contains a sub-graph. Now one would like to treat the bin-element like
 * another Gst::Element. This is where Gst::GhostPad come into play. A
 * Gst::GhostPad acts as a proxy for another pad. Thus the bin can have sink
 * and source ghost-pads that are associated with sink and source pads of the
 * child elements.
 *
 * If the target pad is known at creation time, create() with a Gst::Pad
 * argument is the method to use to get a ghost-pad. Otherwise one can use
 * create() with a Gst::PadDirection argument to create the ghost-pad and use
 * set_target() to establish the association later on.
 *
 * Note that Gst::GhostPad add overhead to the data processing of a pipeline.
 *
 * Last reviewed on 2005-11-18 (0.9.5)
 */
class GhostPad : public Pad
{
  _CLASS_GOBJECT(GhostPad, GstGhostPad, GST_GHOST_PAD, Pad, GstPad)

protected:
  _WRAP_CTOR(GhostPad(const Glib::ustring& name, const Glib::RefPtr<Pad>& target), gst_ghost_pad_new)
  _WRAP_CTOR(GhostPad(const Glib::ustring& name, PadDirection dir), gst_ghost_pad_new_no_target)
  _WRAP_CTOR(GhostPad(const Glib::ustring& name, const Glib::RefPtr<Pad>& target, const Glib::RefPtr<PadTemplate>& templ), gst_ghost_pad_new_from_template)
  _WRAP_CTOR(GhostPad(const Glib::ustring& name, const Glib::RefPtr<PadTemplate>& templ), gst_ghost_pad_new_no_target_from_template)

public:
  /** Create a new ghostpad with @a target as the target. The direction will be
   * taken from the target pad. @a target must be unlinked.
   *
   * @param name The name of the new pad.
   * @param target The pad to ghost.
   * @returns A new Gst::GhostPad, or an empty RefPtr in case of an error.
   */
  _WRAP_CREATE(const Glib::ustring& name, const Glib::RefPtr<Pad>& target)

  /** Create a new ghostpad without a target with the given direction. A target
   * can be set on the ghostpad later with the set_target() function.
   *
   * The created ghostpad will not have a padtemplate.
   *
   * @param name The name of the new pad.
   * @param dir The direction of the ghostpad.
   * @return A new Gst::GhostPad, or an empty RefPtr in case of an error. 
   */
  _WRAP_CREATE(const Glib::ustring& name, PadDirection dir)

  /** Create a new ghostpad with @a target as the target. The direction will be
   * taken from the target pad. The template used on the ghostpad will be
   * template.
   *
   * @param name The name of the new pad.
   * @param target The pad to ghost.
   * @param templ The Gst::PadTemplate to use on the ghostpad.
   * @return A new Gst::GhostPad, or an empty RefPtr in case of an error.
   */
  _WRAP_CREATE(const Glib::ustring& name, const Glib::RefPtr<Pad>& target, const Glib::RefPtr<PadTemplate>& templ)

  /** Create a new ghostpad based on @a templ, without setting a target. The
   * direction will be taken from @a templ.
   *
   * @param name The name of the new pad.
   * @param templ The Gst::PadTemplate to create the ghostpad from.
   * @return A new Gst::GhostPad, or an empty RefPtr in case of an error.
   */
  _WRAP_CREATE(const Glib::ustring& name, const Glib::RefPtr<PadTemplate>& templ)

  _WRAP_METHOD(bool set_target(const Glib::RefPtr<Pad>& newtarget), gst_ghost_pad_set_target)

  _WRAP_METHOD(Glib::RefPtr<Pad> get_target(), gst_ghost_pad_get_target)
  _WRAP_METHOD(Glib::RefPtr<const Pad> get_target() const, gst_ghost_pad_get_target)
};

} // namespace Gst

