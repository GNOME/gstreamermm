/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2016 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
#include <gst/audio/gstaudiocdsrc.h>
#include <gstreamermm/pushsrc.h>
#include <gstreamermm/taglist.h>
#include <glibmm/arrayhandle.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

_WRAP_ENUM(AudioCdSrcMode,GstAudioCdSrcMode)

/** A base class for CD digital audio (CDDA) sources, which handles
 * things like seeking, querying, discid calculation, tags, and buffer
 * timestamping.
 *
 * Gst::AudioCdSrc registers two Gst::Formats of its own, namely the
 * "track" format and the "sector" format. Applications will usually only find
 * the "track" format interesting. You can retrieve that Gst::Format for use in
 * seek events or queries with Gst::get_format("track").
 *
 * In order to query the number of tracks, for example, an application would
 * set the CDDA source element to READY or PAUSED state and then query the the
 * number of tracks via Gst::Element::query_duration() using the track format
 * acquired above. Applications can query the currently playing track in the
 * same way.
 *
 * Alternatively, applications may retrieve the currently playing track and the
 * total number of tracks from the taglist that will be posted on the bus
 * whenever the CD is opened or the currently playing track changes. The
 * taglist will contain Gst::TAG_TRACK_NUMBER and Gst::TAG_TRACK_COUNT tags.
 *
 * Applications playing back CD audio using playbin and cdda://n URIs should
 * issue a seek command in track format to change between tracks, rather than
 * setting a new cdda://n+1 URI on playbin (as setting a new URI on playbin
 * involves closing and re-opening the CD device, which is much much slower).
 *
 * CDDA sources will automatically emit a number of tags, details about which
 * can be found in the libgsttag documentation. Those tags are:
 * Gst::TAG_CDDA_CDDB_DISCID, Gst::TAG_CDDA_CDDB_DISCID_FULL,
 * Gst::TAG_CDDA_MUSICBRAINZ_DISCID, Gst::TAG_CDDA_MUSICBRAINZ_DISCID_FULL,
 * among others.
 *
 * Applications will be informed of the available tracks via a TOC message
 * on the pipeline's Gst::Bus. The Gst::Toc will contain a Gst::TocEntry for
 * each track, with information about each track. The duration for each
 * track can be retrieved via the Gst::TAG_DURATION tag from each entry's
 * tag list, or calculated via Gst::TocEntry::get_start_stop_times().
 * The track entries in the TOC will be sorted by track number.
 *
 * Last reviewed on 2016-05-16 (1.8.0)
 *
 * @ingroup GstBaseClasses
 */
class AudioCdSrc : public Gst::PushSrc
{
  _CLASS_GOBJECT(AudioCdSrc, GstAudioCdSrc, GST_AUDIO_CD_SRC, Gst::PushSrc, GstPushSrc)

public:
  /** CDDA sources use this function from their start vfunc to announce the
   * available data and audio tracks to the base source class.
   *
   * @param num Track number in TOC (usually starts from 1, but not always).
   * @param start The first sector of the track (LBA).
   * @param end The last sector of the track (LBA).
   * @param is_audio Whether this is an audio track.
   * @param tags Track-specific tags (e.g. from cd-text information).
   * @return false on error, otherwise true.
   */
  bool add_track(guint num, guint start, guint end, bool is_audio = true,
    const Gst::TagList& tags = Gst::TagList());
  _IGNORE(gst_audio_cd_src_add_track)

  _WRAP_PROPERTY("device", std::string)
  _WRAP_PROPERTY("mode", AudioCdSrcMode)
  _WRAP_PROPERTY("track", guint)

  /** Virtual function to open a CD device.
   */
  _WRAP_VFUNC(bool open(const std::string& device), "open")

  /** Virtual function to close the device.
   */
  _WRAP_VFUNC(void close(), "close")

  /** Virtual function to read one sector (LBA).
   */
  _WRAP_VFUNC(Glib::RefPtr<Gst::Buffer> read_sector(gint sector), "read_sector")
};

} // namespace Gst
