/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2014 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
#include <gst/gst.h>
#include <gstreamermm/miniobject.h>
#include <gstreamermm/structure.h>
 
_DEFS(gstreamermm,gst)

namespace Gst
{
class Context : public MiniObject
{
  _CLASS_OPAQUE_REFCOUNTED(Context, GstContext, NONE, gst_context_ref, gst_context_unref)

  _IGNORE(gst_context_new, gst_context_ref, gst_context_unref)

public:
  static Glib::RefPtr<Context> create(const Glib::ustring& context_type, bool persistent);

  _WRAP_METHOD(Glib::RefPtr<Gst::Context> copy(), gst_context_copy)
  _WRAP_METHOD(Glib::RefPtr<Gst::Context> copy() const, gst_context_copy, constversion)

  _WRAP_METHOD(Glib::ustring get_context_type() const, gst_context_get_context_type)

  _WRAP_METHOD(bool has_context_type(const Glib::ustring& context_type) const, gst_context_has_context_type)

  _WRAP_METHOD(bool is_persistent() const, gst_context_is_persistent)

  _WRAP_METHOD(Gst::Structure writable_structure() const, gst_context_writable_structure)
};
}
