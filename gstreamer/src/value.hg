// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstvalue.h>
#include <glibmm/value_custom.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

/** Represents a fraction for use to store in Structures of Caps as a value
 * representing a property (see GStreamer Application Development Manual
 * section 8.2.2 for explanation).  When the value is set, it is transformed to
 * a GStreamer GType so retrieving the value is a bit different.  The class can
 * be used in setting and getting a Structure's field like so:
 *
 * @code
 * Glib::Value<Gst::Fraction> value;
 * value.init(Glib::Value<Gst::Fraction>::value_type());
 * value.set(Gst::Fraction(25,1));
 *
 * Gst::Structure structure("my-structure");
 * structure.set_field("framerate", value);
 * ...
 * Glib::ValueBase gst_value;
 * structure.get_field("framerate", gst_value);
 * Gst::Fraction fract(gst_value);
 * int numerator = fract.num;
 * ...
 * @code
 */
class Fraction
{
public:
  Fraction();
  Fraction(int num, int denom);
  Fraction(const Fraction& f);
  Fraction(const Glib::ValueBase& gst_fraction_value);
public:
  int num;
  int denom;
};


/** Represents an integer range (min - max) for use to store in Structures of
 * Caps as a value representing a property (see GStreamer Application
 * Development Manual section 8.2.2 for explanation).  When the value is set,
 * it is transformed to a GStreamer GType so retrieving the value is a bit
 * different.  The class can be used in setting and getting a Structure's field
 * like so:
 *
 * @code
 * Glib::Value<Gst::IntRange> value;
 * value.init(Glib::Value<Gst::IntRange>::value_type());
 * value.set(Gst::IntRange(8000, 50000));
 *
 * Gst::Structure structure("my-structure");
 * structure.set_field("rate", value);
 * ...
 * Glib::ValueBase gst_value;
 * structure.get_field("rate", gst_value);
 * Gst::IntRange range(gst_value);
 * int max = range.max;
 * ...
 * @code
 */
class IntRange
{
public:
  IntRange();
  IntRange(int min, int max);
  IntRange(const IntRange& r);
  IntRange(const Glib::ValueBase& gst_int_range_value);
public:
  int min;
  int max;
};

/** Represents a double range (min - max) for use to store in Structures of
 * Caps as a value representing a property (see GStreamer Application
 * Development Manual section 8.2.2 for explanation).  When the value is set,
 * it is transformed to a GStreamer GType so retrieving the value is a bit
 * different.  The class can be used in setting and getting a Structure's field
 * like so:
 *
 * @code
 * Glib::Value<Gst::DoubleRange> value;
 * value.init(Glib::Value<Gst::DoubleRange>::value_type());
 * value.set(Gst::DoubleRange(44.1, 48.0));
 *
 * Gst::Structure structure("my-structure");
 * structure.set_field("rate", value);
 * ...
 * Glib::ValueBase gst_value;
 * structure.get_field("rate", gst_value);
 * Gst::DoubleRange range(gst_value);
 * double min = range.min;
 * ...
 * @code
 */
class DoubleRange
{
public:
  DoubleRange();
  DoubleRange(double min, double max);
  DoubleRange(const DoubleRange& r);
  DoubleRange(const Glib::ValueBase& gst_double_range_value);
public:
  double min;
  double max;
};


/** Represents a fractional range for use to store in Structures of Caps as a
 * value representing a property (see GStreamer Application Development Manual
 * section 8.2.2 for explanation).  When the value is set, it is transformed to
 * a GStreamer GType so retrieving the value is a bit different.  The class can
 * be used in setting and getting a Structure's field like so:
 *
 * @code
 * Glib::Value<Gst::FractionRange> value;
 * value.init(Glib::Value<Gst::Fraction>::value_type());
 * value.set(Gst::FractionRange(Gst::Fraction(1,2), Gst::Fraction(3,4)));
 *
 * Gst::Structure structure("my-structure");
 * structure.set_field("range", value);
 * ...
 * Glib::ValueBase gst_value;
 * structure.get_field("rate", gst_value);
 * Gst::FractionRange range(gst_value);
 * int min_numerator = range.min.num;
 * ...
 * @code
 */
class FractionRange
{
public:
  FractionRange();
  FractionRange(const Fraction& min, const Fraction& max);
  FractionRange(const FractionRange& r);
  FractionRange(const Glib::ValueBase& gst_fraction_range_value);
public:
  Fraction min;
  Fraction max;
};

} //namespace Gst
