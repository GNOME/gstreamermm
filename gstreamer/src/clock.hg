#include <gstmm/object.h>
#include <gstmm/enums.h>
_DEFS(gstmm,gst)
_PINCLUDE(glibmm/private/object_p.h)
_PINCLUDE(gstmm/private/object_p.h)

namespace Gst
{

class ClockID
{
  _CLASS_OPAQUE_REFCOUNTED(ClockID, GstClockID, NONE, gst_clock_id_ref, gst_clock_id_unref)
  _IGNORE(gst_clock_id_ref, gst_clock_id_unref)
};

typedef GstClockTime ClockTime;
typedef GstClockTimeDiff ClockTimeDiff;
const ClockTime CLOCK_TIME_NONE = GST_CLOCK_TIME_NONE;

//Note that ClockTime is an enum.  That's why these are not member functions of a class

guint get_hours(ClockTime time);
guint get_minutes(ClockTime time);
guint get_seconds(ClockTime time);
guint get_milliseconds(ClockTime time);
guint get_microseconds(ClockTime time);
guint get_nanoseconds(ClockTime time);
guint get_fractional_seconds(ClockTime time);

class Clock : public Object
{
  _CLASS_GOBJECT(Clock, GstClock, GST_CLOCK, Object, GstObject)

protected:
  //TODO: What C function does this correspond to?
  //TODO: Add a create()?
  _CTOR_DEFAULT()

public:
  _WRAP_METHOD(bool add_observation(ClockTime slave_time, ClockTime master_time, gdouble* result), gst_clock_add_observation)
  _WRAP_METHOD(bool set_master(const Clock& master_clock), gst_clock_set_master)
  _WRAP_METHOD(Glib::RefPtr<Clock> get_master(), gst_clock_get_master)
  _WRAP_METHOD(ClockTime set_resolution(ClockTime resolution), gst_clock_set_resolution)
  _WRAP_METHOD(ClockTime get_resolution() const, gst_clock_get_resolution)
  _WRAP_METHOD(ClockTime get_time() const, gst_clock_get_time)
  //  _WRAP_METHOD(Glib::RefPtr<ClockID> new_single_shot_id(ClockTime time), gst_clock_new_single_shot_id)
  //  _WRAP_METHOD(Glib::RefPtr<ClockID> new_periodic_id(ClockTime start_time, ClockTime intervals), gst_clock_new_periodic_id)
  _WRAP_METHOD(ClockTime get_internal_time() const, gst_clock_get_internal_time)
  _WRAP_METHOD(ClockTime adjust_unlocked(ClockTime internal_time), gst_clock_adjust_unlocked)
  _WRAP_METHOD(ClockTime unadjust_unlocked(ClockTime external_time), gst_clock_unadjust_unlocked)
};

} //namespace Gst
