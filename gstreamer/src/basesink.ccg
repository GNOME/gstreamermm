/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/pad.h>

_PINCLUDE(gstreamermm/private/element_p.h)

namespace Gst
{

bool BaseSink::query_latency(bool& live, bool& upstream_live, ClockTime& min_latency, ClockTime& max_latency) const
{
  gboolean gst_live = 0;
  gboolean gst_upstream_live = 0;

  const bool result =
    gst_base_sink_query_latency(const_cast<GstBaseSink*>(gobj()),
    &gst_live, &gst_upstream_live, (GstClockTime*)(&(min_latency)),
    (GstClockTime*)(&(max_latency)));

  live = gst_live;
  upstream_live = gst_upstream_live;

  return result;
}

ClockReturn BaseSink::wait_clock(ClockTime time)
{
  return (ClockReturn)(gst_base_sink_wait_clock(const_cast<GstBaseSink*>(gobj()), (GstClockTime)(time), 0));
}

FlowReturn BaseSink::wait_eos(ClockTime time)
{
  return (FlowReturn)(gst_base_sink_wait_eos(const_cast<GstBaseSink*>(gobj()), (GstClockTime)(time), 0));
}

} // namespace Gst
