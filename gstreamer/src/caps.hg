// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstcaps.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

struct Structure;

class Caps 
{
  _CLASS_OPAQUE_REFCOUNTED(Caps, GstCaps, NONE, gst_caps_ref, gst_caps_unref)
  _IGNORE(gst_caps_ref, gst_caps_unref)

public:
  //TODO: Why doesn't this use _WRAP_CREATE()?
  static Glib::RefPtr<Caps> create();
  static Glib::RefPtr<Caps> create_any();
  static Glib::RefPtr<Caps> create_simple(const Glib::ustring& media_type);

  //TODO: Parameter should be a list of Structures
  static Glib::RefPtr<Caps> create_full(Structure& structure);

  _WRAP_METHOD(Glib::RefPtr<Caps> copy() const, gst_caps_copy)
  _WRAP_METHOD(Glib::RefPtr<Caps> copy_nth(guint nth), gst_caps_copy_nth)
  _WRAP_METHOD(void append(const Glib::RefPtr<Caps>& caps), gst_caps_append)
  _WRAP_METHOD(void merge(const Glib::RefPtr<Caps>& caps), gst_caps_merge)
  _WRAP_METHOD(void append_structure(Structure& structure), gst_caps_append_structure)
  _WRAP_METHOD(void merge_structure(Structure& structure), gst_caps_merge_structure)
  //TODO: Shouldn't the Structure be reference-counted?
  _WRAP_METHOD(Structure* get_structure(guint idx), gst_caps_get_structure)

  _WRAP_METHOD(void remove_structure(guint idx), gst_caps_remove_structure)
  _WRAP_METHOD(guint get_size() const, gst_caps_get_size)

  //TODO: Want to return RefPtr to Caps but using RefPtr in expressions such
  //TODO: as 'caps->set_simple(name1, value1)->set_simple(name2, value2)' a
  //TODO: causes Structure immutability warnings because the Caps is referenced
  //TODO: more than once in the expression
  void set_simple(const Glib::ustring& name, const Glib::ValueBase& value);

  _WRAP_METHOD(void set_simple_valist(char* field, const va_list& varargs), gst_caps_set_simple_valist)

  _WRAP_METHOD(bool is_any() const, gst_caps_is_any)
  _WRAP_METHOD(bool is_empty() const, gst_caps_is_empty)
  _WRAP_METHOD(bool is_fixed() const, gst_caps_is_fixed)
  _WRAP_METHOD(bool is_equal(const Glib::RefPtr<Caps>& other_caps) const, gst_caps_is_equal)
  _WRAP_METHOD(bool is_equal_fixed(const Glib::RefPtr<Caps>& other_caps) const, gst_caps_is_equal_fixed)
  _WRAP_METHOD(bool is_always_compatible(const Glib::RefPtr<Caps>& other_caps) const, gst_caps_is_always_compatible)
  _WRAP_METHOD(bool is_subset(const Glib::RefPtr<Caps>& superset_caps) const, gst_caps_is_subset)
  _WRAP_METHOD(Glib::RefPtr<Caps> get_intersect(const Glib::RefPtr<Caps>& other_caps) const, gst_caps_intersect)
  _WRAP_METHOD(Glib::RefPtr<Caps> get_union(const Glib::RefPtr<Caps>& other_caps) const, gst_caps_union)
  _WRAP_METHOD(Glib::RefPtr<Caps> normalize(), gst_caps_normalize)
  _WRAP_METHOD(bool simplify(), gst_caps_do_simplify)
  _WRAP_METHOD(xmlNodePtr save(const xmlNodePtr& parent) const, gst_caps_save_thyself)
  _WRAP_METHOD(static Glib::RefPtr<Caps> load(xmlNodePtr parent), gst_caps_load_thyself)

  _WRAP_METHOD(Glib::ustring to_string() const, gst_caps_to_string)

  _WRAP_METHOD(static Glib::RefPtr<Caps> from_string(const Glib::ustring& string), gst_caps_from_string)

  _WRAP_METHOD(Glib::RefPtr<Caps> subtract(const Glib::RefPtr<const Caps>& subtrahend_caps), gst_caps_subtract)
  _WRAP_METHOD(Glib::RefPtr<Caps> make_writable(), gst_caps_make_writable)
  _WRAP_METHOD(void truncate(), gst_caps_truncate)
  
  _IGNORE(gst_caps_copy, gst_caps_set_simple, gst_caps_make_writable)
};

} //namespace Gst
