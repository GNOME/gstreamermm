// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstplugin.h>
#include <gstreamermm/object.h>

_DEFS(gstreamermm,gst)
_PINCLUDE(gstreamermm/private/object_p.h)

namespace Gst
{

//TODO: Edit references below to use gstreamermm classes/methods

/** Plugin â€” Container for features loaded from a shared object module.
 * GStreamer is extensible, so Element instances can be loaded at runtime. A
 * plugin system can provide one or more of the basic GStreamer
 * PluginFeature subclasses.
 *
 * A plugin should export a symbol gst_plugin_desc that is a struct of type
 * PluginDesc. the plugin loader will check the version of the core library
 * the plugin was linked against and will create a new Plugin. It will then
 * call the PluginInitFunc function that was provided in the gst_plugin_desc.
 *
 * Once you have a handle to a Plugin (e.g. from the RegistryPool), you can add
 * any object that subclasses PluginFeature.
 *
 * Use find_feature() and feature_list() to find features in a plugin.
 *
 * Usually plugins are always automaticlly loaded so you don't need to call
 * gst_plugin_load() explicitly to bring it into memory. There are options to
 * statically link plugins to an app or even use GStreamer without a plugin
 * repository in which case gst_plugin_load() can be needed to bring the plugin
 * into memory.
 *
 * @newin2p16
 */
class Plugin : public Object
{
  _CLASS_GOBJECT(Plugin, GstPlugin, GST_PLUGIN, Object, GstObject)

public:

};

} // namespace Gst

