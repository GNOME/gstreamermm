// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstenumtypes.h>

namespace Gst
{

Glib::ustring get_name(Format f)
{
  return gst_format_get_name(GstFormat(f));
}

Glib::QueryQuark get_quark(Format f)
{
  return Glib::QueryQuark(gst_format_to_quark(GstFormat(f)));
}

//TODO: should gst_format_register() be wrapped?  It seems like it would be
//extending GStreamer which may be best done with C API directly
Format register_format(const Glib::ustring& nick, const Glib::ustring& description)
{
  return Format(gst_format_register(nick.c_str(), description.c_str()));
}

Format get_format(const Glib::ustring& nick)
{
  return Format(gst_format_get_by_nick(nick.c_str()));
}

//TODO: first arg is an array of Formats
/*
bool formats_contain_format(const Format& formats, Format format)
{
  GstFormat gstformats = GstFormat(formats);
  return gst_formats_contains(&gstformats, GstFormat(format));
}
*/

bool get_details(Format format, FormatDefinition &def)
{
  const GstFormatDefinition* gstdef = gst_format_get_details(GstFormat(format));

  g_return_val_if_fail(gstdef != NULL, false);

  def.value = Format(gstdef->value);
  def.nick = gstdef->nick;
  def.description = gstdef->description;
  def.quark = gstdef->quark;

  return true;
}

} //namespace Gst

