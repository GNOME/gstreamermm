/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/pad.h>
#include <gst/gstbin.h>
#include <gst/gstutils.h>
#include <stdexcept>

namespace Gst
{

Glib::RefPtr<Bin> Bin::create(const Glib::ustring& name)
{
  GstElement* bin = gst_bin_new(name.c_str());
  return Glib::wrap((GstBin*) bin);
}

Glib::RefPtr<Bin> Bin::add(const Glib::RefPtr<Element>& element)
{
  bool result = gst_bin_add(gobj(), element->gobj());

  if(result)
    return Glib::wrap(gobj(), true);
  else
    throw std::runtime_error("Bin '" + get_name() + "' does not want to accept Element '" + element->get_name() + "'");
}

Glib::RefPtr<Bin> Bin::remove(const Glib::RefPtr<Element>& element)
{
  bool result = gst_bin_remove(gobj(), element->gobj());

  if(result)
    return Glib::RefPtr<Bin>(this);
  else
    throw std::runtime_error("Bin '" + get_name() + "' does not want to remove Element '" + element->get_name() + "'");
}

Glib::RefPtr<Element> Bin::get_by_name(const Glib::ustring& element_name)
{
  GstElement* element = gst_bin_get_by_name(gobj(), element_name.c_str());

  if(element != NULL)
    return Glib::wrap(element, false);
  else
    throw std::runtime_error("Bin '" + get_name() + "' contains no Element '" + element_name + "'");
}

Glib::RefPtr<Element> Bin::get_by_name_recurse_up(const Glib::ustring& element_name)
{
  GstElement* element = gst_bin_get_by_name_recurse_up(gobj(), element_name.c_str());

  if(element != NULL)
    return Glib::wrap(element, false);
  else
    throw std::runtime_error("Bin '" + get_name() + "' contains no Element '" + element_name + "'");
}

Glib::RefPtr<Pad> Bin::find_unconnected_pad(PadDirection direction)
{
  GstPad* pad = gst_bin_find_unconnected_pad(gobj(), GstPadDirection(direction));

  if(pad != NULL)
    return Glib::wrap(pad, false);
  else
    throw std::runtime_error("Bin '" + get_name() + "' contains no unconnected Pad(s)");
}

} //namespace Gst
