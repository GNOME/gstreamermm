// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <stdexcept>
#include <gst/gstbin.h>
#include <gst/gstutils.h>
#include <gstreamermm/pad.h>

_PINCLUDE(glibmm/private/object_p.h)
_PINCLUDE(gstreamermm/private/element_p.h)

namespace Gst
{

Glib::RefPtr<Bin> Bin::add(const Glib::RefPtr<Element>& element)
{
  const bool result = gst_bin_add(gobj(), element->gobj());

  // If addition successful, return RefPtr<..> to this bin, otherwise return
  // NULL RefPtr<...>
  if(result)
  {
    // When adding an element to a bin, an extra ref is needed because bin
    // takes ownership of element and wants to unref the element itself when
    // the bin is destroyed.
    element->reference();

    return Glib::wrap(gobj(), true);
  }
  else
    throw std::runtime_error("Failed to add " + element->get_name() + " element");
}

Glib::RefPtr<Bin> Bin::remove(const Glib::RefPtr<Element>& element)
{
  const bool result = gst_bin_remove(gobj(), element->gobj());

  // If removal successful, return RefPtr<..> to this bin, otherwise return
  // NULL RefPtr<...>
  if(result)
    return Glib::wrap(gobj(), true);
  else
    return Glib::RefPtr<Bin>(0);
}

} //namespace Gst

