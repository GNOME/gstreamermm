// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstchildproxy.h>
#include <glibmm/interface.h>
#include <gstreamermm/object.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

/** Gst::ChildProxy â€” An interface for multi child elements.
 * This interface abstracts handling of property sets for child elements.
 * Imagine elements such as mixers or polyphonic generators. They all have
 * multiple Gst::Pad or some kind of voice objects. The element acts as a
 * parent for those child objects. Each child has the same properties.
 *
 * By implementing this interface the child properties can be accessed from
 * the parent element by using get_proxy_property() and set_proxy_property().
 *
 * Property names are written as "child-name::property-name". The whole naming
 * scheme is recursive. Thus "child1::child2::property" is valid too, if
 * "child1" also implements the Gst::ChildProxy interface.
 */
class ChildProxy : public Glib::Interface
{
  _CLASS_INTERFACE(ChildProxy, GstChildProxy, GST_CHILD_PROXY, GstChildProxyInterface)

public:
  _WRAP_METHOD(guint get_children_count(), gst_child_proxy_get_children_count)
  _WRAP_METHOD(Glib::RefPtr<Gst::Object> get_child(const Glib::ustring& name), gst_child_proxy_get_child_by_name)
  _WRAP_METHOD(Glib::RefPtr<Gst::Object> get_child(guint index), gst_child_proxy_get_child_by_index)

  //TODO: should gst_child_proxy_lookup() be wrapped?

  /** Gets a single property using the Gst::ChildProxy mechanism.
   * @param name the property to get
   * @param value an empty Glib::ValueBase in which to store the property
   * @return this Gst::ChildProxy so more properties can be gotten if needed
   */
  Glib::RefPtr<ChildProxy> get_proxy_property(const Glib::ustring& name, Glib::ValueBase& value);

  /** Gets properties of the parent object and its children.
   * @param first_prop_name name of the first property to get
   * @param var_args return location for the first property, followed
   * optionally by more name/return location pairs, followed by NULL
   */
  void get_proxy_valist(const Glib::ustring& first_prop_name, va_list& var_args);

  /** Sets a single property using the Gst::ChildProxy mechanism.
   * @param name the property to get
   * @param value the Glib::ValueBase to set the property to (non-empty)
   * @return this Gst::ChildProxy so more properties can be set
   */
  Glib::RefPtr<ChildProxy> set_proxy_property(const Glib::ustring& name, const Glib::ValueBase& value);

  /** Sets properties of the parent object and its children.
   * @param first_prop_name name of the first property to set
   * @param var_args alue for the first property, followed optionally by more
   * name/value pairs, followed by NULL
   */
  void set_proxy_valist(const Glib::ustring& first_prop_name, const va_list& var_args);

  /** Emits the "child-added" signal.
   * @param child the newly added child
   */
  void child_added(const Glib::RefPtr<Gst::Object>& child);

  /** Emits the "child-removed" signal.
   * @param child the newly added child
   */
  void child_removed(const Glib::RefPtr<Gst::Object>& child);

#m4 _CONVERSION(`GstObject*',`const Glib::RefPtr<Gst::Object>&',`Glib::wrap($3)')

  /** Will be emitted after the object was added to the child_proxy.
   */
  _WRAP_SIGNAL(void child_added(const Glib::RefPtr<Gst::Object>& object), "child-added")

  /** Will be emitted after the object was removed from the child_proxy.
   */
  _WRAP_SIGNAL(void child_removed(const Glib::RefPtr<Gst::Object>& object), "child-removed")

  /** virtual method to fetch the child
   */
  _WRAP_VFUNC(Glib::RefPtr<Gst::Object> get_child_by_index(guint index) const, "get_child_by_index")

  /** virtual method to get the children count
   */
  _WRAP_VFUNC(guint get_children_count() const, "get_children_count")

  _IGNORE(gst_child_proxy_get, gst_child_proxy_set)
};

} // namespace Gst

