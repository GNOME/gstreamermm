// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstchildproxy.h>
#include <glibmm/interface.h>
#include <gstreamermm/object.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

/** ChildProxy â€” Interface for multi child elements.
 * This interface abstracts handling of property sets for child elements.
 * Imagine elements such as mixers or polyphonic generators. They all have
 * multiple Pad or some kind of voice objects. The element acts as a parent
 * for those child objects. Each child has the same properties.
 *
 * By implementing this interface the child properties can be accessed from
 * the parent element by using child_proxy_get() and child_proxy_set().
 *
 * Property names are written as "child-name::property-name". The whole naming
 * scheme is recursive. Thus "child1::child2::property" is valid too, if
 * "child1" also implements the ChildProxy interface.
 */
class ChildProxy : public Glib::Interface
{
  _CLASS_INTERFACE(ChildProxy, GstChildProxy, GST_CHILD_PROXY, GstChildProxyInterface)

public:
  _WRAP_METHOD(guint children_count(), gst_child_proxy_get_children_count)
  _WRAP_METHOD(Glib::RefPtr<Gst::Object> get_child(const Glib::ustring& name), gst_child_proxy_get_child_by_name)
  _WRAP_METHOD(Glib::RefPtr<Gst::Object> get_child(guint index), gst_child_proxy_get_child_by_index)

  //TODO: should gst_child_proxy_lookup() be wrapped?

  _WRAP_METHOD(static void get_property(const Glib::RefPtr<Gst::Object>& object, const Glib::ustring& name, Glib::ValueBase& value), gst_child_proxy_get_property)
  _WRAP_METHOD(static void get_valist(const Glib::RefPtr<Gst::Object>& object, const Glib::ustring& first_prop_name, const va_list& var_args), gst_child_proxy_get_valist)
  _WRAP_METHOD(static void set_property(const Glib::RefPtr<Gst::Object>& object, const Glib::ustring& name, const Glib::ValueBase& value), gst_child_proxy_set_property)
  _WRAP_METHOD(static void set_valist(const Glib::RefPtr<Gst::Object>& object, const Glib::ustring& first_prop_name, const va_list& var_args), gst_child_proxy_set_valist)
  _WRAP_METHOD(static void child_added(const Glib::RefPtr<Gst::Object>& object, const Glib::RefPtr<Gst::Object>& child), gst_child_proxy_child_added)
  _WRAP_METHOD(static void child_removed(const Glib::RefPtr<Gst::Object>& object, const Glib::RefPtr<Gst::Object>& child), gst_child_proxy_child_removed)

  _WRAP_SIGNAL(void child_added(const Glib::RefPtr<Gst::Object>& object), "child-added")
  _WRAP_SIGNAL(void child_removed(const Glib::RefPtr<Gst::Object>& object), "child-removed")

  _IGNORE(gst_child_proxy_get, gst_child_proxy_set)
};

} // namespace Gst

