// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Gst
{

Fraction::Fraction() : num(0), denom(1)
{}

Fraction::Fraction(int num, int denom) : num(num), denom(denom)
{}

Fraction::Fraction(const Fraction& f) : num(f.num), denom(f.denom)
{}

Fraction::Fraction(const Glib::ValueBase& value) : num(0), denom(1)
{
  if(G_VALUE_TYPE(value.gobj()) == GST_TYPE_FRACTION)
  {
    num = gst_value_get_fraction_numerator(value.gobj());
    denom = gst_value_get_fraction_denominator(value.gobj());
  }
}

IntRange::IntRange() : min(0), max(0)
{}

IntRange::IntRange(int min, int max) : min(min), max(max)
{}

IntRange::IntRange(const IntRange& r) : min(r.min), max(r.max)
{}

IntRange::IntRange(const Glib::ValueBase& value) : min(0), max(0)
{
  if(G_VALUE_TYPE(value.gobj()) == GST_TYPE_INT_RANGE)
  {
    min = gst_value_get_int_range_min(value.gobj());
    max = gst_value_get_int_range_max(value.gobj());
  }
}

DoubleRange::DoubleRange() : min(0), max(0)
{}

DoubleRange::DoubleRange(double min, double max) : min(min), max(max)
{}

DoubleRange::DoubleRange(const DoubleRange& r) : min(r.min), max(r.max)
{}

DoubleRange::DoubleRange(const Glib::ValueBase& value) : min(0), max(0)
{
  if(G_VALUE_TYPE(value.gobj()) == GST_TYPE_DOUBLE_RANGE)
  {
    min = gst_value_get_double_range_min(value.gobj());
    max = gst_value_get_double_range_max(value.gobj());
  }
}

FractionRange::FractionRange() : min(), max()
{}

FractionRange::FractionRange(const Fraction& min, const Fraction& max) : min(min), max(max)
{}

FractionRange::FractionRange(const FractionRange& r) : min(r.min), max(r.max)
{}

FractionRange::FractionRange(const Glib::ValueBase& value) : min(), max()
{
  if(G_VALUE_TYPE(value.gobj()) == GST_TYPE_FRACTION_RANGE)
  {
    const GValue* min = gst_value_get_fraction_range_min(value.gobj());
    const GValue* max = gst_value_get_fraction_range_max(value.gobj());

    this->min.num = gst_value_get_fraction_numerator(min);
    this->min.denom = gst_value_get_fraction_denominator(min);

    this->max.num = gst_value_get_fraction_numerator(max);
    this->max.denom = gst_value_get_fraction_denominator(max);
  }
}

} //namespace Gst

