// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstpluginfeature.h>
#include <gstreamermm/object.h>

_DEFS(gstreamermm,gst)
_PINCLUDE(gstreamermm/private/object_p.h)

namespace Gst
{

class TypeNameData
{
  _CLASS_GENERIC(TypeNameData, GstTypeNameData)
};

/** This is a base class for anything that can be added to a Plugin.
 *
 */
class PluginFeature : public Object
{
  _CLASS_GOBJECT(PluginFeature, GstPluginFeature, GST_PLUGIN_FEATURE, Object, GstObject)

public:
  /** For example,
   * bool on_feature_filter(const Glib::RefPtr<PluginFeature>& feature);
   */
  typedef sigc::slot< bool, const Glib::RefPtr<PluginFeature>& > SlotFeatureFilter;

  _WRAP_METHOD(bool type_name_filter(const TypeNameData& data), gst_plugin_feature_type_name_filter)
  _WRAP_METHOD(void set_rank(guint rank), gst_plugin_feature_set_rank)
  _WRAP_METHOD(void set_name(const Glib::ustring& name), gst_plugin_feature_set_name)
  _WRAP_METHOD(guint get_rank(), gst_plugin_feature_get_rank)
  _WRAP_METHOD(Glib::ustring get_name(), gst_plugin_feature_get_name)
  _WRAP_METHOD(Glib::RefPtr<PluginFeature> load(), gst_plugin_feature_load)
  _WRAP_METHOD(static void free(Glib::ListHandle< Glib::RefPtr<PluginFeature> >), gst_plugin_feature_list_free)
  _WRAP_METHOD(bool check_version(guint min_major, guint min_minor, guint min_micro), gst_plugin_feature_check_version)
};

} // namespace Gst

