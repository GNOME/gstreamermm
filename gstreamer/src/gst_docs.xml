<root>
<function name="gst_adapter_available">
<description>
Gets the maximum amount of bytes available, that is it returns the maximum
value that can be supplied to gst_adapter_peek() without that function
returning NULL.


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
</parameters>
<return> number of bytes available in @adapter
</return>
</function>

<function name="gst_adapter_available_fast">
<description>
Gets the maximum number of bytes that are immediately available without
requiring any expensive operations (like copying the data into a
temporary buffer).


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
</parameters>
<return> number of bytes that are available in @adapter without expensive
operations
</return>
</function>

<function name="gst_adapter_clear">
<description>
Removes all buffers from @adapter.

</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_adapter_copy">
<description>
Copies @size bytes of data starting at @offset out of the buffers
contained in @GstAdapter into an array @dest provided by the caller.

The array @dest should be large enough to contain @size bytes.
The user should check that the adapter has (@offset + @size) bytes
available before calling this function.


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the memory to copy into
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the bytes offset in the adapter to start from
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to copy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_adapter_flush">
<description>
Flushes the first @flush bytes in the @adapter. The caller must ensure that
at least this many bytes are available.

See also: gst_adapter_peek().

</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> the number of bytes to flush
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_adapter_masked_scan_uint32">
<description>
Scan for pattern @pattern with applied mask @mask in the adapter data,
starting from offset @offset.

The bytes in @pattern and @mask are interpreted left-to-right, regardless
of endianness.  All four bytes of the pattern must be present in the
adapter for it to match, even if the first or last bytes are masked out.

It is an error to call this function without making sure that there is
enough data (offset+size bytes) in the adapter.

This function calls gst_adapter_masked_scan_uint32_peek() passing NULL
for value.


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> mask to apply to data before matching against @pattern
</parameter_description>
</parameter>
<parameter name="pattern">
<parameter_description> pattern to match (after mask is applied)
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset into the adapter data from which to start scanning, returns
the last scanned position.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of bytes to scan from offset
</parameter_description>
</parameter>
</parameters>
<return> offset of the first match, or -1 if no match was found.

Example:
&lt;programlisting&gt;
// Assume the adapter contains 0x00 0x01 0x02 ... 0xfe 0xff

gst_adapter_masked_scan_uint32 (adapter, 0xffffffff, 0x00010203, 0, 256);
// -&gt; returns 0
gst_adapter_masked_scan_uint32 (adapter, 0xffffffff, 0x00010203, 1, 255);
// -&gt; returns -1
gst_adapter_masked_scan_uint32 (adapter, 0xffffffff, 0x01020304, 1, 255);
// -&gt; returns 1
gst_adapter_masked_scan_uint32 (adapter, 0xffff, 0x0001, 0, 256);
// -&gt; returns -1
gst_adapter_masked_scan_uint32 (adapter, 0xffff, 0x0203, 0, 256);
// -&gt; returns 0
gst_adapter_masked_scan_uint32 (adapter, 0xffff0000, 0x02030000, 0, 256);
// -&gt; returns 2
gst_adapter_masked_scan_uint32 (adapter, 0xffff0000, 0x02030000, 0, 4);
// -&gt; returns -1
&lt;/programlisting&gt;

</return>
</function>

<function name="gst_adapter_masked_scan_uint32_peek">
<description>
Scan for pattern @pattern with applied mask @mask in the adapter data,
starting from offset @offset.  If a match is found, the value that matched
is returned through @value, otherwise @value is left untouched.

The bytes in @pattern and @mask are interpreted left-to-right, regardless
of endianness.  All four bytes of the pattern must be present in the
adapter for it to match, even if the first or last bytes are masked out.

It is an error to call this function without making sure that there is
enough data (offset+size bytes) in the adapter.


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> mask to apply to data before matching against @pattern
</parameter_description>
</parameter>
<parameter name="pattern">
<parameter_description> pattern to match (after mask is applied)
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset into the adapter data from which to start scanning, returns
the last scanned position.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of bytes to scan from offset
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> pointer to uint32 to return matching data
</parameter_description>
</parameter>
</parameters>
<return> offset of the first match, or -1 if no match was found.

</return>
</function>

<function name="gst_adapter_new">
<description>
Creates a new #GstAdapter. Free with g_object_unref().


</description>
<parameters>
</parameters>
<return> a new #GstAdapter
</return>
</function>

<function name="gst_adapter_peek">
<description>
Gets the first @size bytes stored in the @adapter. The returned pointer is
valid until the next function is called on the adapter.

Note that setting the returned pointer as the data of a #GstBuffer is
incorrect for general-purpose plugins. The reason is that if a downstream
element stores the buffer so that it has access to it outside of the bounds
of its chain function, the buffer will have an invalid data pointer after
your element flushes the bytes. In that case you should use
gst_adapter_take(), which returns a freshly-allocated buffer that you can set
as #GstBuffer malloc_data or the potentially more performant
gst_adapter_take_buffer().


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to peek
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the first
@size bytes of data, or NULL
</return>
</function>

<function name="gst_adapter_prev_timestamp">
<description>
Get the timestamp that was before the current byte in the adapter. When
@distance is given, the amount of bytes between the timestamp and the current
position is returned.

The timestamp is reset to GST_CLOCK_TIME_NONE and the distance is set to 0 when
the adapter is first created or when it is cleared. This also means that before
the first byte with a timestamp is removed from the adapter, the timestamp
and distance returned are GST_CLOCK_TIME_NONE and 0 respectively.


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="distance">
<parameter_description> pointer to location for distance, or NULL
</parameter_description>
</parameter>
</parameters>
<return> The previously seen timestamp.

</return>
</function>

<function name="gst_adapter_push">
<description>
Adds the data from @buf to the data stored inside @adapter and takes
ownership of the buffer.

</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> a #GstBuffer to add to queue in the adapter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_adapter_take">
<description>
Returns a freshly allocated buffer containing the first @nbytes bytes of the
@adapter. The returned bytes will be flushed from the adapter.

Caller owns returned value. g_free after usage.

Free-function: g_free


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="nbytes">
<parameter_description> the number of bytes to take
</parameter_description>
</parameter>
</parameters>
<return> oven-fresh hot data, or
#NULL if @nbytes bytes are not available
</return>
</function>

<function name="gst_adapter_take_buffer">
<description>
Returns a #GstBuffer containing the first @nbytes bytes of the
@adapter. The returned bytes will be flushed from the adapter.
This function is potentially more performant than gst_adapter_take()
since it can reuse the memory in pushed buffers by subbuffering
or merging.

Caller owns returned value. gst_buffer_unref() after usage.

Free-function: gst_buffer_unref


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="nbytes">
<parameter_description> the number of bytes to take
</parameter_description>
</parameter>
</parameters>
<return> a #GstBuffer containing the first @nbytes of
the adapter, or #NULL if @nbytes bytes are not available

</return>
</function>

<function name="gst_adapter_take_list">
<description>
Returns a #GList of buffers containing the first @nbytes bytes of the
@adapter. The returned bytes will be flushed from the adapter.
When the caller can deal with individual buffers, this function is more
performant because no memory should be copied.

Caller owns returned list and contained buffers. gst_buffer_unref() each
buffer in the list before freeing the list after usage.


</description>
<parameters>
<parameter name="adapter">
<parameter_description> a #GstAdapter
</parameter_description>
</parameter>
<parameter name="nbytes">
<parameter_description> the number of bytes to take
</parameter_description>
</parameter>
</parameters>
<return> a #GList of buffers
containing the first @nbytes of the adapter, or #NULL if @nbytes bytes
are not available

</return>
</function>

<function name="gst_alloc_trace_available">
<description>
Check if alloc tracing was compiled into the core


</description>
<parameters>
</parameters>
<return> TRUE if the core was compiled with alloc
tracing enabled.
</return>
</function>

<function name="gst_alloc_trace_get">
<description>
Get the named alloc trace object.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the alloc trace object
</parameter_description>
</parameter>
</parameters>
<return> a GstAllocTrace with the given name or NULL when
no alloc tracer was registered with that name.
</return>
</function>

<function name="gst_alloc_trace_list">
<description>
Get a list of all registered alloc trace objects.


</description>
<parameters>
</parameters>
<return> a GList of GstAllocTrace objects.
</return>
</function>

<function name="gst_alloc_trace_live_all">
<description>
Get the total number of live registered alloc trace objects.


</description>
<parameters>
</parameters>
<return> the total number of live registered alloc trace objects.
</return>
</function>

<function name="gst_alloc_trace_print">
<description>
Print the status of the given GstAllocTrace.

</description>
<parameters>
<parameter name="trace">
<parameter_description> the GstAllocTrace to print
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_alloc_trace_print_all">
<description>
Print the status of all registered alloc trace objects.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_alloc_trace_print_live">
<description>
Print the status of all registered alloc trace objects, ignoring those
without live objects.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_alloc_trace_set_flags">
<description>
Enable the given features on the given GstAllocTrace object.

</description>
<parameters>
<parameter name="trace">
<parameter_description> the GstAllocTrace
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_alloc_trace_set_flags_all">
<description>
Enable the specified options on all registered alloc trace
objects.

</description>
<parameters>
<parameter name="flags">
<parameter_description> the options to enable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_sink_get_caps">
<description>
Get the configured caps on @appsink.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps accepted by the sink. gst_caps_unref() after usage.

</return>
</function>

<function name="gst_app_sink_get_drop">
<description>
Check if @appsink will drop old buffers when the maximum amount of queued
buffers is reached.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appsink is dropping old buffers when the queue is
filled.

</return>
</function>

<function name="gst_app_sink_get_emit_signals">
<description>
Check if appsink will emit the &quot;new-preroll&quot; and &quot;new-buffer&quot; signals.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appsink is emiting the &quot;new-preroll&quot; and &quot;new-buffer&quot;
signals.

</return>
</function>

<function name="gst_app_sink_get_max_buffers">
<description>
Get the maximum amount of buffers that can be queued in @appsink.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
</parameters>
<return> The maximum amount of buffers that can be queued.

</return>
</function>

<function name="gst_app_sink_is_eos">
<description>
Check if @appsink is EOS, which is when no more buffers can be pulled because
an EOS event was received.

This function also returns %TRUE when the appsink is not in the PAUSED or
PLAYING state.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if no more buffers can be pulled and the appsink is EOS.

</return>
</function>

<function name="gst_app_sink_pull_buffer">
<description>
This function blocks until a buffer or EOS becomes available or the appsink
element is set to the READY/NULL state. 

This function will only return buffers when the appsink is in the PLAYING
state. All rendered buffers will be put in a queue so that the application
can pull buffers at its own rate. Note that when the application does not
pull buffers fast enough, the queued buffers could consume a lot of memory,
especially when dealing with raw video frames.

If an EOS event was received before any buffers, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition. 


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
</parameters>
<return> a #GstBuffer or NULL when the appsink is stopped or EOS.

</return>
</function>

<function name="gst_app_sink_pull_buffer_list">
<description>
This function blocks until a buffer list or EOS becomes available or the
appsink element is set to the READY/NULL state. 

This function will only return buffer lists when the appsink is in the
PLAYING state. All rendered buffer lists will be put in a queue so that
the application can pull buffer lists at its own rate. Note that when
the application does not pull buffer lists fast enough, the queued buffer
lists could consume a lot of memory, especially when dealing with raw
video frames.

If an EOS event was received before any buffer lists, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition. 


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
</parameters>
<return> a #GstBufferList or NULL when the appsink is stopped or EOS.
</return>
</function>

<function name="gst_app_sink_pull_preroll">
<description>
Get the last preroll buffer in @appsink. This was the buffer that caused the
appsink to preroll in the PAUSED state. This buffer can be pulled many times
and remains available to the application even after EOS.

This function is typically used when dealing with a pipeline in the PAUSED
state. Calling this function after doing a seek will give the buffer right
after the seek position.

Note that the preroll buffer will also be returned as the first buffer
when calling gst_app_sink_pull_buffer().

If an EOS event was received before any buffers, this function returns
%NULL. Use gst_app_sink_is_eos () to check for the EOS condition. 

This function blocks until a preroll buffer or EOS is received or the appsink
element is set to the READY/NULL state. 


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
</parameters>
<return> a #GstBuffer or NULL when the appsink is stopped or EOS.

</return>
</function>

<function name="gst_app_sink_set_callbacks">
<description>
Set callbacks which will be executed for each new preroll, new buffer and eos.
This is an alternative to using the signals, it has lower overhead and is thus
less expensive, but also less flexible.

If callbacks are installed, no signals will be emited for performance
reasons.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
<parameter name="callbacks">
<parameter_description> the callbacks
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a user_data argument for the callbacks
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a destroy notify function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_sink_set_caps">
<description>
Set the capabilities on the appsink element.  This function takes
a copy of the caps structure. After calling this method, the sink will only
accept caps that match @caps. If @caps is non-fixed, you must check the caps
on the buffers to get the actual used caps. 


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> caps to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_sink_set_drop">
<description>
Instruct @appsink to drop old buffers when the maximum amount of queued
buffers is reached.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
<parameter name="drop">
<parameter_description> the new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_sink_set_emit_signals">
<description>
Make appsink emit the &quot;new-preroll&quot; and &quot;new-buffer&quot; signals. This option is
by default disabled because signal emission is expensive and unneeded when
the application prefers to operate in pull mode.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
<parameter name="emit">
<parameter_description> the new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_sink_set_max_buffers">
<description>
Set the maximum amount of buffers that can be queued in @appsink. After this
amount of buffers are queued in appsink, any more buffers will block upstream
elements until a buffer is pulled from @appsink.


</description>
<parameters>
<parameter name="appsink">
<parameter_description> a #GstAppSink
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum number of buffers to queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_src_end_of_stream">
<description>
Indicates to the appsrc element that the last buffer queued in the
element is the last buffer of the stream.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK when the EOS was successfuly queued.
#GST_FLOW_WRONG_STATE when @appsrc is not PAUSED or PLAYING.

</return>
</function>

<function name="gst_app_src_get_caps">
<description>
Get the configured caps on @appsrc.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps produced by the source. gst_caps_unref() after usage.

</return>
</function>

<function name="gst_app_src_get_emit_signals">
<description>
Check if appsrc will emit the &quot;new-preroll&quot; and &quot;new-buffer&quot; signals.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appsrc is emiting the &quot;new-preroll&quot; and &quot;new-buffer&quot;
signals.

</return>
</function>

<function name="gst_app_src_get_latency">
<description>
Retrieve the min and max latencies in @min and @max respectively.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> the min latency
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the min latency
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_src_get_max_bytes">
<description>
Get the maximum amount of bytes that can be queued in @appsrc.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
</parameters>
<return> The maximum amount of bytes that can be queued.

</return>
</function>

<function name="gst_app_src_get_size">
<description>
Get the size of the stream in bytes. A value of -1 means that the size is
not known. 


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
</parameters>
<return> the size of the stream previously set with gst_app_src_set_size();

</return>
</function>

<function name="gst_app_src_get_stream_type">
<description>
Get the stream type. Control the stream type of @appsrc
with gst_app_src_set_stream_type().


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
</parameters>
<return> the stream type.

</return>
</function>

<function name="gst_app_src_push_buffer">
<description>
Adds a buffer to the queue of buffers that the appsrc element will
push to its source pad.  This function takes ownership of the buffer.

When the block property is TRUE, this function can block until free
space becomes available in the queue.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer to push
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK when the buffer was successfuly queued.
#GST_FLOW_WRONG_STATE when @appsrc is not PAUSED or PLAYING.
#GST_FLOW_UNEXPECTED when EOS occured.

</return>
</function>

<function name="gst_app_src_set_callbacks">
<description>
Set callbacks which will be executed when data is needed, enough data has
been collected or when a seek should be performed.
This is an alternative to using the signals, it has lower overhead and is thus
less expensive, but also less flexible.

If callbacks are installed, no signals will be emited for performance
reasons.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="callbacks">
<parameter_description> the callbacks
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a user_data argument for the callbacks
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a destroy notify function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_src_set_caps">
<description>
Set the capabilities on the appsrc element.  This function takes
a copy of the caps structure. After calling this method, the source will
only produce caps that match @caps. @caps must be fixed and the caps on the
buffers must match the caps or left NULL.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> caps to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_src_set_emit_signals">
<description>
Make appsrc emit the &quot;new-preroll&quot; and &quot;new-buffer&quot; signals. This option is
by default disabled because signal emission is expensive and unneeded when
the application prefers to operate in pull mode.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="emit">
<parameter_description> the new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_src_set_latency">
<description>
Configure the @min and @max latency in @src. If @min is set to -1, the
default latency calculations for pseudo-live sources will be used.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> the min latency
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the min latency
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_src_set_max_bytes">
<description>
Set the maximum amount of bytes that can be queued in @appsrc.
After the maximum amount of bytes are queued, @appsrc will emit the
&quot;enough-data&quot; signal.


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="max">
<parameter_description> the maximum number of bytes to queue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_src_set_size">
<description>
Set the size of the stream in bytes. A value of -1 means that the size is
not known. 


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_app_src_set_stream_type">
<description>
Set the stream type on @appsrc. For seekable streams, the &quot;seek&quot; signal must
be connected to.

A stream_type stream 


</description>
<parameters>
<parameter name="appsrc">
<parameter_description> a #GstAppSrc
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_atomic_int_set">
<description>
Unconditionally sets the atomic integer to @value.

Deprecated: Use g_atomic_int_set().


</description>
<parameters>
<parameter name="atomic_int">
<parameter_description> pointer to an atomic integer
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_atomic_queue_length">
<description>
Get the amount of items in the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstAtomicQueue
</parameter_description>
</parameter>
</parameters>
<return> the number of elements in the queue.

</return>
</function>

<function name="gst_atomic_queue_new">
<description>
Create a new atomic queue instance. @initial_size will be rounded up to the
nearest power of 2 and used as the initial size of the queue.


</description>
<parameters>
<parameter name="initial_size">
<parameter_description> initial queue size
</parameter_description>
</parameter>
</parameters>
<return> a new #GstAtomicQueue

</return>
</function>

<function name="gst_atomic_queue_peek">
<description>
Peek the head element of the queue without removing it from the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstAtomicQueue
</parameter_description>
</parameter>
</parameters>
<return> the head element of @queue or NULL when the queue is empty.

</return>
</function>

<function name="gst_atomic_queue_pop">
<description>
Get the head element of the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstAtomicQueue
</parameter_description>
</parameter>
</parameters>
<return> the head element of @queue or NULL when the queue is empty.

</return>
</function>

<function name="gst_atomic_queue_push">
<description>
Append @data to the tail of the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstAtomicQueue
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_atomic_queue_ref">
<description>
Increase the refcount of @queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstAtomicQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_atomic_queue_unref">
<description>
Unref @queue and free the memory when the refcount reaches 0.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstAtomicQueue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_buffer_clip">
<description>
Clip the the buffer to the given %GstSegment.

After calling this function the caller does not own a reference to 
@buffer anymore.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> The buffer to clip.
</parameter_description>
</parameter>
<parameter name="segment">
<parameter_description> Segment in %GST_FORMAT_TIME or %GST_FORMAT_DEFAULT to which the buffer should be clipped.
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> sample rate.
</parameter_description>
</parameter>
<parameter name="frame_size">
<parameter_description> size of one audio frame in bytes.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if the buffer is completely outside the configured segment,
otherwise the clipped buffer is returned.

If the buffer has no timestamp, it is assumed to be inside the segment and
is not clipped 

</return>
</function>

<function name="gst_audio_check_channel_positions">
<description>
This functions checks if the given channel positions are valid. Channel
positions are valid if:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;No channel positions appears twice or all positions are %GST_AUDIO_CHANNEL_POSITION_NONE.
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Either all or none of the channel positions are %GST_AUDIO_CHANNEL_POSITION_NONE.
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;%GST_AUDIO_CHANNEL_POSITION_FRONT_MONO and %GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT or %GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT don't appear together in the given positions.
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;



</description>
<parameters>
<parameter name="pos">
<parameter_description> An array of #GstAudioChannelPosition.
</parameter_description>
</parameter>
<parameter name="channels">
<parameter_description> The number of elements in @pos.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given channel positions are valid
and %FALSE otherwise.
</return>
</function>

<function name="gst_audio_clock_adjust">
<description>
Adjust @time with the internal offset of the audio clock.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstAudioClock
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> a #GstClockTime
</parameter_description>
</parameter>
</parameters>
<return> @time adjusted with the internal offset.

</return>
</function>

<function name="gst_audio_clock_get_time">
<description>
Report the time as returned by the #GstAudioClockGetTimeFunc without applying
any offsets.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstAudioClock
</parameter_description>
</parameter>
</parameters>
<return> the time as reported by the time function of the audio clock

</return>
</function>

<function name="gst_audio_clock_invalidate">
<description>
Invalidate the clock function. Call this function when the provided
#GstAudioClockGetTimeFunc cannot be called anymore, for example, when the
user_data becomes invalid.

After calling this function, @clock will return the last returned time for
the rest of its lifetime.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstAudioClock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_clock_new">
<description>
Create a new #GstAudioClock instance. Whenever the clock time should be
calculated it will call @func with @user_data. When @func returns
#GST_CLOCK_TIME_NONE, the clock will return the last reported time.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the clock
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return> a new #GstAudioClock casted to a #GstClock.
</return>
</function>

<function name="gst_audio_clock_new_full">
<description>
Create a new #GstAudioClock instance. Whenever the clock time should be
calculated it will call @func with @user_data. When @func returns
#GST_CLOCK_TIME_NONE, the clock will return the last reported time.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the clock
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
<parameter name="destroy_notify">
<parameter_description> #GDestroyNotify for @user_data
</parameter_description>
</parameter>
</parameters>
<return> a new #GstAudioClock casted to a #GstClock.

</return>
</function>

<function name="gst_audio_clock_reset">
<description>
Inform @clock that future calls to #GstAudioClockGetTimeFunc will return values
starting from @time. The clock will update an internal offset to make sure that
future calls to internal_time will return an increasing result as required by
the #GstClock object.

</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstAudioClock
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> a #GstClockTime
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_default_registry_mixer_filter">
<description>
Utility function to find audio mixer elements.

Will traverse the default plugin registry in order of plugin rank and
find usable audio mixer elements. The caller may optionally fine-tune
the selection by specifying a filter function.


</description>
<parameters>
<parameter name="filter_func">
<parameter_description> filter function, or #NULL
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description> set to #TRUE if you only want the first suitable mixer element
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the filter function
</parameter_description>
</parameter>
</parameters>
<return> a #GList of audio mixer #GstElement&lt;!-- --&gt;s. You must free each
element in the list by setting it to NULL state and calling
gst_object_unref(). After that the list itself should be freed
using g_list_free().

</return>
</function>

<function name="gst_audio_duration_from_pad_buffer">
<description>
Calculate length in nanoseconds of audio buffer @buf based on capabilities of
@pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the caps from
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> the #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> the length.
</return>
</function>

<function name="gst_audio_filter_class_add_pad_templates">
<description>
Convenience function to add pad templates to this element class, with
@allowed_caps as the caps that can be handled.

This function is usually used from within a GObject base_init function.


</description>
<parameters>
<parameter name="klass">
<parameter_description> an #GstAudioFilterClass
</parameter_description>
</parameter>
<parameter name="allowed_caps">
<parameter_description> what formats the filter can handle, as #GstCaps
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_fixate_channel_positions">
<description>
Custom fixate function. Elements that implement some sort of
channel conversion algorithm should use this function for
fixating on GstAudioChannelPosition properties. It will take
care of equal channel positioning (left/right). Caller g_free()s
the return value. The input properties may be (and are supposed
to be) unfixed.
Note that this function is mostly a hack because we currently
have no way to add default fixation functions for new GTypes.


</description>
<parameters>
<parameter name="str">
<parameter_description> a #GstStructure containing a (possibly unfixed)
&quot;channel-positions&quot; field.
</parameter_description>
</parameter>
</parameters>
<return> fixed values that the caller could use as a fixed
set of #GstAudioChannelPosition values.
</return>
</function>

<function name="gst_audio_frame_byte_size">
<description>
Calculate byte size of an audio frame.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the caps from
</parameter_description>
</parameter>
</parameters>
<return> the byte size, or 0 if there was an error
</return>
</function>

<function name="gst_audio_frame_length">
<description>
Calculate length of buffer in frames.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the caps from
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> the #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> 0 if there's an error, or the number of frames if everything's ok
</return>
</function>

<function name="gst_audio_get_channel_positions">
<description>
Retrieves a number of (fixed!) audio channel positions from
the provided #GstStructure and returns it as a newly allocated
array. The caller should g_free () this array. The caller
should also check that the members in this #GstStructure are
indeed &quot;fixed&quot; before calling this function.


</description>
<parameters>
<parameter name="str">
<parameter_description> A #GstStructure to retrieve channel positions from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated array containing the channel
positions as provided in the given #GstStructure. Returns
NULL on error.
</return>
</function>

<function name="gst_audio_is_buffer_framed">
<description>
Check if the buffer size is a whole multiple of the frame size.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the caps from
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> the #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if buffer size is multiple.
</return>
</function>

<function name="gst_audio_set_caps_channel_positions_list">
<description>
Sets a (possibly non-fixed) list of possible audio channel
positions (given in pos) on the given caps. Each of the
structures of the caps, after this function has been called,
will contain a &quot;channel-positions&quot; field with an array.
Each value in the array will contain each of the values given
in the pos array. Note that the size of the caps might be
increased by this, since each structure with a &quot;channel-
positions&quot; field needs to have a fixed &quot;channels&quot; field.
The input caps is not required to have this.

</description>
<parameters>
<parameter name="caps">
<parameter_description> #GstCaps to set the list of channel positions on.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the array containing one or more possible audio
channel positions that we should add in each value
of the array in the given structure.
</parameter_description>
</parameter>
<parameter name="num_positions">
<parameter_description> the number of values in pos.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_set_channel_positions">
<description>
Adds a &quot;channel-positions&quot; field to the given #GstStructure,
which will represent the channel positions as given in the
provided #GstAudioChannelPosition array.

</description>
<parameters>
<parameter name="str">
<parameter_description> A #GstStructure to set channel positions on.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> an array of channel positions. The number of members
in this array should be equal to the (fixed!) number
of the &quot;channels&quot; field in the given #GstStructure.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_set_structure_channel_positions_list">
<description>
Sets a (possibly non-fixed) list of possible audio channel
positions (given in pos) on the given structure. The
structure, after this function has been called, will contain
a &quot;channel-positions&quot; field with an array of the size of
the &quot;channels&quot; field value in the given structure (note
that this means that the channels field in the provided
structure should be fixed!). Each value in the array will
contain each of the values given in the pos array.

</description>
<parameters>
<parameter name="str">
<parameter_description> #GstStructure to set the list of channel positions
on.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the array containing one or more possible audio
channel positions that we should add in each value
of the array in the given structure.
</parameter_description>
</parameter>
<parameter name="num_positions">
<parameter_description> the number of values in pos.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_structure_set_int">
<description>
Do not use anymore.

Deprecated: use gst_structure_set()

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="flag">
<parameter_description> a set of #GstAudioFieldFlag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_sink_create_ringbuffer">
<description>
Create and return the #GstRingBuffer for @sink. This function will call the
::create_ringbuffer vmethod and will set @sink as the parent of the returned
buffer (see gst_object_set_parent()).


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink.
</parameter_description>
</parameter>
</parameters>
<return> The new ringbuffer of @sink.
</return>
</function>

<function name="gst_base_audio_sink_get_drift_tolerance">
<description>
Get the current drift tolerance, in microseconds, used by @sink.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
</parameters>
<return> The current drift tolerance used by @sink.

</return>
</function>

<function name="gst_base_audio_sink_get_provide_clock">
<description>
Queries whether @sink will provide a clock or not. See also
gst_base_audio_sink_set_provide_clock.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @sink will provide a clock.

</return>
</function>

<function name="gst_base_audio_sink_get_slave_method">
<description>
Get the current slave method used by @sink.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
</parameters>
<return> The current slave method used by @sink.

</return>
</function>

<function name="gst_base_audio_sink_set_drift_tolerance">
<description>
Controls the sink's drift tolerance.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
<parameter name="drift_tolerance">
<parameter_description> the new drift tolerance in microseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_sink_set_provide_clock">
<description>
Controls whether @sink will provide a clock or not. If @provide is %TRUE,
gst_element_provide_clock() will return a clock that reflects the datarate
of @sink. If @provide is %FALSE, gst_element_provide_clock() will return NULL.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
<parameter name="provide">
<parameter_description> new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_sink_set_slave_method">
<description>
Controls how clock slaving will be performed in @sink.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> the new slave method
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_src_create_ringbuffer">
<description>
Create and return the #GstRingBuffer for @src. This function will call the
::create_ringbuffer vmethod and will set @src as the parent of the returned
buffer (see gst_object_set_parent()).


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc.
</parameter_description>
</parameter>
</parameters>
<return> The new ringbuffer of @src.
</return>
</function>

<function name="gst_base_audio_src_get_provide_clock">
<description>
Queries whether @src will provide a clock or not. See also
gst_base_audio_src_set_provide_clock.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @src will provide a clock.

</return>
</function>

<function name="gst_base_audio_src_get_slave_method">
<description>
Get the current slave method used by @src.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc
</parameter_description>
</parameter>
</parameters>
<return> The current slave method used by @src.

</return>
</function>

<function name="gst_base_audio_src_set_provide_clock">
<description>
Controls whether @src will provide a clock or not. If @provide is %TRUE, 
gst_element_provide_clock() will return a clock that reflects the datarate
of @src. If @provide is %FALSE, gst_element_provide_clock() will return NULL.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc
</parameter_description>
</parameter>
<parameter name="provide">
<parameter_description> new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_src_set_slave_method">
<description>
Controls how clock slaving will be performed in @src. 


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> the new slave method
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_parse_add_index_entry">
<description>
Adds an entry to the index associating @offset to @ts.  It is recommended
to only add keyframe entries.  @force allows to bypass checks, such as
whether the stream is (upstream) seekable, another entry is already &quot;close&quot;
to the new entry, etc.


</description>
<parameters>
<parameter name="parse">
<parameter_description> #GstBaseParse.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset of entry
</parameter_description>
</parameter>
<parameter name="ts">
<parameter_description> timestamp associated with offset
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> whether entry refers to keyframe
</parameter_description>
</parameter>
<parameter name="force">
<parameter_description> add entry disregarding sanity checks
</parameter_description>
</parameter>
</parameters>
<return> #gboolean indicating whether entry was added

</return>
</function>

<function name="gst_base_parse_convert_default">
<description>
Default implementation of &quot;convert&quot; vmethod in #GstBaseParse class.


</description>
<parameters>
<parameter name="parse">
<parameter_description> #GstBaseParse.
</parameter_description>
</parameter>
<parameter name="src_format">
<parameter_description> #GstFormat describing the source format.
</parameter_description>
</parameter>
<parameter name="src_value">
<parameter_description> Source value to be converted.
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> #GstFormat defining the converted format.
</parameter_description>
</parameter>
<parameter name="dest_value">
<parameter_description> Pointer where the conversion result will be put.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if conversion was successful.

</return>
</function>

<function name="gst_base_parse_frame_init">
<description>
Sets a #GstBaseParseFrame to initial state.  Currently this means
all public fields are zero-ed and a private flag is set to make
sure gst_base_parse_frame_free() only frees the contents but not
the actual frame. Use this function to initialise a #GstBaseParseFrame
allocated on the stack.


</description>
<parameters>
<parameter name="frame">
<parameter_description> #GstBaseParseFrame.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_parse_frame_new">
<description>
Allocates a new #GstBaseParseFrame. This function is mainly for bindings,
elements written in C should usually allocate the frame on the stack and
then use gst_base_parse_frame_init() to initialise it.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the flags
</parameter_description>
</parameter>
<parameter name="overhead">
<parameter_description> number of bytes in this frame which should be counted as
metadata overhead, ie. not used to calculate the average bitrate.
Set to -1 to mark the entire frame as metadata. If in doubt, set to 0.
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated #GstBaseParseFrame. Free with
gst_base_parse_frame_free() when no longer needed, unless you gave
away ownership to gst_base_parse_push_frame().

</return>
</function>

<function name="gst_base_parse_push_frame">
<description>
Pushes the frame downstream, sends any pending events and
does some timestamp and segment handling. Takes ownership
of @frame and will clear it (if it was initialised with
gst_base_parse_frame_init()) or free it.

This must be called with sinkpad STREAM_LOCK held.


</description>
<parameters>
<parameter name="parse">
<parameter_description> #GstBaseParse.
</parameter_description>
</parameter>
<parameter name="frame">
<parameter_description> a #GstBaseParseFrame
</parameter_description>
</parameter>
</parameters>
<return> #GstFlowReturn

</return>
</function>

<function name="gst_base_parse_set_average_bitrate">
<description>
Optionally sets the average bitrate detected in media (if non-zero),
e.g. based on metadata, as it will be posted to the application.

By default, announced average bitrate is estimated. The average bitrate
is used to estimate the total duration of the stream and to estimate
a seek position, if there's no index and the format is syncable
(see gst_base_parse_set_syncable()).


</description>
<parameters>
<parameter name="parse">
<parameter_description> #GstBaseParse.
</parameter_description>
</parameter>
<parameter name="bitrate">
<parameter_description> average bitrate in bits/second
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_parse_set_duration">
<description>
Sets the duration of the currently playing media. Subclass can use this
when it is able to determine duration and/or notices a change in the media
duration.  Alternatively, if @interval is non-zero (default), then stream
duration is determined based on estimated bitrate, and updated every @interval
frames.


</description>
<parameters>
<parameter name="parse">
<parameter_description> #GstBaseParse.
</parameter_description>
</parameter>
<parameter name="fmt">
<parameter_description> #GstFormat.
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> duration value.
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> how often to update the duration estimate based on bitrate, or 0.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_parse_set_frame_rate">
<description>
If frames per second is configured, parser can take care of buffer duration
and timestamping.  When performing segment clipping, or seeking to a specific
location, a corresponding decoder might need an initial @lead_in and a
following @lead_out number of frames to ensure the desired segment is
entirely filled upon decoding.


</description>
<parameters>
<parameter name="parse">
<parameter_description> the #GstBaseParse to set
</parameter_description>
</parameter>
<parameter name="fps_num">
<parameter_description> frames per second (numerator).
</parameter_description>
</parameter>
<parameter name="fps_den">
<parameter_description> frames per second (denominator).
</parameter_description>
</parameter>
<parameter name="lead_in">
<parameter_description> frames needed before a segment for subsequent decode
</parameter_description>
</parameter>
<parameter name="lead_out">
<parameter_description> frames needed after a segment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_parse_set_has_timing_info">
<description>
Set if frames carry timing information which the subclass can (generally)
parse and provide.  In particular, intrinsic (rather than estimated) time
can be obtained following a seek.


</description>
<parameters>
<parameter name="parse">
<parameter_description> a #GstBaseParse
</parameter_description>
</parameter>
<parameter name="has_timing">
<parameter_description> whether frames carry timing information
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_parse_set_min_frame_size">
<description>
Subclass can use this function to tell the base class that it needs to
give at least #min_size buffers.


</description>
<parameters>
<parameter name="parse">
<parameter_description> #GstBaseParse.
</parameter_description>
</parameter>
<parameter name="min_size">
<parameter_description> Minimum size of the data that this base class should give to
subclass.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_parse_set_passthrough">
<description>
Set if the nature of the format or configuration does not allow (much)
parsing, and the parser should operate in passthrough mode (which only
applies when operating in push mode). That is, incoming buffers are
pushed through unmodified, i.e. no @check_valid_frame or @parse_frame
callbacks will be invoked, but @pre_push_buffer will still be invoked,
so subclass can perform as much or as little is appropriate for
passthrough semantics in @pre_push_buffer.


</description>
<parameters>
<parameter name="parse">
<parameter_description> a #GstBaseParse
</parameter_description>
</parameter>
<parameter name="passthrough">
<parameter_description> %TRUE if parser should run in passthrough mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_parse_set_syncable">
<description>
Set if frame starts can be identified. This is set by default and
determines whether seeking based on bitrate averages
is possible for a format/stream.


</description>
<parameters>
<parameter name="parse">
<parameter_description> a #GstBaseParse
</parameter_description>
</parameter>
<parameter name="syncable">
<parameter_description> set if frame starts can be identified
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_rtp_audio_payload_flush">
<description>
Create an RTP buffer and store @payload_len bytes of the adapter as the
payload. Set the timestamp on the new buffer to @timestamp before pushing
the buffer downstream.

If @payload_len is -1, all pending bytes will be flushed. If @timestamp is
-1, the timestamp will be calculated automatically.


</description>
<parameters>
<parameter name="baseaudiopayload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="payload_len">
<parameter_description> length of payload
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a #GstClockTime
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn

</return>
</function>

<function name="gst_base_rtp_audio_payload_get_adapter">
<description>
Gets the internal adapter used by the depayloader.


</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a #GstBaseRTPAudioPayload
</parameter_description>
</parameter>
</parameters>
<return> a #GstAdapter.

</return>
</function>

<function name="gst_base_rtp_audio_payload_push">
<description>
Create an RTP buffer and store @payload_len bytes of @data as the
payload. Set the timestamp on the new buffer to @timestamp before pushing
the buffer downstream.


</description>
<parameters>
<parameter name="baseaudiopayload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to set as payload
</parameter_description>
</parameter>
<parameter name="payload_len">
<parameter_description> length of payload
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a #GstClockTime
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn

</return>
</function>

<function name="gst_base_rtp_audio_payload_set_frame_based">
<description>
Tells #GstBaseRTPAudioPayload that the child element is for a frame based
audio codec

</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_rtp_audio_payload_set_frame_options">
<description>
Sets the options for frame based audio codecs.


</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
<parameter name="frame_duration">
<parameter_description> The duraction of an audio frame in milliseconds.
</parameter_description>
</parameter>
<parameter name="frame_size">
<parameter_description> The size of an audio frame in bytes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_rtp_audio_payload_set_sample_based">
<description>
Tells #GstBaseRTPAudioPayload that the child element is for a sample based
audio codec

</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_rtp_audio_payload_set_sample_options">
<description>
Sets the options for sample based audio codecs.

</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
<parameter name="sample_size">
<parameter_description> Size per sample in bytes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_rtp_audio_payload_set_samplebits_options">
<description>
Sets the options for sample based audio codecs.


</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
<parameter name="sample_size">
<parameter_description> Size per sample in bits.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_rtp_depayload_push">
<description>
Push @out_buf to the peer of @filter. This function takes ownership of
@out_buf.

Unlike gst_base_rtp_depayload_push_ts(), this function will not apply
any timestamp on the outgoing buffer. Subclasses should therefore timestamp
outgoing buffers themselves.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstBaseRTPDepayload
</parameter_description>
</parameter>
<parameter name="out_buf">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn.
</return>
</function>

<function name="gst_base_rtp_depayload_push_list">
<description>
Push @out_list to the peer of @filter. This function takes ownership of
@out_list.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstBaseRTPDepayload
</parameter_description>
</parameter>
<parameter name="out_list">
<parameter_description> a #GstBufferList
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn.

</return>
</function>

<function name="gst_base_rtp_depayload_push_ts">
<description>
Push @out_buf to the peer of @filter. This function takes ownership of
@out_buf.

Unlike gst_base_rtp_depayload_push(), this function will by default apply
the last incomming timestamp on the outgoing buffer when it didn't have a
timestamp already. The set_get_timestamp vmethod can be overwritten to change
this behaviour (and take, for example, @timestamp into account).


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstBaseRTPDepayload
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> an RTP timestamp to apply
</parameter_description>
</parameter>
<parameter name="out_buf">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn.
</return>
</function>

<function name="gst_base_sink_do_preroll">
<description>
If the @sink spawns its own thread for pulling buffers from upstream it
should call this method after it has pulled a buffer. If the element needed
to preroll, this function will perform the preroll and will then block
until the element state is changed.

This function should be called with the PREROLL_LOCK held.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="obj">
<parameter_description> the mini object that caused the preroll
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK if the preroll completed and processing can
continue. Any other return value should be returned from the render vmethod.

</return>
</function>

<function name="gst_base_sink_get_blocksize">
<description>
Get the number of bytes that the sink will pull when it is operating in pull
mode.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseSink
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes @sink will pull in pull mode.

</return>
</function>

<function name="gst_base_sink_get_last_buffer">
<description>
Get the last buffer that arrived in the sink and was used for preroll or for
rendering. This property can be used to generate thumbnails.

The #GstCaps on the buffer can be used to determine the type of the buffer.

Free-function: gst_buffer_unref


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> a #GstBuffer. gst_buffer_unref() after usage.
This function returns NULL when no buffer has arrived in the sink yet
or when the sink is not in PAUSED or PLAYING.

</return>
</function>

<function name="gst_base_sink_get_latency">
<description>
Get the currently configured latency.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> The configured latency.

</return>
</function>

<function name="gst_base_sink_get_max_lateness">
<description>
Gets the max lateness value. See gst_base_sink_set_max_lateness for
more details.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> The maximum time in nanoseconds that a buffer can be late
before it is dropped and not rendered. A value of -1 means an
unlimited time.

</return>
</function>

<function name="gst_base_sink_get_render_delay">
<description>
Get the render delay of @sink. see gst_base_sink_set_render_delay() for more
information about the render delay.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseSink
</parameter_description>
</parameter>
</parameters>
<return> the render delay of @sink.

</return>
</function>

<function name="gst_base_sink_get_sync">
<description>
Checks if @sink is currently configured to synchronize against the
clock.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the sink is configured to synchronize against the clock.

</return>
</function>

<function name="gst_base_sink_get_throttle_time">
<description>
Get the time that will be inserted between frames to control the 
maximum buffers per second.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseSink
</parameter_description>
</parameter>
</parameters>
<return> the number of nanoseconds @sink will put between frames.

</return>
</function>

<function name="gst_base_sink_get_ts_offset">
<description>
Get the synchronisation offset of @sink.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> The synchronisation offset.

</return>
</function>

<function name="gst_base_sink_is_async_enabled">
<description>
Checks if @sink is currently configured to perform asynchronous state
changes to PAUSED.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the sink is configured to perform asynchronous state
changes.

</return>
</function>

<function name="gst_base_sink_is_last_buffer_enabled">
<description>
Checks if @sink is currently configured to store the last received buffer in
the last-buffer property.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the sink is configured to store the last received buffer.

</return>
</function>

<function name="gst_base_sink_is_qos_enabled">
<description>
Checks if @sink is currently configured to send Quality-of-Service events
upstream.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the sink is configured to perform Quality-of-Service.

</return>
</function>

<function name="gst_base_sink_query_latency">
<description>
Query the sink for the latency parameters. The latency will be queried from
the upstream elements. @live will be TRUE if @sink is configured to
synchronize against the clock. @upstream_live will be TRUE if an upstream
element is live.

If both @live and @upstream_live are TRUE, the sink will want to compensate
for the latency introduced by the upstream elements by setting the
@min_latency to a strictly possitive value.

This function is mostly used by subclasses.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="live">
<parameter_description> if the sink is live
</parameter_description>
</parameter>
<parameter name="upstream_live">
<parameter_description> if an upstream element is live
</parameter_description>
</parameter>
<parameter name="min_latency">
<parameter_description> the min latency of the upstream elements
</parameter_description>
</parameter>
<parameter name="max_latency">
<parameter_description> the max latency of the upstream elements
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query succeeded.

</return>
</function>

<function name="gst_base_sink_set_async_enabled">
<description>
Configures @sink to perform all state changes asynchronusly. When async is
disabled, the sink will immediatly go to PAUSED instead of waiting for a
preroll buffer. This feature is usefull if the sink does not synchronize
against the clock or when it is dealing with sparse streams.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> the new async value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_set_blocksize">
<description>
Set the number of bytes that the sink will pull when it is operating in pull
mode.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseSink
</parameter_description>
</parameter>
<parameter name="blocksize">
<parameter_description> the blocksize in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_set_last_buffer_enabled">
<description>
Configures @sink to store the last received buffer in the last-buffer
property.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> the new enable-last-buffer value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_set_max_lateness">
<description>
Sets the new max lateness value to @max_lateness. This value is
used to decide if a buffer should be dropped or not based on the
buffer timestamp and the current clock time. A value of -1 means
an unlimited time.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="max_lateness">
<parameter_description> the new max lateness value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_set_qos_enabled">
<description>
Configures @sink to send Quality-of-Service events upstream.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> the new qos value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_set_render_delay">
<description>
Set the render delay in @sink to @delay. The render delay is the time
between actual rendering of a buffer and its synchronisation time. Some
devices might delay media rendering which can be compensated for with this
function.

After calling this function, this sink will report additional latency and
other sinks will adjust their latency to delay the rendering of their media.

This function is usually called by subclasses.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseSink
</parameter_description>
</parameter>
<parameter name="delay">
<parameter_description> the new delay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_set_sync">
<description>
Configures @sink to synchronize on the clock or not. When
@sync is FALSE, incomming samples will be played as fast as
possible. If @sync is TRUE, the timestamps of the incomming
buffers will be used to schedule the exact render time of its
contents.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="sync">
<parameter_description> the new sync value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_set_throttle_time">
<description>
Set the time that will be inserted between rendered buffers. This
can be used to control the maximum buffers per second that the sink
will render. 


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseSink
</parameter_description>
</parameter>
<parameter name="throttle">
<parameter_description> the throttle time in nanoseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_set_ts_offset">
<description>
Adjust the synchronisation of @sink with @offset. A negative value will
render buffers earlier than their timestamp. A positive value will delay
rendering. This function can be used to fix playback of badly timestamped
buffers.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the new offset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_sink_wait_clock">
<description>
This function will block until @time is reached. It is usually called by
subclasses that use their own internal synchronisation.

If @time is not valid, no sycnhronisation is done and #GST_CLOCK_BADTIME is
returned. Likewise, if synchronisation is disabled in the element or there
is no clock, no synchronisation is done and #GST_CLOCK_BADTIME is returned.

This function should only be called with the PREROLL_LOCK held, like when
receiving an EOS event in the #GstBaseSinkClass.event() vmethod or when
receiving a buffer in
the #GstBaseSinkClass.render() vmethod.

The @time argument should be the running_time of when this method should
return and is not adjusted with any latency or offset configured in the
sink.



</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the running_time to be reached
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> the jitter to be filled with time diff, or NULL
</parameter_description>
</parameter>
</parameters>
<return> #GstClockReturn
</return>
</function>

<function name="gst_base_sink_wait_eos">
<description>
This function will block until @time is reached. It is usually called by
subclasses that use their own internal synchronisation but want to let the
EOS be handled by the base class.

This function should only be called with the PREROLL_LOCK held, like when
receiving an EOS event in the ::event vmethod.

The @time argument should be the running_time of when the EOS should happen
and will be adjusted with any latency and offset configured in the sink.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the running_time to be reached
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> the jitter to be filled with time diff, or NULL
</parameter_description>
</parameter>
</parameters>
<return> #GstFlowReturn

</return>
</function>

<function name="gst_base_sink_wait_preroll">
<description>
If the #GstBaseSinkClass.render() method performs its own synchronisation
against the clock it must unblock when going from PLAYING to the PAUSED state
and call this method before continuing to render the remaining data.

This function will block until a state change to PLAYING happens (in which
case this function returns #GST_FLOW_OK) or the processing must be stopped due
to a state change to READY or a FLUSH event (in which case this function
returns #GST_FLOW_WRONG_STATE).

This function should only be called with the PREROLL_LOCK held, like in the
render function.


</description>
<parameters>
<parameter name="sink">
<parameter_description> the sink
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK if the preroll completed and processing can
continue. Any other return value should be returned from the render vmethod.

</return>
</function>

<function name="gst_base_src_get_blocksize">
<description>
Get the number of bytes that @src will push out with each buffer.


</description>
<parameters>
<parameter name="src">
<parameter_description> the source
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes pushed with each buffer.

</return>
</function>

<function name="gst_base_src_get_do_timestamp">
<description>
Query if @src timestamps outgoing buffers based on the current running_time.


</description>
<parameters>
<parameter name="src">
<parameter_description> the source
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the base class will automatically timestamp outgoing buffers.

</return>
</function>

<function name="gst_base_src_is_live">
<description>
Check if an element is in live mode.


</description>
<parameters>
<parameter name="src">
<parameter_description> base source instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if element is in live mode.
</return>
</function>

<function name="gst_base_src_new_seamless_segment">
<description>
Prepare a new seamless segment for emission downstream. This function must
only be called by derived sub-classes, and only from the create() function,
as the stream-lock needs to be held.

The format for the new segment will be the current format of the source, as
configured with gst_base_src_set_format()


</description>
<parameters>
<parameter name="src">
<parameter_description> The source
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> The new start value for the segment
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> Stop value for the new segment
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position value for the new segent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if preparation of the seamless segment succeeded.

</return>
</function>

<function name="gst_base_src_query_latency">
<description>
Query the source for the latency parameters. @live will be TRUE when @src is
configured as a live source. @min_latency will be set to the difference
between the running time and the timestamp of the first buffer.
@max_latency is always the undefined value of -1.

This function is mostly used by subclasses.


</description>
<parameters>
<parameter name="src">
<parameter_description> the source
</parameter_description>
</parameter>
<parameter name="live">
<parameter_description> if the source is live
</parameter_description>
</parameter>
<parameter name="min_latency">
<parameter_description> the min latency of the source
</parameter_description>
</parameter>
<parameter name="max_latency">
<parameter_description> the max latency of the source
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query succeeded.

</return>
</function>

<function name="gst_base_src_set_blocksize">
<description>
Set the number of bytes that @src will push out with each buffer. When
@blocksize is set to -1, a default length will be used.


</description>
<parameters>
<parameter name="src">
<parameter_description> the source
</parameter_description>
</parameter>
<parameter name="blocksize">
<parameter_description> the new blocksize in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_src_set_do_timestamp">
<description>
Configure @src to automatically timestamp outgoing buffers based on the
current running_time of the pipeline. This property is mostly useful for live
sources.


</description>
<parameters>
<parameter name="src">
<parameter_description> the source
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> enable or disable timestamping
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_src_set_format">
<description>
Sets the default format of the source. This will be the format used
for sending NEW_SEGMENT events and for performing seeks.

If a format of GST_FORMAT_BYTES is set, the element will be able to
operate in pull mode if the #GstBaseSrcClass.is_seekable() returns TRUE.

This function must only be called in states &lt; %GST_STATE_PAUSED.


</description>
<parameters>
<parameter name="src">
<parameter_description> base source instance
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_src_set_live">
<description>
If the element listens to a live source, @live should
be set to %TRUE.

A live source will not produce data in the PAUSED state and
will therefore not be able to participate in the PREROLL phase
of a pipeline. To signal this fact to the application and the
pipeline, the state change return value of the live source will
be GST_STATE_CHANGE_NO_PREROLL.

</description>
<parameters>
<parameter name="src">
<parameter_description> base source instance
</parameter_description>
</parameter>
<parameter name="live">
<parameter_description> new live-mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_src_wait_playing">
<description>
If the #GstBaseSrcClass.create() method performs its own synchronisation
against the clock it must unblock when going from PLAYING to the PAUSED state
and call this method before continuing to produce the remaining data.

This function will block until a state change to PLAYING happens (in which
case this function returns #GST_FLOW_OK) or the processing must be stopped due
to a state change to READY or a FLUSH event (in which case this function
returns #GST_FLOW_WRONG_STATE).



</description>
<parameters>
<parameter name="src">
<parameter_description> the src
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK if @src is PLAYING and processing can
continue. Any other return value should be returned from the create vmethod.
</return>
</function>

<function name="gst_base_transform_is_in_place">
<description>
See if @trans is configured as a in_place transform.


</description>
<parameters>
<parameter name="trans">
<parameter_description> the #GstBaseTransform to query
</parameter_description>
</parameter>
</parameters>
<return> TRUE is the transform is configured in in_place mode.

MT safe.
</return>
</function>

<function name="gst_base_transform_is_passthrough">
<description>
See if @trans is configured as a passthrough transform.


</description>
<parameters>
<parameter name="trans">
<parameter_description> the #GstBaseTransform to query
</parameter_description>
</parameter>
</parameters>
<return> TRUE is the transform is configured in passthrough mode.

MT safe.
</return>
</function>

<function name="gst_base_transform_is_qos_enabled">
<description>
Queries if the transform will handle QoS.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstBaseTransform
</parameter_description>
</parameter>
</parameters>
<return> TRUE if QoS is enabled.

MT safe.

</return>
</function>

<function name="gst_base_transform_reconfigure">
<description>
Instructs @trans to renegotiate a new downstream transform on the next
buffer. This function is typically called after properties on the transform
were set that influence the output format.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstBaseTransform
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_transform_set_gap_aware">
<description>
If @gap_aware is %FALSE (the default), output buffers will have the
%GST_BUFFER_FLAG_GAP flag unset.

If set to %TRUE, the element must handle output buffers with this flag set
correctly, i.e. it can assume that the buffer contains neutral data but must
unset the flag if the output is no neutral data.

MT safe.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstBaseTransform
</parameter_description>
</parameter>
<parameter name="gap_aware">
<parameter_description> New state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_transform_set_in_place">
<description>
Determines whether a non-writable buffer will be copied before passing
to the transform_ip function.
&lt;itemizedlist&gt;
&lt;listitem&gt;Always TRUE if no transform function is implemented.&lt;/listitem&gt;
&lt;listitem&gt;Always FALSE if ONLY transform function is implemented.&lt;/listitem&gt;
&lt;/itemizedlist&gt;

MT safe.

</description>
<parameters>
<parameter name="trans">
<parameter_description> the #GstBaseTransform to modify
</parameter_description>
</parameter>
<parameter name="in_place">
<parameter_description> Boolean value indicating that we would like to operate
on in_place buffers.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_transform_set_passthrough">
<description>
Set passthrough mode for this filter by default. This is mostly
useful for filters that do not care about negotiation.

Always TRUE for filters which don't implement either a transform
or transform_ip method.

MT safe.

</description>
<parameters>
<parameter name="trans">
<parameter_description> the #GstBaseTransform to set
</parameter_description>
</parameter>
<parameter name="passthrough">
<parameter_description> boolean indicating passthrough mode.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_transform_set_qos_enabled">
<description>
Enable or disable QoS handling in the transform.

MT safe.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstBaseTransform
</parameter_description>
</parameter>
<parameter name="enabled">
<parameter_description> new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_transform_suggest">
<description>
Instructs @trans to suggest new @caps upstream. A copy of @caps will be
taken.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstBaseTransform
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> caps to suggest
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> buffer size to suggest
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_transform_update_qos">
<description>
Set the QoS parameters in the transform. This function is called internally
when a QOS event is received but subclasses can provide custom information
when needed.

MT safe.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstBaseTransform
</parameter_description>
</parameter>
<parameter name="proportion">
<parameter_description> the proportion
</parameter_description>
</parameter>
<parameter name="diff">
<parameter_description> the diff against the clock
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the timestamp of the buffer generating the QoS expressed in
running_time.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_basertppayload_is_filled">
<description>
Check if the packet with @size and @duration would exceed the configured
maximum size.


</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the packet
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration of the packet
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet of @size and @duration would exceed the
configured MTU or max_ptime.
</return>
</function>

<function name="gst_basertppayload_push">
<description>
Push @buffer to the peer element of the payloader. The SSRC, payload type,
seqnum and timestamp of the RTP buffer will be updated first.

This function takes ownership of @buffer.


</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn.
</return>
</function>

<function name="gst_basertppayload_push_list">
<description>
Push @list to the peer element of the payloader. The SSRC, payload type,
seqnum and timestamp of the RTP buffer will be updated first.

This function takes ownership of @list.


</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> a #GstBufferList
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn.

</return>
</function>

<function name="gst_basertppayload_set_options">
<description>
Set the rtp options of the payloader. These options will be set in the caps
of the payloader. Subclasses must call this method before calling
gst_basertppayload_push() or gst_basertppayload_set_outcaps().

</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="media">
<parameter_description> the media type (typically &quot;audio&quot; or &quot;video&quot;)
</parameter_description>
</parameter>
<parameter name="dynamic">
<parameter_description> if the payload type is dynamic
</parameter_description>
</parameter>
<parameter name="encoding_name">
<parameter_description> the encoding name
</parameter_description>
</parameter>
<parameter name="clock_rate">
<parameter_description> the clock rate of the media
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_basertppayload_set_outcaps">
<description>
Configure the output caps with the optional parameters.

Variable arguments should be in the form field name, field type
(as a GType), value(s).  The last variable argument should be NULL.


</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the first field name or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> field values
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the caps could be set.
</return>
</function>

<function name="gst_bin_add">
<description>
Adds the given element to the bin.  Sets the element's parent, and thus
takes ownership of the element. An element can only be added to one bin.

If the element's pads are linked to other pads, the pads will be unlinked
before the element is added to the bin.

&lt;note&gt;
When you add an element to an already-running pipeline, you will have to
take care to set the state of the newly-added element to the desired
state (usually PLAYING or PAUSED, same you set the pipeline to originally)
with gst_element_set_state(), or use gst_element_sync_state_with_parent().
The bin or pipeline will not take care of this for you.
&lt;/note&gt;

MT safe.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the element could be added, FALSE if
the bin does not want to accept the element.
</return>
</function>

<function name="gst_bin_add_many">
<description>
Adds a NULL-terminated list of elements to a bin.  This function is
equivalent to calling gst_bin_add() for each member of the list. The return
value of each gst_bin_add() is ignored.

</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
<parameter name="element_1">
<parameter_description> the #GstElement element to add to the bin
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> additional elements to add to the bin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bin_find_unconnected_pad">
<description>
Recursively looks for elements with an unlinked pad of the given
direction within the specified bin and returns an unlinked pad
if one is found, or NULL otherwise. If a pad is found, the caller
owns a reference to it and should use gst_object_unref() on the
pad when it is not needed any longer.


Deprecated: use gst_bin_find_unlinked_pad() instead.

</description>
<parameters>
<parameter name="bin">
<parameter_description> bin in which to look for elements with unlinked pads
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> whether to look for an unlinked source or sink pad
</parameter_description>
</parameter>
</parameters>
<return> unlinked pad of the given direction, or NULL.

</return>
</function>

<function name="gst_bin_find_unlinked_pad">
<description>
Recursively looks for elements with an unlinked pad of the given
direction within the specified bin and returns an unlinked pad
if one is found, or NULL otherwise. If a pad is found, the caller
owns a reference to it and should use gst_object_unref() on the
pad when it is not needed any longer.


</description>
<parameters>
<parameter name="bin">
<parameter_description> bin in which to look for elements with unlinked pads
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> whether to look for an unlinked source or sink pad
</parameter_description>
</parameter>
</parameters>
<return> unlinked pad of the given direction, or NULL.

</return>
</function>

<function name="gst_bin_get_by_interface">
<description>
Looks for an element inside the bin that implements the given
interface. If such an element is found, it returns the element.
You can cast this element to the given interface afterwards.  If you want
all elements that implement the interface, use
gst_bin_iterate_all_by_interface(). This function recurses into child bins.

MT safe.  Caller owns returned reference.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
<parameter name="iface">
<parameter_description> the #GType of an interface
</parameter_description>
</parameter>
</parameters>
<return> A #GstElement inside the bin implementing the interface
</return>
</function>

<function name="gst_bin_get_by_name">
<description>
Gets the element with the given name from a bin. This
function recurses into child bins.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the element name to search for
</parameter_description>
</parameter>
</parameters>
<return> the #GstElement with the given name, or NULL
</return>
</function>

<function name="gst_bin_get_by_name_recurse_up">
<description>
Gets the element with the given name from this bin. If the
element is not found, a recursion is performed on the parent bin.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the element name to search for
</parameter_description>
</parameter>
</parameters>
<return> the #GstElement with the given name, or NULL
</return>
</function>

<function name="gst_bin_iterate_all_by_interface">
<description>
Looks for all elements inside the bin that implements the given
interface. You can safely cast all returned elements to the given interface.
The function recurses inside child bins. The iterator will yield a series
of #GstElement that should be unreffed after use.

Each element yielded by the iterator will have its refcount increased, so
unref after use.

MT safe.  Caller owns returned value.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
<parameter name="iface">
<parameter_description> the #GType of an interface
</parameter_description>
</parameter>
</parameters>
<return> a #GstIterator of #GstElement for all elements
in the bin implementing the given interface, or NULL
</return>
</function>

<function name="gst_bin_iterate_elements">
<description>
Gets an iterator for the elements in this bin.

Each element yielded by the iterator will have its refcount increased, so
unref after use.

MT safe.  Caller owns returned value.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
</parameters>
<return> a #GstIterator of #GstElement, or NULL
</return>
</function>

<function name="gst_bin_iterate_recurse">
<description>
Gets an iterator for the elements in this bin.
This iterator recurses into GstBin children.

Each element yielded by the iterator will have its refcount increased, so
unref after use.

MT safe.  Caller owns returned value.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
</parameters>
<return> a #GstIterator of #GstElement, or NULL
</return>
</function>

<function name="gst_bin_iterate_sinks">
<description>
Gets an iterator for all elements in the bin that have the
#GST_ELEMENT_IS_SINK flag set.

Each element yielded by the iterator will have its refcount increased, so
unref after use.

MT safe.  Caller owns returned value.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
</parameters>
<return> a #GstIterator of #GstElement, or NULL
</return>
</function>

<function name="gst_bin_iterate_sorted">
<description>
Gets an iterator for the elements in this bin in topologically
sorted order. This means that the elements are returned from
the most downstream elements (sinks) to the sources.

This function is used internally to perform the state changes
of the bin elements and for clock selection.

Each element yielded by the iterator will have its refcount increased, so
unref after use.

MT safe.  Caller owns returned value.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
</parameters>
<return> a #GstIterator of #GstElement, or NULL
</return>
</function>

<function name="gst_bin_iterate_sources">
<description>
Gets an iterator for all elements in the bin that have the
#GST_ELEMENT_IS_SOURCE flag set.

Each element yielded by the iterator will have its refcount increased, so
unref after use.

MT safe.  Caller owns returned value.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
</parameters>
<return> a #GstIterator of #GstElement, or NULL
</return>
</function>

<function name="gst_bin_new">
<description>
Creates a new bin with the given name.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the new bin
</parameter_description>
</parameter>
</parameters>
<return> a new #GstBin
</return>
</function>

<function name="gst_bin_recalculate_latency">
<description>
Query @bin for the current latency using and reconfigures this latency to all the
elements with a LATENCY event.

This method is typically called on the pipeline when a #GST_MESSAGE_LATENCY
is posted on the bus.

This function simply emits the 'do-latency' signal so any custom latency
calculations will be performed.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the latency could be queried and reconfigured.

</return>
</function>

<function name="gst_bin_remove">
<description>
Removes the element from the bin, unparenting it as well.
Unparenting the element means that the element will be dereferenced,
so if the bin holds the only reference to the element, the element
will be freed in the process of removing it from the bin.  If you
want the element to still exist after removing, you need to call
gst_object_ref() before removing it from the bin.

If the element's pads are linked to other pads, the pads will be unlinked
before the element is removed from the bin.

MT safe.


</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
<parameter name="element">
<parameter_description> the #GstElement to remove
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the element could be removed, FALSE if
the bin does not want to remove the element.
</return>
</function>

<function name="gst_bin_remove_many">
<description>
Remove a list of elements from a bin. This function is equivalent
to calling gst_bin_remove() with each member of the list.

</description>
<parameters>
<parameter name="bin">
<parameter_description> a #GstBin
</parameter_description>
</parameter>
<parameter name="element_1">
<parameter_description> the first #GstElement to remove from the bin
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> NULL-terminated list of elements to remove from the bin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bit_reader_free">
<description>
Frees a #GstBitReader instance, which was previously allocated by
gst_bit_reader_new() or gst_bit_reader_new_from_buffer().


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bit_reader_get_bits_uint16">
<description>
Read @nbits bits into @val and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint16 to store the result
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> number of bits to read
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_get_bits_uint32">
<description>
Read @nbits bits into @val and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> number of bits to read
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_get_bits_uint64">
<description>
Read @nbits bits into @val and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint64 to store the result
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> number of bits to read
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_get_bits_uint8">
<description>
Read @nbits bits into @val and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint8 to store the result
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> number of bits to read
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_get_pos">
<description>
Returns the current position of a #GstBitReader instance in bits.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
</parameters>
<return> The current position of @reader in bits.

</return>
</function>

<function name="gst_bit_reader_get_remaining">
<description>
Returns the remaining number of bits of a #GstBitReader instance.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
</parameters>
<return> The remaining number of bits of @reader instance.

</return>
</function>

<function name="gst_bit_reader_get_size">
<description>
Returns the total number of bits of a #GstBitReader instance.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
</parameters>
<return> The total number of bits of @reader instance.

</return>
</function>

<function name="gst_bit_reader_init">
<description>
Initializes a #GstBitReader instance to read from @data. This function
can be called on already initialized instances.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data from which the bit reader should read
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size of @data in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bit_reader_init_from_buffer">
<description>
Initializes a #GstBitReader instance to read from @buffer. This function
can be called on already initialized instances.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> Buffer from which the #GstBitReader should read
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bit_reader_new">
<description>
Create a new #GstBitReader instance, which will read from @data.

Free-function: gst_bit_reader_free


</description>
<parameters>
<parameter name="data">
<parameter_description> Data from which the #GstBitReader should read
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size of @data in bytes
</parameter_description>
</parameter>
</parameters>
<return> a new #GstBitReader instance

</return>
</function>

<function name="gst_bit_reader_new_from_buffer">
<description>
Create a new #GstBitReader instance, which will read from the
#GstBuffer @buffer.

Free-function: gst_bit_reader_free


</description>
<parameters>
<parameter name="buffer">
<parameter_description> Buffer from which the #GstBitReader should read
</parameter_description>
</parameter>
</parameters>
<return> a new #GstBitReader instance

</return>
</function>

<function name="gst_bit_reader_peek_bits_uint16">
<description>
Read @nbits bits into @val but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint16 to store the result
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> number of bits to read
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_peek_bits_uint32">
<description>
Read @nbits bits into @val but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> number of bits to read
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_peek_bits_uint64">
<description>
Read @nbits bits into @val but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint64 to store the result
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> number of bits to read
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_peek_bits_uint8">
<description>
Read @nbits bits into @val but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint8 to store the result
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> number of bits to read
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_set_pos">
<description>
Sets the new position of a #GstBitReader instance to @pos in bits.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> The new position in bits
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the position could be set successfully, %FALSE
otherwise.

</return>
</function>

<function name="gst_bit_reader_skip">
<description>
Skips @nbits bits of the #GstBitReader instance.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
<parameter name="nbits">
<parameter_description> the number of bits to skip
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @nbits bits could be skipped, %FALSE otherwise.

</return>
</function>

<function name="gst_bit_reader_skip_to_byte">
<description>
Skips until the next byte.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstBitReader instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_buffer_copy_metadata">
<description>
Copies the metadata from @src into @dest. The data, size and mallocdata
fields are not copied.

@flags indicate which fields will be copied. Use #GST_BUFFER_COPY_ALL to copy
all the metadata fields.

This function is typically called from a custom buffer copy function after
creating @dest and setting the data, size, mallocdata.


</description>
<parameters>
<parameter name="dest">
<parameter_description> a destination #GstBuffer
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> a source #GstBuffer
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags indicating what metadata fields should be copied.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_create_sub">
<description>
Creates a sub-buffer from @parent at @offset and @size.
This sub-buffer uses the actual memory space of the parent buffer.
This function will copy the offset and timestamp fields when the
offset is 0. If not, they will be set to #GST_CLOCK_TIME_NONE and 
#GST_BUFFER_OFFSET_NONE.
If @offset equals 0 and @size equals the total size of @buffer, the
duration and offset end fields are also copied. If not they will be set
to #GST_CLOCK_TIME_NONE and #GST_BUFFER_OFFSET_NONE.

MT safe.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a #GstBuffer.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset into parent #GstBuffer at which the new sub-buffer 
begins.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the new #GstBuffer sub-buffer, in bytes.
</parameter_description>
</parameter>
</parameters>
<return> the new #GstBuffer or NULL if the arguments were
invalid.
</return>
</function>

<function name="gst_buffer_get_caps">
<description>
Gets the media type of the buffer. This can be NULL if there
is no media type attached to this buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GstBuffer.
</parameter_description>
</parameter>
</parameters>
<return> a reference to the #GstCaps. unref after usage.
Returns NULL if there were no caps on this buffer.
</return>
</function>

<function name="gst_buffer_is_metadata_writable">
<description>
Similar to gst_buffer_is_writable, but this only ensures that the
refcount of the buffer is 1, indicating that the caller is the sole
owner and can change the buffer metadata, such as caps and timestamps.


</description>
<parameters>
<parameter name="buf">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the metadata is writable.
</return>
</function>

<function name="gst_buffer_is_span_fast">
<description>
Determines whether a gst_buffer_span() can be done without copying
the contents, that is, whether the data areas are contiguous sub-buffers of 
the same buffer.

MT safe.

</description>
<parameters>
<parameter name="buf1">
<parameter_description> the first #GstBuffer.
</parameter_description>
</parameter>
<parameter name="buf2">
<parameter_description> the second #GstBuffer.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the buffers are contiguous,
FALSE if a copy would be required.
</return>
</function>

<function name="gst_buffer_join">
<description>
Create a new buffer that is the concatenation of the two source
buffers, and unrefs the original source buffers.

If the buffers point to contiguous areas of memory, the buffer
is created without copying the data.

This is a convenience function for C programmers. See also
gst_buffer_merge(), which does the same thing without
unreffing the input parameters. Language bindings without
explicit reference counting should not wrap this function.


</description>
<parameters>
<parameter name="buf1">
<parameter_description> the first source #GstBuffer.
</parameter_description>
</parameter>
<parameter name="buf2">
<parameter_description> the second source #GstBuffer.
</parameter_description>
</parameter>
</parameters>
<return> the new #GstBuffer which is the concatenation of
the source buffers.
</return>
</function>

<function name="gst_buffer_list_foreach">
<description>
Call @func with @data for each buffer in @list.

@func can modify the passed buffer pointer or its contents. The return value
of @func define if this function returns or if the remaining buffers in a
group should be skipped.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstBufferList
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GstBufferListFunc to call
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_list_get">
<description>
Get the buffer at @idx in @group.

Note that this function is not efficient for iterating over the entire list.
Use an iterator or gst_buffer_list_foreach() instead.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstBufferList
</parameter_description>
</parameter>
<parameter name="group">
<parameter_description> the group
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the index in @group
</parameter_description>
</parameter>
</parameters>
<return> the buffer at @idx in @group or NULL when there
is no buffer. The buffer remains valid as long as @list is valid.

</return>
</function>

<function name="gst_buffer_list_iterate">
<description>
Iterate the buffers in @list. The owner of the iterator must also be the
owner of a reference to @list while the returned iterator is in use.

Free-function: gst_buffer_list_iterator_free


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstBufferList
</parameter_description>
</parameter>
</parameters>
<return> a new #GstBufferListIterator of the buffers in
@list. gst_buffer_list_iterator_free() after usage

</return>
</function>

<function name="gst_buffer_list_iterator_add">
<description>
Inserts @buffer into the #GstBufferList iterated with @it. The buffer is
inserted into the current group, immediately before the buffer that would be
returned by gst_buffer_list_iterator_next(). The buffer is inserted before
the implicit cursor, a subsequent call to gst_buffer_list_iterator_next()
will return the buffer after the inserted buffer, if any.

This function takes ownership of @buffer.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_list_iterator_add_group">
<description>
Inserts a new, empty group into the #GstBufferList iterated with @it. The
group is inserted immediately before the group that would be returned by
gst_buffer_list_iterator_next_group(). A subsequent call to
gst_buffer_list_iterator_next_group() will advance the iterator to the group
after the inserted group, if any.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_list_iterator_add_list">
<description>
Inserts @list of buffers into the #GstBufferList iterated with @it. The list is
inserted into the current group, immediately before the buffer that would be
returned by gst_buffer_list_iterator_next(). The list is inserted before
the implicit cursor, a subsequent call to gst_buffer_list_iterator_next()
will return the buffer after the last buffer of the inserted list, if any.

This function takes ownership of @list and all its buffers.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> a #GList of buffers
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_list_iterator_do">
<description>
Calls the given function for the last buffer returned by
gst_buffer_list_iterator_next(). gst_buffer_list_iterator_next() must have
been called on @it before this function is called.
gst_buffer_list_iterator_remove() and gst_buffer_list_iterator_steal() must
not have been called since the last call to gst_buffer_list_iterator_next().

See #GstBufferListDoFunction for more details.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
<parameter name="do_func">
<parameter_description> the function to be called
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the gpointer to optional user data.
</parameter_description>
</parameter>
</parameters>
<return> the return value from @do_func

</return>
</function>

<function name="gst_buffer_list_iterator_free">
<description>
Free the iterator.


</description>
<parameters>
<parameter name="it">
<parameter_description> the #GstBufferListIterator to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_list_iterator_merge_group">
<description>
Merge a buffer list group into a normal #GstBuffer by copying its metadata
and memcpying its data into consecutive memory. All buffers in the current
group after the implicit cursor will be merged into one new buffer. The
metadata of the new buffer will be a copy of the metadata of the buffer that
would be returned by gst_buffer_list_iterator_next(). If there is no buffer
in the current group after the implicit cursor, NULL will be returned.

This function will not move the implicit cursor or in any other way affect
the state of the iterator @it or the list.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
</parameters>
<return> a new #GstBuffer, gst_buffer_unref() after usage,
or NULL

</return>
</function>

<function name="gst_buffer_list_iterator_n_buffers">
<description>
Returns the number of buffers left to iterate in the current group. I.e. the
number of calls that can be made to gst_buffer_list_iterator_next() before
it returns NULL.

This function will not move the implicit cursor or in any other way affect
the state of the iterator @it.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
</parameters>
<return> the number of buffers left to iterate in the current group

</return>
</function>

<function name="gst_buffer_list_iterator_next">
<description>
Returns the next buffer in the list iterated with @it. If the iterator is at
the end of a group, NULL will be returned. This function may be called
repeatedly to iterate through the current group.

The caller will not get a new ref to the returned #GstBuffer and must not
unref it.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
</parameters>
<return> the next buffer in the current group of the
buffer list, or NULL

</return>
</function>

<function name="gst_buffer_list_iterator_next_group">
<description>
Advance the iterator @it to the first buffer in the next group. If the
iterator is at the last group, FALSE will be returned. This function may be
called repeatedly to iterate through the groups in a buffer list.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the iterator could be advanced to the next group, FALSE if
the iterator was already at the last group

</return>
</function>

<function name="gst_buffer_list_iterator_remove">
<description>
Removes the last buffer returned by gst_buffer_list_iterator_next() from
the #GstBufferList iterated with @it. gst_buffer_list_iterator_next() must
have been called on @it before this function is called. This function can
only be called once per call to gst_buffer_list_iterator_next().

The removed buffer is unreffed.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_list_iterator_steal">
<description>
Returns the last buffer returned by gst_buffer_list_iterator_next() without
modifying the refcount of the buffer.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
</parameters>
<return> the last buffer returned by
gst_buffer_list_iterator_next()

</return>
</function>

<function name="gst_buffer_list_iterator_take">
<description>
Replaces the last buffer returned by gst_buffer_list_iterator_next() with
@buffer in the #GstBufferList iterated with @it and takes ownership of
@buffer. gst_buffer_list_iterator_next() must have been called on @it before
this function is called. gst_buffer_list_iterator_remove() must not have been
called since the last call to gst_buffer_list_iterator_next().

This function unrefs the replaced buffer if it has not been stolen with
gst_buffer_list_iterator_steal() and takes ownership of @buffer (i.e. the
refcount of @buffer is not increased).

FIXME 0.11: this conditional taking-ownership is not good for bindings


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_list_n_groups">
<description>
Returns the number of groups in @list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstBufferList
</parameter_description>
</parameter>
</parameters>
<return> the number of groups in the buffer list

</return>
</function>

<function name="gst_buffer_list_new">
<description>
Creates a new, empty #GstBufferList. The caller is responsible for unreffing
the returned #GstBufferList.

Free-function: gst_buffer_list_unref


</description>
<parameters>
</parameters>
<return> the new #GstBufferList. gst_buffer_list_unref()
after usage.

</return>
</function>

<function name="gst_buffer_make_metadata_writable">
<description>
Similar to gst_buffer_make_writable, but does not ensure that the buffer
data array is writable. Instead, this just ensures that the returned buffer
is solely owned by the caller, by creating a subbuffer of the original
buffer if necessary.

After calling this function, @buf should not be referenced anymore. The
result of this function has guaranteed writable metadata.


</description>
<parameters>
<parameter name="buf">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> a new #GstBuffer with writable metadata, which
may or may not be the same as @buf.
</return>
</function>

<function name="gst_buffer_merge">
<description>
Create a new buffer that is the concatenation of the two source
buffers.  The original source buffers will not be modified or
unref'd.  Make sure you unref the source buffers if they are not used
anymore afterwards.

If the buffers point to contiguous areas of memory, the buffer
is created without copying the data.

Free-function: gst_buffer_unref


</description>
<parameters>
<parameter name="buf1">
<parameter_description> the first source #GstBuffer to merge.
</parameter_description>
</parameter>
<parameter name="buf2">
<parameter_description> the second source #GstBuffer to merge.
</parameter_description>
</parameter>
</parameters>
<return> the new #GstBuffer which is the concatenation
of the source buffers.
</return>
</function>

<function name="gst_buffer_new">
<description>
Creates a newly allocated buffer without any data.

MT safe.


</description>
<parameters>
</parameters>
<return> the new #GstBuffer.
</return>
</function>

<function name="gst_buffer_new_and_alloc">
<description>
Creates a newly allocated buffer with data of the given size.
The buffer memory is not cleared. If the requested amount of
memory can't be allocated, the program will abort. Use
gst_buffer_try_new_and_alloc() if you want to handle this case
gracefully or have gotten the size to allocate from an untrusted
source such as a media stream.


Note that when @size == 0, the buffer data pointer will be NULL.

MT safe.


</description>
<parameters>
<parameter name="size">
<parameter_description> the size in bytes of the new buffer's data.
</parameter_description>
</parameter>
</parameters>
<return> the new #GstBuffer.
</return>
</function>

<function name="gst_buffer_set_caps">
<description>
Sets the media type on the buffer. The refcount of the caps will
be increased and any previous caps on the buffer will be
unreffed.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GstBuffer.
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> a #GstCaps.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_span">
<description>
Creates a new buffer that consists of part of buf1 and buf2.
Logically, buf1 and buf2 are concatenated into a single larger
buffer, and a new buffer is created at the given offset inside
this space, with a given length.

If the two source buffers are children of the same larger buffer,
and are contiguous, the new buffer will be a child of the shared
parent, and thus no copying is necessary. you can use
gst_buffer_is_span_fast() to determine if a memcpy will be needed.

MT safe.


</description>
<parameters>
<parameter name="buf1">
<parameter_description> the first source #GstBuffer to merge.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset in the first buffer from where the new
buffer should start.
</parameter_description>
</parameter>
<parameter name="buf2">
<parameter_description> the second source #GstBuffer to merge.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the total length of the new buffer.
</parameter_description>
</parameter>
</parameters>
<return> the new #GstBuffer that spans the two source
buffers, or NULL if the arguments are invalid.
</return>
</function>

<function name="gst_buffer_stamp">
<description>
Copies additional information (the timestamp, duration, and offset start
and end) from one buffer to the other.

This function does not copy any buffer flags or caps and is equivalent to
gst_buffer_copy_metadata(@dest, @src, GST_BUFFER_COPY_TIMESTAMPS).

Deprecated: use gst_buffer_copy_metadata() instead, it provides more
control.

</description>
<parameters>
<parameter name="dest">
<parameter_description> buffer to stamp
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> buffer to stamp from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_straw_get_buffer">
<description>
Get one buffer from @pad. Implemented via buffer probes. This function will
block until the pipeline passes a buffer over @pad, so for robust behavior
in unit tests, you need to use check's timeout to fail out in the case that a
buffer never arrives.

You must have previously called gst_buffer_straw_start_pipeline() on
@pipeline and @pad.


</description>
<parameters>
<parameter name="bin">
<parameter_description> the pipeline previously started via gst_buffer_straw_start_pipeline()
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the pad previously passed to gst_buffer_straw_start_pipeline()
</parameter_description>
</parameter>
</parameters>
<return> the captured #GstBuffer.
</return>
</function>

<function name="gst_buffer_straw_start_pipeline">
<description>
Sets up a pipeline for buffer sucking. This will allow you to call
gst_buffer_straw_get_buffer() to access buffers as they pass over @pad.

This function is normally used in unit tests that want to verify that a
particular element is outputting correct buffers. For example, you would make
a pipeline via gst_parse_launch(), pull out the pad you want to monitor, then
call gst_buffer_straw_get_buffer() to get the buffers that pass through @pad.
The pipeline will block until you have sucked off the buffers.

This function will set the state of @bin to PLAYING; to clean up, be sure to
call gst_buffer_straw_stop_pipeline().

Note that you may not start two buffer straws at the same time. This function
is intended for unit tests, not general API use. In fact it calls fail_if
from libcheck, so you cannot use it outside unit tests.

</description>
<parameters>
<parameter name="bin">
<parameter_description> the pipeline to run
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> a pad on an element in @bin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_straw_stop_pipeline">
<description>
Set @bin to #GST_STATE_NULL and release resource allocated in
gst_buffer_straw_start_pipeline().

You must have previously called gst_buffer_straw_start_pipeline() on
@pipeline and @pad.

</description>
<parameters>
<parameter name="bin">
<parameter_description> the pipeline previously started via gst_buffer_straw_start_pipeline()
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the pad previously passed to gst_buffer_straw_start_pipeline()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_try_new_and_alloc">
<description>
Tries to create a newly allocated buffer with data of the given size. If
the requested amount of memory can't be allocated, NULL will be returned.
The buffer memory is not cleared.

Note that when @size == 0, the buffer data pointer will be NULL.

MT safe.


</description>
<parameters>
<parameter name="size">
<parameter_description> the size in bytes of the new buffer's data.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstBuffer, or NULL if the memory couldn't
be allocated.

</return>
</function>

<function name="gst_bus_add_signal_watch">
<description>
Adds a bus signal watch to the default main context with the default priority
(%G_PRIORITY_DEFAULT). Since 0.10.33 it is also possible to use a non-default
main context set up using g_main_context_push_thread_default() (before
one had to create a bus watch source and attach it to the desired main
context 'manually').

After calling this statement, the bus will emit the &quot;message&quot; signal for each
message posted on the bus.

This function may be called multiple times. To clean up, the caller is
responsible for calling gst_bus_remove_signal_watch() as many times as this
function is called.

MT safe.

</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus on which you want to receive the &quot;message&quot; signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bus_add_signal_watch_full">
<description>
Adds a bus signal watch to the default main context with the given @priority
(e.g. %G_PRIORITY_DEFAULT). Since 0.10.33 it is also possible to use a
non-default main context set up using g_main_context_push_thread_default()
(before one had to create a bus watch source and attach it to the desired
main context 'manually').

After calling this statement, the bus will emit the &quot;message&quot; signal for each
message posted on the bus when the main loop is running.

This function may be called multiple times. To clean up, the caller is
responsible for calling gst_bus_remove_signal_watch() as many times as this
function is called.

There can only be a single bus watch per bus, you most remove all signal watch
before you can set another type of watch.

MT safe.

</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus on which you want to receive the &quot;message&quot; signal
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> The priority of the watch.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bus_add_watch">
<description>
Adds a bus watch to the default main context with the default priority
(%G_PRIORITY_DEFAULT). Since 0.10.33 it is also possible to use a non-default
main context set up using g_main_context_push_thread_default() (before
one had to create a bus watch source and attach it to the desired main
context 'manually').

This function is used to receive asynchronous messages in the main loop.
There can only be a single bus watch per bus, you must remove it before you
can set a new one.

The watch can be removed using g_source_remove() or by returning FALSE
from @func.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to create the watch for
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A function to call when a message is received.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func.
</parameter_description>
</parameter>
</parameters>
<return> The event source id.

MT safe.
</return>
</function>

<function name="gst_bus_add_watch_full">
<description>
Adds a bus watch to the default main context with the given @priority (e.g.
%G_PRIORITY_DEFAULT). Since 0.10.33 it is also possible to use a non-default
main context set up using g_main_context_push_thread_default() (before
one had to create a bus watch source and attach it to the desired main
context 'manually').

This function is used to receive asynchronous messages in the main loop.
There can only be a single bus watch per bus, you must remove it before you
can set a new one.

When @func is called, the message belongs to the caller; if you want to
keep a copy of it, call gst_message_ref() before leaving @func.

The watch can be removed using g_source_remove() or by returning FALSE
from @func.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to create the watch for.
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> The priority of the watch.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A function to call when a message is received.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @func.
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> the function to call when the source is removed.
</parameter_description>
</parameter>
</parameters>
<return> The event source id.

MT safe.
</return>
</function>

<function name="gst_bus_async_signal_func">
<description>
A helper #GstBusFunc that can be used to convert all asynchronous messages
into signals.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the #GstMessage received
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return> TRUE
</return>
</function>

<function name="gst_bus_create_watch">
<description>
Create watch for this bus. The GSource will be dispatched whenever
a message is on the bus. After the GSource is dispatched, the
message is popped off the bus and unreffed.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to create the watch for
</parameter_description>
</parameter>
</parameters>
<return> a #GSource that can be added to a mainloop.
</return>
</function>

<function name="gst_bus_disable_sync_message_emission">
<description>
Instructs GStreamer to stop emitting the &quot;sync-message&quot; signal for this bus.
See gst_bus_enable_sync_message_emission() for more information.

In the event that multiple pieces of code have called
gst_bus_enable_sync_message_emission(), the sync-message emissions will only
be stopped after all calls to gst_bus_enable_sync_message_emission() were
&quot;cancelled&quot; by calling this function. In this way the semantics are exactly
the same as gst_object_ref() that which calls enable should also call
disable.

MT safe.

</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus on which you previously called
gst_bus_enable_sync_message_emission()
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bus_enable_sync_message_emission">
<description>
Instructs GStreamer to emit the &quot;sync-message&quot; signal after running the bus's
sync handler. This function is here so that code can ensure that they can
synchronously receive messages without having to affect what the bin's sync
handler is.

This function may be called multiple times. To clean up, the caller is
responsible for calling gst_bus_disable_sync_message_emission() as many times
as this function is called.

While this function looks similar to gst_bus_add_signal_watch(), it is not
exactly the same -- this function enables &lt;emphasis&gt;synchronous&lt;/emphasis&gt; emission of
signals when messages arrive; gst_bus_add_signal_watch() adds an idle callback
to pop messages off the bus &lt;emphasis&gt;asynchronously&lt;/emphasis&gt;. The sync-message signal
comes from the thread of whatever object posted the message; the &quot;message&quot;
signal is marshalled to the main thread via the main loop.

MT safe.

</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus on which you want to receive the &quot;sync-message&quot; signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bus_have_pending">
<description>
Check if there are pending messages on the bus that
should be handled.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to check
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there are messages on the bus to be handled, FALSE
otherwise.

MT safe.
</return>
</function>

<function name="gst_bus_new">
<description>
Creates a new #GstBus instance.


</description>
<parameters>
</parameters>
<return> a new #GstBus instance
</return>
</function>

<function name="gst_bus_peek">
<description>
Peek the message on the top of the bus' queue. The message will remain
on the bus' message queue. A reference is returned, and needs to be unreffed
by the caller.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus
</parameter_description>
</parameter>
</parameters>
<return> the #GstMessage that is on the bus, or NULL if the
bus is empty.

MT safe.
</return>
</function>

<function name="gst_bus_poll">
<description>
Poll the bus for messages. Will block while waiting for messages to come.
You can specify a maximum time to poll with the @timeout parameter. If
@timeout is negative, this function will block indefinitely.

All messages not in @events will be popped off the bus and will be ignored.

Because poll is implemented using the &quot;message&quot; signal enabled by
gst_bus_add_signal_watch(), calling gst_bus_poll() will cause the &quot;message&quot;
signal to be emitted for every message that poll sees. Thus a &quot;message&quot;
signal handler will see the same messages that this function sees -- neither
will steal messages from the other.

This function will run a main loop from the default main context when
polling.

You should never use this function, since it is pure evil. This is
especially true for GUI applications based on Gtk+ or Qt, but also for any
other non-trivial application that uses the GLib main loop. As this function
runs a GLib main loop, any callback attached to the default GLib main
context may be invoked. This could be timeouts, GUI events, I/O events etc.;
even if gst_bus_poll() is called with a 0 timeout. Any of these callbacks
may do things you do not expect, e.g. destroy the main application window or
some other resource; change other application state; display a dialog and
run another main loop until the user clicks it away. In short, using this
function may add a lot of complexity to your code through unexpected
re-entrancy and unexpected changes to your application's state.

For 0 timeouts use gst_bus_pop_filtered() instead of this function; for
other short timeouts use gst_bus_timed_pop_filtered(); everything else is
better handled by setting up an asynchronous bus watch and doing things
from there.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> a mask of #GstMessageType, representing the set of message types to
poll for.
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> the poll timeout, as a #GstClockTimeDiff, or -1 to poll
indefinitely.
</parameter_description>
</parameter>
</parameters>
<return> the message that was received, or NULL if the
poll timed out. The message is taken from the bus and needs to be
unreffed with gst_message_unref() after usage.
</return>
</function>

<function name="gst_bus_pop">
<description>
Get a message from the bus.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to pop
</parameter_description>
</parameter>
</parameters>
<return> the #GstMessage that is on the bus, or NULL if the
bus is empty. The message is taken from the bus and needs to be unreffed
with gst_message_unref() after usage.

MT safe.
</return>
</function>

<function name="gst_bus_pop_filtered">
<description>
Get a message matching @type from the bus.  Will discard all messages on
the bus that do not match @type and that have been posted before the first
message that does match @type.  If there is no message matching @type on
the bus, all messages will be discarded.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to pop
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> message types to take into account
</parameter_description>
</parameter>
</parameters>
<return> the next #GstMessage matching @type that is on
the bus, or NULL if the bus is empty or there is no message matching
@type. The message is taken from the bus and needs to be unreffed with
gst_message_unref() after usage.

MT safe.

</return>
</function>

<function name="gst_bus_post">
<description>
Post a message on the given bus. Ownership of the message
is taken by the bus.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to post on
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the #GstMessage to post
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the message could be posted, FALSE if the bus is flushing.

MT safe.
</return>
</function>

<function name="gst_bus_remove_signal_watch">
<description>
Removes a signal watch previously added with gst_bus_add_signal_watch().

MT safe.

</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus you previously added a signal watch to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bus_set_flushing">
<description>
If @flushing, flush out and unref any messages queued in the bus. Releases
references to the message origin objects. Will flush future messages until
gst_bus_set_flushing() sets @flushing to #FALSE.

MT safe.

</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus
</parameter_description>
</parameter>
<parameter name="flushing">
<parameter_description> whether or not to flush the bus
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bus_set_sync_handler">
<description>
Sets the synchronous handler on the bus. The function will be called
every time a new message is posted on the bus. Note that the function
will be called in the same thread context as the posting object. This
function is usually only called by the creator of the bus. Applications
should handle messages asynchronously using the gst_bus watch and poll
functions.

You cannot replace an existing sync_handler. You can pass NULL to this
function, which will clear the existing handler.

</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to install the handler on
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The handler function to install
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data that will be sent to the handler function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_bus_sync_signal_handler">
<description>
A helper GstBusSyncHandler that can be used to convert all synchronous
messages into signals.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the #GstMessage received
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return> GST_BUS_PASS
</return>
</function>

<function name="gst_bus_timed_pop">
<description>
Get a message from the bus, waiting up to the specified timeout.

If @timeout is 0, this function behaves like gst_bus_pop(). If @timeout is
#GST_CLOCK_TIME_NONE, this function will block forever until a message was
posted on the bus.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to pop
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout
</parameter_description>
</parameter>
</parameters>
<return> the #GstMessage that is on the bus after the
specified timeout or NULL if the bus is empty after the timeout expired.
The message is taken from the bus and needs to be unreffed with
gst_message_unref() after usage.

MT safe.

</return>
</function>

<function name="gst_bus_timed_pop_filtered">
<description>
Get a message from the bus whose type matches the message type mask @types,
waiting up to the specified timeout (and discarding any messages that do not
match the mask provided).

If @timeout is 0, this function behaves like gst_bus_pop_filtered(). If
@timeout is #GST_CLOCK_TIME_NONE, this function will block forever until a
matching message was posted on the bus.


</description>
<parameters>
<parameter name="bus">
<parameter_description> a #GstBus to pop from
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout in nanoseconds, or GST_CLOCK_TIME_NONE to wait forever
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> message types to take into account, GST_MESSAGE_ANY for any type
</parameter_description>
</parameter>
</parameters>
<return> a #GstMessage matching the filter in @types,
or NULL if no matching message was found on the bus until the timeout
expired. The message is taken from the bus and needs to be unreffed
with gst_message_unref() after usage.

MT safe.

</return>
</function>

<function name="gst_byte_reader_dup_data">
<description>
Free-function: g_free


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size in bytes
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> address of a
#guint8 pointer variable in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_dup_string_utf16">
<description>
Free-function: g_free


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> address of a
#guint16 pointer varieble in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be read, %FALSE otherwise. The
string put into @str must be freed with g_free() when no longer needed.

</return>
</function>

<function name="gst_byte_reader_dup_string_utf32">
<description>
Free-function: g_free


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> address of a
#guint32 pointer varieble in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be read, %FALSE otherwise. The
string put into @str must be freed with g_free() when no longer needed.

</return>
</function>

<function name="gst_byte_reader_dup_string_utf8">
<description>
Free-function: g_free

FIXME:Reads (copies) a NUL-terminated string in the #GstByteReader instance,
advancing the current position to the byte after the string. This will work
for any NUL-terminated string with a character width of 8 bits, so ASCII,
UTF-8, ISO-8859-N etc. No input checking for valid UTF-8 is done.

This function will fail if no NUL-terminator was found in in the data.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> address of a
#gchar pointer varieble in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be read into @str, %FALSE otherwise. The
string put into @str must be freed with g_free() when no longer needed.

</return>
</function>

<function name="gst_byte_reader_free">
<description>
Frees a #GstByteReader instance, which was previously allocated by
gst_byte_reader_new() or gst_byte_reader_new_from_buffer().


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_reader_get_data">
<description>
Returns a constant pointer to the current data
position if at least @size bytes are left and
updates the current position.



</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size in bytes
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> address of a
#guint8 pointer variable in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_float32_be">
<description>
Read a 32 bit big endian floating point value into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gfloat to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_float32_le">
<description>
Read a 32 bit little endian floating point value into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gfloat to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_float64_be">
<description>
Read a 64 bit big endian floating point value into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gdouble to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_float64_le">
<description>
Read a 64 bit little endian floating point value into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gdouble to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int16_be">
<description>
Read a signed 16 bit big endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint16 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int16_le">
<description>
Read a signed 16 bit little endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint16 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int24_be">
<description>
Read a signed 24 bit big endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int24_le">
<description>
Read a signed 24 bit little endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int32_be">
<description>
Read a signed 32 bit big endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int32_le">
<description>
Read a signed 32 bit little endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int64_be">
<description>
Read a signed 64 bit big endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint64 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int64_le">
<description>
Read a signed 64 bit little endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint64 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_int8">
<description>
Read a signed 8 bit integer into @val and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint8 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_pos">
<description>
Returns the current position of a #GstByteReader instance in bytes.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
</parameters>
<return> The current position of @reader in bytes.

</return>
</function>

<function name="gst_byte_reader_get_remaining">
<description>
Returns the remaining number of bytes of a #GstByteReader instance.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
</parameters>
<return> The remaining number of bytes of @reader instance.

</return>
</function>

<function name="gst_byte_reader_get_size">
<description>
Returns the total number of bytes of a #GstByteReader instance.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
</parameters>
<return> The total number of bytes of @reader instance.

</return>
</function>

<function name="gst_byte_reader_get_string_utf8">
<description>
Returns a constant pointer to the current data position if there is
a NUL-terminated string in the data (this could be just a NUL terminator),
advancing the current position to the byte after the string. This will work
for any NUL-terminated string with a character width of 8 bits, so ASCII,
UTF-8, ISO-8859-N etc.

No input checking for valid UTF-8 is done.

This function will fail if no NUL-terminator was found in in the data.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> address of a
#gchar pointer varieble in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be found, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint16_be">
<description>
Read an unsigned 16 bit big endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint16 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint16_le">
<description>
Read an unsigned 16 bit little endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint16 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint24_be">
<description>
Read an unsigned 24 bit big endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint24_le">
<description>
Read an unsigned 24 bit little endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint32_be">
<description>
Read an unsigned 32 bit big endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint32_le">
<description>
Read an unsigned 32 bit little endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint64_be">
<description>
Read an unsigned 64 bit big endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint64 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint64_le">
<description>
Read an unsigned 64 bit little endian integer into @val
and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint64 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_get_uint8">
<description>
Read an unsigned 8 bit integer into @val and update the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint8 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_init">
<description>
Initializes a #GstByteReader instance to read from @data. This function
can be called on already initialized instances.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data from which
the #GstByteReader should read
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size of @data in bytes
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_reader_init_from_buffer">
<description>
Initializes a #GstByteReader instance to read from @buffer. This function
can be called on already initialized instances.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> Buffer from which the #GstByteReader should read
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_reader_masked_scan_uint32">
<description>
Scan for pattern @pattern with applied mask @mask in the byte reader data,
starting from offset @offset relative to the current position.

The bytes in @pattern and @mask are interpreted left-to-right, regardless
of endianness.  All four bytes of the pattern must be present in the
byte reader data for it to match, even if the first or last bytes are masked
out.

It is an error to call this function without making sure that there is
enough data (offset+size bytes) in the byte reader.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> mask to apply to data before matching against @pattern
</parameter_description>
</parameter>
<parameter name="pattern">
<parameter_description> pattern to match (after mask is applied)
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset from which to start scanning, relative to the current
position
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> number of bytes to scan from offset
</parameter_description>
</parameter>
</parameters>
<return> offset of the first match, or -1 if no match was found.

Example:
&lt;programlisting&gt;
// Assume the reader contains 0x00 0x01 0x02 ... 0xfe 0xff

gst_byte_reader_masked_scan_uint32 (reader, 0xffffffff, 0x00010203, 0, 256);
// -&gt; returns 0
gst_byte_reader_masked_scan_uint32 (reader, 0xffffffff, 0x00010203, 1, 255);
// -&gt; returns -1
gst_byte_reader_masked_scan_uint32 (reader, 0xffffffff, 0x01020304, 1, 255);
// -&gt; returns 1
gst_byte_reader_masked_scan_uint32 (reader, 0xffff, 0x0001, 0, 256);
// -&gt; returns -1
gst_byte_reader_masked_scan_uint32 (reader, 0xffff, 0x0203, 0, 256);
// -&gt; returns 0
gst_byte_reader_masked_scan_uint32 (reader, 0xffff0000, 0x02030000, 0, 256);
// -&gt; returns 2
gst_byte_reader_masked_scan_uint32 (reader, 0xffff0000, 0x02030000, 0, 4);
// -&gt; returns -1
&lt;/programlisting&gt;

</return>
</function>

<function name="gst_byte_reader_new">
<description>
Create a new #GstByteReader instance, which will read from @data.

Free-function: gst_byte_reader_free


</description>
<parameters>
<parameter name="data">
<parameter_description> data from which the
#GstByteReader should read
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size of @data in bytes
</parameter_description>
</parameter>
</parameters>
<return> a new #GstByteReader instance

</return>
</function>

<function name="gst_byte_reader_new_from_buffer">
<description>
Create a new #GstByteReader instance, which will read from the
#GstBuffer @buffer.

Free-function: gst_byte_reader_free


</description>
<parameters>
<parameter name="buffer">
<parameter_description> Buffer from which the #GstByteReader should read
</parameter_description>
</parameter>
</parameters>
<return> a new #GstByteReader instance

</return>
</function>

<function name="gst_byte_reader_peek_data">
<description>
Returns a constant pointer to the current data
position if at least @size bytes are left and
keeps the current position.



</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size in bytes
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> address of a
#guint8 pointer variable in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_float32_be">
<description>
Read a 32 bit big endian floating point value into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gfloat to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_float32_le">
<description>
Read a 32 bit little endian floating point value into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gfloat to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_float64_be">
<description>
Read a 64 bit big endian floating point value into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gdouble to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_float64_le">
<description>
Read a 64 bit little endian floating point value into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gdouble to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int16_be">
<description>
Read a signed 16 bit big endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint16 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int16_le">
<description>
Read a signed 16 bit little endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint16 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int24_be">
<description>
Read a signed 24 bit big endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int24_le">
<description>
Read a signed 24 bit little endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int32_be">
<description>
Read a signed 32 bit big endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int32_le">
<description>
Read a signed 32 bit little endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int64_be">
<description>
Read a signed 64 bit big endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint64 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int64_le">
<description>
Read a signed 64 bit little endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint64 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_int8">
<description>
Read a signed 8 bit integer into @val but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #gint8 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_string">
<description>
Returns a constant pointer to the current data position if there is
a NUL-terminated string in the data (this could be just a NUL terminator).
The current position will be maintained. This will work for any
NUL-terminated string with a character width of 8 bits, so ASCII,
UTF-8, ISO-8859-N etc.

This function will fail if no NUL-terminator was found in in the data.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> address of a
#gchar pointer varieble in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be skipped, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_string_utf8">
<description>
Returns a constant pointer to the current data position if there is
a NUL-terminated string in the data (this could be just a NUL terminator).
The current position will be maintained. This will work for any
NUL-terminated string with a character width of 8 bits, so ASCII,
UTF-8, ISO-8859-N etc.

No input checking for valid UTF-8 is done.

This function will fail if no NUL-terminator was found in in the data.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> address of a
#gchar pointer varieble in which to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be skipped, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint16_be">
<description>
Read an unsigned 16 bit big endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint16 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint16_le">
<description>
Read an unsigned 16 bit little endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint16 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint24_be">
<description>
Read an unsigned 24 bit big endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint24_le">
<description>
Read an unsigned 24 bit little endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint32_be">
<description>
Read an unsigned 32 bit big endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint32_le">
<description>
Read an unsigned 32 bit little endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint32 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint64_be">
<description>
Read an unsigned 64 bit big endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint64 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint64_le">
<description>
Read an unsigned 64 bit little endian integer into @val
but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint64 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_peek_uint8">
<description>
Read an unsigned 8 bit integer into @val but keep the current position.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Pointer to a #guint8 to store the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_set_pos">
<description>
Sets the new position of a #GstByteReader instance to @pos in bytes.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> The new position in bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the position could be set successfully, %FALSE
otherwise.

</return>
</function>

<function name="gst_byte_reader_skip">
<description>
Skips @nbytes bytes of the #GstByteReader instance.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
<parameter name="nbytes">
<parameter_description> the number of bytes to skip
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @nbytes bytes could be skipped, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_skip_string">
<description>
Skips a NUL-terminated string in the #GstByteReader instance, advancing
the current position to the byte after the string. This will work for
any NUL-terminated string with a character width of 8 bits, so ASCII,
UTF-8, ISO-8859-N etc.

This function will fail if no NUL-terminator was found in in the data.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be skipped, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_skip_string_utf16">
<description>
Skips a NUL-terminated UTF-16 string in the #GstByteReader instance,
advancing the current position to the byte after the string.

No input checking for valid UTF-16 is done.

This function will fail if no NUL-terminator was found in in the data.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be skipped, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_skip_string_utf32">
<description>
Skips a NUL-terminated UTF-32 string in the #GstByteReader instance,
advancing the current position to the byte after the string.

No input checking for valid UTF-32 is done.

This function will fail if no NUL-terminator was found in in the data.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be skipped, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_reader_skip_string_utf8">
<description>
Skips a NUL-terminated string in the #GstByteReader instance, advancing
the current position to the byte after the string. This will work for
any NUL-terminated string with a character width of 8 bits, so ASCII,
UTF-8, ISO-8859-N etc. No input checking for valid UTF-8 is done.

This function will fail if no NUL-terminator was found in in the data.


</description>
<parameters>
<parameter name="reader">
<parameter_description> a #GstByteReader instance
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a string could be skipped, %FALSE otherwise.

</return>
</function>

<function name="gst_byte_writer_ensure_free_space">
<description>
Checks if enough free space from the current write cursor is
available and reallocates if necessary.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Number of bytes that should be available
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if at least @size bytes are still available

</return>
</function>

<function name="gst_byte_writer_fill">
<description>
Writes @size bytes containing @value to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> Value to be writen
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Number of bytes to be writen
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_free">
<description>
Frees @writer and all memory allocated by it.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_writer_free_and_get_buffer">
<description>
Frees @writer and all memory allocated by it except
the current data, which is returned as #GstBuffer.

Free-function: gst_buffer_unref


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
</parameters>
<return> the current data as buffer. gst_buffer_unref()
after usage.

</return>
</function>

<function name="gst_byte_writer_free_and_get_data">
<description>
Frees @writer and all memory allocated by it except
the current data, which is returned.

Free-function: g_free


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
</parameters>
<return> the current data. g_free() after usage.

</return>
</function>

<function name="gst_byte_writer_get_remaining">
<description>
Returns the remaining size of data that can still be written. If
-1 is returned the remaining size is only limited by system resources.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
</parameters>
<return> the remaining size of data that can still be written

</return>
</function>

<function name="gst_byte_writer_init">
<description>
Initializes @writer to an empty instance


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_writer_init_with_buffer">
<description>
Initializes @writer with the given
buffer. If @initialized is %TRUE it is possible to
read the complete buffer from the #GstByteWriter from the beginning.

&lt;note&gt;@buffer must be writable&lt;/note&gt;


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> Buffer used for writing
</parameter_description>
</parameter>
<parameter name="initialized">
<parameter_description> If %TRUE the complete data can be read from the beginning
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_writer_init_with_data">
<description>
Initializes @writer with the given
memory area. If @initialized is %TRUE it is possible to
read @size bytes from the #GstByteWriter from the beginning.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Memory
area for writing
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size of @data in bytes
</parameter_description>
</parameter>
<parameter name="initialized">
<parameter_description> If %TRUE the complete data can be read from the beginning
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_writer_init_with_size">
<description>
Initializes @writer with the given initial data size.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Initial size of data
</parameter_description>
</parameter>
<parameter name="fixed">
<parameter_description> If %TRUE the data can't be reallocated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_writer_new">
<description>
Creates a new, empty #GstByteWriter instance

Free-function: gst_byte_writer_free


</description>
<parameters>
</parameters>
<return> a new, empty #GstByteWriter instance

</return>
</function>

<function name="gst_byte_writer_new_with_buffer">
<description>
Creates a new #GstByteWriter instance with the given
buffer. If @initialized is %TRUE it is possible to
read the complete buffer from the #GstByteWriter from the beginning.

&lt;note&gt;@buffer must be writable&lt;/note&gt;

Free-function: gst_byte_writer_free


</description>
<parameters>
<parameter name="buffer">
<parameter_description> Buffer used for writing
</parameter_description>
</parameter>
<parameter name="initialized">
<parameter_description> If %TRUE the complete data can be read from the beginning
</parameter_description>
</parameter>
</parameters>
<return> a new #GstByteWriter instance

</return>
</function>

<function name="gst_byte_writer_new_with_data">
<description>
Creates a new #GstByteWriter instance with the given
memory area. If @initialized is %TRUE it is possible to
read @size bytes from the #GstByteWriter from the beginning.

Free-function: gst_byte_writer_free


</description>
<parameters>
<parameter name="data">
<parameter_description> Memory area for writing
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size of @data in bytes
</parameter_description>
</parameter>
<parameter name="initialized">
<parameter_description> If %TRUE the complete data can be read from the beginning
</parameter_description>
</parameter>
</parameters>
<return> a new #GstByteWriter instance

</return>
</function>

<function name="gst_byte_writer_new_with_size">
<description>
Creates a new #GstByteWriter instance with the given
initial data size.

Free-function: gst_byte_writer_free


</description>
<parameters>
<parameter name="size">
<parameter_description> Initial size of data
</parameter_description>
</parameter>
<parameter name="fixed">
<parameter_description> If %TRUE the data can't be reallocated
</parameter_description>
</parameter>
</parameters>
<return> a new #GstByteWriter instance

</return>
</function>

<function name="gst_byte_writer_put_data">
<description>
Writes @size bytes of @data to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Data to write
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> Size of @data in bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_float32_be">
<description>
Writes a big endian 32 bit float to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_float32_le">
<description>
Writes a little endian 32 bit float to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_float64_be">
<description>
Writes a big endian 64 bit float to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_float64_le">
<description>
Writes a little endian 64 bit float to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int16_be">
<description>
Writes a signed big endian 16 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int16_le">
<description>
Writes a signed little endian 16 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int24_be">
<description>
Writes a signed big endian 24 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int24_le">
<description>
Writes a signed little endian 24 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int32_be">
<description>
Writes a signed big endian 32 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int32_le">
<description>
Writes a signed little endian 32 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int64_be">
<description>
Writes a signed big endian 64 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int64_le">
<description>
Writes a signed little endian 64 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_int8">
<description>
Writes a signed 8 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_string_utf16">
<description>
Writes a NUL-terminated UTF16 string to @writer (including the terminator).


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> UTF16 string to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_string_utf32">
<description>
Writes a NUL-terminated UTF32 string to @writer (including the terminator).


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> UTF32 string to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_string_utf8">
<description>
Writes a NUL-terminated UTF8 string to @writer (including the terminator).


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> UTF8 string to
write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint16_be">
<description>
Writes a unsigned big endian 16 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint16_le">
<description>
Writes a unsigned little endian 16 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint24_be">
<description>
Writes a unsigned big endian 24 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint24_le">
<description>
Writes a unsigned little endian 24 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint32_be">
<description>
Writes a unsigned big endian 32 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint32_le">
<description>
Writes a unsigned little endian 32 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint64_be">
<description>
Writes a unsigned big endian 64 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint64_le">
<description>
Writes a unsigned little endian 64 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_put_uint8">
<description>
Writes a unsigned 8 bit integer to @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Value to write
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be written

</return>
</function>

<function name="gst_byte_writer_reset">
<description>
Resets @writer and frees the data if it's
owned by @writer.


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_byte_writer_reset_and_get_buffer">
<description>
Resets @writer and returns the current data as buffer.

Free-function: gst_buffer_unref


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
</parameters>
<return> the current data as buffer. gst_buffer_unref()
after usage.

</return>
</function>

<function name="gst_byte_writer_reset_and_get_data">
<description>
Resets @writer and returns the current data.

Free-function: g_free


</description>
<parameters>
<parameter name="writer">
<parameter_description> #GstByteWriter instance
</parameter_description>
</parameter>
</parameters>
<return> the current data. g_free() after usage.

</return>
</function>

<function name="gst_caps_append">
<description>
Appends the structures contained in @caps2 to @caps1. The structures in
@caps2 are not copied -- they are transferred to @caps1, and then @caps2 is
freed. If either caps is ANY, the resulting caps will be ANY.

</description>
<parameters>
<parameter name="caps1">
<parameter_description> the #GstCaps that will be appended to
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> the #GstCaps to append
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_append_structure">
<description>
Appends @structure to @caps.  The structure is not copied; @caps
becomes the owner of @structure.

</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps that will be appended to
</parameter_description>
</parameter>
<parameter name="structure">
<parameter_description> the #GstStructure to append
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_can_intersect">
<description>
Tries intersecting @caps1 and @caps2 and reports whether the result would not
be empty


</description>
<parameters>
<parameter name="caps1">
<parameter_description> a #GstCaps to intersect
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> a #GstCaps to intersect
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if intersection would be not empty

</return>
</function>

<function name="gst_caps_copy">
<description>
Creates a new #GstCaps as a copy of the old @caps. The new caps will have a
refcount of 1, owned by the caller. The structures are copied as well.

Note that this function is the semantic equivalent of a gst_caps_ref()
followed by a gst_caps_make_writable(). If you only want to hold on to a
reference to the data, you should use gst_caps_ref().

When you are finished with the caps, call gst_caps_unref() on it.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to copy
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_copy_nth">
<description>
Creates a new #GstCaps and appends a copy of the nth structure
contained in @caps.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to copy
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth structure to copy
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_do_simplify">
<description>
Modifies the given @caps inplace into a representation that represents the
same set of formats, but in a simpler form.  Component structures that are
identical are merged.  Component structures that have values that can be
merged are also merged.


</description>
<parameters>
<parameter name="caps">
<parameter_description> a #GstCaps to simplify
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if the caps could be simplified
</return>
</function>

<function name="gst_caps_from_string">
<description>
Converts @caps from a string representation.


</description>
<parameters>
<parameter name="string">
<parameter_description> a string to convert to #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GstCaps
</return>
</function>

<function name="gst_caps_get_size">
<description>
Gets the number of structures contained in @caps.


</description>
<parameters>
<parameter name="caps">
<parameter_description> a #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> the number of structures that @caps contains
</return>
</function>

<function name="gst_caps_get_structure">
<description>
Finds the structure in @caps that has the index @index, and
returns it.

WARNING: This function takes a const GstCaps *, but returns a
non-const GstStructure *.  This is for programming convenience --
the caller should be aware that structures inside a constant
#GstCaps should not be modified. However, if you know the caps
are writable, either because you have just copied them or made
them writable with gst_caps_make_writable(), you may modify the
structure returned in the usual way, e.g. with functions like
gst_structure_set().

You do not need to free or unref the structure returned, it
belongs to the #GstCaps.


</description>
<parameters>
<parameter name="caps">
<parameter_description> a #GstCaps
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> the index of the structure
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GstStructure corresponding
to @index
</return>
</function>

<function name="gst_caps_intersect">
<description>
Creates a new #GstCaps that contains all the formats that are common
to both @caps1 and @caps2. Defaults to %GST_CAPS_INTERSECT_ZIG_ZAG mode.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> a #GstCaps to intersect
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> a #GstCaps to intersect
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_intersect_first">
<description>
Creates a new #GstCaps that contains all the formats that are common
to both @caps1 and @caps2.

Unlike @gst_caps_intersect, the returned caps will be ordered in a similar
fashion as @caps1.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> a #GstCaps to intersect
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> a #GstCaps to intersect
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_intersect_full">
<description>
Creates a new #GstCaps that contains all the formats that are common
to both @caps1 and @caps2, the order is defined by the #GstCapsIntersectMode
used.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> a #GstCaps to intersect
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> a #GstCaps to intersect
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> The intersection algorithm/mode to use
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_is_always_compatible">
<description>
A given #GstCaps structure is always compatible with another if
every media format that is in the first is also contained in the
second.  That is, @caps1 is a subset of @caps2.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> the #GstCaps to test
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> the #GstCaps to test
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps1 is a subset of @caps2.
</return>
</function>

<function name="gst_caps_is_any">
<description>
Determines if @caps represents any media format.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to test
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps represents any format.
</return>
</function>

<function name="gst_caps_is_empty">
<description>
Determines if @caps represents no media formats.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to test
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps represents no formats.
</return>
</function>

<function name="gst_caps_is_equal">
<description>
Checks if the given caps represent the same set of caps.
&lt;note&gt;This function does not work reliably if optional properties for caps
are included on one caps and omitted on the other.&lt;/note&gt;

This function deals correctly with passing NULL for any of the caps.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> a #GstCaps
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> another #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> TRUE if both caps are equal.
</return>
</function>

<function name="gst_caps_is_equal_fixed">
<description>
Tests if two #GstCaps are equal.  This function only works on fixed
#GstCaps.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> the #GstCaps to test
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> the #GstCaps to test
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the arguments represent the same format
</return>
</function>

<function name="gst_caps_is_fixed">
<description>
Fixed #GstCaps describe exactly one format, that is, they have exactly
one structure, and each field in the structure describes a fixed type.
Examples of non-fixed types are GST_TYPE_INT_RANGE and GST_TYPE_LIST.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to test
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps is fixed
</return>
</function>

<function name="gst_caps_is_subset">
<description>
Checks if all caps represented by @subset are also represented by @superset.
&lt;note&gt;This function does not work reliably if optional properties for caps
are included on one caps and omitted on the other.&lt;/note&gt;


</description>
<parameters>
<parameter name="subset">
<parameter_description> a #GstCaps
</parameter_description>
</parameter>
<parameter name="superset">
<parameter_description> a potentially greater #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @subset is a subset of @superset
</return>
</function>

<function name="gst_caps_load_thyself">
<description>
Creates a #GstCaps from its XML serialization.


</description>
<parameters>
<parameter name="parent">
<parameter_description> a XML node
</parameter_description>
</parameter>
</parameters>
<return> a new #GstCaps structure
</return>
</function>

<function name="gst_caps_make_writable">
<description>
Returns a writable copy of @caps.

If there is only one reference count on @caps, the caller must be the owner,
and so this function will return the caps object unchanged. If on the other
hand there is more than one reference on the object, a new caps object will
be returned. The caller's reference on @caps will be removed, and instead the
caller will own a reference to the returned object.

In short, this function unrefs the caps in the argument and refs the caps
that it returns. Don't access the argument after calling this function. See
also: gst_caps_ref().


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to make writable
</parameter_description>
</parameter>
</parameters>
<return> the same #GstCaps object.
</return>
</function>

<function name="gst_caps_merge">
<description>
Appends the structures contained in @caps2 to @caps1 if they are not yet
expressed by @caps1. The structures in @caps2 are not copied -- they are
transferred to @caps1, and then @caps2 is freed.
If either caps is ANY, the resulting caps will be ANY.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> the #GstCaps that will take the new entries
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> the #GstCaps to merge in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_merge_structure">
<description>
Appends @structure to @caps if its not already expressed by @caps.  The
structure is not copied; @caps becomes the owner of @structure.

</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps that will the the new structure
</parameter_description>
</parameter>
<parameter name="structure">
<parameter_description> the #GstStructure to merge
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_new_any">
<description>
Creates a new #GstCaps that indicates that it is compatible with
any media format.


</description>
<parameters>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_new_empty">
<description>
Creates a new #GstCaps that is empty.  That is, the returned
#GstCaps contains no media formats.
Caller is responsible for unreffing the returned caps.


</description>
<parameters>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_new_full">
<description>
Creates a new #GstCaps and adds all the structures listed as
arguments.  The list must be NULL-terminated.  The structures
are not copied; the returned #GstCaps owns the structures.


</description>
<parameters>
<parameter name="struct1">
<parameter_description> the first structure to add
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> additional structures to add
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_new_full_valist">
<description>
Creates a new #GstCaps and adds all the structures listed as
arguments.  The list must be NULL-terminated.  The structures
are not copied; the returned #GstCaps owns the structures.


</description>
<parameters>
<parameter name="structure">
<parameter_description> the first structure to add
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> additional structures to add
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_new_simple">
<description>
Creates a new #GstCaps that contains one #GstStructure.  The
structure is defined by the arguments, which have the same format
as gst_structure_new().
Caller is responsible for unreffing the returned caps.


</description>
<parameters>
<parameter name="media_type">
<parameter_description> the media type of the structure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> first field to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> additional arguments
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_normalize">
<description>
Creates a new #GstCaps that represents the same set of formats as
@caps, but contains no lists.  Each list is expanded into separate
@GstStructures.


</description>
<parameters>
<parameter name="caps">
<parameter_description> a #GstCaps to normalize
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_ref">
<description>
Add a reference to a #GstCaps object.

From this point on, until the caller calls gst_caps_unref() or
gst_caps_make_writable(), it is guaranteed that the caps object will not
change. This means its structures won't change, etc. To use a #GstCaps
object, you must always have a refcount on it -- either the one made
implicitly by e.g. gst_caps_new_simple(), or via taking one explicitly with
this function.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to reference
</parameter_description>
</parameter>
</parameters>
<return> the same #GstCaps object.
</return>
</function>

<function name="gst_caps_remove_structure">
<description>
removes the stucture with the given index from the list of structures
contained in @caps.

</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to remove from
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> Index of the structure to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_replace">
<description>
Replaces *caps with @newcaps.  Unrefs the #GstCaps in the location
pointed to by @caps, if applicable, then modifies @caps to point to
@newcaps. An additional ref on @newcaps is taken.

This function does not take any locks so you might want to lock
the object owning @caps pointer.

</description>
<parameters>
<parameter name="caps">
<parameter_description> a pointer to #GstCaps
</parameter_description>
</parameter>
<parameter name="newcaps">
<parameter_description> a #GstCaps to replace *caps
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_save_thyself">
<description>
Serializes a #GstCaps to XML and adds it as a child node of @parent.


</description>
<parameters>
<parameter name="caps">
<parameter_description> a #GstCaps structure
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> a XML parent node
</parameter_description>
</parameter>
</parameters>
<return> a XML node pointer
</return>
</function>

<function name="gst_caps_set_simple">
<description>
Sets fields in a #GstCaps.  The arguments must be passed in the same
manner as gst_structure_set(), and be NULL-terminated.
&lt;note&gt;Prior to GStreamer version 0.10.26, this function failed when
@caps was not simple. If your code needs to work with those versions
of GStreamer, you may only call this function when GST_CAPS_IS_SIMPLE()
is %TRUE for @caps.&lt;/note&gt;

</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to set
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> first field to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> additional parameters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_set_simple_valist">
<description>
Sets fields in a #GstCaps.  The arguments must be passed in the same
manner as gst_structure_set(), and be NULL-terminated.
&lt;note&gt;Prior to GStreamer version 0.10.26, this function failed when
@caps was not simple. If your code needs to work with those versions
of GStreamer, you may only call this function when GST_CAPS_IS_SIMPLE()
is %TRUE for @caps.&lt;/note&gt;

</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to set
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> first field to set
</parameter_description>
</parameter>
<parameter name="varargs">
<parameter_description> additional parameters
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_set_value">
<description>
Sets the given @field on all structures of @caps to the given @value.
This is a convenience function for calling gst_structure_set_value() on
all structures of @caps.


</description>
<parameters>
<parameter name="caps">
<parameter_description> a writable caps
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> name of the field to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value to set the field to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_steal_structure">
<description>
Retrieves the stucture with the given index from the list of structures
contained in @caps. The caller becomes the owner of the returned structure.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to retrieve from
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> Index of the structure to retrieve
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GstStructure corresponding
to @index.

</return>
</function>

<function name="gst_caps_subtract">
<description>
Subtracts the @subtrahend from the @minuend.
&lt;note&gt;This function does not work reliably if optional properties for caps
are included on one caps and omitted on the other.&lt;/note&gt;


</description>
<parameters>
<parameter name="minuend">
<parameter_description> #GstCaps to substract from
</parameter_description>
</parameter>
<parameter name="subtrahend">
<parameter_description> #GstCaps to substract
</parameter_description>
</parameter>
</parameters>
<return> the resulting caps
</return>
</function>

<function name="gst_caps_to_string">
<description>
Converts @caps to a string representation.  This string representation
can be converted back to a #GstCaps by gst_caps_from_string().

For debugging purposes its easier to do something like this:
|[
GST_LOG (&quot;caps are %&quot; GST_PTR_FORMAT, caps);
]|
This prints the caps in human readble form.


</description>
<parameters>
<parameter name="caps">
<parameter_description> a #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string representing @caps.
</return>
</function>

<function name="gst_caps_truncate">
<description>
Destructively discard all but the first structure from @caps. Useful when
fixating. @caps must be writable.

</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to truncate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_caps_union">
<description>
Creates a new #GstCaps that contains all the formats that are in
either @caps1 and @caps2.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> a #GstCaps to union
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> a #GstCaps to union
</parameter_description>
</parameter>
</parameters>
<return> the new #GstCaps
</return>
</function>

<function name="gst_caps_unref">
<description>
Unref a #GstCaps and and free all its structures and the
structures' values when the refcount reaches 0.

</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to unref
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_cdda_base_src_add_track">
<description>
CDDA sources use this function from their start vfunc to announce the
available data and audio tracks to the base source class. The caller
should allocate @track on the stack, the base source will do a shallow
copy of the structure (and take ownership of the taglist if there is one).


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstCddaBaseSrc
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> address of #GstCddaBaseSrcTrack to add
</parameter_description>
</parameter>
</parameters>
<return> FALSE on error, otherwise TRUE.
</return>
</function>

<function name="gst_check_caps_equal">
<description>
Compare two caps with gst_caps_is_equal and fail unless they are
equal.


</description>
<parameters>
<parameter name="caps1">
<parameter_description> first caps to compare
</parameter_description>
</parameter>
<parameter name="caps2">
<parameter_description> second caps to compare
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_check_drop_buffers">
<description>
Unref and remove all buffers that are in the global @buffers GList,
emptying the list.


</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_check_element_push_buffer">
<description>
Create an @element with the factory with the name and push the
@buffer_in to this element. The element should create one buffer
and this will be compared with @buffer_out. We only check the caps
and the data of the buffers. This function unrefs the buffers.


</description>
<parameters>
<parameter name="element_name">
<parameter_description> name of the element that needs to be created
</parameter_description>
</parameter>
<parameter name="buffer_in">
<parameter_description> push this buffer to the element
</parameter_description>
</parameter>
<parameter name="buffer_out">
<parameter_description> compare the result with this buffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_check_element_push_buffer_list">
<description>
Create an @element with the factory with the name and push the buffers in
@buffer_in to this element. The element should create the buffers equal to
the buffers in @buffer_out. We only check the caps, size and the data of the
buffers. This function unrefs the buffers in the two lists.
The last_flow_return parameter indicates the expected flow return value from
pushing the final buffer in the list.
This can be used to set up a test which pushes some buffers and then an
invalid buffer, when the final buffer is expected to fail, for example.


</description>
<parameters>
<parameter name="element_name">
<parameter_description> name of the element that needs to be created
</parameter_description>
</parameter>
<parameter name="buffer_in">
<parameter_description> a list of buffers that needs to be puched to the element
</parameter_description>
</parameter>
<parameter name="buffer_out">
<parameter_description> a list of buffers that we expect from the element
</parameter_description>
</parameter>
<parameter name="last_flow_return">
<parameter_description> the last buffer push needs to give this GstFlowReturn
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_child_proxy_child_added">
<description>
Emits the &quot;child-added&quot; signal.

</description>
<parameters>
<parameter name="object">
<parameter_description> the parent object
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the newly added child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_child_proxy_child_removed">
<description>
Emits the &quot;child-removed&quot; signal.

</description>
<parameters>
<parameter name="object">
<parameter_description> the parent object
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> the removed child
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_child_proxy_get">
<description>
Gets properties of the parent object and its children.

</description>
<parameters>
<parameter name="object">
<parameter_description> the parent object
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of the first property to get
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> return location for the first property, followed optionally by more name/return location pairs, followed by NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_child_proxy_get_child_by_index">
<description>
Fetches a child by its number.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the parent object to get the child from
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> the childs position in the child list
</parameter_description>
</parameter>
</parameters>
<return> the child object or %NULL if not found (index
too high). Unref after usage.

MT safe.
</return>
</function>

<function name="gst_child_proxy_get_child_by_name">
<description>
Looks up a child element by the given name.

Implementors can use #GstObject together with gst_object_get_name()


</description>
<parameters>
<parameter name="parent">
<parameter_description> the parent object to get the child from
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the childs name
</parameter_description>
</parameter>
</parameters>
<return> the child object or %NULL if not found. Unref
after usage.

MT safe.
</return>
</function>

<function name="gst_child_proxy_get_children_count">
<description>
Gets the number of child objects this parent contains.


</description>
<parameters>
<parameter name="parent">
<parameter_description> the parent object
</parameter_description>
</parameter>
</parameters>
<return> the number of child objects

MT safe.
</return>
</function>

<function name="gst_child_proxy_get_property">
<description>
Gets a single property using the GstChildProxy mechanism.
You are responsible for for freeing it by calling g_value_unset()

</description>
<parameters>
<parameter name="object">
<parameter_description> object to query
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the property
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue that should take the result.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_child_proxy_get_valist">
<description>
Gets properties of the parent object and its children.

</description>
<parameters>
<parameter name="object">
<parameter_description> the object to query
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of the first property to get
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> return location for the first property, followed optionally by more name/return location pairs, followed by NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_child_proxy_lookup">
<description>
Looks up which object and #GParamSpec would be effected by the given @name.


</description>
<parameters>
<parameter name="object">
<parameter_description> object to lookup the property in
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the property to look up
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> pointer to a #GstObject that
takes the real object to set property on
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> pointer to take the #GParamSpec
describing the property
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @target and @pspec could be found. FALSE otherwise. In that
case the values for @pspec and @target are not modified. Unref @target after
usage.

MT safe.
</return>
</function>

<function name="gst_child_proxy_set">
<description>
Sets properties of the parent object and its children.

</description>
<parameters>
<parameter name="object">
<parameter_description> the parent object
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of the first property to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> value for the first property, followed optionally by more name/value pairs, followed by NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_child_proxy_set_property">
<description>
Sets a single property using the GstChildProxy mechanism.

</description>
<parameters>
<parameter name="object">
<parameter_description> the parent object
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the property to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new #GValue for the property
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_child_proxy_set_valist">
<description>
Sets properties of the parent object and its children.

</description>
<parameters>
<parameter name="object">
<parameter_description> the parent object
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> name of the first property to set
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> value for the first property, followed optionally by more name/value pairs, followed by NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_class_signal_connect">
<description>
Connect to a class signal.


</description>
<parameters>
<parameter name="klass">
<parameter_description> a #GstObjectClass to attach the signal to
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the signal to attach to
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the signal function
</parameter_description>
</parameter>
<parameter name="func_data">
<parameter_description> a pointer to user data
</parameter_description>
</parameter>
</parameters>
<return> the signal id.
</return>
</function>

<function name="gst_class_signal_emit_by_name">
<description>
emits the named class signal.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject that emits the signal
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the signal to emit
</parameter_description>
</parameter>
<parameter name="self">
<parameter_description> data for the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_clock_add_observation">
<description>
The time @master of the master clock and the time @slave of the slave
clock are added to the list of observations. If enough observations
are available, a linear regression algorithm is run on the
observations and @clock is recalibrated.

If this functions returns %TRUE, @r_squared will contain the 
correlation coefficient of the interpolation. A value of 1.0
means a perfect regression was performed. This value can
be used to control the sampling frequency of the master and slave
clocks.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock 
</parameter_description>
</parameter>
<parameter name="slave">
<parameter_description> a time on the slave
</parameter_description>
</parameter>
<parameter name="master">
<parameter_description> a time on the master
</parameter_description>
</parameter>
<parameter name="r_squared">
<parameter_description> a pointer to hold the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if enough observations were added to run the 
regression algorithm.

MT safe.
</return>
</function>

<function name="gst_clock_adjust_unlocked">
<description>
Converts the given @internal clock time to the external time, adjusting for the
rate and reference time set with gst_clock_set_calibration() and making sure
that the returned time is increasing. This function should be called with the
clock's OBJECT_LOCK held and is mainly used by clock subclasses.

This function is the reverse of gst_clock_unadjust_unlocked().


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock to use
</parameter_description>
</parameter>
<parameter name="internal">
<parameter_description> a clock time
</parameter_description>
</parameter>
</parameters>
<return> the converted time of the clock.
</return>
</function>

<function name="gst_clock_get_calibration">
<description>
Gets the internal rate and reference time of @clock. See
gst_clock_set_calibration() for more information.

@internal, @external, @rate_num, and @rate_denom can be left %NULL if the
caller is not interested in the values.

MT safe.

</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock 
</parameter_description>
</parameter>
<parameter name="internal">
<parameter_description> a location to store the internal time
</parameter_description>
</parameter>
<parameter name="external">
<parameter_description> a location to store the external time
</parameter_description>
</parameter>
<parameter name="rate_num">
<parameter_description> a location to store the rate numerator
</parameter_description>
</parameter>
<parameter name="rate_denom">
<parameter_description> a location to store the rate denominator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_clock_get_internal_time">
<description>
Gets the current internal time of the given clock. The time is returned
unadjusted for the offset and the rate.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock to query
</parameter_description>
</parameter>
</parameters>
<return> the internal time of the clock. Or GST_CLOCK_TIME_NONE when
given invalid input.

MT safe.
</return>
</function>

<function name="gst_clock_get_master">
<description>
Get the master clock that @clock is slaved to or %NULL when the clock is
not slaved to any master clock.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock 
</parameter_description>
</parameter>
</parameters>
<return> a master #GstClock or %NULL when this clock is
not slaved to a master clock. Unref after usage.

MT safe.
</return>
</function>

<function name="gst_clock_get_resolution">
<description>
Get the accuracy of the clock. The accuracy of the clock is the granularity
of the values returned by gst_clock_get_time().


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock
</parameter_description>
</parameter>
</parameters>
<return> the resolution of the clock in units of #GstClockTime.

MT safe.
</return>
</function>

<function name="gst_clock_get_time">
<description>
Gets the current time of the given clock. The time is always
monotonically increasing and adjusted according to the current
offset and rate.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock to query
</parameter_description>
</parameter>
</parameters>
<return> the time of the clock. Or GST_CLOCK_TIME_NONE when
given invalid input.

MT safe.
</return>
</function>

<function name="gst_clock_id_compare_func">
<description>
Compares the two #GstClockID instances. This function can be used
as a GCompareFunc when sorting ids.


</description>
<parameters>
<parameter name="id1">
<parameter_description> A #GstClockID
</parameter_description>
</parameter>
<parameter name="id2">
<parameter_description> A #GstClockID to compare with
</parameter_description>
</parameter>
</parameters>
<return> negative value if a &lt; b; zero if a = b; positive value if a &gt; b

MT safe.
</return>
</function>

<function name="gst_clock_id_get_time">
<description>
Get the time of the clock ID


</description>
<parameters>
<parameter name="id">
<parameter_description> The #GstClockID to query
</parameter_description>
</parameter>
</parameters>
<return> the time of the given clock id.

MT safe.
</return>
</function>

<function name="gst_clock_id_ref">
<description>
Increase the refcount of given @id.


</description>
<parameters>
<parameter name="id">
<parameter_description> The #GstClockID to ref
</parameter_description>
</parameter>
</parameters>
<return> The same #GstClockID with increased refcount.

MT safe.
</return>
</function>

<function name="gst_clock_id_unref">
<description>
Unref given @id. When the refcount reaches 0 the
#GstClockID will be freed.

MT safe.

</description>
<parameters>
<parameter name="id">
<parameter_description> The #GstClockID to unref
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_clock_id_unschedule">
<description>
Cancel an outstanding request with @id. This can either
be an outstanding async notification or a pending sync notification.
After this call, @id cannot be used anymore to receive sync or
async notifications, you need to create a new #GstClockID.

MT safe.

</description>
<parameters>
<parameter name="id">
<parameter_description> The id to unschedule
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_clock_id_wait">
<description>
Perform a blocking wait on @id. 
@id should have been created with gst_clock_new_single_shot_id()
or gst_clock_new_periodic_id() and should not have been unscheduled
with a call to gst_clock_id_unschedule(). 

If the @jitter argument is not %NULL and this function returns #GST_CLOCK_OK
or #GST_CLOCK_EARLY, it will contain the difference
against the clock and the time of @id when this method was
called. 
Positive values indicate how late @id was relative to the clock
(in which case this function will return #GST_CLOCK_EARLY). 
Negative values indicate how much time was spent waiting on the clock 
before this function returned.


</description>
<parameters>
<parameter name="id">
<parameter_description> The #GstClockID to wait on
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> a pointer that will contain the jitter,
can be %NULL.
</parameter_description>
</parameter>
</parameters>
<return> the result of the blocking wait. #GST_CLOCK_EARLY will be returned
if the current clock time is past the time of @id, #GST_CLOCK_OK if 
@id was scheduled in time. #GST_CLOCK_UNSCHEDULED if @id was 
unscheduled with gst_clock_id_unschedule().

MT safe.
</return>
</function>

<function name="gst_clock_id_wait_async">
<description>
Register a callback on the given #GstClockID @id with the given
function and user_data. When passing a #GstClockID with an invalid
time to this function, the callback will be called immediately
with  a time set to GST_CLOCK_TIME_NONE. The callback will
be called when the time of @id has been reached.

The callback @func can be invoked from any thread, either provided by the
core or from a streaming thread. The application should be prepared for this.


</description>
<parameters>
<parameter name="id">
<parameter_description> a #GstClockID to wait on
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The callback function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data passed in the callback
</parameter_description>
</parameter>
</parameters>
<return> the result of the non blocking wait.

MT safe.
</return>
</function>

<function name="gst_clock_id_wait_async_full">
<description>
Register a callback on the given #GstClockID @id with the given
function and user_data. When passing a #GstClockID with an invalid
time to this function, the callback will be called immediately
with  a time set to GST_CLOCK_TIME_NONE. The callback will
be called when the time of @id has been reached.

The callback @func can be invoked from any thread, either provided by the
core or from a streaming thread. The application should be prepared for this.


</description>
<parameters>
<parameter name="id">
<parameter_description> a #GstClockID to wait on
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The callback function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> User data passed in the callback
</parameter_description>
</parameter>
<parameter name="destroy_data">
<parameter_description> #GDestroyNotify for user_data
</parameter_description>
</parameter>
</parameters>
<return> the result of the non blocking wait.

MT safe.

</return>
</function>

<function name="gst_clock_new_periodic_id">
<description>
Get an ID from @clock to trigger a periodic notification.
The periodic notifications will start at time @start_time and
will then be fired with the given @interval. @id should be unreffed
after usage.

Free-function: gst_clock_id_unref


</description>
<parameters>
<parameter name="clock">
<parameter_description> The #GstClockID to get a periodic notification id from
</parameter_description>
</parameter>
<parameter name="start_time">
<parameter_description> the requested start time
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the requested interval
</parameter_description>
</parameter>
</parameters>
<return> a #GstClockID that can be used to request the
time notification.

MT safe.
</return>
</function>

<function name="gst_clock_new_single_shot_id">
<description>
Get a #GstClockID from @clock to trigger a single shot
notification at the requested time. The single shot id should be
unreffed after usage.

Free-function: gst_clock_id_unref


</description>
<parameters>
<parameter name="clock">
<parameter_description> The #GstClockID to get a single shot notification from
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the requested time
</parameter_description>
</parameter>
</parameters>
<return> a #GstClockID that can be used to request the
time notification.

MT safe.
</return>
</function>

<function name="gst_clock_periodic_id_reinit">
<description>
Reinitializes the provided periodic @id to the provided start time and
interval. Does not modify the reference count.



</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> a #GstClockID
</parameter_description>
</parameter>
<parameter name="start_time">
<parameter_description> the requested start time
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> the requested interval
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the GstClockID could be reinitialized to the provided
@time, else %FALSE.

</return>
</function>

<function name="gst_clock_set_calibration">
<description>
Adjusts the rate and time of @clock. A rate of 1/1 is the normal speed of
the clock. Values bigger than 1/1 make the clock go faster.

@internal and @external are calibration parameters that arrange that
gst_clock_get_time() should have been @external at internal time @internal.
This internal time should not be in the future; that is, it should be less
than the value of gst_clock_get_internal_time() when this function is called.

Subsequent calls to gst_clock_get_time() will return clock times computed as
follows:

&lt;programlisting&gt;
time = (internal_time - internal) * rate_num / rate_denom + external
&lt;/programlisting&gt;

This formula is implemented in gst_clock_adjust_unlocked(). Of course, it
tries to do the integer arithmetic as precisely as possible.

Note that gst_clock_get_time() always returns increasing values so when you
move the clock backwards, gst_clock_get_time() will report the previous value
until the clock catches up.

MT safe.

</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock to calibrate
</parameter_description>
</parameter>
<parameter name="internal">
<parameter_description> a reference internal time
</parameter_description>
</parameter>
<parameter name="external">
<parameter_description> a reference external time
</parameter_description>
</parameter>
<parameter name="rate_num">
<parameter_description> the numerator of the rate of the clock relative to its
internal time 
</parameter_description>
</parameter>
<parameter name="rate_denom">
<parameter_description> the denominator of the rate of the clock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_clock_set_master">
<description>
Set @master as the master clock for @clock. @clock will be automatically
calibrated so that gst_clock_get_time() reports the same time as the
master clock.  

A clock provider that slaves its clock to a master can get the current
calibration values with gst_clock_get_calibration().

@master can be %NULL in which case @clock will not be slaved anymore. It will
however keep reporting its time adjusted with the last configured rate 
and time offsets.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock 
</parameter_description>
</parameter>
<parameter name="master">
<parameter_description> a master #GstClock 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the clock is capable of being slaved to a master clock. 
Trying to set a master on a clock without the 
#GST_CLOCK_FLAG_CAN_SET_MASTER flag will make this function return %FALSE.

MT safe.
</return>
</function>

<function name="gst_clock_set_resolution">
<description>
Set the accuracy of the clock. Some clocks have the possibility to operate
with different accuracy at the expense of more resource usage. There is
normally no need to change the default resolution of a clock. The resolution
of a clock can only be changed if the clock has the
#GST_CLOCK_FLAG_CAN_SET_RESOLUTION flag set.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock
</parameter_description>
</parameter>
<parameter name="resolution">
<parameter_description> The resolution to set
</parameter_description>
</parameter>
</parameters>
<return> the new resolution of the clock.
</return>
</function>

<function name="gst_clock_single_shot_id_reinit">
<description>
Reinitializes the provided single shot @id to the provided time. Does not
modify the reference count.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> a #GstClockID
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> The requested time.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the GstClockID could be reinitialized to the provided
@time, else %FALSE.

</return>
</function>

<function name="gst_clock_unadjust_unlocked">
<description>
Converts the given @external clock time to the internal time of @clock,
using the rate and reference time set with gst_clock_set_calibration().
This function should be called with the clock's OBJECT_LOCK held and
is mainly used by clock subclasses.

This function is the reverse of gst_clock_adjust_unlocked().


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock to use
</parameter_description>
</parameter>
<parameter name="external">
<parameter_description> an external clock time
</parameter_description>
</parameter>
</parameters>
<return> the internal time of the clock corresponding to @external.

</return>
</function>

<function name="gst_codec_utils_aac_caps_set_level_and_profile">
<description>
Sets the level and profile on @caps if it can be determined from
@audio_config. See gst_codec_utils_aac_get_level() and
gst_codec_utils_aac_get_profile() for more details on the parameters.
@caps must be audio/mpeg caps with an &quot;mpegversion&quot; field of either 2 or 4.
If mpegversion is 4, the &quot;base-profile&quot; field is also set in @caps.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to which level and profile fields are to be added
</parameter_description>
</parameter>
<parameter name="audio_config">
<parameter_description> a pointer to the AudioSpecificConfig as specified in the
Elementary Stream Descriptor (esds) in ISO/IEC 14496-1 (see
below for a more details).
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of @audio_config in bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the level and profile could be set, %FALSE otherwise.

</return>
</function>

<function name="gst_codec_utils_aac_get_level">
<description>
Determines the level of a stream as defined in ISO/IEC 14496-3. For AAC LC
streams, the constraints from the AAC audio profile are applied. For AAC
Main, LTP, SSR and others, the Main profile is used.

The @audio_config parameter follows the following format, starting from the
most significant bit of the first byte:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
Bit 0:4 contains the AudioObjectType
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Bit 5:8 contains the sample frequency index (if this is 0xf, then the
next 24 bits define the actual sample frequency, and subsequent
fields are appropriately shifted).
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
Bit 9:12 contains the channel configuration
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

&lt;note&gt;
HE-AAC support has not yet been implemented.
&lt;/note&gt;


</description>
<parameters>
<parameter name="audio_config">
<parameter_description> a pointer to the AudioSpecificConfig as specified in the
Elementary Stream Descriptor (esds) in ISO/IEC 14496-1.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of @audio_config in bytes
</parameter_description>
</parameter>
</parameters>
<return> The level as a const string and %NULL if the level could not be
determined.

</return>
</function>

<function name="gst_codec_utils_aac_get_profile">
<description>
Returns the profile of the given AAC stream as a string. The profile is
determined using the AudioObjectType field which is in the first 5 bits of
@audio_config.

&lt;note&gt;
HE-AAC support has not yet been implemented.
&lt;/note&gt;


</description>
<parameters>
<parameter name="audio_config">
<parameter_description> a pointer to the AudioSpecificConfig as specified in the
Elementary Stream Descriptor (esds) in ISO/IEC 14496-1 (see
gst_codec_utils_aac_get_level() for a more details).
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of @audio_config in bytes
</parameter_description>
</parameter>
</parameters>
<return> The profile as a const string and %NULL if the profile could not be
determined.

</return>
</function>

<function name="gst_codec_utils_aac_get_sample_rate_from_index">
<description>
Translates the sample rate index found in AAC headers to the actual sample
rate.


</description>
<parameters>
<parameter name="sr_idx">
<parameter_description> Sample rate index as from the AudioSpecificConfig (MPEG-4
container) or ADTS frame header
</parameter_description>
</parameter>
</parameters>
<return> The sample rate if @sr_idx is valid, 0 otherwise.

</return>
</function>

<function name="gst_codec_utils_h264_caps_set_level_and_profile">
<description>
Sets the level and profile in @caps if it can be determined from @sps. See
gst_codec_utils_h264_get_level() and gst_codec_utils_h264_get_profile()
for more details on the parameters.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to which the level and profile are to be added
</parameter_description>
</parameter>
<parameter name="sps">
<parameter_description> Pointer to the sequence parameter set for the stream.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of the data available in @sps.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the level and profile could be set, %FALSE otherwise.

</return>
</function>

<function name="gst_codec_utils_h264_get_level">
<description>
Converts the level indication (level_idc) in the stream's
sequence parameter set into a string. The SPS is expected to have the
same format as for gst_codec_utils_h264_get_profile().


</description>
<parameters>
<parameter name="sps">
<parameter_description> Pointer to the sequence parameter set for the stream.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of the data available in @sps.
</parameter_description>
</parameter>
</parameters>
<return> The level as a const string, or %NULL if there is an error.

</return>
</function>

<function name="gst_codec_utils_h264_get_profile">
<description>
Converts the profile indication (profile_idc) in the stream's
sequence parameter set into a string. The SPS is expected to have the
following format, as defined in the H.264 specification. The SPS is viewed
as a bitstream here, with bit 0 being the most significant bit of the first
byte.

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;Bit 0:7   - Profile indication&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Bit 8     - constraint_set0_flag&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Bit 9     - constraint_set1_flag&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Bit 10    - constraint_set2_flag&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Bit 11    - constraint_set3_flag&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Bit 12    - constraint_set3_flag&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Bit 13:15 - Reserved&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;Bit 16:24 - Level indication&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;


</description>
<parameters>
<parameter name="sps">
<parameter_description> Pointer to the sequence parameter set for the stream.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of the data available in @sps.
</parameter_description>
</parameter>
</parameters>
<return> The profile as a const string, or %NULL if there is an error.

</return>
</function>

<function name="gst_codec_utils_mpeg4video_caps_set_level_and_profile">
<description>
Sets the level and profile in @caps if it can be determined from
@vis_obj_seq. See gst_codec_utils_mpeg4video_get_level() and
gst_codec_utils_mpeg4video_get_profile() for more details on the
parameters.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to which the level and profile are to be added
</parameter_description>
</parameter>
<parameter name="vis_obj_seq">
<parameter_description> Pointer to the visual object sequence for the stream.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of the data available in @sps.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the level and profile could be set, %FALSE otherwise.

</return>
</function>

<function name="gst_codec_utils_mpeg4video_get_level">
<description>
Converts the level indication in the stream's visual object sequence into
a string. @vis_obj_seq is expected to be the data following the visual
object sequence start code. Only the first byte
(profile_and_level_indication) is used.


</description>
<parameters>
<parameter name="vis_obj_seq">
<parameter_description> Pointer to the visual object sequence for the stream.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of the data available in @sps.
</parameter_description>
</parameter>
</parameters>
<return> The level as a const string, or NULL if there is an error.

</return>
</function>

<function name="gst_codec_utils_mpeg4video_get_profile">
<description>
Converts the profile indication in the stream's visual object sequence into
a string. @vis_obj_seq is expected to be the data following the visual
object sequence start code. Only the first byte
(profile_and_level_indication) is used.


</description>
<parameters>
<parameter name="vis_obj_seq">
<parameter_description> Pointer to the visual object sequence for the stream.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> Length of the data available in @sps.
</parameter_description>
</parameter>
</parameters>
<return> The profile as a const string, or NULL if there is an error.

</return>
</function>

<function name="gst_collect_pads_add_pad">
<description>
Add a pad to the collection of collect pads. The pad has to be
a sinkpad. The refcount of the pad is incremented. Use
gst_collect_pads_remove_pad() to remove the pad from the collection
again.

This function will override the chain and event functions of the pad
along with the element_private data, which is used to store private
information for the collectpads.

You specify a size for the returned #GstCollectData structure
so that you can use it to store additional information.

The pad will be automatically activated in push mode when @pads is
started.

This function calls gst_collect_pads_add_pad_full() passing a value of NULL
for destroy_notify.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the pad to add
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the returned #GstCollectData structure
</parameter_description>
</parameter>
</parameters>
<return> a new #GstCollectData to identify the new pad. Or NULL
if wrong parameters are supplied.
</return>
</function>

<function name="gst_collect_pads_add_pad_full">
<description>
Add a pad to the collection of collect pads. The pad has to be
a sinkpad. The refcount of the pad is incremented. Use
gst_collect_pads_remove_pad() to remove the pad from the collection
again.

You specify a size for the returned #GstCollectData structure
so that you can use it to store additional information.

You can also specify a #GstCollectDataDestroyNotify that will be called
just before the #GstCollectData structure is freed. It is passed the
pointer to the structure and should free any custom memory and resources
allocated for it.

The pad will be automatically activated in push mode when @pads is
started.

MT safe.



</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the pad to add
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the returned #GstCollectData structure
</parameter_description>
</parameter>
<parameter name="destroy_notify">
<parameter_description> function to be called before the returned #GstCollectData
structure is freed
</parameter_description>
</parameter>
</parameters>
<return> a new #GstCollectData to identify the new pad. Or NULL
if wrong parameters are supplied.
</return>
</function>

<function name="gst_collect_pads_available">
<description>
Query how much bytes can be read from each queued buffer. This means
that the result of this call is the maximum number of bytes that can
be read from each of the pads.

This function should be called with @pads LOCK held, such as
in the callback.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to query
</parameter_description>
</parameter>
</parameters>
<return> The maximum number of bytes queued on all pads. This function
returns 0 if a pad has no queued buffer.
</return>
</function>

<function name="gst_collect_pads_collect">
<description>
Collect data on all pads. This function is usually called
from a #GstTask function in an element.

This function is currently not implemented.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
</parameters>
<return> #GstFlowReturn of the operation.
</return>
</function>

<function name="gst_collect_pads_collect_range">
<description>
Collect data with @offset and @length on all pads. This function
is typically called in the getrange function of an element.

This function is currently not implemented.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset to collect
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length to collect
</parameter_description>
</parameter>
</parameters>
<return> #GstFlowReturn of the operation.
</return>
</function>

<function name="gst_collect_pads_flush">
<description>
Flush @size bytes from the pad @data.

This function should be called with @pads LOCK held, such as
in the callback.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to query
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to use
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to flush
</parameter_description>
</parameter>
</parameters>
<return> The number of bytes flushed. This can be less than @size and
is 0 if the pad was end-of-stream.
</return>
</function>

<function name="gst_collect_pads_is_active">
<description>
Check if a pad is active.

This function is currently not implemented.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the pad to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pad is active.
</return>
</function>

<function name="gst_collect_pads_new">
<description>
Create a new instance of #GstCollectPads.

MT safe.


</description>
<parameters>
</parameters>
<return> a new #GstCollectPads, or NULL in case of an error.
</return>
</function>

<function name="gst_collect_pads_peek">
<description>
Peek at the buffer currently queued in @data. This function
should be called with the @pads LOCK held, such as in the callback
handler.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to peek
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to use
</parameter_description>
</parameter>
</parameters>
<return> The buffer in @data or NULL if no buffer is queued.
should unref the buffer after usage.
</return>
</function>

<function name="gst_collect_pads_pop">
<description>
Pop the buffer currently queued in @data. This function
should be called with the @pads LOCK held, such as in the callback
handler.

Free-function: gst_buffer_unref

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to pop
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to use
</parameter_description>
</parameter>
</parameters>
<return> The buffer in @data or NULL if no buffer was
queued. You should unref the buffer after usage.
</return>
</function>

<function name="gst_collect_pads_read">
<description>
Get a pointer in @bytes where @size bytes can be read from the
given pad @data.

This function should be called with @pads LOCK held, such as
in the callback.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to query
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to use
</parameter_description>
</parameter>
<parameter name="bytes">
<parameter_description> a pointer to a byte array
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to read
</parameter_description>
</parameter>
</parameters>
<return> The number of bytes available for consumption in the
memory pointed to by @bytes. This can be less than @size and
is 0 if the pad is end-of-stream.
</return>
</function>

<function name="gst_collect_pads_read_buffer">
<description>
Get a buffer of @size bytes from the given pad @data.

This function should be called with @pads LOCK held, such as in the callback.

Free-function: gst_buffer_unref


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to query
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to use
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to read
</parameter_description>
</parameter>
</parameters>
<return> a #GstBuffer. The size of the buffer can be less
that requested. A return of NULL signals that the pad is end-of-stream.
Unref the buffer with gst_buffer_unref() after use.

MT safe.

</return>
</function>

<function name="gst_collect_pads_remove_pad">
<description>
Remove a pad from the collection of collect pads. This function will also
free the #GstCollectData and all the resources that were allocated with
gst_collect_pads_add_pad().

The pad will be deactivated automatically when @pads is stopped.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the pad to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pad could be removed.
</return>
</function>

<function name="gst_collect_pads_set_clip_function">
<description>
Install a clipping function that is called right after a buffer is received
on a pad managed by @pads. See #GstCollectPadsClipFunction for more info.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
<parameter name="clipfunc">
<parameter_description> clip function to install
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @clip_func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_collect_pads_set_flushing">
<description>
Change the flushing state of all the pads in the collection. No pad
is able to accept anymore data when @flushing is %TRUE. Calling this
function with @flushing %FALSE makes @pads accept data again.

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
<parameter name="flushing">
<parameter_description> desired state of the pads
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_collect_pads_set_function">
<description>
Set the callback function and user data that will be called when
all the pads added to the collection have buffers queued.

MT safe.

</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to set
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_collect_pads_start">
<description>
Starts the processing of data in the collect_pads.

MT safe.

</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_collect_pads_stop">
<description>
Stops the processing of data in the collect_pads. this function
will also unblock any blocking operations.

MT safe.

</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_collect_pads_take_buffer">
<description>
Get a buffer of @size bytes from the given pad @data. Flushes the amount
of read bytes.

This function should be called with @pads LOCK held, such as in the callback.

Free-function: gst_buffer_unref

MT safe.


</description>
<parameters>
<parameter name="pads">
<parameter_description> the collectspads to query
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to use
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to read
</parameter_description>
</parameter>
</parameters>
<return> a #GstBuffer. The size of the buffer can be less
that requested. A return of NULL signals that the pad is end-of-stream.
Unref the buffer after use.

</return>
</function>

<function name="gst_color_balance_get_balance_type">
<description>
Get the #GstColorBalanceType of this implementation.


</description>
<parameters>
<parameter name="balance">
<parameter_description> The #GstColorBalance implementation
</parameter_description>
</parameter>
</parameters>
<return> A the #GstColorBalanceType.

</return>
</function>

<function name="gst_color_balance_get_value">
<description>
Retrieve the current value of the indicated channel, between min_value
and max_value.

See Also: The #GstColorBalanceChannel::min_value and
#GstColorBalanceChannel::max_value members of the
#GstColorBalanceChannel object.


</description>
<parameters>
<parameter name="balance">
<parameter_description> A #GstColorBalance instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A #GstColorBalanceChannel instance
</parameter_description>
</parameter>
</parameters>
<return> The current value of the channel.
</return>
</function>

<function name="gst_color_balance_list_channels">
<description>
Retrieve a list of the available channels.


</description>
<parameters>
<parameter name="balance">
<parameter_description> A #GstColorBalance instance
</parameter_description>
</parameter>
</parameters>
<return> A GList containing pointers to #GstColorBalanceChannel objects.
The list is owned by the #GstColorBalance instance and must not
be freed.
</return>
</function>

<function name="gst_color_balance_set_value">
<description>
Sets the current value of the channel to the passed value, which must
be between min_value and max_value.

See Also: The #GstColorBalanceChannel::min_value and
#GstColorBalanceChannel::max_value members of the
#GstColorBalanceChannel object.

</description>
<parameters>
<parameter name="balance">
<parameter_description> A #GstColorBalance instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A #GstColorBalanceChannel instance
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The new value for the channel.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_color_balance_value_changed">
<description>
A helper function called by implementations of the GstColorBalance
interface. It fires the #GstColorBalance::value-changed signal on the
instance, and the #GstColorBalanceChannel::value-changed signal on the
channel object.

</description>
<parameters>
<parameter name="balance">
<parameter_description> A #GstColorBalance instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A #GstColorBalanceChannel whose value has changed
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The new value of the channel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_consistency_checker_free">
<description>
Frees the allocated data and probe associated with @consist.


</description>
<parameters>
<parameter name="consist">
<parameter_description> The #GstStreamConsistency to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_consistency_checker_new">
<description>
Sets up a data probe on the given pad which will raise assertions if the
data flow is inconsistent.

Currently only works for source pads.


</description>
<parameters>
<parameter name="pad">
<parameter_description> The #GstPad on which the dataflow will be checked.
</parameter_description>
</parameter>
</parameters>
<return> A #GstStreamConsistency structure used to track data flow.

</return>
</function>

<function name="gst_consistency_checker_reset">
<description>
Reset the stream checker's internal variables.


</description>
<parameters>
<parameter name="consist">
<parameter_description> The #GstStreamConsistency to reset.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_control_source_bind">
<description>
Binds a #GstControlSource to a specific property. This must be called only once for a
#GstControlSource.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstControlSource object
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> #GParamSpec for the property for which this #GstControlSource should generate values.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the #GstControlSource was bound correctly, %FALSE otherwise.
</return>
</function>

<function name="gst_control_source_get_value">
<description>
Gets the value for this #GstControlSource at a given timestamp.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstControlSource object
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time for which the value should be returned
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value
</parameter_description>
</parameter>
</parameters>
<return> FALSE if the value couldn't be returned, TRUE otherwise.
</return>
</function>

<function name="gst_control_source_get_value_array">
<description>
Gets an array of values for one element property.

All fields of @value_array must be filled correctly. Especially the
@value_array-&gt;values array must be big enough to keep the requested amount
of values.

The type of the values in the array is the same as the property's type.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstControlSource object
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time that should be processed
</parameter_description>
</parameter>
<parameter name="value_array">
<parameter_description> array to put control-values in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given array could be filled, %FALSE otherwise
</return>
</function>

<function name="gst_controller_get">
<description>
Gets the value for the given controller-handled property at the requested
time.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object which handles the properties
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to get
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time the control-change should be read from
</parameter_description>
</parameter>
</parameters>
<return> the GValue of the property at the given time, or %NULL if the
property isn't handled by the controller
</return>
</function>

<function name="gst_controller_get_all">
<description>
Returns a read-only copy of the list of #GstTimedValue for the given property.
Free the list after done with it.

&lt;note&gt;&lt;para&gt;This doesn't modify the controlled GObject property!&lt;/para&gt;&lt;/note&gt;

Deprecated: Use #GstControlSource, for example #GstInterpolationControlSource
directly.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller to get the list from
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to get the list for
</parameter_description>
</parameter>
</parameters>
<return> a copy of the list, or %NULL if the property isn't handled by the controller
</return>
</function>

<function name="gst_controller_get_control_source">
<description>
Gets the corresponding #GstControlSource for the property. This should be unreferenced
again after use.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property for which the #GstControlSource should be get
</parameter_description>
</parameter>
</parameters>
<return> the #GstControlSource for @property_name or NULL if the property is not
controlled by this controller or no #GstControlSource was assigned yet.

</return>
</function>

<function name="gst_controller_get_value_array">
<description>
Function to be able to get an array of values for one element property.

All fields of @value_array must be filled correctly. Especially the
@value_array-&gt;values array must be big enough to keep the requested amount
of values (as indicated by the nbsamples field).

The type of the values in the array is the same as the property's type.

&lt;note&gt;&lt;para&gt;This doesn't modify the controlled GObject property!&lt;/para&gt;&lt;/note&gt;


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller that handles the values
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time that should be processed
</parameter_description>
</parameter>
<parameter name="value_array">
<parameter_description> array to put control-values in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given array could be filled, %FALSE otherwise
</return>
</function>

<function name="gst_controller_get_value_arrays">
<description>
Function to be able to get an array of values for one or more given element
properties.

All fields of the %GstValueArray in the list must be filled correctly.
Especially the GstValueArray-&gt;values arrays must be big enough to keep
the requested amount of values.

The types of the values in the array are the same as the property's type.

&lt;note&gt;&lt;para&gt;This doesn't modify the controlled GObject properties!&lt;/para&gt;&lt;/note&gt;


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller that handles the values
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time that should be processed
</parameter_description>
</parameter>
<parameter name="value_arrays">
<parameter_description> list to return the control-values in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given array(s) could be filled, %FALSE otherwise
</return>
</function>

<function name="gst_controller_init">
<description>
Initializes the use of the controller library. Suggested to be called right
after gst_init().


</description>
<parameters>
<parameter name="argc">
<parameter_description> pointer to the commandline argument count
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> pointer to the commandline argument values
</parameter_description>
</parameter>
</parameters>
<return> the %TRUE for success.
</return>
</function>

<function name="gst_controller_new">
<description>
Creates a new GstController for the given object's properties


</description>
<parameters>
<parameter name="object">
<parameter_description> the object of which some properties should be controlled
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL terminated list of property names that should be controlled
</parameter_description>
</parameter>
</parameters>
<return> the new controller.
</return>
</function>

<function name="gst_controller_new_list">
<description>
Creates a new GstController for the given object's properties


</description>
<parameters>
<parameter name="object">
<parameter_description> the object of which some properties should be controlled
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> list of property names that should be controlled
</parameter_description>
</parameter>
</parameters>
<return> the new controller.
</return>
</function>

<function name="gst_controller_new_valist">
<description>
Creates a new GstController for the given object's properties


</description>
<parameters>
<parameter name="object">
<parameter_description> the object of which some properties should be controlled
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> %NULL terminated list of property names that should be controlled
</parameter_description>
</parameter>
</parameters>
<return> the new controller.
</return>
</function>

<function name="gst_controller_remove_properties">
<description>
Removes the given object properties from the controller


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object from which some properties should be removed
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL terminated list of property names that should be removed
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if one of the given property isn't handled by the controller, %TRUE otherwise
</return>
</function>

<function name="gst_controller_remove_properties_list">
<description>
Removes the given object properties from the controller


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object from which some properties should be removed
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> #GList of property names that should be removed
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if one of the given property isn't handled by the controller, %TRUE otherwise
</return>
</function>

<function name="gst_controller_remove_properties_valist">
<description>
Removes the given object properties from the controller


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object from which some properties should be removed
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> %NULL terminated list of property names that should be removed
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if one of the given property isn't handled by the controller, %TRUE otherwise
</return>
</function>

<function name="gst_controller_set">
<description>
Set the value of given controller-handled property at a certain time.

Deprecated: Use #GstControlSource, for example #GstInterpolationControlSource
directly.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object which handles the properties
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to set
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time the control-change is schedules for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the control-value
</parameter_description>
</parameter>
</parameters>
<return> FALSE if the values couldn't be set (ex : properties not handled by controller), TRUE otherwise
</return>
</function>

<function name="gst_controller_set_control_source">
<description>
Sets the #GstControlSource for @property_name. If there already was a #GstControlSource
for this property it will be unreferenced.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property for which the #GstControlSource should be set
</parameter_description>
</parameter>
<parameter name="csource">
<parameter_description> the #GstControlSource that should be used for the property
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the given property isn't handled by the controller or the new #GstControlSource
couldn't be bound to the property, %TRUE if everything worked as expected.

</return>
</function>

<function name="gst_controller_set_disabled">
<description>
This function is used to disable all properties of the #GstController
for some time, i.e. gst_controller_sync_values() will do nothing.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstController which should be disabled
</parameter_description>
</parameter>
<parameter name="disabled">
<parameter_description> boolean that specifies whether to disable the controller
or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_controller_set_from_list">
<description>
Sets multiple timed values at once.

Deprecated: Use #GstControlSource, for example #GstInterpolationControlSource
directly.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object which handles the properties
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to set
</parameter_description>
</parameter>
<parameter name="timedvalues">
<parameter_description> a list with #GstTimedValue items
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the values couldn't be set (ex : properties not handled by controller), %TRUE otherwise
</return>
</function>

<function name="gst_controller_set_interpolation_mode">
<description>
Sets the given interpolation mode on the given property.

&lt;note&gt;&lt;para&gt;User interpolation is not yet available and quadratic interpolation
is deprecated and maps to cubic interpolation.&lt;/para&gt;&lt;/note&gt;

Deprecated: Use #GstControlSource, for example #GstInterpolationControlSource
directly.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property for which to change the interpolation
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> interpolation mode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the property is handled by the controller, %FALSE otherwise
</return>
</function>

<function name="gst_controller_set_property_disabled">
<description>
This function is used to disable the #GstController on a property for
some time, i.e. gst_controller_sync_values() will do nothing for the
property.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstController which should be disabled
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> property to disable
</parameter_description>
</parameter>
<parameter name="disabled">
<parameter_description> boolean that specifies whether to disable the controller
or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_controller_suggest_next_sync">
<description>
Returns a suggestion for timestamps where buffers should be split
to get best controller results.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller that handles the values
</parameter_description>
</parameter>
</parameters>
<return> Returns the suggested timestamp or %GST_CLOCK_TIME_NONE
if no control-rate was set.

</return>
</function>

<function name="gst_controller_sync_values">
<description>
Sets the properties of the element, according to the controller that (maybe)
handles them and for the given timestamp.

If this function fails, it is most likely the application developers fault.
Most probably the control sources are not setup correctly.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller that handles the values
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time that should be processed
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the controller values could be applied to the object
properties, %FALSE otherwise
</return>
</function>

<function name="gst_controller_unset">
<description>
Used to remove the value of given controller-handled property at a certain
time.

Deprecated: Use #GstControlSource, for example #GstInterpolationControlSource
directly.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object which handles the properties
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to unset
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time the control-change should be removed from
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the values couldn't be unset (ex : properties not handled by controller), %TRUE otherwise
</return>
</function>

<function name="gst_controller_unset_all">
<description>
Used to remove all time-stamped values of given controller-handled property

Deprecated: Use #GstControlSource, for example #GstInterpolationControlSource
directly.


</description>
<parameters>
<parameter name="self">
<parameter_description> the controller object which handles the properties
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> the name of the property to unset
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the values couldn't be unset (ex : properties not handled
by controller), %TRUE otherwise
</return>
</function>

<function name="gst_data_queue_drop_head">
<description>
Pop and unref the head-most #GstMiniObject with the given #GType.


</description>
<parameters>
<parameter name="queue">
<parameter_description> The #GstDataQueue to drop an item from.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The #GType of the item to drop.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if an element was removed.

</return>
</function>

<function name="gst_data_queue_flush">
<description>
Flushes all the contents of the @queue. Any call to #gst_data_queue_push and
#gst_data_queue_pop will be released.
MT safe.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstDataQueue.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_data_queue_get_level">
<description>
Get the current level of the queue.


</description>
<parameters>
<parameter name="queue">
<parameter_description> The #GstDataQueue
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> the location to store the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_data_queue_is_empty">
<description>
Queries if there are any items in the @queue.
MT safe.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstDataQueue.
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @queue is empty.

</return>
</function>

<function name="gst_data_queue_is_full">
<description>
Queries if @queue is full. This check will be done using the
#GstDataQueueCheckFullFunction registered with @queue.
MT safe.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstDataQueue.
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if @queue is full.

</return>
</function>

<function name="gst_data_queue_limits_changed">
<description>
Inform the queue that the limits for the fullness check have changed and that
any blocking gst_data_queue_push() should be unblocked to recheck the limts.


</description>
<parameters>
<parameter name="queue">
<parameter_description> The #GstDataQueue 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_data_queue_new">
<description>

</description>
<parameters>
<parameter name="checkfull">
<parameter_description> the callback used to tell if the element considers the queue full
or not.
</parameter_description>
</parameter>
<parameter name="checkdata">
<parameter_description> a #gpointer that will be given in the @checkfull callback.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstDataQueue.
</return>
</function>

<function name="gst_data_queue_new_full">
<description>
Creates a new #GstDataQueue. The difference with @gst_data_queue_new is that it will
not emit the 'full' and 'empty' signals, but instead calling directly @fullcallback
or @emptycallback.


</description>
<parameters>
<parameter name="checkfull">
<parameter_description> the callback used to tell if the element considers the queue full
or not.
</parameter_description>
</parameter>
<parameter name="fullcallback">
<parameter_description> the callback which will be called when the queue is considered full.
</parameter_description>
</parameter>
<parameter name="emptycallback">
<parameter_description> the callback which will be called when the queue is considered empty.
</parameter_description>
</parameter>
<parameter name="checkdata">
<parameter_description> a #gpointer that will be given in the @checkfull callback.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstDataQueue.

</return>
</function>

<function name="gst_data_queue_pop">
<description>
Retrieves the first @item available on the @queue. If the queue is currently
empty, the call will block until at least one item is available, OR the
@queue is set to the flushing state.
MT safe.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstDataQueue.
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> pointer to store the returned #GstDataQueueItem.
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if an @item was successfully retrieved from the @queue.

</return>
</function>

<function name="gst_data_queue_push">
<description>
Pushes a #GstDataQueueItem (or a structure that begins with the same fields)
on the @queue. If the @queue is full, the call will block until space is
available, OR the @queue is set to flushing state.
MT safe.

Note that this function has slightly different semantics than gst_pad_push()
and gst_pad_push_event(): this function only takes ownership of @item and
the #GstMiniObject contained in @item if the push was successful. If FALSE
is returned, the caller is responsible for freeing @item and its contents.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstDataQueue.
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> a #GstDataQueueItem.
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if the @item was successfully pushed on the @queue.

</return>
</function>

<function name="gst_data_queue_set_flushing">
<description>
Sets the queue to flushing state if @flushing is #TRUE. If set to flushing
state, any incoming data on the @queue will be discarded. Any call currently
blocking on #gst_data_queue_push or #gst_data_queue_pop will return straight
away with a return value of #FALSE. While the @queue is in flushing state, 
all calls to those two functions will return #FALSE.

MT Safe.


</description>
<parameters>
<parameter name="queue">
<parameter_description> a #GstDataQueue.
</parameter_description>
</parameter>
<parameter name="flushing">
<parameter_description> a #gboolean stating if the queue will be flushing or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_date_time_get_day">
<description>
Returns the day of this #GstDateTime.


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> The day of this #GstDateTime
</return>
</function>

<function name="gst_date_time_get_hour">
<description>
Retrieves the hour of the day represented by @datetime in the gregorian
calendar. The return is in the range of 0 to 23.


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> the hour of the day

</return>
</function>

<function name="gst_date_time_get_microsecond">
<description>
Retrieves the fractional part of the seconds in microseconds represented by
@datetime in the gregorian calendar.


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> the microsecond of the second

</return>
</function>

<function name="gst_date_time_get_minute">
<description>
Retrieves the minute of the hour represented by @datetime in the gregorian
calendar.


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> the minute of the hour

</return>
</function>

<function name="gst_date_time_get_month">
<description>
Returns the month of this #GstDateTime. January is 1, February is 2, etc..


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> The month of this #GstDateTime
</return>
</function>

<function name="gst_date_time_get_second">
<description>
Retrieves the second of the minute represented by @datetime in the gregorian
calendar.


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> the second represented by @datetime

</return>
</function>

<function name="gst_date_time_get_time_zone_offset">
<description>
Retrieves the offset from UTC in hours that the timezone specified
by @datetime represents. Timezones ahead (to the east) of UTC have positive
values, timezones before (to the west) of UTC have negative values.
If @datetime represents UTC time, then the offset is zero.


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> the offset from UTC in hours
</return>
</function>

<function name="gst_date_time_get_year">
<description>
Returns the year of this #GstDateTime


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> The year of this #GstDateTime
</return>
</function>

<function name="gst_date_time_new">
<description>
Creates a new #GstDateTime using the date and times in the gregorian calendar
in the supplied timezone.

@year should be from 1 to 9999, @month should be from 1 to 12, @day from
1 to 31, @hour from 0 to 23, @minutes and @seconds from 0 to 59.

Note that @tzoffset is a float and was chosen so for being able to handle
some fractional timezones, while it still keeps the readability of
represeting it in hours for most timezones.

Free-function: gst_date_time_unref


</description>
<parameters>
<parameter name="tzoffset">
<parameter_description> Offset from UTC in hours.
</parameter_description>
</parameter>
<parameter name="year">
<parameter_description> the gregorian year
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> the gregorian month
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the day of the gregorian month
</parameter_description>
</parameter>
<parameter name="hour">
<parameter_description> the hour of the day
</parameter_description>
</parameter>
<parameter name="minute">
<parameter_description> the minute of the hour
</parameter_description>
</parameter>
<parameter name="seconds">
<parameter_description> the second of the minute
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GstDateTime

</return>
</function>

<function name="gst_date_time_new_from_unix_epoch_local_time">
<description>
Creates a new #GstDateTime using the time since Jan 1, 1970 specified by
@secs. The #GstDateTime is in the local timezone.

Free-function: gst_date_time_unref


</description>
<parameters>
<parameter name="secs">
<parameter_description> seconds from the Unix epoch
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GstDateTime

</return>
</function>

<function name="gst_date_time_new_from_unix_epoch_utc">
<description>
Creates a new #GstDateTime using the time since Jan 1, 1970 specified by
@secs. The #GstDateTime is in the UTC timezone.

Free-function: gst_date_time_unref


</description>
<parameters>
<parameter name="secs">
<parameter_description> seconds from the Unix epoch
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GstDateTime

</return>
</function>

<function name="gst_date_time_new_local_time">
<description>
Creates a new #GstDateTime using the date and times in the gregorian calendar
in the local timezone.

@year should be from 1 to 9999, @month should be from 1 to 12, @day from
1 to 31, @hour from 0 to 23, @minutes and @seconds from 0 to 59.

Free-function: gst_date_time_unref


</description>
<parameters>
<parameter name="year">
<parameter_description> the gregorian year
</parameter_description>
</parameter>
<parameter name="month">
<parameter_description> the gregorian month
</parameter_description>
</parameter>
<parameter name="day">
<parameter_description> the day of the gregorian month
</parameter_description>
</parameter>
<parameter name="hour">
<parameter_description> the hour of the day
</parameter_description>
</parameter>
<parameter name="minute">
<parameter_description> the minute of the hour
</parameter_description>
</parameter>
<parameter name="seconds">
<parameter_description> the second of the minute
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GstDateTime

</return>
</function>

<function name="gst_date_time_new_now_local_time">
<description>
Creates a new #GstDateTime representing the current date and time.

Free-function: gst_date_time_unref


</description>
<parameters>
</parameters>
<return> the newly created #GstDateTime which should
be freed with gst_date_time_unref().

</return>
</function>

<function name="gst_date_time_new_now_utc">
<description>
Creates a new #GstDateTime that represents the current instant at Universal
coordinated time.

Free-function: gst_date_time_unref


</description>
<parameters>
</parameters>
<return> the newly created #GstDateTime which should
be freed with gst_date_time_unref().

</return>
</function>

<function name="gst_date_time_ref">
<description>
Atomically increments the reference count of @datetime by one.


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return> the reference @datetime

</return>
</function>

<function name="gst_date_time_unref">
<description>
Atomically decrements the reference count of @datetime by one.  When the
reference count reaches zero, the structure is freed.


</description>
<parameters>
<parameter name="datetime">
<parameter_description> a #GstDateTime
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_add_log_function">
<description>
Adds the logging function to the list of logging functions.
Be sure to use #G_GNUC_NO_INSTRUMENT on that function, it is needed.

</description>
<parameters>
<parameter name="func">
<parameter_description> the function to use
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_category_free">
<description>
Removes and frees the category and all associated resources.

</description>
<parameters>
<parameter name="category">
<parameter_description> #GstDebugCategory to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_category_get_color">
<description>
Returns the color of a debug category used when printing output in this
category.


</description>
<parameters>
<parameter name="category">
<parameter_description> a #GstDebugCategory to get the color of.
</parameter_description>
</parameter>
</parameters>
<return> the color of the category.
</return>
</function>

<function name="gst_debug_category_get_description">
<description>
Returns the description of a debug category.


</description>
<parameters>
<parameter name="category">
<parameter_description> a #GstDebugCategory to get the description of.
</parameter_description>
</parameter>
</parameters>
<return> the description of the category.
</return>
</function>

<function name="gst_debug_category_get_name">
<description>
Returns the name of a debug category.


</description>
<parameters>
<parameter name="category">
<parameter_description> a #GstDebugCategory to get name of.
</parameter_description>
</parameter>
</parameters>
<return> the name of the category.
</return>
</function>

<function name="gst_debug_category_get_threshold">
<description>
Returns the threshold of a #GstDebugCategory.


</description>
<parameters>
<parameter name="category">
<parameter_description> a #GstDebugCategory to get threshold of.
</parameter_description>
</parameter>
</parameters>
<return> the #GstDebugLevel that is used as threshold.
</return>
</function>

<function name="gst_debug_category_reset_threshold">
<description>
Resets the threshold of the category to the default level. Debug information
will only be output if the threshold is lower or equal to the level of the
debugging message.
Use this function to set the threshold back to where it was after using
gst_debug_category_set_threshold().

</description>
<parameters>
<parameter name="category">
<parameter_description> a #GstDebugCategory to reset threshold of.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_category_set_threshold">
<description>
Sets the threshold of the category to the given level. Debug information will
only be output if the threshold is lower or equal to the level of the
debugging message.
&lt;note&gt;&lt;para&gt;
Do not use this function in production code, because other functions may
change the threshold of categories as side effect. It is however a nice
function to use when debugging (even from gdb).
&lt;/para&gt;&lt;/note&gt;

</description>
<parameters>
<parameter name="category">
<parameter_description> a #GstDebugCategory to set threshold of.
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> the #GstDebugLevel threshold to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_construct_term_color">
<description>
Constructs a string that can be used for getting the desired color in color
terminals.
You need to free the string after use.


</description>
<parameters>
<parameter name="colorinfo">
<parameter_description> the color info
</parameter_description>
</parameter>
</parameters>
<return> a string containing the color
definition
</return>
</function>

<function name="gst_debug_construct_win_color">
<description>
Constructs an integer that can be used for getting the desired color in
windows' terminals (cmd.exe). As there is no mean to underline, we simply
ignore this attribute.

This function returns 0 on non-windows machines.


</description>
<parameters>
<parameter name="colorinfo">
<parameter_description> the color info
</parameter_description>
</parameter>
</parameters>
<return> an integer containing the color definition

</return>
</function>

<function name="gst_debug_get_all_categories">
<description>
Returns a snapshot of a all categories that are currently in use . This list
may change anytime.
The caller has to free the list after use.


</description>
<parameters>
</parameters>
<return> the list of
debug categories
</return>
</function>

<function name="gst_debug_get_default_threshold">
<description>
Returns the default threshold that is used for new categories.


</description>
<parameters>
</parameters>
<return> the default threshold level
</return>
</function>

<function name="gst_debug_is_active">
<description>
Checks if debugging output is activated.


</description>
<parameters>
</parameters>
<return> TRUE, if debugging is activated
</return>
</function>

<function name="gst_debug_is_colored">
<description>
Checks if the debugging output should be colored.


</description>
<parameters>
</parameters>
<return> TRUE, if the debug output should be colored.
</return>
</function>

<function name="gst_debug_level_get_name">
<description>
Get the string representation of a debugging level


</description>
<parameters>
<parameter name="level">
<parameter_description> the level to get the name for
</parameter_description>
</parameter>
</parameters>
<return> the name
</return>
</function>

<function name="gst_debug_log">
<description>
Logs the given message using the currently registered debugging handlers.

</description>
<parameters>
<parameter name="category">
<parameter_description> category to log
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> level of the message is in
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> the file that emitted the message, usually the __FILE__ identifier
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the function that emitted the message
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description> the line from that the message was emitted, usually __LINE__
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> the object this message relates to,
or NULL if none
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a printf style format string
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> optional arguments for the format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_log_default">
<description>
The default logging handler used by GStreamer. Logging functions get called
whenever a macro like GST_DEBUG or similar is used. This function outputs the
message and additional info to stderr (or the log file specified via the
GST_DEBUG_FILE environment variable).

You can add other handlers by using gst_debug_add_log_function().
And you can remove this handler by calling
gst_debug_remove_log_function(gst_debug_log_default);

</description>
<parameters>
<parameter name="category">
<parameter_description> category to log
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> level of the message
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> the file that emitted the message, usually the __FILE__ identifier
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the function that emitted the message
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description> the line from that the message was emitted, usually __LINE__
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the actual message
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> the object this message relates to,
or NULL if none
</parameter_description>
</parameter>
<parameter name="unused">
<parameter_description> an unused variable, reserved for some user_data.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_log_valist">
<description>
Logs the given message using the currently registered debugging handlers.

</description>
<parameters>
<parameter name="category">
<parameter_description> category to log
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> level of the message is in
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> the file that emitted the message, usually the __FILE__ identifier
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the function that emitted the message
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description> the line from that the message was emitted, usually __LINE__
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> the object this message relates to,
or NULL if none
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a printf style format string
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> optional arguments for the format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_message_get">
<description>
Gets the string representation of a #GstDebugMessage. This function is used
in debug handlers to extract the message.


</description>
<parameters>
<parameter name="message">
<parameter_description> a debug message
</parameter_description>
</parameter>
</parameters>
<return> the string representation of a #GstDebugMessage.
</return>
</function>

<function name="gst_debug_print_stack_trace">
<description>
If GST_ENABLE_FUNC_INSTRUMENTATION is defined a stacktrace is available for
gstreamer code, which can be printed with this function.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_debug_remove_log_function">
<description>
Removes all registered instances of the given logging functions.


</description>
<parameters>
<parameter name="func">
<parameter_description> the log function to remove
</parameter_description>
</parameter>
</parameters>
<return> How many instances of the function were removed
</return>
</function>

<function name="gst_debug_remove_log_function_by_data">
<description>
Removes all registered instances of log functions with the given user data.


</description>
<parameters>
<parameter name="data">
<parameter_description> user data of the log function to remove
</parameter_description>
</parameter>
</parameters>
<return> How many instances of the function were removed
</return>
</function>

<function name="gst_debug_set_active">
<description>
If activated, debugging messages are sent to the debugging
handlers.
It makes sense to deactivate it for speed issues.
&lt;note&gt;&lt;para&gt;This function is not threadsafe. It makes sense to only call it
during initialization.&lt;/para&gt;&lt;/note&gt;

</description>
<parameters>
<parameter name="active">
<parameter_description> Whether to use debugging output or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_set_colored">
<description>
Sets or unsets the use of coloured debugging output.

This function may be called before gst_init().

</description>
<parameters>
<parameter name="colored">
<parameter_description> Whether to use colored output or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_set_default_threshold">
<description>
Sets the default threshold to the given level and updates all categories to
use this threshold.

This function may be called before gst_init().

</description>
<parameters>
<parameter name="level">
<parameter_description> level to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_set_threshold_for_name">
<description>
Sets all categories which match the given glob style pattern to the given
level.

</description>
<parameters>
<parameter name="name">
<parameter_description> name of the categories to set
</parameter_description>
</parameter>
<parameter name="level">
<parameter_description> level to set them to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_debug_unset_threshold_for_name">
<description>
Resets all categories with the given name back to the default level.

</description>
<parameters>
<parameter name="name">
<parameter_description> name of the categories to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_default_registry_check_feature_version">
<description>
Checks whether a plugin feature by the given name exists in the
default registry and whether its version is at least the
version required.


</description>
<parameters>
<parameter name="feature_name">
<parameter_description> the name of the feature (e.g. &quot;oggdemux&quot;)
</parameter_description>
</parameter>
<parameter name="min_major">
<parameter_description> the minimum major version number
</parameter_description>
</parameter>
<parameter name="min_minor">
<parameter_description> the minimum minor version number
</parameter_description>
</parameter>
<parameter name="min_micro">
<parameter_description> the minimum micro version number
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if the feature could be found and the version is
the same as the required version or newer, and #FALSE otherwise.
</return>
</function>

<function name="gst_deinit">
<description>
Clean up any resources created by GStreamer in gst_init().

It is normally not needed to call this function in a normal application
as the resources will automatically be freed when the program terminates.
This function is therefore mostly used by testsuites and other memory
profiling tools.

After this call GStreamer (including this method) should not be used anymore. 

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_discoverer_audio_info_get_bitrate">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererAudioInfo
</parameter_description>
</parameter>
</parameters>
<return> the average or nominal bitrate of the stream in bits/second.

</return>
</function>

<function name="gst_discoverer_audio_info_get_channels">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererAudioInfo
</parameter_description>
</parameter>
</parameters>
<return> the number of channels in the stream.

</return>
</function>

<function name="gst_discoverer_audio_info_get_depth">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererAudioInfo
</parameter_description>
</parameter>
</parameters>
<return> the number of bits used per sample in each channel.

</return>
</function>

<function name="gst_discoverer_audio_info_get_max_bitrate">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererAudioInfo
</parameter_description>
</parameter>
</parameters>
<return> the maximum bitrate of the stream in bits/second.

</return>
</function>

<function name="gst_discoverer_audio_info_get_sample_rate">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererAudioInfo
</parameter_description>
</parameter>
</parameters>
<return> the sample rate of the stream in Hertz.

</return>
</function>

<function name="gst_discoverer_container_info_get_streams">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> the list of
#GstDiscovererStreamInfo this container stream offers.
Free with gst_discoverer_stream_info_list_free() after usage.

</return>
</function>

<function name="gst_discoverer_discover_uri">
<description>
Synchronously discovers the given @uri.

A copy of @uri will be made internally, so the caller can safely g_free()
afterwards.


</description>
<parameters>
<parameter name="discoverer">
<parameter_description> A #GstDiscoverer
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> The URI to run on.
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> If an error occurred, this field will be filled in.
</parameter_description>
</parameter>
</parameters>
<return> the result of the scanning. Can be %NULL if an
error occurred.

</return>
</function>

<function name="gst_discoverer_discover_uri_async">
<description>
Appends the given @uri to the list of URIs to discoverer. The actual
discovery of the @uri will only take place if gst_discoverer_start() has
been called.

A copy of @uri will be made internally, so the caller can safely g_free()
afterwards.


</description>
<parameters>
<parameter name="discoverer">
<parameter_description> A #GstDiscoverer
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI to add.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @uri was succesfully appended to the list of pending
uris, else %FALSE

</return>
</function>

<function name="gst_discoverer_info_get_audio_streams">
<description>
Finds all the #GstDiscovererAudioInfo contained in @info


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> A #GList of
matching #GstDiscovererStreamInfo. The caller should free it with
gst_discoverer_stream_info_list_free().

</return>
</function>

<function name="gst_discoverer_info_get_container_streams">
<description>
Finds all the #GstDiscovererContainerInfo contained in @info


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> A #GList of
matching #GstDiscovererStreamInfo. The caller should free it with
gst_discoverer_stream_info_list_free().

</return>
</function>

<function name="gst_discoverer_info_get_duration">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> the duration of the URI in #GstClockTime (nanoseconds).

</return>
</function>

<function name="gst_discoverer_info_get_misc">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> Miscellaneous information stored as a #GstStructure
(for example: information about missing plugins). If you wish to use the
#GstStructure after the life-time of @info, you will need to copy it.

</return>
</function>

<function name="gst_discoverer_info_get_result">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> the result of the discovery as a #GstDiscovererResult.

</return>
</function>

<function name="gst_discoverer_info_get_seekable">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> the wheter the URI is seekable.

</return>
</function>

<function name="gst_discoverer_info_get_stream_info">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> the structure (or topology) of the URI as a
#GstDiscovererStreamInfo.
This structure can be traversed to see the original hierarchy. Unref with
gst_discoverer_stream_info_unref() after usage.

</return>
</function>

<function name="gst_discoverer_info_get_stream_list">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> the list of
all streams contained in the #info. Free after usage
with gst_discoverer_stream_info_list_free().

</return>
</function>

<function name="gst_discoverer_info_get_streams">
<description>
Finds the #GstDiscovererStreamInfo contained in @info that match the
given @streamtype.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
<parameter name="streamtype">
<parameter_description> a #GType derived from #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> A #GList of
matching #GstDiscovererStreamInfo. The caller should free it with
gst_discoverer_stream_info_list_free().

</return>
</function>

<function name="gst_discoverer_info_get_tags">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> all tags contained in the %URI. If you wish to use
the tags after the life-time of @info, you will need to copy them.

</return>
</function>

<function name="gst_discoverer_info_get_uri">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> the URI to which this information corresponds to.
Copy it if you wish to use it after the life-time of @info.

</return>
</function>

<function name="gst_discoverer_info_get_video_streams">
<description>
Finds all the #GstDiscovererVideoInfo contained in @info


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> A #GList of
matching #GstDiscovererStreamInfo. The caller should free it with
gst_discoverer_stream_info_list_free().

</return>
</function>

<function name="gst_discoverer_info_ref">
<description>
Increments the reference count of @info.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return> the same #GstDiscovererInfo object

</return>
</function>

<function name="gst_discoverer_info_unref">
<description>
Decrements the reference count of @info.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_discoverer_new">
<description>
Creates a new #GstDiscoverer with the provided timeout.


</description>
<parameters>
<parameter name="timeout">
<parameter_description> timeout per file, in nanoseconds. Allowed are values between
one second (#GST_SECOND) and one hour (3600 * #GST_SECOND)
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> a pointer to a #GError. can be %NULL
</parameter_description>
</parameter>
</parameters>
<return> The new #GstDiscoverer.
If an error occurred when creating the discoverer, @err will be set
accordingly and %NULL will be returned. If @err is set, the caller must
free it when no longer needed using g_error_free().

</return>
</function>

<function name="gst_discoverer_start">
<description>
Allow asynchronous discovering of URIs to take place.
A #GMainLoop must be available for #GstDiscoverer to properly work in
asynchronous mode.


</description>
<parameters>
<parameter name="discoverer">
<parameter_description> A #GstDiscoverer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_discoverer_stop">
<description>
Stop the discovery of any pending URIs and clears the list of
pending URIS (if any).


</description>
<parameters>
<parameter name="discoverer">
<parameter_description> A #GstDiscoverer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_discoverer_stream_info_get_caps">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps of the stream. Unref with
#gst_caps_unref after usage.

</return>
</function>

<function name="gst_discoverer_stream_info_get_misc">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> additional information regarding the stream (for
example codec version, profile, etc..). If you wish to use the #GstStructure
after the life-time of @info you will need to copy it.

</return>
</function>

<function name="gst_discoverer_stream_info_get_next">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> the next #GstDiscovererStreamInfo in a chain. %NULL
for final streams.
Unref with #gst_discoverer_stream_info_unref after usage.

</return>
</function>

<function name="gst_discoverer_stream_info_get_previous">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> the previous #GstDiscovererStreamInfo in a chain.
%NULL for starting points. Unref with #gst_discoverer_stream_info_unref
after usage.

</return>
</function>

<function name="gst_discoverer_stream_info_get_stream_type_nick">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> a human readable name for the stream type of the given @info (ex : &quot;audio&quot;,
&quot;container&quot;,...).

</return>
</function>

<function name="gst_discoverer_stream_info_get_tags">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> the tags contained in this stream. If you wish to
use the tags after the life-time of @info you will need to copy them.

</return>
</function>

<function name="gst_discoverer_stream_info_list_free">
<description>
Decrements the reference count of all contained #GstDiscovererStreamInfo
and fress the #GList.

</description>
<parameters>
<parameter name="infos">
<parameter_description> a #GList of #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_discoverer_stream_info_ref">
<description>
Increments the reference count of @info.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return> the same #GstDiscovererStreamInfo object

</return>
</function>

<function name="gst_discoverer_stream_info_unref">
<description>
Decrements the reference count of @info.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererStreamInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_discoverer_video_info_get_bitrate">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the average or nominal bitrate of the video stream in bits/second.

</return>
</function>

<function name="gst_discoverer_video_info_get_depth">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the depth in bits of the video stream.

</return>
</function>

<function name="gst_discoverer_video_info_get_framerate_denom">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the framerate of the video stream (denominator).

</return>
</function>

<function name="gst_discoverer_video_info_get_framerate_num">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the framerate of the video stream (numerator).

</return>
</function>

<function name="gst_discoverer_video_info_get_height">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the height of the video stream in pixels.

</return>
</function>

<function name="gst_discoverer_video_info_get_max_bitrate">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the maximum bitrate of the video stream in bits/second.

</return>
</function>

<function name="gst_discoverer_video_info_get_par_denom">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the Pixel Aspect Ratio (PAR) of the video stream (denominator).

</return>
</function>

<function name="gst_discoverer_video_info_get_par_num">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the Pixel Aspect Ratio (PAR) of the video stream (numerator).

</return>
</function>

<function name="gst_discoverer_video_info_get_width">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> the width of the video stream in pixels.

</return>
</function>

<function name="gst_discoverer_video_info_is_image">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if the video stream corresponds to an image (i.e. only contains
one frame).

</return>
</function>

<function name="gst_discoverer_video_info_is_interlaced">
<description>

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GstDiscovererVideoInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream is interlaced, else %FALSE.

</return>
</function>

<function name="gst_dp_buffer_from_header">
<description>
Creates a newly allocated #GstBuffer from the given header.
The buffer data needs to be copied into it before validating.

Use this function if you want to pre-allocate a buffer based on the
packet header to read the packet payload in to.

This function does not check the header passed to it, use
gst_dp_validate_header() first if the header data is unchecked.


</description>
<parameters>
<parameter name="header_length">
<parameter_description> the length of the packet header
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> the byte array of the packet header
</parameter_description>
</parameter>
</parameters>
<return> A #GstBuffer if the buffer was successfully created, or NULL.
</return>
</function>

<function name="gst_dp_caps_from_packet">
<description>
Creates a newly allocated #GstCaps from the given packet.

This function does not check the arguments passed to it, use
gst_dp_validate_packet() first if the header and payload data are
unchecked.


</description>
<parameters>
<parameter name="header_length">
<parameter_description> the length of the packet header
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> the byte array of the packet header
</parameter_description>
</parameter>
<parameter name="payload">
<parameter_description> the byte array of the packet payload
</parameter_description>
</parameter>
</parameters>
<return> A #GstCaps containing the caps represented in the packet,
or NULL if the packet could not be converted.
</return>
</function>

<function name="gst_dp_crc">
<description>
Calculate a CRC for the given buffer over the given number of bytes.
This is only provided for verification purposes; typical GDP users
will not need this function.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> array of bytes
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @buffer
</parameter_description>
</parameter>
</parameters>
<return> a two-byte CRC checksum.
</return>
</function>

<function name="gst_dp_event_from_packet">
<description>
Creates a newly allocated #GstEvent from the given packet.

This function does not check the arguments passed to it, use
gst_dp_validate_packet() first if the header and payload data are
unchecked.


</description>
<parameters>
<parameter name="header_length">
<parameter_description> the length of the packet header
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> the byte array of the packet header
</parameter_description>
</parameter>
<parameter name="payload">
<parameter_description> the byte array of the packet payload
</parameter_description>
</parameter>
</parameters>
<return> A #GstEvent if the event was successfully created,
or NULL if an event could not be read from the payload.
</return>
</function>

<function name="gst_dp_header_from_buffer">
<description>
Creates a GDP header from the given buffer.

Deprecated: use a #GstDPPacketizer


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GstBuffer to create a header for
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the #GstDPHeaderFlag to create the header with
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a guint pointer to store the header length in
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> a guint8 * pointer to store a newly allocated header byte array in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the header was successfully created.
</return>
</function>

<function name="gst_dp_header_payload_length">
<description>
Get the length of the payload described by @header.


</description>
<parameters>
<parameter name="header">
<parameter_description> the byte header of the packet array
</parameter_description>
</parameter>
</parameters>
<return> the length of the payload this header describes.
</return>
</function>

<function name="gst_dp_header_payload_type">
<description>
Get the type of the payload described by @header.


</description>
<parameters>
<parameter name="header">
<parameter_description> the byte header of the packet array
</parameter_description>
</parameter>
</parameters>
<return> the #GstDPPayloadType the payload this header describes.
</return>
</function>

<function name="gst_dp_init">
<description>
Initialize GStreamer Data Protocol library.

Should be called before using these functions from source linking
to this source file.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_dp_packet_from_caps">
<description>
Creates a GDP packet from the given caps.

Deprecated: use a #GstDPPacketizer


</description>
<parameters>
<parameter name="caps">
<parameter_description> a #GstCaps to create a packet for
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the #GstDPHeaderFlag to create the header with
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a guint pointer to store the header length in
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> a guint8 pointer to store a newly allocated header byte array in
</parameter_description>
</parameter>
<parameter name="payload">
<parameter_description> a guint8 pointer to store a newly allocated payload byte array in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet was successfully created.
</return>
</function>

<function name="gst_dp_packet_from_event">
<description>
Creates a GDP packet from the given event.

Deprecated: use a #GstDPPacketizer


</description>
<parameters>
<parameter name="event">
<parameter_description> a #GstEvent to create a packet for
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the #GstDPHeaderFlag to create the header with
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a guint pointer to store the header length in
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> a guint8 pointer to store a newly allocated header byte array in
</parameter_description>
</parameter>
<parameter name="payload">
<parameter_description> a guint8 pointer to store a newly allocated payload byte array in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet was successfully created.
</return>
</function>

<function name="gst_dp_packetizer_free">
<description>
Free the given packetizer.

</description>
<parameters>
<parameter name="packetizer">
<parameter_description> the #GstDPPacketizer to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_dp_packetizer_new">
<description>
Creates a new packetizer.


</description>
<parameters>
<parameter name="version">
<parameter_description> the #GstDPVersion of the protocol to packetize for.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GstDPPacketizer
</return>
</function>

<function name="gst_dp_validate_header">
<description>
Validates the given packet header by checking the CRC checksum.


</description>
<parameters>
<parameter name="header_length">
<parameter_description> the length of the packet header
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> the byte array of the packet header
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the CRC matches, or no CRC checksum is present.
</return>
</function>

<function name="gst_dp_validate_packet">
<description>
Validates the given packet by checking version information and checksums.


</description>
<parameters>
<parameter name="header_length">
<parameter_description> the length of the packet header
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> the byte array of the packet header
</parameter_description>
</parameter>
<parameter name="payload">
<parameter_description> the byte array of the packet payload
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet validates.
</return>
</function>

<function name="gst_dp_validate_payload">
<description>
Validates the given packet payload using the given packet header
by checking the CRC checksum.


</description>
<parameters>
<parameter name="header_length">
<parameter_description> the length of the packet header
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> the byte array of the packet header
</parameter_description>
</parameter>
<parameter name="payload">
<parameter_description> the byte array of the packet payload
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the CRC matches, or no CRC checksum is present.
</return>
</function>

<function name="gst_element_abort_state">
<description>
Abort the state change of the element. This function is used
by elements that do asynchronous state changes and find out
something is wrong.

This function should be called with the STATE_LOCK held.

MT safe.

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to abort the state of.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_add_pad">
<description>
Adds a pad (link point) to @element. @pad's parent will be set to @element;
see gst_object_set_parent() for refcounting information.

Pads are not automatically activated so elements should perform the needed
steps to activate the pad in case this pad is added in the PAUSED or PLAYING
state. See gst_pad_set_active() for more information about activating pads.

The pad and the element should be unlocked when calling this function.

This function will emit the #GstElement::pad-added signal on the element.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to add the pad to.
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the #GstPad to add to the element.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pad could be added. This function can fail when
a pad with the same name already existed or the pad already had another
parent.

MT safe.
</return>
</function>

<function name="gst_element_change_state">
<description>
Perform @transition on @element.

This function must be called with STATE_LOCK held and is mainly used
internally.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement
</parameter_description>
</parameter>
<parameter name="transition">
<parameter_description> the requested transition
</parameter_description>
</parameter>
</parameters>
<return> the #GstStateChangeReturn of the state transition.
</return>
</function>

<function name="gst_element_class_add_pad_template">
<description>
Adds a padtemplate to an element class. This is mainly used in the _base_init
functions of classes.

</description>
<parameters>
<parameter name="klass">
<parameter_description> the #GstElementClass to add the pad template to.
</parameter_description>
</parameter>
<parameter name="templ">
<parameter_description> a #GstPadTemplate to add to the element class.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_class_get_pad_template">
<description>
Retrieves a padtemplate from @element_class with the given name.
&lt;note&gt;If you use this function in the #GInstanceInitFunc of an object class
that has subclasses, make sure to pass the g_class parameter of the
#GInstanceInitFunc here.&lt;/note&gt;


</description>
<parameters>
<parameter name="element_class">
<parameter_description> a #GstElementClass to get the pad template of.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the #GstPadTemplate to get.
</parameter_description>
</parameter>
</parameters>
<return> the #GstPadTemplate with the given name, or %NULL
if none was found. No unreferencing is necessary.
</return>
</function>

<function name="gst_element_class_get_pad_template_list">
<description>
Retrieves a list of the pad templates associated with @element_class. The
list must not be modified by the calling code.
&lt;note&gt;If you use this function in the #GInstanceInitFunc of an object class
that has subclasses, make sure to pass the g_class parameter of the
#GInstanceInitFunc here.&lt;/note&gt;


</description>
<parameters>
<parameter name="element_class">
<parameter_description> a #GstElementClass to get pad templates of.
</parameter_description>
</parameter>
</parameters>
<return> the #GList of
pad templates.
</return>
</function>

<function name="gst_element_class_install_std_props">
<description>
Adds a list of standardized properties with types to the @klass.
the id is for the property switch in your get_prop method, and
the flags determine readability / writeability.

</description>
<parameters>
<parameter name="klass">
<parameter_description> the #GstElementClass to add the properties to.
</parameter_description>
</parameter>
<parameter name="first_name">
<parameter_description> the name of the first property.
in a NULL terminated
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the id and flags of the first property, followed by
further 'name', 'id', 'flags' triplets and terminated by NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_class_set_details">
<description>
Sets the detailed information for a #GstElementClass.
&lt;note&gt;This function is for use in _base_init functions only.&lt;/note&gt;

The @details are copied.

Deprecated: Use gst_element_class_set_details_simple() instead.

</description>
<parameters>
<parameter name="klass">
<parameter_description> class to set details for
</parameter_description>
</parameter>
<parameter name="details">
<parameter_description> details to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_class_set_details_simple">
<description>
Sets the detailed information for a #GstElementClass. Simpler version of
gst_element_class_set_details() that generates less linker overhead.
&lt;note&gt;This function is for use in _base_init functions only.&lt;/note&gt;

The detail parameter strings are copied into the #GstElementDetails for
the element class.


</description>
<parameters>
<parameter name="klass">
<parameter_description> class to set details for
</parameter_description>
</parameter>
<parameter name="longname">
<parameter_description> The long English name of the element. E.g. &quot;File Sink&quot;
</parameter_description>
</parameter>
<parameter name="classification">
<parameter_description> String describing the type of element, as an unordered list
separated with slashes ('/'). See draft-klass.txt of the design docs
for more details and common types. E.g: &quot;Sink/File&quot;
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> Sentence describing the purpose of the element.
E.g: &quot;Write stream to a file&quot;
</parameter_description>
</parameter>
<parameter name="author">
<parameter_description> Name and contact details of the author(s). Use \n to separate
multiple author details. E.g: &quot;Joe Bloggs &lt;joe.blogs at foo.com&gt;&quot;
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_class_set_documentation_uri">
<description>
Set uri pointing to user documentation. Applications can use this to show
help for e.g. effects to users.


</description>
<parameters>
<parameter name="klass">
<parameter_description> class to set details for
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> uri of element documentation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_class_set_icon_name">
<description>
Elements that bridge to certain other products can include an icon of that
used product. Application can show the icon in menus/selectors to help
identifying specific elements.


</description>
<parameters>
<parameter name="klass">
<parameter_description> class to set details for
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of an icon
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_continue_state">
<description>
Commit the state change of the element and proceed to the next
pending state if any. This function is used
by elements that do asynchronous state changes.
The core will normally call this method automatically when an
element returned %GST_STATE_CHANGE_SUCCESS from the state change function.

If after calling this method the element still has not reached
the pending state, the next state change is performed.

This method is used internally and should normally not be called by plugins
or applications.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to continue the state change of.
</parameter_description>
</parameter>
<parameter name="ret">
<parameter_description> The previous state return value
</parameter_description>
</parameter>
</parameters>
<return> The result of the commit state change.

MT safe.
</return>
</function>

<function name="gst_element_create_all_pads">
<description>
Creates a pad for each pad template that is always available.
This function is only useful during object intialization of
subclasses of #GstElement.

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to create pads for
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_factory_can_sink_all_caps">
<description>
Checks if the factory can sink all possible capabilities.


</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to query
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the caps are fully compatible.

</return>
</function>

<function name="gst_element_factory_can_sink_any_caps">
<description>
Checks if the factory can sink any possible capability.


</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to query
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the caps have a common subset.

</return>
</function>

<function name="gst_element_factory_can_sink_caps">
<description>
Checks if the factory can sink the given capability.

Deprecated: use gst_element_factory_can_sink_all_caps() instead.

</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to query
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it can sink the capabilities

</return>
</function>

<function name="gst_element_factory_can_src_all_caps">
<description>
Checks if the factory can src all possible capabilities.


</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to query
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the caps are fully compatible.

</return>
</function>

<function name="gst_element_factory_can_src_any_caps">
<description>
Checks if the factory can src any possible capability.


</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to query
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the caps have a common subset.

</return>
</function>

<function name="gst_element_factory_can_src_caps">
<description>
Checks if the factory can source the given capability.

Deprecated: use gst_element_factory_can_src_all_caps() instead.

</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to query
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it can src the capabilities

</return>
</function>

<function name="gst_element_factory_create">
<description>
Create a new element of the type defined by the given elementfactory.
It will be given the name supplied, since all elements require a name as
their first argument.


</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to instantiate
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of new element
</parameter_description>
</parameter>
</parameters>
<return> new #GstElement or NULL if the element couldn't
be created
</return>
</function>

<function name="gst_element_factory_find">
<description>
Search for an element factory of the given name. Refs the returned
element factory; caller is responsible for unreffing.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of factory to find
</parameter_description>
</parameter>
</parameters>
<return> #GstElementFactory if found, NULL otherwise
</return>
</function>

<function name="gst_element_factory_get_author">
<description>
Gets the author for this factory.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the author
</return>
</function>

<function name="gst_element_factory_get_description">
<description>
Gets the description for this factory.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the description
</return>
</function>

<function name="gst_element_factory_get_documentation_uri">
<description>
Gets documentation uri for this factory if set.



</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the documentation uri
</return>
</function>

<function name="gst_element_factory_get_element_type">
<description>
Get the #GType for elements managed by this factory. The type can
only be retrieved if the element factory is loaded, which can be
assured with gst_plugin_feature_load().


</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to get managed #GType from
</parameter_description>
</parameter>
</parameters>
<return> the #GType for elements managed by this factory or 0 if
the factory is not loaded.
</return>
</function>

<function name="gst_element_factory_get_icon_name">
<description>
Gets icon name for this factory if set.



</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the icon name
</return>
</function>

<function name="gst_element_factory_get_klass">
<description>
Gets the class for this factory.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the class
</return>
</function>

<function name="gst_element_factory_get_longname">
<description>
Gets the longname for this factory


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the longname
</return>
</function>

<function name="gst_element_factory_get_num_pad_templates">
<description>
Gets the number of pad_templates in this factory.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the number of pad_templates
</return>
</function>

<function name="gst_element_factory_get_static_pad_templates">
<description>
Gets the #GList of #GstStaticPadTemplate for this factory.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the
static pad templates
</return>
</function>

<function name="gst_element_factory_get_uri_protocols">
<description>
Gets a NULL-terminated array of protocols this element supports or NULL if
no protocols are supported. You may not change the contents of the returned
array, as it is still owned by the element factory. Use g_strdupv() to
make a copy of the protocol string array if you need to.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> the supported protocols
or NULL
</return>
</function>

<function name="gst_element_factory_get_uri_type">
<description>
Gets the type of URIs the element supports or #GST_URI_UNKNOWN if none.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
</parameters>
<return> type of URIs this element supports
</return>
</function>

<function name="gst_element_factory_has_interface">
<description>
Check if @factory implements the interface with name @interfacename.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
<parameter name="interfacename">
<parameter_description> an interface name
</parameter_description>
</parameter>
</parameters>
<return> #TRUE when @factory implement the interface.

</return>
</function>

<function name="gst_element_factory_list_filter">
<description>
Filter out all the elementfactories in @list that can handle @caps in
the given direction.

If @subsetonly is %TRUE, then only the elements whose pads templates
are a complete superset of @caps will be returned. Else any element
whose pad templates caps can intersect with @caps will be returned.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList of
#GstElementFactory to filter
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> a #GstCaps
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> a #GstPadDirection to filter on
</parameter_description>
</parameter>
<parameter name="subsetonly">
<parameter_description> whether to filter on caps subsets or not.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of
#GstElementFactory elements that match the given requisits.
Use #gst_plugin_feature_list_free after usage.

</return>
</function>

<function name="gst_element_factory_list_get_elements">
<description>
Get a list of factories that match the given @type. Only elements
with a rank greater or equal to @minrank will be returned.
The list of factories is returned by decreasing rank.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GstElementFactoryListType
</parameter_description>
</parameter>
<parameter name="minrank">
<parameter_description> Minimum rank
</parameter_description>
</parameter>
</parameters>
<return> a #GList of
#GstElementFactory elements. Use gst_plugin_feature_list_free() after
usage.

</return>
</function>

<function name="gst_element_factory_list_is_type">
<description>
Check if @factory if of the given types.


</description>
<parameters>
<parameter name="factory">
<parameter_description> a #GstElementFactory
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GstElementFactoryListType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @factory is of @type.

</return>
</function>

<function name="gst_element_factory_make">
<description>
Create a new element of the type defined by the given element factory.
If name is NULL, then the element will receive a guaranteed unique name,
consisting of the element factory name and a number.
If name is given, it will be given the name supplied.


</description>
<parameters>
<parameter name="factoryname">
<parameter_description> a named factory to instantiate
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of new element
</parameter_description>
</parameter>
</parameters>
<return> new #GstElement or NULL if unable to create element
</return>
</function>

<function name="gst_element_found_tags">
<description>
Posts a message to the bus that new tags were found, and pushes an event
to all sourcepads. Takes ownership of the @list.

This is a utility method for elements. Applications should use the
#GstTagSetter interface.

</description>
<parameters>
<parameter name="element">
<parameter_description> element for which we found the tags.
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> list of tags.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_found_tags_for_pad">
<description>
Posts a message to the bus that new tags were found and pushes the
tags as event. Takes ownership of the @list.

This is a utility method for elements. Applications should use the
#GstTagSetter interface.

</description>
<parameters>
<parameter name="element">
<parameter_description> element for which to post taglist to bus.
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> pad on which to push tag-event
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> the taglist to post on the bus and create event from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_get_base_time">
<description>
Returns the base time of the element. The base time is the
absolute time of the clock when this element was last put to
PLAYING. Subtracting the base time from the clock time gives
the running time of the element.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
</parameters>
<return> the base time of the element.

MT safe.
</return>
</function>

<function name="gst_element_get_bus">
<description>
Returns the bus of the element. Note that only a #GstPipeline will provide a
bus for the application.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to get the bus of.
</parameter_description>
</parameter>
</parameters>
<return> the element's #GstBus. unref after usage.

MT safe.
</return>
</function>

<function name="gst_element_get_clock">
<description>
Gets the currently configured clock of the element. This is the clock as was
last set with gst_element_set_clock().


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to get the clock of.
</parameter_description>
</parameter>
</parameters>
<return> the #GstClock of the element. unref after usage.

MT safe.
</return>
</function>

<function name="gst_element_get_compatible_pad">
<description>
Looks for an unlinked pad to which the given pad can link. It is not
guaranteed that linking the pads will work, though it should work in most
cases.

This function will first attempt to find a compatible unlinked ALWAYS pad,
and if none can be found, it will request a compatible REQUEST pad by looking
at the templates of @element.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement in which the pad should be found.
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the #GstPad to find a compatible one for.
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the #GstCaps to use as a filter.
</parameter_description>
</parameter>
</parameters>
<return> the #GstPad to which a link can be made, or %NULL
if one cannot be found. gst_object_unref() after usage.
</return>
</function>

<function name="gst_element_get_compatible_pad_template">
<description>
Retrieves a pad template from @element that is compatible with @compattempl.
Pads from compatible templates can be linked together.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to get a compatible pad template for
</parameter_description>
</parameter>
<parameter name="compattempl">
<parameter_description> the #GstPadTemplate to find a compatible
template for
</parameter_description>
</parameter>
</parameters>
<return> a compatible #GstPadTemplate, or NULL if none
was found. No unreferencing is necessary.
</return>
</function>

<function name="gst_element_get_factory">
<description>
Retrieves the factory that was used to create this element.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to request the element factory of.
</parameter_description>
</parameter>
</parameters>
<return> the #GstElementFactory used for creating this
element. no refcounting is needed.
</return>
</function>

<function name="gst_element_get_index">
<description>
Gets the index from the element.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
</parameters>
<return> a #GstIndex or %NULL when no index was set on the
element. unref after usage.

MT safe.
</return>
</function>

<function name="gst_element_get_pad">
<description>
Retrieves a pad from @element by name. Tries gst_element_get_static_pad()
first, then gst_element_get_request_pad().

Deprecated: This function is deprecated as it's unclear if the reference
to the result pad should be released with gst_object_unref() in case of a static pad
or gst_element_release_request_pad() in case of a request pad.
Use gst_element_get_static_pad() or gst_element_get_request_pad() instead.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the pad to retrieve.
</parameter_description>
</parameter>
</parameters>
<return> the #GstPad if found, otherwise %NULL. Unref or Release after usage,
depending on the type of the pad.
</return>
</function>

<function name="gst_element_get_pad_from_template">
<description>
Gets a pad from @element described by @templ. If the presence of @templ is
#GST_PAD_REQUEST, requests a new pad. Can return %NULL for #GST_PAD_SOMETIMES
templates.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
<parameter name="templ">
<parameter_description> a #GstPadTemplate belonging to @element.
</parameter_description>
</parameter>
</parameters>
<return> the #GstPad, or NULL if one could not be found
or created.
</return>
</function>

<function name="gst_element_get_query_types">
<description>
Get an array of query types from the element.
If the element doesn't implement a query types function,
the query will be forwarded to the peer of a random linked sink pad.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to query
</parameter_description>
</parameter>
</parameters>
<return> An array of #GstQueryType elements that should not
be freed or modified.

MT safe.
</return>
</function>

<function name="gst_element_get_request_pad">
<description>
Retrieves a pad from the element by name. This version only retrieves
request pads. The pad should be released with
gst_element_release_request_pad().

This method is slow and will be deprecated in the future. New code should
use gst_element_request_pad() with the requested template.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to find a request pad of.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the request #GstPad to retrieve.
</parameter_description>
</parameter>
</parameters>
<return> requested #GstPad if found, otherwise %NULL.
Release after usage.
</return>
</function>

<function name="gst_element_get_start_time">
<description>
Returns the start time of the element. The start time is the
running time of the clock when this element was last put to PAUSED.

Usually the start_time is managed by a toplevel element such as
#GstPipeline.

MT safe.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
</parameters>
<return> the start time of the element.

</return>
</function>

<function name="gst_element_get_state">
<description>
Gets the state of the element.

For elements that performed an ASYNC state change, as reported by
gst_element_set_state(), this function will block up to the
specified timeout value for the state change to complete.
If the element completes the state change or goes into
an error, this function returns immediately with a return value of
%GST_STATE_CHANGE_SUCCESS or %GST_STATE_CHANGE_FAILURE respectively.

For elements that did not return %GST_STATE_CHANGE_ASYNC, this function
returns the current and pending state immediately.

This function returns %GST_STATE_CHANGE_NO_PREROLL if the element
successfully changed its state but is not able to provide data yet.
This mostly happens for live sources that only produce data in
%GST_STATE_PLAYING. While the state change return is equivalent to
%GST_STATE_CHANGE_SUCCESS, it is returned to the application to signal that
some sink elements might not be able to complete their state change because
an element is not producing data to complete the preroll. When setting the
element to playing, the preroll will complete and playback will start.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to get the state of.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> a pointer to #GstState to hold the state.
Can be %NULL.
</parameter_description>
</parameter>
<parameter name="pending">
<parameter_description> a pointer to #GstState to hold the pending
state. Can be %NULL.
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a #GstClockTime to specify the timeout for an async
state change or %GST_CLOCK_TIME_NONE for infinite timeout.
</parameter_description>
</parameter>
</parameters>
<return> %GST_STATE_CHANGE_SUCCESS if the element has no more pending state
and the last state change succeeded, %GST_STATE_CHANGE_ASYNC if the
element is still performing a state change or
%GST_STATE_CHANGE_FAILURE if the last state change failed.

MT safe.
</return>
</function>

<function name="gst_element_get_static_pad">
<description>
Retrieves a pad from @element by name. This version only retrieves
already-existing (i.e. 'static') pads.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to find a static pad of.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the static #GstPad to retrieve.
</parameter_description>
</parameter>
</parameters>
<return> the requested #GstPad if found, otherwise %NULL.
unref after usage.

MT safe.
</return>
</function>

<function name="gst_element_implements_interface">
<description>
Test whether the given element implements a certain interface of type
iface_type, and test whether it is supported for this specific instance.


</description>
<parameters>
<parameter name="element">
<parameter_description> #GstElement to check for the implementation of the interface
</parameter_description>
</parameter>
<parameter name="iface_type">
<parameter_description> (final) type of the interface which we want to be implemented
</parameter_description>
</parameter>
</parameters>
<return> whether or not the element implements the interface.
</return>
</function>

<function name="gst_element_is_indexable">
<description>
Queries if the element can be indexed.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the element can be indexed.

MT safe.
</return>
</function>

<function name="gst_element_is_locked_state">
<description>
Checks if the state of an element is locked.
If the state of an element is locked, state changes of the parent don't
affect the element.
This way you can leave currently unused elements inside bins. Just lock their
state before changing the state from #GST_STATE_NULL.

MT safe.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if the element's state is locked.
</return>
</function>

<function name="gst_element_iterate_pads">
<description>
Retrieves an iterattor of @element's pads. The iterator should
be freed after usage.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to iterate pads of.
</parameter_description>
</parameter>
</parameters>
<return> the #GstIterator of #GstPad. Unref each pad
after use.

MT safe.
</return>
</function>

<function name="gst_element_iterate_sink_pads">
<description>
Retrieves an iterator of @element's sink pads.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
</parameters>
<return> the #GstIterator of #GstPad. Unref each pad
after use.

MT safe.
</return>
</function>

<function name="gst_element_iterate_src_pads">
<description>
Retrieves an iterator of @element's source pads.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
</parameters>
<return> the #GstIterator of #GstPad. Unref each pad
after use.

MT safe.
</return>
</function>

<function name="gst_element_link">
<description>
Links @src to @dest. The link must be from source to
destination; the other direction will not be tried. The function looks for
existing pads that aren't linked yet. It will request new pads if necessary.
Such pads need to be released manualy when unlinking.
If multiple links are possible, only one is established.

Make sure you have added your elements to a bin or pipeline with
gst_bin_add() before trying to link them.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstElement containing the source pad.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GstElement containing the destination pad.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the elements could be linked, FALSE otherwise.
</return>
</function>

<function name="gst_element_link_filtered">
<description>
Links @src to @dest using the given caps as filtercaps.
The link must be from source to
destination; the other direction will not be tried. The function looks for
existing pads that aren't linked yet. It will request new pads if necessary.
If multiple links are possible, only one is established.

Make sure you have added your elements to a bin or pipeline with
gst_bin_add() before trying to link them.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstElement containing the source pad.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GstElement containing the destination pad.
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> the #GstCaps to filter the link,
or #NULL for no filter.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pads could be linked, FALSE otherwise.
</return>
</function>

<function name="gst_element_link_many">
<description>
Chain together a series of elements. Uses gst_element_link().
Make sure you have added your elements to a bin or pipeline with
gst_bin_add() before trying to link them.


</description>
<parameters>
<parameter name="element_1">
<parameter_description> the first #GstElement in the link chain.
</parameter_description>
</parameter>
<parameter name="element_2">
<parameter_description> the second #GstElement in the link chain.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the NULL-terminated list of elements to link in order.
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success, FALSE otherwise.
</return>
</function>

<function name="gst_element_link_pads">
<description>
Links the two named pads of the source and destination elements.
Side effect is that if one of the pads has no parent, it becomes a
child of the parent of the other element.  If they have different
parents, the link fails.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstElement containing the source pad.
</parameter_description>
</parameter>
<parameter name="srcpadname">
<parameter_description> the name of the #GstPad in source element
or NULL for any pad.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GstElement containing the destination pad.
</parameter_description>
</parameter>
<parameter name="destpadname">
<parameter_description> the name of the #GstPad in destination element,
or NULL for any pad.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pads could be linked, FALSE otherwise.
</return>
</function>

<function name="gst_element_link_pads_filtered">
<description>
Links the two named pads of the source and destination elements. Side effect
is that if one of the pads has no parent, it becomes a child of the parent of
the other element. If they have different parents, the link fails. If @caps
is not #NULL, makes sure that the caps of the link is a subset of @caps.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstElement containing the source pad.
</parameter_description>
</parameter>
<parameter name="srcpadname">
<parameter_description> the name of the #GstPad in source element
or NULL for any pad.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GstElement containing the destination pad.
</parameter_description>
</parameter>
<parameter name="destpadname">
<parameter_description> the name of the #GstPad in destination element
or NULL for any pad.
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> the #GstCaps to filter the link,
or #NULL for no filter.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pads could be linked, FALSE otherwise.
</return>
</function>

<function name="gst_element_link_pads_full">
<description>
Links the two named pads of the source and destination elements.
Side effect is that if one of the pads has no parent, it becomes a
child of the parent of the other element.  If they have different
parents, the link fails.

Calling gst_element_link_pads_full() with @flags == %GST_PAD_LINK_CHECK_DEFAULT
is the same as calling gst_element_link_pads() and the recommended way of
linking pads with safety checks applied.

This is a convenience function for gst_pad_link_full().


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstElement containing the source pad.
</parameter_description>
</parameter>
<parameter name="srcpadname">
<parameter_description> the name of the #GstPad in source element
or NULL for any pad.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the #GstElement containing the destination pad.
</parameter_description>
</parameter>
<parameter name="destpadname">
<parameter_description> the name of the #GstPad in destination element,
or NULL for any pad.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the #GstPadLinkCheck to be performed when linking pads.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pads could be linked, FALSE otherwise.

</return>
</function>

<function name="gst_element_lost_state">
<description>
Brings the element to the lost state. This function calls
gst_element_lost_state_full() with the new_base_time set to %TRUE.

This function is used internally and should normally not be called from
plugins or applications.

MT safe.

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement the state is lost of
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_lost_state_full">
<description>
Brings the element to the lost state. The current state of the
element is copied to the pending state so that any call to
gst_element_get_state() will return %GST_STATE_CHANGE_ASYNC.

An ASYNC_START message is posted with indication to distribute a new
base_time to the element when @new_base_time is %TRUE.
If the element was PLAYING, it will go to PAUSED. The element
will be restored to its PLAYING state by the parent pipeline when it
prerolls again.

This is mostly used for elements that lost their preroll buffer
in the %GST_STATE_PAUSED or %GST_STATE_PLAYING state after a flush,
they will go to their pending state again when a new preroll buffer is
queued. This function can only be called when the element is currently
not in error or an async state change.

This function is used internally and should normally not be called from
plugins or applications.

MT safe.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement the state is lost of
</parameter_description>
</parameter>
<parameter name="new_base_time">
<parameter_description> if a new base time should be distributed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_make_from_uri">
<description>
Creates an element for handling the given URI.


</description>
<parameters>
<parameter name="type">
<parameter_description> Whether to create a source or a sink
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> URI to create an element for
</parameter_description>
</parameter>
<parameter name="elementname">
<parameter_description> Name of created element, can be NULL.
</parameter_description>
</parameter>
</parameters>
<return> a new element or NULL if none could be created
</return>
</function>

<function name="gst_element_message_full">
<description>
Post an error, warning or info message on the bus from inside an element.

@type must be of #GST_MESSAGE_ERROR, #GST_MESSAGE_WARNING or
#GST_MESSAGE_INFO.

MT safe.

</description>
<parameters>
<parameter name="element">
<parameter_description>  a #GstElement to send message from
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description>     the #GstMessageType
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description>   the GStreamer GError domain this message belongs to
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description>     the GError code belonging to the domain
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> an allocated text string to be used
as a replacement for the default message connected to code,
or %NULL
</parameter_description>
</parameter>
<parameter name="debug">
<parameter_description> an allocated debug message to be
used as a replacement for the default debugging information,
or %NULL
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description>     the source code file where the error was generated
</parameter_description>
</parameter>
<parameter name="function">
<parameter_description> the source code function where the error was generated
</parameter_description>
</parameter>
<parameter name="line">
<parameter_description>     the source code line where the error was generated
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_no_more_pads">
<description>
Use this function to signal that the element does not expect any more pads
to show up in the current pipeline. This function should be called whenever
pads have been added by the element itself. Elements with #GST_PAD_SOMETIMES
pad templates use this in combination with autopluggers to figure out that
the element is done initializing its pads.

This function emits the #GstElement::no-more-pads signal.

MT safe.

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_post_message">
<description>
Post a message on the element's #GstBus. This function takes ownership of the
message; if you want to access the message after this call, you should add an
additional reference before calling.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> a #GstMessage to post
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the message was successfully posted. The function returns
%FALSE if the element did not have a bus.

MT safe.
</return>
</function>

<function name="gst_element_provide_clock">
<description>
Get the clock provided by the given element.
&lt;note&gt;An element is only required to provide a clock in the PAUSED
state. Some elements can provide a clock in other states.&lt;/note&gt;


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to query
</parameter_description>
</parameter>
</parameters>
<return> the GstClock provided by the element or %NULL
if no clock could be provided.  Unref after usage.

MT safe.
</return>
</function>

<function name="gst_element_provides_clock">
<description>
Query if the element provides a clock. A #GstClock provided by an
element can be used as the global #GstClock for the pipeline.
An element that can provide a clock is only required to do so in the PAUSED
state, this means when it is fully negotiated and has allocated the resources
to operate the clock.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to query
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the element provides a clock

MT safe.
</return>
</function>

<function name="gst_element_query">
<description>
Performs a query on the given element.

For elements that don't implement a query handler, this function
forwards the query to a random srcpad or to the peer of a
random linked sinkpad of this element.

Please note that some queries might need a running pipeline to work.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to perform the query on.
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> the #GstQuery.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.

MT safe.
</return>
</function>

<function name="gst_element_query_convert">
<description>
Queries an element to convert @src_val in @src_format to @dest_format.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to invoke the convert query on.
</parameter_description>
</parameter>
<parameter name="src_format">
<parameter_description> a #GstFormat to convert from.
</parameter_description>
</parameter>
<parameter name="src_val">
<parameter_description> a value to convert.
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> a pointer to the #GstFormat to convert to.
</parameter_description>
</parameter>
<parameter name="dest_val">
<parameter_description> a pointer to the result.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_element_query_duration">
<description>
Queries an element for the total stream duration.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to invoke the duration query on.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a pointer to the #GstFormat asked for.
On return contains the #GstFormat used.
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> A location in which to store the total duration, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_element_query_position">
<description>
Queries an element for the stream position. If one repeatedly calls this
function one can also create and reuse it in gst_element_query().


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to invoke the position query on.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a pointer to the #GstFormat asked for.
On return contains the #GstFormat used.
</parameter_description>
</parameter>
<parameter name="cur">
<parameter_description> a location in which to store the current
position, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_element_register">
<description>
Create a new elementfactory capable of instantiating objects of the
@type and add the factory to @plugin.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> #GstPlugin to register the element with, or NULL for
a static element (note that passing NULL only works in GStreamer 0.10.13
and later)
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of elements of this type
</parameter_description>
</parameter>
<parameter name="rank">
<parameter_description> rank of element (higher rank means more importance when autoplugging)
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> GType of element to register
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if the registering succeeded, FALSE on error
</return>
</function>

<function name="gst_element_release_request_pad">
<description>
Makes the element free the previously requested pad as obtained
with gst_element_get_request_pad().

This does not unref the pad. If the pad was created by using
gst_element_get_request_pad(), gst_element_release_request_pad() needs to be
followed by gst_object_unref() to free the @pad.

MT safe.

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to release the request pad of.
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the #GstPad to release.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_remove_pad">
<description>
Removes @pad from @element. @pad will be destroyed if it has not been
referenced elsewhere using gst_object_unparent().

This function is used by plugin developers and should not be used
by applications. Pads that were dynamically requested from elements
with gst_element_get_request_pad() should be released with the
gst_element_release_request_pad() function instead.

Pads are not automatically deactivated so elements should perform the needed
steps to deactivate the pad in case this pad is removed in the PAUSED or
PLAYING state. See gst_pad_set_active() for more information about
deactivating pads.

The pad and the element should be unlocked when calling this function.

This function will emit the #GstElement::pad-removed signal on the element.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to remove pad from.
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the #GstPad to remove from the element.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the pad could be removed. Can return %FALSE if the
pad does not belong to the provided element.

MT safe.
</return>
</function>

<function name="gst_element_request_pad">
<description>
Retrieves a request pad from the element according to the provided template.

If the @caps are specified and the element implements thew new
request_new_pad_full virtual method, the element will use them to select
which pad to create.

The pad should be released with gst_element_release_request_pad().


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to find a request pad of.
</parameter_description>
</parameter>
<parameter name="templ">
<parameter_description> a #GstPadTemplate of which we want a pad of.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the request #GstPad
to retrieve. Can be %NULL.
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps of the pad we want to
request. Can be %NULL.
</parameter_description>
</parameter>
</parameters>
<return> requested #GstPad if found, otherwise %NULL.
Release after usage.

</return>
</function>

<function name="gst_element_requires_clock">
<description>
Query if the element requires a clock.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to query
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the element requires a clock

MT safe.
</return>
</function>

<function name="gst_element_save_thyself">
<description>
Saves the element as part of the given XML structure.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to save.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the xml parent node.
</parameter_description>
</parameter>
</parameters>
<return> the new #xmlNodePtr.
</return>
</function>

<function name="gst_element_seek">
<description>
Sends a seek event to an element. See gst_event_new_seek() for the details of
the parameters. The seek event is sent to the element using
gst_element_send_event().


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to send the event to.
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> The new playback rate
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The format of the seek values
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> The optional seek flags.
</parameter_description>
</parameter>
<parameter name="cur_type">
<parameter_description> The type and flags for the new current position
</parameter_description>
</parameter>
<parameter name="cur">
<parameter_description> The value of the new current position
</parameter_description>
</parameter>
<parameter name="stop_type">
<parameter_description> The type and flags for the new stop position
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> The value of the new stop position
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event was handled.

MT safe.
</return>
</function>

<function name="gst_element_seek_simple">
<description>
Simple API to perform a seek on the given element, meaning it just seeks
to the given position relative to the start of the stream. For more complex
operations like segment seeks (e.g. for looping) or changing the playback
rate or seeking relative to the last configured playback segment you should
use gst_element_seek().

In a completely prerolled PAUSED or PLAYING pipeline, seeking is always
guaranteed to return %TRUE on a seekable media type or %FALSE when the media
type is certainly not seekable (such as a live stream).

Some elements allow for seeking in the READY state, in this
case they will store the seek event and execute it when they are put to
PAUSED. If the element supports seek in READY, it will always return %TRUE when
it receives the event in the READY state.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to seek on
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a #GstFormat to execute the seek in, such as #GST_FORMAT_TIME
</parameter_description>
</parameter>
<parameter name="seek_flags">
<parameter_description> seek options; playback applications will usually want to use
GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT here
</parameter_description>
</parameter>
<parameter name="seek_pos">
<parameter_description> position to seek to (relative to the start); if you are doing
a seek in #GST_FORMAT_TIME this value is in nanoseconds -
multiply with #GST_SECOND to convert seconds to nanoseconds or
with #GST_MSECOND to convert milliseconds to nanoseconds.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the seek operation succeeded (the seek might not always be
executed instantly though)

</return>
</function>

<function name="gst_element_send_event">
<description>
Sends an event to an element. If the element doesn't implement an
event handler, the event will be pushed on a random linked sink pad for
upstream events or a random linked source pad for downstream events.

This function takes owership of the provided event so you should
gst_event_ref() it if you want to reuse the event after this call.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to send the event to.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GstEvent to send to the element.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event was handled.

MT safe.
</return>
</function>

<function name="gst_element_set_base_time">
<description>
Set the base time of an element. See gst_element_get_base_time().

MT safe.

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the base time to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_set_bus">
<description>
Sets the bus of the element. Increases the refcount on the bus.
For internal use only, unless you're testing elements.

MT safe.

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to set the bus of.
</parameter_description>
</parameter>
<parameter name="bus">
<parameter_description> the #GstBus to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_set_clock">
<description>
Sets the clock for the element. This function increases the
refcount on the clock. Any previously set clock on the object
is unreffed.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to set the clock for.
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> the #GstClock to set for the element.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the element accepted the clock. An element can refuse a
clock when it, for example, is not able to slave its internal clock to the
@clock or when it requires a specific clock to operate.

MT safe.
</return>
</function>

<function name="gst_element_set_index">
<description>
Set @index on the element. The refcount of the index
will be increased, any previously set index is unreffed.

MT safe.

</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> a #GstIndex.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_set_locked_state">
<description>
Locks the state of an element, so state changes of the parent don't affect
this element anymore.

MT safe.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement
</parameter_description>
</parameter>
<parameter name="locked_state">
<parameter_description> TRUE to lock the element's state
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the state was changed, FALSE if bad parameters were given
or the elements state-locking needed no change.
</return>
</function>

<function name="gst_element_set_start_time">
<description>
Set the start time of an element. The start time of the element is the
running time of the element when it last went to the PAUSED state. In READY
or after a flushing seek, it is set to 0.

Toplevel elements like #GstPipeline will manage the start_time and
base_time on its children. Setting the start_time to #GST_CLOCK_TIME_NONE
on such a toplevel element will disable the distribution of the base_time to
the children and can be useful if the application manages the base_time
itself, for example if you want to synchronize capture from multiple
pipelines, and you can also ensure that the pipelines have the same clock.

MT safe.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the base time to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_set_state">
<description>
Sets the state of the element. This function will try to set the
requested state by going through all the intermediary states and calling
the class's state change function for each.

This function can return #GST_STATE_CHANGE_ASYNC, in which case the
element will perform the remainder of the state change asynchronously in
another thread.
An application can use gst_element_get_state() to wait for the completion
of the state change or it can wait for a state change message on the bus.

State changes to %GST_STATE_READY or %GST_STATE_NULL never return
#GST_STATE_CHANGE_ASYNC.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement to change state of.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the element's new #GstState.
</parameter_description>
</parameter>
</parameters>
<return> Result of the state change using #GstStateChangeReturn.

MT safe.
</return>
</function>

<function name="gst_element_state_change_return_get_name">
<description>
Gets a string representing the given state change result.


</description>
<parameters>
<parameter name="state_ret">
<parameter_description> a #GstStateChangeReturn to get the name of.
</parameter_description>
</parameter>
</parameters>
<return> a string with the name of the state
result.

</return>
</function>

<function name="gst_element_state_get_name">
<description>
Gets a string representing the given state.


</description>
<parameters>
<parameter name="state">
<parameter_description> a #GstState to get the name of.
</parameter_description>
</parameter>
</parameters>
<return> a string with the name of the state.
</return>
</function>

<function name="gst_element_sync_state_with_parent">
<description>
Tries to change the state of the element to the same as its parent.
If this function returns FALSE, the state of element is undefined.


</description>
<parameters>
<parameter name="element">
<parameter_description> a #GstElement.
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if the element's state could be synced to the parent's state.

MT safe.
</return>
</function>

<function name="gst_element_unlink">
<description>
Unlinks all source pads of the source element with all sink pads
of the sink element to which they are linked.

If the link has been made using gst_element_link(), it could have created an
requestpad, which has to be released using gst_element_release_request_pad().

</description>
<parameters>
<parameter name="src">
<parameter_description> the source #GstElement to unlink.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> the sink #GstElement to unlink.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_unlink_many">
<description>
Unlinks a series of elements. Uses gst_element_unlink().

</description>
<parameters>
<parameter name="element_1">
<parameter_description> the first #GstElement in the link chain.
</parameter_description>
</parameter>
<parameter name="element_2">
<parameter_description> the second #GstElement in the link chain.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> the NULL-terminated list of elements to unlink in order.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_element_unlink_pads">
<description>
Unlinks the two named pads of the source and destination elements.

This is a convenience function for gst_pad_unlink().

</description>
<parameters>
<parameter name="src">
<parameter_description> a (transfer none): #GstElement containing the source pad.
</parameter_description>
</parameter>
<parameter name="srcpadname">
<parameter_description> the name of the #GstPad in source element.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a #GstElement containing the destination pad.
</parameter_description>
</parameter>
<parameter name="destpadname">
<parameter_description> the name of the #GstPad in destination element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_encoding_audio_profile_new">
<description>
Creates a new #GstEncodingAudioProfile

All provided allocatable arguments will be internally copied, so can be
safely freed/unreferenced after calling this method.



</description>
<parameters>
<parameter name="format">
<parameter_description> the #GstCaps
</parameter_description>
</parameter>
<parameter name="preset">
<parameter_description> the preset(s) to use on the encoder, can be #NULL
</parameter_description>
</parameter>
<parameter name="restriction">
<parameter_description> the #GstCaps used to restrict the input to the encoder, can be
NULL. See gst_encoding_profile_get_restriction() for more details.
</parameter_description>
</parameter>
<parameter name="presence">
<parameter_description> the number of time this stream must be used. 0 means any number of
times (including never)
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GstEncodingAudioProfile.
</return>
</function>

<function name="gst_encoding_container_profile_add_profile">
<description>
Add a #GstEncodingProfile to the list of profiles handled by @container.

No copy of @profile will be made, if you wish to use it elsewhere after this
method you should increment its reference count.



</description>
<parameters>
<parameter name="container">
<parameter_description> the #GstEncodingContainerProfile to use
</parameter_description>
</parameter>
<parameter name="profile">
<parameter_description> the #GstEncodingProfile to add.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @stream was properly added, else %FALSE.
</return>
</function>

<function name="gst_encoding_container_profile_contains_profile">
<description>
Checks if @container contains a #GstEncodingProfile identical to
@profile.



</description>
<parameters>
<parameter name="container">
<parameter_description> a #GstEncodingContainerProfile
</parameter_description>
</parameter>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @container contains a #GstEncodingProfile identical
to @profile, else %FALSE.
</return>
</function>

<function name="gst_encoding_container_profile_new">
<description>
Creates a new #GstEncodingContainerProfile.



</description>
<parameters>
<parameter name="name">
<parameter_description> The name of the container profile, can be %NULL
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> The description of the container profile, can be %NULL
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The format to use for this profile
</parameter_description>
</parameter>
<parameter name="preset">
<parameter_description> The preset to use for this profile
</parameter_description>
</parameter>
</parameters>
<return> The newly created #GstEncodingContainerProfile.
</return>
</function>

<function name="gst_encoding_list_all_targets">
<description>
List all available #GstEncodingTarget for the specified category, or all categories
if @categoryname is %NULL.


</description>
<parameters>
<parameter name="categoryname">
<parameter_description> The category, for ex: #GST_ENCODING_CATEGORY_DEVICE.
Can be %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The list of #GstEncodingTarget

</return>
</function>

<function name="gst_encoding_list_available_categories">
<description>
Lists all #GstEncodingTarget categories present on disk.


</description>
<parameters>
</parameters>
<return> A list
of #GstEncodingTarget categories.

</return>
</function>

<function name="gst_encoding_profile_find">
<description>
Find the #GstEncodingProfile with the specified name and category.


</description>
<parameters>
<parameter name="targetname">
<parameter_description> The name of the target
</parameter_description>
</parameter>
<parameter name="profilename">
<parameter_description> The name of the profile
</parameter_description>
</parameter>
<parameter name="category">
<parameter_description> The target category. Can be %NULL
</parameter_description>
</parameter>
</parameters>
<return> The matching #GstEncodingProfile or %NULL.

</return>
</function>

<function name="gst_encoding_profile_get_description">
<description>


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> the description of the profile, can be %NULL.
</return>
</function>

<function name="gst_encoding_profile_get_format">
<description>


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps corresponding to the media format used in the profile.
</return>
</function>

<function name="gst_encoding_profile_get_input_caps">
<description>
Computes the full output caps that this @profile will be able to consume.



</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> The full caps the given @profile can consume. Call gst_caps_unref()
when you are done with the caps.
</return>
</function>

<function name="gst_encoding_profile_get_name">
<description>


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> the name of the profile, can be %NULL.
</return>
</function>

<function name="gst_encoding_profile_get_presence">
<description>


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> The number of times the profile is used in its parent
container profile. If 0, it is not a mandatory stream.
</return>
</function>

<function name="gst_encoding_profile_get_preset">
<description>


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> the name of the #GstPreset to be used in the profile.
</return>
</function>

<function name="gst_encoding_profile_get_restriction">
<description>


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> The restriction #GstCaps to apply before the encoder
that will be used in the profile. The fields present in restriction caps are
properties of the raw stream (that is before encoding), such as height and
width for video and depth and sampling rate for audio. Does not apply to
#GstEncodingContainerProfile (since there is no corresponding raw stream).
Can be %NULL.
</return>
</function>

<function name="gst_encoding_profile_get_type_nick">
<description>


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> the human-readable name of the type of @profile.
</return>
</function>

<function name="gst_encoding_profile_is_equal">
<description>
Checks whether the two #GstEncodingProfile are equal



</description>
<parameters>
<parameter name="a">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @a and @b are equal, else %FALSE.
</return>
</function>

<function name="gst_encoding_profile_set_description">
<description>
Set @description as the given description for the @profile. A copy of @description will be made
internally.


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> the description to set on the profile
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_encoding_profile_set_format">
<description>
Sets the media format used in the profile.


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the media format to use in the profile.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_encoding_profile_set_name">
<description>
Set @name as the given name for the @profile. A copy of @name will be made
internally.


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to set on the profile
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_encoding_profile_set_presence">
<description>
Set the number of time the profile is used in its parent
container profile. If 0, it is not a mandatory stream


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
<parameter name="presence">
<parameter_description> the number of time the profile can be used
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_encoding_profile_set_preset">
<description>
Sets the preset to use for the profile.


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
<parameter name="preset">
<parameter_description> the element preset to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_encoding_profile_set_restriction">
<description>
Set the restriction #GstCaps to apply before the encoder
that will be used in the profile. See gst_encoding_profile_set_restriction()
for more about restrictions. Does not apply to #GstEncodingContainerProfile.


</description>
<parameters>
<parameter name="profile">
<parameter_description> a #GstEncodingProfile
</parameter_description>
</parameter>
<parameter name="restriction">
<parameter_description> the restriction to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_encoding_target_add_profile">
<description>
Adds the given @profile to the @target. Each added profile must have
a unique name within the profile.

The @target will steal a reference to the @profile. If you wish to use
the profile after calling this method, you should increase its reference
count.



</description>
<parameters>
<parameter name="target">
<parameter_description> the #GstEncodingTarget to add a profile to
</parameter_description>
</parameter>
<parameter name="profile">
<parameter_description> the #GstEncodingProfile to add
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the profile was added, else %FALSE.
</return>
</function>

<function name="gst_encoding_target_get_category">
<description>


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GstEncodingTarget
</parameter_description>
</parameter>
</parameters>
<return> The category of the @target. For example:
#GST_ENCODING_CATEGORY_DEVICE.
</return>
</function>

<function name="gst_encoding_target_get_description">
<description>


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GstEncodingTarget
</parameter_description>
</parameter>
</parameters>
<return> The description of the @target.
</return>
</function>

<function name="gst_encoding_target_get_name">
<description>


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GstEncodingTarget
</parameter_description>
</parameter>
</parameters>
<return> The name of the @target.
</return>
</function>

<function name="gst_encoding_target_get_profile">
<description>


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GstEncodingTarget
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the profile to retrieve
</parameter_description>
</parameter>
</parameters>
<return> The matching #GstEncodingProfile, or %NULL.
</return>
</function>

<function name="gst_encoding_target_get_profiles">
<description>


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GstEncodingTarget
</parameter_description>
</parameter>
</parameters>
<return> A list of
#GstEncodingProfile(s) this @target handles.
</return>
</function>

<function name="gst_encoding_target_load">
<description>
Searches for the #GstEncodingTarget with the given name, loads it
and returns it.

If the category name is specified only targets from that category will be
searched for.



</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the #GstEncodingTarget to load.
</parameter_description>
</parameter>
<parameter name="category">
<parameter_description> the name of the target category, like
#GST_ENCODING_CATEGORY_DEVICE. Can be %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> If an error occured, this field will be filled in.
</parameter_description>
</parameter>
</parameters>
<return> The #GstEncodingTarget if available, else %NULL.
</return>
</function>

<function name="gst_encoding_target_load_from_file">
<description>
Opens the provided file and returns the contained #GstEncodingTarget.



</description>
<parameters>
<parameter name="filepath">
<parameter_description> The file location to load the #GstEncodingTarget from
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> If an error occured, this field will be filled in.
</parameter_description>
</parameter>
</parameters>
<return> The #GstEncodingTarget contained in the file, else
%NULL
</return>
</function>

<function name="gst_encoding_target_new">
<description>
Creates a new #GstEncodingTarget.

The name and category can only consist of lowercase ASCII letters for the
first character, followed by either lowercase ASCII letters, digits or
hyphens ('-').

The @category &lt;emphasis&gt;should&lt;/emphasis&gt; be one of the existing
well-defined categories, like #GST_ENCODING_CATEGORY_DEVICE, but it
&lt;emphasis&gt;can&lt;/emphasis&gt; be a application or user specific category if
needed.



</description>
<parameters>
<parameter name="name">
<parameter_description> The name of the target.
</parameter_description>
</parameter>
<parameter name="category">
<parameter_description> The name of the category to which this @target
belongs. For example: #GST_ENCODING_CATEGORY_DEVICE.
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> A description of #GstEncodingTarget in the
current locale.
</parameter_description>
</parameter>
<parameter name="profiles">
<parameter_description> A #GList of
#GstEncodingProfile.
</parameter_description>
</parameter>
</parameters>
<return> The newly created #GstEncodingTarget or %NULL if
there was an error.
</return>
</function>

<function name="gst_encoding_target_save">
<description>
Saves the @target to a default user-local directory.



</description>
<parameters>
<parameter name="target">
<parameter_description> a #GstEncodingTarget
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> If an error occured, this field will be filled in.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the target was correctly saved, else %FALSE.
</return>
</function>

<function name="gst_encoding_target_save_to_file">
<description>
Saves the @target to the provided file location.



</description>
<parameters>
<parameter name="target">
<parameter_description> a #GstEncodingTarget
</parameter_description>
</parameter>
<parameter name="filepath">
<parameter_description> the location to store the @target at.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> If an error occured, this field will be filled in.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the target was correctly saved, else %FALSE.
</return>
</function>

<function name="gst_encoding_video_profile_get_pass">
<description>


</description>
<parameters>
<parameter name="prof">
<parameter_description> a #GstEncodingVideoProfile
</parameter_description>
</parameter>
</parameters>
<return> The pass number if this is part of a multi-pass profile. Starts at
1 for multi-pass. 0 if this is not a multi-pass profile
</return>
</function>

<function name="gst_encoding_video_profile_get_variableframerate">
<description>


</description>
<parameters>
<parameter name="prof">
<parameter_description> a #GstEncodingVideoProfile
</parameter_description>
</parameter>
</parameters>
<return> Whether non-constant video framerate is allowed for encoding.
</return>
</function>

<function name="gst_encoding_video_profile_new">
<description>
Creates a new #GstEncodingVideoProfile

All provided allocatable arguments will be internally copied, so can be
safely freed/unreferenced after calling this method.

If you wish to control the pass number (in case of multi-pass scenarios),
please refer to the gst_encoding_video_profile_set_pass() documentation.

If you wish to use/force a constant framerate please refer to the
gst_encoding_video_profile_set_variableframerate() documentation.



</description>
<parameters>
<parameter name="format">
<parameter_description> the #GstCaps
</parameter_description>
</parameter>
<parameter name="preset">
<parameter_description> the preset(s) to use on the encoder, can be #NULL
</parameter_description>
</parameter>
<parameter name="restriction">
<parameter_description> the #GstCaps used to restrict the input to the encoder, can be
NULL. See gst_encoding_profile_get_restriction() for more details.
</parameter_description>
</parameter>
<parameter name="presence">
<parameter_description> the number of time this stream must be used. 0 means any number of
times (including never)
</parameter_description>
</parameter>
</parameters>
<return> the newly created #GstEncodingVideoProfile.
</return>
</function>

<function name="gst_encoding_video_profile_set_pass">
<description>
Sets the pass number of this video profile. The first pass profile should have
this value set to 1. If this video profile isn't part of a multi-pass profile,
you may set it to 0 (the default value).


</description>
<parameters>
<parameter name="prof">
<parameter_description> a #GstEncodingVideoProfile
</parameter_description>
</parameter>
<parameter name="pass">
<parameter_description> the pass number for this profile
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_encoding_video_profile_set_variableframerate">
<description>
If set to %TRUE, then the incoming streamm will be allowed to have non-constant
framerate. If set to %FALSE (default value), then the incoming stream will
be normalized by dropping/duplicating frames in order to produce a
constance framerate.


</description>
<parameters>
<parameter name="prof">
<parameter_description> a #GstEncodingVideoProfile
</parameter_description>
</parameter>
<parameter name="variableframerate">
<parameter_description> a boolean
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_error_get_message">
<description>
Get a string describing the error message in the current locale.


</description>
<parameters>
<parameter name="domain">
<parameter_description> the GStreamer error domain this error belongs to.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> the error code belonging to the domain.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string describing
the error message (in UTF-8 encoding)
</return>
</function>

<function name="gst_event_get_seqnum">
<description>
Retrieve the sequence number of a event.

Events have ever-incrementing sequence numbers, which may also be set
explicitly via gst_event_set_seqnum(). Sequence numbers are typically used to
indicate that a event corresponds to some other set of events or messages,
for example an EOS event corresponding to a SEEK event. It is considered good
practice to make this correspondence when possible, though it is not
required.

Note that events and messages share the same sequence number incrementor;
two events or messages will never not have the same sequence number unless
that correspondence was made explicitly.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #GstEvent.
</parameter_description>
</parameter>
</parameters>
<return> The event's sequence number.

MT safe.

</return>
</function>

<function name="gst_event_get_structure">
<description>
Access the structure of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> The #GstEvent.
</parameter_description>
</parameter>
</parameters>
<return> The structure of the event. The structure is still
owned by the event, which means that you should not free it and
that the pointer becomes invalid when you free the event.

MT safe.
</return>
</function>

<function name="gst_event_has_name">
<description>
Checks if @event has the given @name. This function is usually used to
check the name of a custom event.


</description>
<parameters>
<parameter name="event">
<parameter_description> The #GstEvent.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name to check
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @name matches the name of the event structure.

</return>
</function>

<function name="gst_event_new_buffer_size">
<description>
Create a new buffersize event. The event is sent downstream and notifies
elements that they should provide a buffer of the specified dimensions.

When the @async flag is set, a thread boundary is prefered.


</description>
<parameters>
<parameter name="format">
<parameter_description> buffer format
</parameter_description>
</parameter>
<parameter name="minsize">
<parameter_description> minimum buffer size
</parameter_description>
</parameter>
<parameter name="maxsize">
<parameter_description> maximum buffer size
</parameter_description>
</parameter>
<parameter name="async">
<parameter_description> thread behavior
</parameter_description>
</parameter>
</parameters>
<return> a new #GstEvent
</return>
</function>

<function name="gst_event_new_custom">
<description>
Create a new custom-typed event. This can be used for anything not
handled by other event-specific functions to pass an event to another
element.

Make sure to allocate an event type with the #GST_EVENT_MAKE_TYPE macro,
assigning a free number and filling in the correct direction and
serialization flags.

New custom events can also be created by subclassing the event type if
needed.


</description>
<parameters>
<parameter name="type">
<parameter_description> The type of the new event
</parameter_description>
</parameter>
<parameter name="structure">
<parameter_description> the structure for the event. The event will
take ownership of the structure.
</parameter_description>
</parameter>
</parameters>
<return> the new custom event.
</return>
</function>

<function name="gst_event_new_eos">
<description>
Create a new EOS event. The eos event can only travel downstream
synchronized with the buffer flow. Elements that receive the EOS
event on a pad can return #GST_FLOW_UNEXPECTED as a #GstFlowReturn
when data after the EOS event arrives.

The EOS event will travel down to the sink elements in the pipeline
which will then post the #GST_MESSAGE_EOS on the bus after they have
finished playing any buffered data.

When all sinks have posted an EOS message, an EOS message is
forwarded to the application.

The EOS event itself will not cause any state transitions of the pipeline.


</description>
<parameters>
</parameters>
<return> the new EOS event.
</return>
</function>

<function name="gst_event_new_flush_start">
<description>
Allocate a new flush start event. The flush start event can be sent
upstream and downstream and travels out-of-bounds with the dataflow.

It marks pads as being flushing and will make them return
#GST_FLOW_WRONG_STATE when used for data flow with gst_pad_push(),
gst_pad_chain(), gst_pad_alloc_buffer(), gst_pad_get_range() and
gst_pad_pull_range(). Any event (except a #GST_EVENT_FLUSH_STOP) received
on a flushing pad will return %FALSE immediately.

Elements should unlock any blocking functions and exit their streaming
functions as fast as possible when this event is received.

This event is typically generated after a seek to flush out all queued data
in the pipeline so that the new media is played as soon as possible.


</description>
<parameters>
</parameters>
<return> a new flush start event.
</return>
</function>

<function name="gst_event_new_flush_stop">
<description>
Allocate a new flush stop event. The flush stop event can be sent
upstream and downstream and travels serialized with the dataflow.
It is typically sent after sending a FLUSH_START event to make the
pads accept data again.

Elements can process this event synchronized with the dataflow since
the preceeding FLUSH_START event stopped the dataflow.

This event is typically generated to complete a seek and to resume
dataflow.


</description>
<parameters>
</parameters>
<return> a new flush stop event.
</return>
</function>

<function name="gst_event_new_latency">
<description>
Create a new latency event. The event is sent upstream from the sinks and
notifies elements that they should add an additional @latency to the
running time before synchronising against the clock.

The latency is mostly used in live sinks and is always expressed in
the time format.


</description>
<parameters>
<parameter name="latency">
<parameter_description> the new latency value
</parameter_description>
</parameter>
</parameters>
<return> a new #GstEvent

</return>
</function>

<function name="gst_event_new_navigation">
<description>
Create a new navigation event from the given description.


</description>
<parameters>
<parameter name="structure">
<parameter_description> description of the event. The event will take
ownership of the structure.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstEvent
</return>
</function>

<function name="gst_event_new_new_segment">
<description>
Allocate a new newsegment event with the given format/values tripplets

This method calls gst_event_new_new_segment_full() passing a default
value of 1.0 for applied_rate


</description>
<parameters>
<parameter name="update">
<parameter_description> is this segment an update to a previous one
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> a new rate for playback
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The format of the segment values
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start value of the segment
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the stop value of the segment
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> stream position
</parameter_description>
</parameter>
</parameters>
<return> a new newsegment event.
</return>
</function>

<function name="gst_event_new_new_segment_full">
<description>
Allocate a new newsegment event with the given format/values triplets.

The newsegment event marks the range of buffers to be processed. All
data not within the segment range is not to be processed. This can be
used intelligently by plugins to apply more efficient methods of skipping
unneeded data. The valid range is expressed with the @start and @stop
values.

The position value of the segment is used in conjunction with the start
value to convert the buffer timestamps into the stream time. This is 
usually done in sinks to report the current stream_time. 
@position represents the stream_time of a buffer carrying a timestamp of 
@start. @position cannot be -1.

@start cannot be -1, @stop can be -1. If there
is a valid @stop given, it must be greater or equal the @start, including 
when the indicated playback @rate is &lt; 0.

The @applied_rate value provides information about any rate adjustment that
has already been made to the timestamps and content on the buffers of the 
stream. (@rate * @applied_rate) should always equal the rate that has been 
requested for playback. For example, if an element has an input segment 
with intended playback @rate of 2.0 and applied_rate of 1.0, it can adjust 
incoming timestamps and buffer content by half and output a newsegment event 
with @rate of 1.0 and @applied_rate of 2.0

After a newsegment event, the buffer stream time is calculated with:

position + (TIMESTAMP(buf) - start) * ABS (rate * applied_rate)


</description>
<parameters>
<parameter name="update">
<parameter_description> Whether this segment is an update to a previous one
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> A new rate for playback
</parameter_description>
</parameter>
<parameter name="applied_rate">
<parameter_description> The rate factor which has already been applied
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The format of the segment values
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> The start value of the segment
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> The stop value of the segment
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> stream position
</parameter_description>
</parameter>
</parameters>
<return> a new newsegment event.

</return>
</function>

<function name="gst_event_new_qos">
<description>
Allocate a new qos event with the given values. This function calls
gst_event_new_qos_full() with the type set to #GST_QOS_TYPE_OVERFLOW
when diff is negative (buffers are in time) and #GST_QOS_TYPE_UNDERFLOW
when @diff is positive (buffers are late).


</description>
<parameters>
<parameter name="proportion">
<parameter_description> the proportion of the qos message
</parameter_description>
</parameter>
<parameter name="diff">
<parameter_description> The time difference of the last Clock sync
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> The timestamp of the buffer
</parameter_description>
</parameter>
</parameters>
<return> a new QOS event.
</return>
</function>

<function name="gst_event_new_qos_full">
<description>
Allocate a new qos event with the given values.
The QOS event is generated in an element that wants an upstream
element to either reduce or increase its rate because of
high/low CPU load or other resource usage such as network performance or
throttling. Typically sinks generate these events for each buffer
they receive.

@type indicates the reason for the QoS event. #GST_QOS_TYPE_OVERFLOW is
used when a buffer arrived in time or when the sink cannot keep up with
the upstream datarate. #GST_QOS_TYPE_UNDERFLOW is when the sink is not
receiving buffers fast enough and thus has to drop late buffers. 
#GST_QOS_TYPE_THROTTLE is used when the datarate is artificially limited
by the application, for example to reduce power consumption.

@proportion indicates the real-time performance of the streaming in the
element that generated the QoS event (usually the sink). The value is
generally computed based on more long term statistics about the streams
timestamps compared to the clock.
A value &lt; 1.0 indicates that the upstream element is producing data faster
than real-time. A value &gt; 1.0 indicates that the upstream element is not
producing data fast enough. 1.0 is the ideal @proportion value. The
proportion value can safely be used to lower or increase the quality of
the element.

@diff is the difference against the clock in running time of the last
buffer that caused the element to generate the QOS event. A negative value
means that the buffer with @timestamp arrived in time. A positive value
indicates how late the buffer with @timestamp was. When throttling is
enabled, @diff will be set to the requested throttling interval.

@timestamp is the timestamp of the last buffer that cause the element
to generate the QOS event. It is expressed in running time and thus an ever
increasing value.

The upstream element can use the @diff and @timestamp values to decide
whether to process more buffers. For possitive @diff, all buffers with
timestamp &lt;= @timestamp + @diff will certainly arrive late in the sink
as well. A (negative) @diff value so that @timestamp + @diff would yield a
result smaller than 0 is not allowed.

The application can use general event probes to intercept the QoS
event and implement custom application specific QoS handling.


</description>
<parameters>
<parameter name="type">
<parameter_description> the QoS type
</parameter_description>
</parameter>
<parameter name="proportion">
<parameter_description> the proportion of the qos message
</parameter_description>
</parameter>
<parameter name="diff">
<parameter_description> The time difference of the last Clock sync
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> The timestamp of the buffer
</parameter_description>
</parameter>
</parameters>
<return> a new QOS event.

</return>
</function>

<function name="gst_event_new_seek">
<description>
Allocate a new seek event with the given parameters.

The seek event configures playback of the pipeline between @start to @stop
at the speed given in @rate, also called a playback segment.
The @start and @stop values are expressed in @format.

A @rate of 1.0 means normal playback rate, 2.0 means double speed.
Negatives values means backwards playback. A value of 0.0 for the
rate is not allowed and should be accomplished instead by PAUSING the
pipeline.

A pipeline has a default playback segment configured with a start
position of 0, a stop position of -1 and a rate of 1.0. The currently
configured playback segment can be queried with #GST_QUERY_SEGMENT. 

@start_type and @stop_type specify how to adjust the currently configured 
start and stop fields in playback segment. Adjustments can be made relative
or absolute to the last configured values. A type of #GST_SEEK_TYPE_NONE
means that the position should not be updated.

When the rate is positive and @start has been updated, playback will start
from the newly configured start position. 

For negative rates, playback will start from the newly configured stop
position (if any). If the stop position if updated, it must be different from
-1 for negative rates.

It is not possible to seek relative to the current playback position, to do
this, PAUSE the pipeline, query the current playback position with
#GST_QUERY_POSITION and update the playback segment current position with a
#GST_SEEK_TYPE_SET to the desired position. 


</description>
<parameters>
<parameter name="rate">
<parameter_description> The new playback rate
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The format of the seek values
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> The optional seek flags
</parameter_description>
</parameter>
<parameter name="start_type">
<parameter_description> The type and flags for the new start position
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> The value of the new start position
</parameter_description>
</parameter>
<parameter name="stop_type">
<parameter_description> The type and flags for the new stop position
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> The value of the new stop position
</parameter_description>
</parameter>
</parameters>
<return> a new seek event.
</return>
</function>

<function name="gst_event_new_sink_message">
<description>
Create a new sink-message event. The purpose of the sink-message event is
to instruct a sink to post the message contained in the event synchronized
with the stream.


</description>
<parameters>
<parameter name="msg">
<parameter_description> the #GstMessage to be posted
</parameter_description>
</parameter>
</parameters>
<return> a new #GstEvent

</return>
</function>

<function name="gst_event_new_step">
<description>
Create a new step event. The purpose of the step event is to instruct a sink
to skip @amount (expressed in @format) of media. It can be used to implement
stepping through the video frame by frame or for doing fast trick modes.

A rate of &lt;= 0.0 is not allowed, pause the pipeline or reverse the playback
direction of the pipeline to get the same effect.

The @flush flag will clear any pending data in the pipeline before starting
the step operation.

The @intermediate flag instructs the pipeline that this step operation is
part of a larger step operation.


</description>
<parameters>
<parameter name="format">
<parameter_description> the format of @amount
</parameter_description>
</parameter>
<parameter name="amount">
<parameter_description> the amount of data to step
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the step rate
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> flushing steps
</parameter_description>
</parameter>
<parameter name="intermediate">
<parameter_description> intermediate steps
</parameter_description>
</parameter>
</parameters>
<return> a new #GstEvent

</return>
</function>

<function name="gst_event_new_tag">
<description>
Generates a metadata tag event from the given @taglist.


</description>
<parameters>
<parameter name="taglist">
<parameter_description> metadata list. The event will take ownership
of the taglist.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstEvent
</return>
</function>

<function name="gst_event_parse_buffer_size">
<description>
Get the format, minsize, maxsize and async-flag in the buffersize event.

</description>
<parameters>
<parameter name="event">
<parameter_description> The event to query
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> A pointer to store the format in
</parameter_description>
</parameter>
<parameter name="minsize">
<parameter_description> A pointer to store the minsize in
</parameter_description>
</parameter>
<parameter name="maxsize">
<parameter_description> A pointer to store the maxsize in
</parameter_description>
</parameter>
<parameter name="async">
<parameter_description> A pointer to store the async-flag in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_latency">
<description>
Get the latency in the latency event.


</description>
<parameters>
<parameter name="event">
<parameter_description> The event to query
</parameter_description>
</parameter>
<parameter name="latency">
<parameter_description> A pointer to store the latency in.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_new_segment">
<description>
Get the update flag, rate, format, start, stop and position in the 
newsegment event. In general, gst_event_parse_new_segment_full() should
be used instead of this, to also retrieve the applied_rate value of the
segment. See gst_event_new_new_segment_full() for a full description 
of the newsegment event.

</description>
<parameters>
<parameter name="event">
<parameter_description> The event to query
</parameter_description>
</parameter>
<parameter name="update">
<parameter_description> A pointer to the update flag of the segment
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> A pointer to the rate of the segment
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> A pointer to the format of the newsegment values
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> A pointer to store the start value in
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> A pointer to store the stop value in
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A pointer to store the stream time in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_new_segment_full">
<description>
Get the update, rate, applied_rate, format, start, stop and 
position in the newsegment event. See gst_event_new_new_segment_full() 
for a full description of the newsegment event.


</description>
<parameters>
<parameter name="event">
<parameter_description> The event to query
</parameter_description>
</parameter>
<parameter name="update">
<parameter_description> A pointer to the update flag of the segment
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> A pointer to the rate of the segment
</parameter_description>
</parameter>
<parameter name="applied_rate">
<parameter_description> A pointer to the applied_rate of the segment
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> A pointer to the format of the newsegment values
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> A pointer to store the start value in
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> A pointer to store the stop value in
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> A pointer to store the stream time in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_qos">
<description>
Get the proportion, diff and timestamp in the qos event. See
gst_event_new_qos() for more information about the different QoS values.

</description>
<parameters>
<parameter name="event">
<parameter_description> The event to query
</parameter_description>
</parameter>
<parameter name="proportion">
<parameter_description> A pointer to store the proportion in
</parameter_description>
</parameter>
<parameter name="diff">
<parameter_description> A pointer to store the diff in
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> A pointer to store the timestamp in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_qos_full">
<description>
Get the type, proportion, diff and timestamp in the qos event. See
gst_event_new_qos_full() for more information about the different QoS values.


</description>
<parameters>
<parameter name="event">
<parameter_description> The event to query
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> A pointer to store the QoS type in
</parameter_description>
</parameter>
<parameter name="proportion">
<parameter_description> A pointer to store the proportion in
</parameter_description>
</parameter>
<parameter name="diff">
<parameter_description> A pointer to store the diff in
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> A pointer to store the timestamp in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_seek">
<description>
Parses a seek @event and stores the results in the given result locations.

</description>
<parameters>
<parameter name="event">
<parameter_description> a seek event
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> result location for the rate
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> result location for the stream format
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> result location for the #GstSeekFlags
</parameter_description>
</parameter>
<parameter name="start_type">
<parameter_description> result location for the #GstSeekType of the start position
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> result location for the start postion expressed in @format
</parameter_description>
</parameter>
<parameter name="stop_type">
<parameter_description> result location for the #GstSeekType of the stop position
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> result location for the stop postion expressed in @format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_sink_message">
<description>
Parse the sink-message event. Unref @msg after usage.


</description>
<parameters>
<parameter name="event">
<parameter_description> The event to query
</parameter_description>
</parameter>
<parameter name="msg">
<parameter_description> a pointer to store the #GstMessage in.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_step">
<description>
Parse the step event.


</description>
<parameters>
<parameter name="event">
<parameter_description> The event to query
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a pointer to store the format in
</parameter_description>
</parameter>
<parameter name="amount">
<parameter_description> a pointer to store the amount in
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> a pointer to store the rate in
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> a pointer to store the flush boolean in
</parameter_description>
</parameter>
<parameter name="intermediate">
<parameter_description> a pointer to store the intermediate
boolean in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_tag">
<description>
Parses a tag @event and stores the results in the given @taglist location.
No reference to the taglist will be returned, it remains valid only until
the @event is freed. Don't modify or free the taglist, make a copy if you
want to modify it or store it for later use.

</description>
<parameters>
<parameter name="event">
<parameter_description> a tag event
</parameter_description>
</parameter>
<parameter name="taglist">
<parameter_description> pointer to metadata list
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_set_seqnum">
<description>
Set the sequence number of a event.

This function might be called by the creator of a event to indicate that the
event relates to other events or messages. See gst_event_get_seqnum() for
more information.

MT safe.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #GstEvent.
</parameter_description>
</parameter>
<parameter name="seqnum">
<parameter_description> A sequence number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_type_get_flags">
<description>
Gets the #GstEventTypeFlags associated with @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GstEventType
</parameter_description>
</parameter>
</parameters>
<return> a #GstEventTypeFlags.
</return>
</function>

<function name="gst_event_type_get_name">
<description>
Get a printable name for the given event type. Do not modify or free.


</description>
<parameters>
<parameter name="type">
<parameter_description> the event type
</parameter_description>
</parameter>
</parameters>
<return> a reference to the static name of the event.
</return>
</function>

<function name="gst_event_type_to_quark">
<description>
Get the unique quark for the given event type.


</description>
<parameters>
<parameter name="type">
<parameter_description> the event type
</parameter_description>
</parameter>
</parameters>
<return> the quark associated with the event type
</return>
</function>

<function name="gst_fft_f32_fft">
<description>
This performs the FFT on @timedata and puts the result in @freqdata.

@timedata must have as many samples as specified with the @len parameter while
allocating the #GstFFTF32 instance with gst_fft_f32_new().

@freqdata must be large enough to hold @len/2 + 1 #GstFFTF32Complex frequency
domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF32 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Buffer of the samples in the time domain
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Target buffer for the samples in the frequency domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_f32_free">
<description>
This frees the memory allocated for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF32 instance for this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_f32_inverse_fft">
<description>
This performs the inverse FFT on @freqdata and puts the result in @timedata.

@freqdata must have @len/2 + 1 samples, where @len is the parameter specified
while allocating the #GstFFTF32 instance with gst_fft_f32_new().

@timedata must be large enough to hold @len time domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF32 instance for this call
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Buffer of the samples in the frequency domain
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Target buffer for the samples in the time domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_f32_new">
<description>
This returns a new #GstFFTF32 instance with the given parameters. It makes
sense to keep one instance for several calls for speed reasons.

@len must be even and to get the best performance a product of
2, 3 and 5. To get the next number with this characteristics use
gst_fft_next_fast_length().


</description>
<parameters>
<parameter name="len">
<parameter_description> Length of the FFT in the time domain
</parameter_description>
</parameter>
<parameter name="inverse">
<parameter_description> %TRUE if the #GstFFTF32 instance should be used for the inverse FFT
</parameter_description>
</parameter>
</parameters>
<return> a new #GstFFTF32 instance.
</return>
</function>

<function name="gst_fft_f32_window">
<description>
This calls the window function @window on the @timedata sample buffer.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF32 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Time domain samples
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> Window function to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_f64_fft">
<description>
This performs the FFT on @timedata and puts the result in @freqdata.

@timedata must have as many samples as specified with the @len parameter while
allocating the #GstFFTF64 instance with gst_fft_f64_new().

@freqdata must be large enough to hold @len/2 + 1 #GstFFTF64Complex frequency
domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF64 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Buffer of the samples in the time domain
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Target buffer for the samples in the frequency domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_f64_free">
<description>
This frees the memory allocated for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF64 instance for this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_f64_inverse_fft">
<description>
This performs the inverse FFT on @freqdata and puts the result in @timedata.

@freqdata must have @len/2 + 1 samples, where @len is the parameter specified
while allocating the #GstFFTF64 instance with gst_fft_f64_new().

@timedata must be large enough to hold @len time domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF64 instance for this call
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Buffer of the samples in the frequency domain
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Target buffer for the samples in the time domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_f64_new">
<description>
This returns a new #GstFFTF64 instance with the given parameters. It makes
sense to keep one instance for several calls for speed reasons.

@len must be even and to get the best performance a product of
2, 3 and 5. To get the next number with this characteristics use
gst_fft_next_fast_length().


</description>
<parameters>
<parameter name="len">
<parameter_description> Length of the FFT in the time domain
</parameter_description>
</parameter>
<parameter name="inverse">
<parameter_description> %TRUE if the #GstFFTF64 instance should be used for the inverse FFT
</parameter_description>
</parameter>
</parameters>
<return> a new #GstFFTF64 instance.
</return>
</function>

<function name="gst_fft_f64_window">
<description>
This calls the window function @window on the @timedata sample buffer.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF64 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Time domain samples
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> Window function to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_next_fast_length">
<description>
Returns the next number to @n that is entirely a product
of 2, 3 and 5. Using this as the @len parameter for
the different GstFFT types will provide the best performance.


</description>
<parameters>
<parameter name="n">
<parameter_description> Number for which the next fast length should be returned
</parameter_description>
</parameter>
</parameters>
<return> the next fast FFT length.

</return>
</function>

<function name="gst_fft_s16_fft">
<description>
This performs the FFT on @timedata and puts the result in @freqdata.

@timedata must have as many samples as specified with the @len parameter while
allocating the #GstFFTS16 instance with gst_fft_s16_new().

@freqdata must be large enough to hold @len/2 + 1 #GstFFTS16Complex frequency
domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS16 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Buffer of the samples in the time domain
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Target buffer for the samples in the frequency domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s16_free">
<description>
This frees the memory allocated for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS16 instance for this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s16_inverse_fft">
<description>
This performs the inverse FFT on @freqdata and puts the result in @timedata.

@freqdata must have @len/2 + 1 samples, where @len is the parameter specified
while allocating the #GstFFTS16 instance with gst_fft_s16_new().

@timedata must be large enough to hold @len time domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS16 instance for this call
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Buffer of the samples in the frequency domain
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Target buffer for the samples in the time domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s16_new">
<description>
This returns a new #GstFFTS16 instance with the given parameters. It makes
sense to keep one instance for several calls for speed reasons.

@len must be even and to get the best performance a product of
2, 3 and 5. To get the next number with this characteristics use
gst_fft_next_fast_length().


</description>
<parameters>
<parameter name="len">
<parameter_description> Length of the FFT in the time domain
</parameter_description>
</parameter>
<parameter name="inverse">
<parameter_description> %TRUE if the #GstFFTS16 instance should be used for the inverse FFT
</parameter_description>
</parameter>
</parameters>
<return> a new #GstFFTS16 instance.
</return>
</function>

<function name="gst_fft_s16_window">
<description>
This calls the window function @window on the @timedata sample buffer.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS16 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Time domain samples
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> Window function to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s32_fft">
<description>
This performs the FFT on @timedata and puts the result in @freqdata.

@timedata must have as many samples as specified with the @len parameter while
allocating the #GstFFTS32 instance with gst_fft_s32_new().

@freqdata must be large enough to hold @len/2 + 1 #GstFFTS32Complex frequency
domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS32 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Buffer of the samples in the time domain
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Target buffer for the samples in the frequency domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s32_free">
<description>
This frees the memory allocated for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS32 instance for this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s32_inverse_fft">
<description>
This performs the inverse FFT on @freqdata and puts the result in @timedata.

@freqdata must have @len/2 + 1 samples, where @len is the parameter specified
while allocating the #GstFFTS32 instance with gst_fft_s32_new().

@timedata must be large enough to hold @len time domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS32 instance for this call
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Buffer of the samples in the frequency domain
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Target buffer for the samples in the time domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s32_new">
<description>
This returns a new #GstFFTS32 instance with the given parameters. It makes
sense to keep one instance for several calls for speed reasons.

@len must be even and to get the best performance a product of
2, 3 and 5. To get the next number with this characteristics use
gst_fft_next_fast_length().


</description>
<parameters>
<parameter name="len">
<parameter_description> Length of the FFT in the time domain
</parameter_description>
</parameter>
<parameter name="inverse">
<parameter_description> %TRUE if the #GstFFTS32 instance should be used for the inverse FFT
</parameter_description>
</parameter>
</parameters>
<return> a new #GstFFTS32 instance.
</return>
</function>

<function name="gst_fft_s32_window">
<description>
This calls the window function @window on the @timedata sample buffer.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS32 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Time domain samples
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> Window function to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_filename_to_uri">
<description>
Similar to g_filename_to_uri(), but attempts to handle relative file paths
as well. Before converting @filename into an URI, it will be prefixed by
the current working directory if it is a relative path, and then the path
will be canonicalised so that it doesn't contain any './' or '../' segments.

On Windows #filename should be in UTF-8 encoding.


</description>
<parameters>
<parameter name="filename">
<parameter_description> absolute or relative file name path
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> pointer to error, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_filter_run">
<description>
Iterates over the elements in @list, calling @func with the
list item data for each item.  If @func returns TRUE, @data is
prepended to the list of results returned.  If @first is true,
the search is halted after the first result is found.

Since gst_filter_run() knows nothing about the type of @data, no
reference will be taken (if @data refers to an object) and no copy of
@data wil be made in any other way when prepending @data to the list of
results.


</description>
<parameters>
<parameter name="list">
<parameter_description> a linked list
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to execute for each item
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description> flag to stop execution after a successful item
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return> the list of results. Free with g_list_free()
when no longer needed (the data contained in the list is a flat copy
and does need to be unreferenced or freed).
</return>
</function>

<function name="gst_flow_get_name">
<description>
Gets a string representing the given flow return.


</description>
<parameters>
<parameter name="ret">
<parameter_description> a #GstFlowReturn to get the name of.
</parameter_description>
</parameter>
</parameters>
<return> a static string with the name of the flow return.
</return>
</function>

<function name="gst_flow_to_quark">
<description>
Get the unique quark for the given GstFlowReturn.


</description>
<parameters>
<parameter name="ret">
<parameter_description> a #GstFlowReturn to get the quark of.
</parameter_description>
</parameter>
</parameters>
<return> the quark associated with the flow return or 0 if an
invalid return was specified.
</return>
</function>

<function name="gst_format_get_by_nick">
<description>
Return the format registered with the given nick.


</description>
<parameters>
<parameter name="nick">
<parameter_description> The nick of the format
</parameter_description>
</parameter>
</parameters>
<return> The format with @nick or GST_FORMAT_UNDEFINED
if the format was not registered.
</return>
</function>

<function name="gst_format_get_details">
<description>
Get details about the given format.


</description>
<parameters>
<parameter name="format">
<parameter_description> The format to get details of
</parameter_description>
</parameter>
</parameters>
<return> The #GstFormatDefinition for @format or NULL on failure.

MT safe.
</return>
</function>

<function name="gst_format_get_name">
<description>
Get a printable name for the given format. Do not modify or free.


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstFormat
</parameter_description>
</parameter>
</parameters>
<return> a reference to the static name of the format or NULL if
the format is unknown.
</return>
</function>

<function name="gst_format_iterate_definitions">
<description>
Iterate all the registered formats. The format definition is read
only.


</description>
<parameters>
</parameters>
<return> a GstIterator of #GstFormatDefinition.
</return>
</function>

<function name="gst_format_register">
<description>
Create a new GstFormat based on the nick or return an
already registered format with that nick.


</description>
<parameters>
<parameter name="nick">
<parameter_description> The nick of the new format
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> The description of the new format
</parameter_description>
</parameter>
</parameters>
<return> A new GstFormat or an already registered format
with the same nick.

MT safe.
</return>
</function>

<function name="gst_format_to_quark">
<description>
Get the unique quark for the given format.


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstFormat
</parameter_description>
</parameter>
</parameters>
<return> the quark associated with the format or 0 if the format
is unknown.
</return>
</function>

<function name="gst_formats_contains">
<description>
See if the given format is inside the format array.


</description>
<parameters>
<parameter name="formats">
<parameter_description> The format array to search
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format to find
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the format is found inside the array
</return>
</function>

<function name="gst_ghost_pad_construct">
<description>
Finish initialization of a newly allocated ghost pad.

This function is most useful in language bindings and when subclassing
#GstGhostPad; plugin and application developers normally will not call this
function. Call this function directly after a call to g_object_new
(GST_TYPE_GHOST_PAD, &quot;direction&quot;, @dir, ..., NULL).


</description>
<parameters>
<parameter name="gpad">
<parameter_description> the newly allocated ghost pad
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the construction succeeds, %FALSE otherwise.

</return>
</function>

<function name="gst_ghost_pad_get_target">
<description>
Get the target pad of @gpad. Unref target pad after usage.


</description>
<parameters>
<parameter name="gpad">
<parameter_description> the #GstGhostPad
</parameter_description>
</parameter>
</parameters>
<return> the target #GstPad, can be NULL if the ghostpad
has no target set. Unref target pad after usage.
</return>
</function>

<function name="gst_ghost_pad_new">
<description>
Create a new ghostpad with @target as the target. The direction will be taken
from the target pad. @target must be unlinked.

Will ref the target.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the new pad, or NULL to assign a default name
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the pad to ghost.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPad, or NULL in case of an error.
</return>
</function>

<function name="gst_ghost_pad_new_from_template">
<description>
Create a new ghostpad with @target as the target. The direction will be taken
from the target pad. The template used on the ghostpad will be @template.

Will ref the target.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the new pad, or NULL to assign a default name.
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the pad to ghost.
</parameter_description>
</parameter>
<parameter name="templ">
<parameter_description> the #GstPadTemplate to use on the ghostpad.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPad, or NULL in case of an error.

</return>
</function>

<function name="gst_ghost_pad_new_no_target">
<description>
Create a new ghostpad without a target with the given direction.
A target can be set on the ghostpad later with the
gst_ghost_pad_set_target() function.

The created ghostpad will not have a padtemplate.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the new pad, or NULL to assign a default name.
</parameter_description>
</parameter>
<parameter name="dir">
<parameter_description> the direction of the ghostpad
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPad, or NULL in case of an error.
</return>
</function>

<function name="gst_ghost_pad_new_no_target_from_template">
<description>
Create a new ghostpad based on @templ, without setting a target. The
direction will be taken from the @templ.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the new pad, or NULL to assign a default name
</parameter_description>
</parameter>
<parameter name="templ">
<parameter_description> the #GstPadTemplate to create the ghostpad from.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPad, or NULL in case of an error.

</return>
</function>

<function name="gst_ghost_pad_save_thyself">
<description>
Saves the ghost pad into an xml representation.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a ghost #GstPad to save.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the parent #xmlNodePtr to save the description in.
</parameter_description>
</parameter>
</parameters>
<return> the #xmlNodePtr representation of the pad.
</return>
</function>

<function name="gst_ghost_pad_set_target">
<description>
Set the new target of the ghostpad @gpad. Any existing target
is unlinked and links to the new target are established. if @newtarget is
NULL the target will be cleared.


</description>
<parameters>
<parameter name="gpad">
<parameter_description> the #GstGhostPad
</parameter_description>
</parameter>
<parameter name="newtarget">
<parameter_description> the new pad target
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the new target could be set. This function
can return FALSE when the internal pads could not be linked.
</return>
</function>

<function name="gst_implements_interface_cast">
<description>
cast a given object to an interface type, and check whether this
interface is supported for this specific instance.


</description>
<parameters>
<parameter name="from">
<parameter_description> the object (any sort) from which to cast to the interface
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the interface type to cast to
</parameter_description>
</parameter>
</parameters>
<return> a gpointer to the interface type
</return>
</function>

<function name="gst_implements_interface_check">
<description>
check a given object for an interface implementation, and check
whether this interface is supported for this specific instance.


</description>
<parameters>
<parameter name="from">
<parameter_description> the object (any sort) from which to check from for the interface
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the interface type to check for
</parameter_description>
</parameter>
</parameters>
<return> whether or not the object implements the given interface
</return>
</function>

<function name="gst_index_add_association">
<description>
Associate given format/value pairs with each other.
Be sure to pass gint64 values to this functions varargs,
you might want to use a gint64 cast to be sure.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to add the entry to
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the index writer
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> optinal flags for this entry
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the value
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> other format/value pairs or 0 to end the list
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly added entry in the index.
</return>
</function>

<function name="gst_index_add_associationv">
<description>
Associate given format/value pairs with each other.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to add the entry to
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the index writer
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> optinal flags for this entry
</parameter_description>
</parameter>
<parameter name="n">
<parameter_description> number of associations
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> list of associations
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly added entry in the index.
</return>
</function>

<function name="gst_index_add_format">
<description>
Adds a format entry into the index. This function is
used to map dynamic GstFormat ids to their original
format key.

Free-function: gst_index_entry_free


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to add the entry to
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the index writer
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format to add to the index
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly added entry in the index.
</return>
</function>

<function name="gst_index_add_id">
<description>
Add an id entry into the index.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to add the entry to
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the index writer
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> the description of the index writer
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly added entry in the index.
</return>
</function>

<function name="gst_index_add_object">
<description>
Add the given object to the index with the given key.

This function is not yet implemented.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to add the object to
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the index writer
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key for the object
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the GType of the object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> a pointer to the object to add
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the newly added entry in the index.
</return>
</function>

<function name="gst_index_commit">
<description>
Tell the index that the writer with the given id is done
with this index and is not going to write any more entries
to it.

</description>
<parameters>
<parameter name="index">
<parameter_description> the index to commit
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the writer that commited the index
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_index_entry_assoc_map">
<description>
Gets alternative formats associated with the indexentry.


</description>
<parameters>
<parameter name="entry">
<parameter_description> the index to search
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the value the find
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to store the value
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there was a value associated with the given
format.
</return>
</function>

<function name="gst_index_entry_copy">
<description>
Copies an entry and returns the result.

Free-function: gst_index_entry_free


</description>
<parameters>
<parameter name="entry">
<parameter_description> the entry to copy
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GstIndexEntry.
</return>
</function>

<function name="gst_index_entry_free">
<description>
Free the memory used by the given entry.

</description>
<parameters>
<parameter name="entry">
<parameter_description> the entry to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_index_factory_create">
<description>
Create a new #GstIndex instance from the
given indexfactory.


</description>
<parameters>
<parameter name="factory">
<parameter_description> the factory used to create the instance
</parameter_description>
</parameter>
</parameters>
<return> a new #GstIndex instance.
</return>
</function>

<function name="gst_index_factory_destroy">
<description>
Removes the index from the global list.

</description>
<parameters>
<parameter name="factory">
<parameter_description> factory to destroy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_index_factory_find">
<description>
Search for an indexfactory of the given name.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of indexfactory to find
</parameter_description>
</parameter>
</parameters>
<return> #GstIndexFactory if found, NULL otherwise
</return>
</function>

<function name="gst_index_factory_make">
<description>
Create a new #GstIndex instance from the
indexfactory with the given name.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the factory used to create the instance
</parameter_description>
</parameter>
</parameters>
<return> a new #GstIndex instance.
</return>
</function>

<function name="gst_index_factory_new">
<description>
Create a new indexfactory with the given parameters


</description>
<parameters>
<parameter name="name">
<parameter_description> name of indexfactory to create
</parameter_description>
</parameter>
<parameter name="longdesc">
<parameter_description> long description of indexfactory to create
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the GType of the GstIndex element of this factory
</parameter_description>
</parameter>
</parameters>
<return> a new #GstIndexFactory.
</return>
</function>

<function name="gst_index_get_assoc_entry">
<description>
Finds the given format/value in the index


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to search
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the index writer
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> The lookup method to use
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags for the entry
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the value
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to find
</parameter_description>
</parameter>
</parameters>
<return> the entry associated with the value or NULL if the
value was not found.
</return>
</function>

<function name="gst_index_get_assoc_entry_full">
<description>
Finds the given format/value in the index with the given
compare function and user_data.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to search
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id of the index writer
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> The lookup method to use
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> Flags for the entry
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the value
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to find
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function used to compare entries
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the compare function
</parameter_description>
</parameter>
</parameters>
<return> the entry associated with the value or NULL if the
value was not found.
</return>
</function>

<function name="gst_index_get_certainty">
<description>
Get the certainty of the given index.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to get the certainty of
</parameter_description>
</parameter>
</parameters>
<return> the certainty of the index.
</return>
</function>

<function name="gst_index_get_group">
<description>
Get the id of the current group.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to get the current group from
</parameter_description>
</parameter>
</parameters>
<return> the id of the current group.
</return>
</function>

<function name="gst_index_get_writer_id">
<description>
Before entries can be added to the index, a writer
should obtain a unique id. The methods to add new entries
to the index require this id as an argument.

The application can implement a custom function to map the writer object
to a string. That string will be used to register or look up an id
in the index.

&lt;note&gt;
The caller must not hold @writer's #GST_OBJECT_LOCK, as the default
resolver may call functions that take the object lock as well, and
the lock is not recursive.
&lt;/note&gt;


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to get a unique write id for
</parameter_description>
</parameter>
<parameter name="writer">
<parameter_description> the GstObject to allocate an id for
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> a pointer to a gint to hold the id
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the writer would be mapped to an id.
</return>
</function>

<function name="gst_index_new">
<description>
Create a new dummy index object. Use gst_element_set_index() to assign that
to an element or pipeline. This index is not storing anything, but will
still emit e.g. the #GstIndex::entry-added signal.


</description>
<parameters>
</parameters>
<return> a new index object
</return>
</function>

<function name="gst_index_new_group">
<description>
Create a new group for the given index. It will be
set as the current group.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to create the new group in
</parameter_description>
</parameter>
</parameters>
<return> the id of the newly created group.
</return>
</function>

<function name="gst_index_set_certainty">
<description>
Set the certainty of the given index.

</description>
<parameters>
<parameter name="index">
<parameter_description> the index to set the certainty on
</parameter_description>
</parameter>
<parameter name="certainty">
<parameter_description> the certainty to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_index_set_filter">
<description>
Lets the app register a custom filter function so that
it can select what entries should be stored in the index.

</description>
<parameters>
<parameter name="index">
<parameter_description> the index to register the filter on
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> the filter to register
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to the filter function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_index_set_filter_full">
<description>
Lets the app register a custom filter function so that
it can select what entries should be stored in the index.

</description>
<parameters>
<parameter name="index">
<parameter_description> the index to register the filter on
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> the filter to register
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to the filter function
</parameter_description>
</parameter>
<parameter name="user_data_destroy">
<parameter_description> function to call when @user_data is unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_index_set_group">
<description>
Set the current groupnumber to the given argument.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to set the new group in
</parameter_description>
</parameter>
<parameter name="groupnum">
<parameter_description> the groupnumber to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the operation succeeded, FALSE if the group
did not exist.
</return>
</function>

<function name="gst_index_set_resolver">
<description>
Lets the app register a custom function to map index
ids to writer descriptions.

</description>
<parameters>
<parameter name="index">
<parameter_description> the index to register the resolver on
</parameter_description>
</parameter>
<parameter name="resolver">
<parameter_description> the resolver to register
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to the resolver function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_index_set_resolver_full">
<description>
Lets the app register a custom function to map index
ids to writer descriptions.


</description>
<parameters>
<parameter name="index">
<parameter_description> the index to register the resolver on
</parameter_description>
</parameter>
<parameter name="resolver">
<parameter_description> the resolver to register
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data passed to the resolver function
</parameter_description>
</parameter>
<parameter name="user_data_destroy">
<parameter_description> destroy function for @user_data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_init">
<description>
Initializes the GStreamer library, setting up internal path lists,
registering built-in elements, and loading standard plugins.

Unless the plugin registry is disabled at compile time, the registry will be
loaded. By default this will also check if the registry cache needs to be
updated and rescan all plugins if needed. See gst_update_registry() for
details and section
&lt;link linkend=&quot;gst-running&quot;&gt;Running GStreamer Applications&lt;/link&gt;
for how to disable automatic registry updates.

This function should be called before calling any other GLib functions. If
this is not an option, your program must initialise the GLib thread system
using g_thread_init() before any other GLib functions are called.

&lt;note&gt;&lt;para&gt;
This function will terminate your program if it was unable to initialize
GStreamer for some reason.  If you want your program to fall back,
use gst_init_check() instead.
&lt;/para&gt;&lt;/note&gt;

WARNING: This function does not work in the same way as corresponding
functions in other glib-style libraries, such as gtk_init().  In
particular, unknown command line options cause this function to
abort program execution.

</description>
<parameters>
<parameter name="argc">
<parameter_description> pointer to application's argc
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> pointer to application's argv
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_init_check">
<description>
Initializes the GStreamer library, setting up internal path lists,
registering built-in elements, and loading standard plugins.

This function will return %FALSE if GStreamer could not be initialized
for some reason.  If you want your program to fail fatally,
use gst_init() instead.

This function should be called before calling any other GLib functions. If
this is not an option, your program must initialise the GLib thread system
using g_thread_init() before any other GLib functions are called.


</description>
<parameters>
<parameter name="argc">
<parameter_description> pointer to application's argc
</parameter_description>
</parameter>
<parameter name="argv">
<parameter_description> pointer to application's argv
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> pointer to a #GError to which a message will be posted on error
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if GStreamer could be initialized.
</return>
</function>

<function name="gst_init_get_option_group">
<description>
Returns a #GOptionGroup with GStreamer's argument specifications. The
group is set up to use standard GOption callbacks, so when using this
group in combination with GOption parsing methods, all argument parsing
and initialization is automated.

This function is useful if you want to integrate GStreamer with other
libraries that use GOption (see g_option_context_add_group() ).

If you use this function, you should make sure you initialise the GLib
threading system as one of the very first things in your program
(see the example at the beginning of this section).


</description>
<parameters>
</parameters>
<return> a pointer to GStreamer's option group.
</return>
</function>

<function name="gst_install_plugins_async">
<description>
Requests plugin installation without blocking. Once the plugins have been
installed or installation has failed, @func will be called with the result
of the installation and your provided @user_data pointer.

This function requires a running GLib/Gtk main loop. If you are not
running a GLib/Gtk main loop, make sure to regularly call
g_main_context_iteration(NULL,FALSE).

The installer strings that make up @detail are typically obtained by
calling gst_missing_plugin_message_get_installer_detail() on missing-plugin
messages that have been caught on a pipeline's bus or created by the
application via the provided API, such as gst_missing_element_message_new().

It is possible to request the installation of multiple missing plugins in
one go (as might be required if there is a demuxer for a certain format
installed but no suitable video decoder and no suitable audio decoder).


</description>
<parameters>
<parameter name="details">
<parameter_description> NULL-terminated array of installer string details (see below)
</parameter_description>
</parameter>
<parameter name="ctx">
<parameter_description> a #GstInstallPluginsContext, or NULL
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call when the installer program returns
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the user data to pass to @func when called, or NULL
</parameter_description>
</parameter>
</parameters>
<return> result code whether an external installer could be started

</return>
</function>

<function name="gst_install_plugins_context_free">
<description>
Frees a #GstInstallPluginsContext.


</description>
<parameters>
<parameter name="ctx">
<parameter_description> a #GstInstallPluginsContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_install_plugins_context_new">
<description>
Creates a new #GstInstallPluginsContext.


</description>
<parameters>
</parameters>
<return> a new #GstInstallPluginsContext. Free with
gst_install_plugins_context_free() when no longer needed

</return>
</function>

<function name="gst_install_plugins_context_set_xid">
<description>
This function is for X11-based applications (such as most Gtk/Qt
applications on linux/unix) only. You can use it to tell the external
installer the XID of your main application window. That way the installer
can make its own window transient to your application window during the
installation.

If set, the XID will be passed to the installer via a --transient-for=XID
command line option.

Gtk+/Gnome application should be able to obtain the XID of the top-level
window like this:
&lt;programlisting&gt;
##include &lt;gtk/gtk.h&gt;
##ifdef GDK_WINDOWING_X11
##include &lt;gdk/gdkx.h&gt;
##endif
...
##ifdef GDK_WINDOWING_X11
xid = GDK_WINDOW_XWINDOW (GTK_WIDGET (application_window)-&gt;window);
##endif
...
&lt;/programlisting&gt;


</description>
<parameters>
<parameter name="ctx">
<parameter_description> a #GstInstallPluginsContext
</parameter_description>
</parameter>
<parameter name="xid">
<parameter_description> the XWindow ID (XID) of the top-level application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_install_plugins_installation_in_progress">
<description>
Checks whether plugin installation (initiated by this application only)
is currently in progress.


</description>
<parameters>
</parameters>
<return> TRUE if plugin installation is in progress, otherwise FALSE

</return>
</function>

<function name="gst_install_plugins_return_get_name">
<description>
Convenience function to return the descriptive string associated
with a status code.  This function returns English strings and
should not be used for user messages. It is here only to assist
in debugging.


</description>
<parameters>
<parameter name="ret">
<parameter_description> the return status code
</parameter_description>
</parameter>
</parameters>
<return> a descriptive string for the status code in @ret

</return>
</function>

<function name="gst_install_plugins_supported">
<description>
Checks whether plugin installation is likely to be supported by the
current environment. This currently only checks whether the helper script
that is to be provided by the distribution or operating system vendor
exists.


</description>
<parameters>
</parameters>
<return> TRUE if plugin installation is likely to be supported.

</return>
</function>

<function name="gst_install_plugins_sync">
<description>
Requests plugin installation and block until the plugins have been
installed or installation has failed.

This function should almost never be used, it only exists for cases where
a non-GLib main loop is running and the user wants to run it in a separate
thread and marshal the result back asynchronously into the main thread
using the other non-GLib main loop. You should almost always use
gst_install_plugins_async() instead of this function.


</description>
<parameters>
<parameter name="details">
<parameter_description> NULL-terminated array of installer string details
</parameter_description>
</parameter>
<parameter name="ctx">
<parameter_description> a #GstInstallPluginsContext, or NULL
</parameter_description>
</parameter>
</parameters>
<return> the result of the installation.

</return>
</function>

<function name="gst_interpolation_control_source_get_all">
<description>
Returns a read-only copy of the list of #GstTimedValue for the given property.
Free the list after done with it.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstInterpolationControlSource to get the list from
</parameter_description>
</parameter>
</parameters>
<return> a copy of the list, or %NULL if the property isn't handled by the controller
</return>
</function>

<function name="gst_interpolation_control_source_get_count">
<description>
Returns the number of control points that are set.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstInterpolationControlSource to get the number of values from
</parameter_description>
</parameter>
</parameters>
<return> the number of control points that are set.

</return>
</function>

<function name="gst_interpolation_control_source_new">
<description>
This returns a new, unbound #GstInterpolationControlSource.


</description>
<parameters>
</parameters>
<return> a new, unbound #GstInterpolationControlSource.
</return>
</function>

<function name="gst_interpolation_control_source_set">
<description>
Set the value of given controller-handled property at a certain time.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstInterpolationControlSource object
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time the control-change is scheduled for
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the control-value
</parameter_description>
</parameter>
</parameters>
<return> FALSE if the values couldn't be set, TRUE otherwise.
</return>
</function>

<function name="gst_interpolation_control_source_set_from_list">
<description>
Sets multiple timed values at once.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstInterpolationControlSource object
</parameter_description>
</parameter>
<parameter name="timedvalues">
<parameter_description> a list with #GstTimedValue items
</parameter_description>
</parameter>
</parameters>
<return> FALSE if the values couldn't be set, TRUE otherwise.
</return>
</function>

<function name="gst_interpolation_control_source_set_interpolation_mode">
<description>
Sets the given interpolation mode.

&lt;note&gt;&lt;para&gt;User interpolation is not yet available and quadratic interpolation
is deprecated and maps to cubic interpolation.&lt;/para&gt;&lt;/note&gt;


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstInterpolationControlSource object
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> interpolation mode
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the interpolation mode could be set, %FALSE otherwise
</return>
</function>

<function name="gst_interpolation_control_source_unset">
<description>
Used to remove the value of given controller-handled property at a certain
time.


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstInterpolationControlSource object
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time the control-change should be removed from
</parameter_description>
</parameter>
</parameters>
<return> FALSE if the value couldn't be unset (i.e. not found, TRUE otherwise.
</return>
</function>

<function name="gst_interpolation_control_source_unset_all">
<description>
Used to remove all time-stamped values of given controller-handled property


</description>
<parameters>
<parameter name="self">
<parameter_description> the #GstInterpolationControlSource object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_is_initialized">
<description>
Use this function to check if GStreamer has been initialized with gst_init()
or gst_init_check().


</description>
<parameters>
</parameters>
<return> TRUE if initialization has been done, FALSE otherwise.

</return>
</function>

<function name="gst_is_missing_plugin_message">
<description>
Checks whether @msg is a missing plugins message.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstMessage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @msg is a missing-plugins message, otherwise %FALSE.
</return>
</function>

<function name="gst_is_tag_list">
<description>
Checks if the given pointer is a taglist.


</description>
<parameters>
<parameter name="p">
<parameter_description> Object that might be a taglist
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if the given pointer is a taglist
</return>
</function>

<function name="gst_iterator_filter">
<description>
Create a new iterator from an existing iterator. The new iterator
will only return those elements that match the given compare function @func.
@func should return 0 for elements that should be included
in the iterator.

When this iterator is freed, @it will also be freed.


</description>
<parameters>
<parameter name="it">
<parameter_description> The #GstIterator to filter
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the compare function to select elements
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the compare function
</parameter_description>
</parameter>
</parameters>
<return> a new #GstIterator.

MT safe.
</return>
</function>

<function name="gst_iterator_find_custom">
<description>
Find the first element in @it that matches the compare function @func.
@func should return 0 when the element is found.  As in gst_iterator_fold(),
the refcount of a refcounted object will be increased before @func is 
called, and should be unrefed after use in @func unless it is the matching
element.

The iterator will not be freed.

This function will return NULL if an error happened to the iterator.


</description>
<parameters>
<parameter name="it">
<parameter_description> The #GstIterator to iterate
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the compare function to use
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the compare function
</parameter_description>
</parameter>
</parameters>
<return> The element in the iterator that matches the compare
function or NULL when no element matched.

MT safe.
</return>
</function>

<function name="gst_iterator_fold">
<description>
Folds @func over the elements of @iter. That is to say, @func will be called
as @func (object, @ret, @user_data) for each object in @it. The normal use
of this procedure is to accumulate the results of operating on the objects in
@ret.  If object is a refcounted object its refcount will be increased 
before @func is called, and it should be unrefed after use in @func.

This procedure can be used (and is used internally) to implement the
gst_iterator_foreach() and gst_iterator_find_custom() operations.

The fold will proceed as long as @func returns TRUE. When the iterator has no
more arguments, %GST_ITERATOR_DONE will be returned. If @func returns FALSE,
the fold will stop, and %GST_ITERATOR_OK will be returned. Errors or resyncs
will cause fold to return %GST_ITERATOR_ERROR or %GST_ITERATOR_RESYNC as
appropriate.

The iterator will not be freed.


</description>
<parameters>
<parameter name="it">
<parameter_description> The #GstIterator to fold over
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the fold function
</parameter_description>
</parameter>
<parameter name="ret">
<parameter_description> the seed value passed to the fold function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the fold function
</parameter_description>
</parameter>
</parameters>
<return> A #GstIteratorResult, as described above.

MT safe.
</return>
</function>

<function name="gst_iterator_foreach">
<description>
Iterate over all element of @it and call the given function @func for
each element.  As in gst_iterator_fold(), the refcount of a refcounted 
object will be increased before @func is called, and should be unrefed
after use.


</description>
<parameters>
<parameter name="it">
<parameter_description> The #GstIterator to iterate
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call for each element.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the function
</parameter_description>
</parameter>
</parameters>
<return> the result call to gst_iterator_fold(). The iterator will not be
freed.

MT safe.
</return>
</function>

<function name="gst_iterator_free">
<description>
Free the iterator.

MT safe.

</description>
<parameters>
<parameter name="it">
<parameter_description> The #GstIterator to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_iterator_new">
<description>
Create a new iterator. This function is mainly used for objects
implementing the next/resync/free function to iterate a data structure.

For each item retrieved, the @item function is called with the lock
held. The @free function is called when the iterator is freed.


</description>
<parameters>
<parameter name="size">
<parameter_description> the size of the iterator structure
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> #GType of children
</parameter_description>
</parameter>
<parameter name="lock">
<parameter_description> pointer to a #GMutex.
</parameter_description>
</parameter>
<parameter name="master_cookie">
<parameter_description> pointer to a guint32 that is changed when the items in the
iterator changed.
</parameter_description>
</parameter>
<parameter name="next">
<parameter_description> function to get next item
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> function to call on each item retrieved
</parameter_description>
</parameter>
<parameter name="resync">
<parameter_description> function to resync the iterator
</parameter_description>
</parameter>
<parameter name="free">
<parameter_description> function to free the iterator
</parameter_description>
</parameter>
</parameters>
<return> the new #GstIterator.

MT safe.
</return>
</function>

<function name="gst_iterator_new_list">
<description>
Create a new iterator designed for iterating @list.

The list you iterate is usually part of a data structure @owner and is
protected with @lock. 

The iterator will use @lock to retrieve the next item of the list and it
will then call the @item function before releasing @lock again.

The @item function usualy makes sure that the item remains alive while
@lock is released and the application is using the item. The application is
responsible for freeing/unreffing the item after usage as explained in
gst_iterator_next().

When a concurrent update to the list is performed, usually by @owner while
holding @lock, @master_cookie will be updated. The iterator implementation
will notice the update of the cookie and will return %GST_ITERATOR_RESYNC to
the user of the iterator in the next call to gst_iterator_next().

@owner will be passed to the @free function when the iterator is freed.


</description>
<parameters>
<parameter name="type">
<parameter_description> #GType of elements
</parameter_description>
</parameter>
<parameter name="lock">
<parameter_description> pointer to a #GMutex protecting the list.
</parameter_description>
</parameter>
<parameter name="master_cookie">
<parameter_description> pointer to a guint32 that is incremented when the list
is changed.
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> pointer to the list
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> object owning the list
</parameter_description>
</parameter>
<parameter name="item">
<parameter_description> function to call for each item
</parameter_description>
</parameter>
<parameter name="free">
<parameter_description> function to call when the iterator is freed
</parameter_description>
</parameter>
</parameters>
<return> the new #GstIterator for @list.

MT safe.
</return>
</function>

<function name="gst_iterator_new_single">
<description>
This #GstIterator is a convenient iterator for the common
case where a #GstIterator needs to be returned but only
a single object has to be considered. This happens often
for the #GstPadIterIntLinkFunction.


</description>
<parameters>
<parameter name="type">
<parameter_description> #GType of the passed object
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> object that this iterator should return
</parameter_description>
</parameter>
<parameter name="copy">
<parameter_description> Function that returns a copy of @object or increases its refcount
</parameter_description>
</parameter>
<parameter name="free">
<parameter_description> Function to be called for freeing @object
</parameter_description>
</parameter>
</parameters>
<return> the new #GstIterator for @object.

</return>
</function>

<function name="gst_iterator_next">
<description>
Get the next item from the iterator in @elem. 

Only when this function returns %GST_ITERATOR_OK, @elem will contain a valid
value. For iterators that return refcounted objects, the returned object
will have its refcount increased and should therefore be unreffed after
usage.

When this function returns %GST_ITERATOR_DONE, no more elements can be
retrieved from @it.

A return value of %GST_ITERATOR_RESYNC indicates that the element list was
concurrently updated. The user of @it should call gst_iterator_resync() to
get the newly updated list. 

A return value of %GST_ITERATOR_ERROR indicates an unrecoverable fatal error.


</description>
<parameters>
<parameter name="it">
<parameter_description> The #GstIterator to iterate
</parameter_description>
</parameter>
<parameter name="elem">
<parameter_description> pointer to hold next element
</parameter_description>
</parameter>
</parameters>
<return> The result of the iteration. Unref @elem after usage if this
is a refcounted object.

MT safe.
</return>
</function>

<function name="gst_iterator_push">
<description>
Pushes @other iterator onto @it. All calls performed on @it are
forwarded to @other. If @other returns %GST_ITERATOR_DONE, it is
popped again and calls are handled by @it again.

This function is mainly used by objects implementing the iterator
next function to recurse into substructures.

When gst_iterator_resync() is called on @it, @other will automatically be
popped.

MT safe.

</description>
<parameters>
<parameter name="it">
<parameter_description> The #GstIterator to use
</parameter_description>
</parameter>
<parameter name="other">
<parameter_description> The #GstIterator to push
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_iterator_resync">
<description>
Resync the iterator. this function is mostly called
after gst_iterator_next() returned %GST_ITERATOR_RESYNC.

When an iterator was pushed on @it, it will automatically be popped again
with this function.

MT safe.

</description>
<parameters>
<parameter name="it">
<parameter_description> The #GstIterator to resync
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_lfo_control_source_new">
<description>
This returns a new, unbound #GstLFOControlSource.


</description>
<parameters>
</parameters>
<return> a new, unbound #GstLFOControlSource.
</return>
</function>

<function name="gst_message_get_seqnum">
<description>
Retrieve the sequence number of a message.

Messages have ever-incrementing sequence numbers, which may also be set
explicitly via gst_message_set_seqnum(). Sequence numbers are typically used
to indicate that a message corresponds to some other set of messages or
events, for example a SEGMENT_DONE message corresponding to a SEEK event. It
is considered good practice to make this correspondence when possible, though
it is not required.

Note that events and messages share the same sequence number incrementor;
two events or messages will never not have the same sequence number unless
that correspondence was made explicitly.


</description>
<parameters>
<parameter name="message">
<parameter_description> A #GstMessage.
</parameter_description>
</parameter>
</parameters>
<return> The message's sequence number.

MT safe.

</return>
</function>

<function name="gst_message_get_stream_status_object">
<description>
Extracts the object managing the streaming thread from @message.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_STREAM_STATUS.
</parameter_description>
</parameter>
</parameters>
<return> a GValue containing the object that manages the streaming thread.
This object is usually of type GstTask but other types can be added in the
future. The object remains valid as long as @message is valid.

</return>
</function>

<function name="gst_message_get_structure">
<description>
Access the structure of the message.


</description>
<parameters>
<parameter name="message">
<parameter_description> The #GstMessage.
</parameter_description>
</parameter>
</parameters>
<return> The structure of the message. The structure is
still owned by the message, which means that you should not free it and
that the pointer becomes invalid when you free the message.

MT safe.
</return>
</function>

<function name="gst_message_new_application">
<description>
Create a new application-typed message. GStreamer will never create these
messages; they are a gift from us to you. Enjoy.


</description>
<parameters>
<parameter name="src">
<parameter_description> the object originating the message.
</parameter_description>
</parameter>
<parameter name="structure">
<parameter_description> the structure for the message. The message
will take ownership of the structure.
</parameter_description>
</parameter>
</parameters>
<return> The new application message.

MT safe.
</return>
</function>

<function name="gst_message_new_async_done">
<description>
The message is posted when elements completed an ASYNC state change.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
</parameters>
<return> The new async_done message.

MT safe.

</return>
</function>

<function name="gst_message_new_async_start">
<description>
This message is posted by elements when they start an ASYNC state change. 
@new_base_time is set to TRUE when the element lost its state when it was
PLAYING.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="new_base_time">
<parameter_description> if a new base_time should be set on the element
</parameter_description>
</parameter>
</parameters>
<return> The new async_start message.

MT safe.

</return>
</function>

<function name="gst_message_new_buffering">
<description>
Create a new buffering message. This message can be posted by an element that
needs to buffer data before it can continue processing. @percent should be a
value between 0 and 100. A value of 100 means that the buffering completed.

When @percent is &lt; 100 the application should PAUSE a PLAYING pipeline. When
@percent is 100, the application can set the pipeline (back) to PLAYING.
The application must be prepared to receive BUFFERING messages in the
PREROLLING state and may only set the pipeline to PLAYING after receiving a
message with @percent set to 100, which can happen after the pipeline
completed prerolling. 

MT safe.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="percent">
<parameter_description> The buffering percent
</parameter_description>
</parameter>
</parameters>
<return> The new buffering message.

</return>
</function>

<function name="gst_message_new_clock_lost">
<description>
Create a clock lost message. This message is posted whenever the
clock is not valid anymore.

If this message is posted by the pipeline, the pipeline will
select a new clock again when it goes to PLAYING. It might therefore
be needed to set the pipeline to PAUSED and PLAYING again.


</description>
<parameters>
<parameter name="src">
<parameter_description> the object originating the message.
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> the clock that was lost
</parameter_description>
</parameter>
</parameters>
<return> The new clock lost message.

MT safe.
</return>
</function>

<function name="gst_message_new_clock_provide">
<description>
Create a clock provide message. This message is posted whenever an
element is ready to provide a clock or lost its ability to provide
a clock (maybe because it paused or became EOS).

This message is mainly used internally to manage the clock
selection.


</description>
<parameters>
<parameter name="src">
<parameter_description> the object originating the message.
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> the clock it provides
</parameter_description>
</parameter>
<parameter name="ready">
<parameter_description> TRUE if the sender can provide a clock
</parameter_description>
</parameter>
</parameters>
<return> the new provide clock message.

MT safe.
</return>
</function>

<function name="gst_message_new_custom">
<description>
Create a new custom-typed message. This can be used for anything not
handled by other message-specific functions to pass a message to the
app. The structure field can be NULL.


</description>
<parameters>
<parameter name="type">
<parameter_description> The #GstMessageType to distinguish messages
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="structure">
<parameter_description> the structure for the message. The message
will take ownership of the structure.
</parameter_description>
</parameter>
</parameters>
<return> The new message.

MT safe.
</return>
</function>

<function name="gst_message_new_duration">
<description>
Create a new duration message. This message is posted by elements that
know the duration of a stream in a specific format. This message
is received by bins and is used to calculate the total duration of a
pipeline. Elements may post a duration message with a duration of
GST_CLOCK_TIME_NONE to indicate that the duration has changed and the 
cached duration should be discarded. The new duration can then be 
retrieved via a query.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The format of the duration
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> The new duration 
</parameter_description>
</parameter>
</parameters>
<return> The new duration message.

MT safe.
</return>
</function>

<function name="gst_message_new_element">
<description>
Create a new element-specific message. This is meant as a generic way of
allowing one-way communication from an element to an application, for example
&quot;the firewire cable was unplugged&quot;. The format of the message should be
documented in the element's documentation. The structure field can be NULL.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="structure">
<parameter_description> The structure for the message. The message
will take ownership of the structure.
</parameter_description>
</parameter>
</parameters>
<return> The new element message.

MT safe.
</return>
</function>

<function name="gst_message_new_eos">
<description>
Create a new eos message. This message is generated and posted in
the sink elements of a GstBin. The bin will only forward the EOS
message to the application if all sinks have posted an EOS message.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
</parameters>
<return> The new eos message.

MT safe.
</return>
</function>

<function name="gst_message_new_error">
<description>
Create a new error message. The message will copy @error and
@debug. This message is posted by element when a fatal event
occured. The pipeline will probably (partially) stop. The application
receiving this message should stop the pipeline.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> The GError for this message.
</parameter_description>
</parameter>
<parameter name="debug">
<parameter_description> A debugging string.
</parameter_description>
</parameter>
</parameters>
<return> the new error message.

MT safe.
</return>
</function>

<function name="gst_message_new_info">
<description>
Create a new info message. The message will make copies of @error and
@debug.

MT safe.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> The GError for this message.
</parameter_description>
</parameter>
<parameter name="debug">
<parameter_description> A debugging string.
</parameter_description>
</parameter>
</parameters>
<return> the new info message.

</return>
</function>

<function name="gst_message_new_latency">
<description>
This message can be posted by elements when their latency requirements have
changed.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
</parameters>
<return> The new latency message.

MT safe.

</return>
</function>

<function name="gst_message_new_new_clock">
<description>
Create a new clock message. This message is posted whenever the
pipeline selectes a new clock for the pipeline.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> the new selected clock
</parameter_description>
</parameter>
</parameters>
<return> The new new clock message.

MT safe.
</return>
</function>

<function name="gst_message_new_progress">
<description>
Progress messages are posted by elements when they use an asynchronous task
to perform actions triggered by a state change.

@code contains a well defined string describing the action.
@test should contain a user visible string detailing the current action.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GstProgressType
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> a progress code
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> free, user visible text describing the progress
</parameter_description>
</parameter>
</parameters>
<return> The new qos message.

</return>
</function>

<function name="gst_message_new_qos">
<description>
A QOS message is posted on the bus whenever an element decides to drop a
buffer because of QoS reasons or whenever it changes its processing strategy
because of QoS reasons (quality adjustments such as processing at lower
accuracy).

This message can be posted by an element that performs synchronisation against the
clock (live) or it could be dropped by an element that performs QoS because of QOS
events received from a downstream element (!live).

@running_time, @stream_time, @timestamp, @duration should be set to the
respective running-time, stream-time, timestamp and duration of the (dropped)
buffer that generated the QoS event. Values can be left to
GST_CLOCK_TIME_NONE when unknown.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="live">
<parameter_description> if the message was generated by a live element
</parameter_description>
</parameter>
<parameter name="running_time">
<parameter_description> the running time of the buffer that generated the message
</parameter_description>
</parameter>
<parameter name="stream_time">
<parameter_description> the stream time of the buffer that generated the message
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the timestamps of the buffer that generated the message
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration of the buffer that generated the message
</parameter_description>
</parameter>
</parameters>
<return> The new qos message.

MT safe.

</return>
</function>

<function name="gst_message_new_request_state">
<description>
This message can be posted by elements when they want to have their state
changed. A typical use case would be an audio server that wants to pause the
pipeline because a higher priority stream is being played.


</description>
<parameters>
<parameter name="src">
<parameter_description> the object originating the message.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> The new requested state
</parameter_description>
</parameter>
</parameters>
<return> the new requst state message.

MT safe.

</return>
</function>

<function name="gst_message_new_segment_done">
<description>
Create a new segment done message. This message is posted by elements that
finish playback of a segment as a result of a segment seek. This message
is received by the application after all elements that posted a segment_start
have posted the segment_done.


</description>
<parameters>
<parameter name="src">
<parameter_description> the object originating the message.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The format of the position being done
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position of the segment being done
</parameter_description>
</parameter>
</parameters>
<return> the new segment done message.

MT safe.
</return>
</function>

<function name="gst_message_new_segment_start">
<description>
Create a new segment message. This message is posted by elements that
start playback of a segment as a result of a segment seek. This message
is not received by the application but is used for maintenance reasons in
container elements.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> The format of the position being played
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The position of the segment being played
</parameter_description>
</parameter>
</parameters>
<return> the new segment start message.

MT safe.
</return>
</function>

<function name="gst_message_new_state_changed">
<description>
Create a state change message. This message is posted whenever an element
changed its state.


</description>
<parameters>
<parameter name="src">
<parameter_description> the object originating the message
</parameter_description>
</parameter>
<parameter name="oldstate">
<parameter_description> the previous state
</parameter_description>
</parameter>
<parameter name="newstate">
<parameter_description> the new (current) state
</parameter_description>
</parameter>
<parameter name="pending">
<parameter_description> the pending (target) state
</parameter_description>
</parameter>
</parameters>
<return> the new state change message.

MT safe.
</return>
</function>

<function name="gst_message_new_state_dirty">
<description>
Create a state dirty message. This message is posted whenever an element
changed its state asynchronously and is used internally to update the
states of container objects.


</description>
<parameters>
<parameter name="src">
<parameter_description> the object originating the message
</parameter_description>
</parameter>
</parameters>
<return> the new state dirty message.

MT safe.
</return>
</function>

<function name="gst_message_new_step_done">
<description>
This message is posted by elements when they complete a part, when @intermediate set
to TRUE, or a complete step operation.

@duration will contain the amount of time (in GST_FORMAT_TIME) of the stepped
@amount of media in format @format.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of @amount
</parameter_description>
</parameter>
<parameter name="amount">
<parameter_description> the amount of stepped data
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the rate of the stepped amount
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> is this an flushing step
</parameter_description>
</parameter>
<parameter name="intermediate">
<parameter_description> is this an intermediate step
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration of the data
</parameter_description>
</parameter>
<parameter name="eos">
<parameter_description> the step caused EOS
</parameter_description>
</parameter>
</parameters>
<return> the new step_done message.

MT safe.

</return>
</function>

<function name="gst_message_new_step_start">
<description>
This message is posted by elements when they accept or activate a new step
event for @amount in @format. 

@active is set to FALSE when the element accepted the new step event and has
queued it for execution in the streaming threads.

@active is set to TRUE when the element has activated the step operation and
is now ready to start executing the step in the streaming thread. After this
message is emited, the application can queue a new step operation in the
element.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> if the step is active or queued
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of @amount
</parameter_description>
</parameter>
<parameter name="amount">
<parameter_description> the amount of stepped data
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the rate of the stepped amount
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> is this an flushing step
</parameter_description>
</parameter>
<parameter name="intermediate">
<parameter_description> is this an intermediate step
</parameter_description>
</parameter>
</parameters>
<return> The new step_start message. 

MT safe.

</return>
</function>

<function name="gst_message_new_stream_status">
<description>
Create a new stream status message. This message is posted when a streaming
thread is created/destroyed or when the state changed.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The stream status type.
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> the owner element of @src.
</parameter_description>
</parameter>
</parameters>
<return> the new stream status message.

MT safe.

</return>
</function>

<function name="gst_message_new_structure_change">
<description>
Create a new structure change message. This message is posted when the
structure of a pipeline is in the process of being changed, for example
when pads are linked or unlinked.

@src should be the sinkpad that unlinked or linked.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The change type.
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> The owner element of @src.
</parameter_description>
</parameter>
<parameter name="busy">
<parameter_description> Whether the structure change is busy.
</parameter_description>
</parameter>
</parameters>
<return> the new structure change message.

MT safe.

</return>
</function>

<function name="gst_message_new_tag">
<description>
Create a new tag message. The message will take ownership of the tag list.
The message is posted by elements that discovered a new taglist.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="tag_list">
<parameter_description> the tag list for the message.
</parameter_description>
</parameter>
</parameters>
<return> the new tag message.

MT safe.
</return>
</function>

<function name="gst_message_new_tag_full">
<description>
Create a new tag message. The message will take ownership of the tag list.
The message is posted by elements that discovered a new taglist.

MT safe.


</description>
<parameters>
<parameter name="src">
<parameter_description> the object originating the message.
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the originating pad for the tag.
</parameter_description>
</parameter>
<parameter name="tag_list">
<parameter_description> the tag list for the message.
</parameter_description>
</parameter>
</parameters>
<return> the new tag message.

</return>
</function>

<function name="gst_message_new_warning">
<description>
Create a new warning message. The message will make copies of @error and
@debug.


</description>
<parameters>
<parameter name="src">
<parameter_description> The object originating the message.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> The GError for this message.
</parameter_description>
</parameter>
<parameter name="debug">
<parameter_description> A debugging string.
</parameter_description>
</parameter>
</parameters>
<return> The new warning message.

MT safe.
</return>
</function>

<function name="gst_message_parse_async_start">
<description>
Extract the new_base_time from the async_start message. 

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_ASYNC_DONE.
</parameter_description>
</parameter>
<parameter name="new_base_time">
<parameter_description> Result location for the new_base_time or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_buffering">
<description>
Extracts the buffering percent from the GstMessage. see also
gst_message_new_buffering().

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_BUFFERING.
</parameter_description>
</parameter>
<parameter name="percent">
<parameter_description> Return location for the percent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_buffering_stats">
<description>
Extracts the buffering stats values from @message.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_BUFFERING.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a buffering mode, or NULL
</parameter_description>
</parameter>
<parameter name="avg_in">
<parameter_description> the average input rate, or NULL
</parameter_description>
</parameter>
<parameter name="avg_out">
<parameter_description> the average output rate, or NULL
</parameter_description>
</parameter>
<parameter name="buffering_left">
<parameter_description> amount of buffering time left in
milliseconds, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_clock_lost">
<description>
Extracts the lost clock from the GstMessage.
The clock object returned remains valid until the message is freed.

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_CLOCK_LOST.
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> a pointer to hold the lost clock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_clock_provide">
<description>
Extracts the clock and ready flag from the GstMessage.
The clock object returned remains valid until the message is freed.

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_CLOCK_PROVIDE.
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> a pointer to  hold a clock
object, or NULL
</parameter_description>
</parameter>
<parameter name="ready">
<parameter_description> a pointer to hold the ready flag, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_duration">
<description>
Extracts the duration and format from the duration message. The duration
might be GST_CLOCK_TIME_NONE, which indicates that the duration has
changed. Applications should always use a query to retrieve the duration
of a pipeline.

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_DURATION.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> Result location for the format, or NULL
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> Result location for the duration, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_error">
<description>
Extracts the GError and debug string from the GstMessage. The values returned
in the output arguments are copies; the caller must free them when done.

Typical usage of this function might be:
|[
...
switch (GST_MESSAGE_TYPE (msg)) {
case GST_MESSAGE_ERROR: {
GError *err = NULL;
gchar *dbg_info = NULL;

gst_message_parse_error (msg, &amp;err, &amp;dbg_info);
g_printerr (&quot;ERROR from element %s: %s\n&quot;,
GST_OBJECT_NAME (msg-&gt;src), err-&gt;message);
g_printerr (&quot;Debugging info: %s\n&quot;, (dbg_info) ? dbg_info : &quot;none&quot;);
g_error_free (err);
g_free (dbg_info);
break;
}
...
}
...
]|

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_ERROR.
</parameter_description>
</parameter>
<parameter name="gerror">
<parameter_description> location for the GError
</parameter_description>
</parameter>
<parameter name="debug">
<parameter_description> location for the debug message,
or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_info">
<description>
Extracts the GError and debug string from the GstMessage. The values returned
in the output arguments are copies; the caller must free them when done.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_INFO.
</parameter_description>
</parameter>
<parameter name="gerror">
<parameter_description> location for the GError
</parameter_description>
</parameter>
<parameter name="debug">
<parameter_description> location for the debug message,
or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_new_clock">
<description>
Extracts the new clock from the GstMessage.
The clock object returned remains valid until the message is freed.

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_NEW_CLOCK.
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> a pointer to hold the selected
new clock
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_progress">
<description>
Parses the progress @type, @code and @text.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_PROGRESS.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> location for the type
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> location for the code
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> location for the text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_qos">
<description>
Extract the timestamps and live status from the QoS message.

The returned values give the running_time, stream_time, timestamp and
duration of the dropped buffer. Values of GST_CLOCK_TIME_NONE mean unknown
values.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_QOS.
</parameter_description>
</parameter>
<parameter name="live">
<parameter_description> if the message was generated by a live element
</parameter_description>
</parameter>
<parameter name="running_time">
<parameter_description> the running time of the buffer that
generated the message
</parameter_description>
</parameter>
<parameter name="stream_time">
<parameter_description> the stream time of the buffer that
generated the message
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the timestamps of the buffer that
generated the message
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration of the buffer that
generated the message
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_qos_stats">
<description>
Extract the QoS stats representing the history of the current continuous
pipeline playback period.

When @format is @GST_FORMAT_UNDEFINED both @dropped and @processed are
invalid. Values of -1 for either @processed or @dropped mean unknown values.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_QOS.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> Units of the 'processed' and 'dropped' fields.
Video sinks and video filters will use GST_FORMAT_BUFFERS (frames).
Audio sinks and audio filters will likely use GST_FORMAT_DEFAULT
(samples).
</parameter_description>
</parameter>
<parameter name="processed">
<parameter_description> Total number of units correctly processed
since the last state change to READY or a flushing operation.
</parameter_description>
</parameter>
<parameter name="dropped">
<parameter_description> Total number of units dropped since the last
state change to READY or a flushing operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_qos_values">
<description>
Extract the QoS values that have been calculated/analysed from the QoS data

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_QOS.
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> The difference of the running-time against
the deadline.
</parameter_description>
</parameter>
<parameter name="proportion">
<parameter_description> Long term prediction of the ideal rate
relative to normal rate to get optimal quality.
</parameter_description>
</parameter>
<parameter name="quality">
<parameter_description> An element dependent integer value that
specifies the current quality level of the element. The default
maximum quality is 1000000.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_request_state">
<description>
Extract the requested state from the request_state message.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_REQUEST_STATE.
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> Result location for the requested state or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_segment_done">
<description>
Extracts the position and format from the segment start message.

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_SEGMENT_DONE.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> Result location for the format, or NULL
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> Result location for the position, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_segment_start">
<description>
Extracts the position and format from the segment start message.

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_SEGMENT_START.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> Result location for the format, or NULL
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> Result location for the position, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_state_changed">
<description>
Extracts the old and new states from the GstMessage.

Typical usage of this function might be:
|[
...
switch (GST_MESSAGE_TYPE (msg)) {
case GST_MESSAGE_STATE_CHANGED: {
GstState old_state, new_state;

gst_message_parse_state_changed (msg, &amp;old_state, &amp;new_state, NULL);
g_print (&quot;Element %s changed state from %s to %s.\n&quot;,
GST_OBJECT_NAME (msg-&gt;src),
gst_element_state_get_name (old_state),
gst_element_state_get_name (new_state));
break;
}
...
}
...
]|

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> a valid #GstMessage of type GST_MESSAGE_STATE_CHANGED
</parameter_description>
</parameter>
<parameter name="oldstate">
<parameter_description> the previous state, or NULL
</parameter_description>
</parameter>
<parameter name="newstate">
<parameter_description> the new (current) state, or NULL
</parameter_description>
</parameter>
<parameter name="pending">
<parameter_description> the pending (target) state, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_step_done">
<description>
Extract the values the step_done message.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_STEP_DONE.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> result location for the format
</parameter_description>
</parameter>
<parameter name="amount">
<parameter_description> result location for the amount
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> result location for the rate
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> result location for the flush flag
</parameter_description>
</parameter>
<parameter name="intermediate">
<parameter_description> result location for the intermediate flag
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> result location for the duration
</parameter_description>
</parameter>
<parameter name="eos">
<parameter_description> result location for the EOS flag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_step_start">
<description>
Extract the values from step_start message.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_STEP_DONE.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> result location for the active flag
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> result location for the format
</parameter_description>
</parameter>
<parameter name="amount">
<parameter_description> result location for the amount
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> result location for the rate
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> result location for the flush flag
</parameter_description>
</parameter>
<parameter name="intermediate">
<parameter_description> result location for the intermediate flag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_stream_status">
<description>
Extracts the stream status type and owner the GstMessage. The returned
owner remains valid for as long as the reference to @message is valid and
should thus not be unreffed.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_STREAM_STATUS.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> A pointer to hold the status type
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> The owner element of the message source
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_structure_change">
<description>
Extracts the change type and completion status from the GstMessage.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_STRUCTURE_CHANGE.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> A pointer to hold the change type
</parameter_description>
</parameter>
<parameter name="owner">
<parameter_description> The owner element of the
message source
</parameter_description>
</parameter>
<parameter name="busy">
<parameter_description> a pointer to hold whether the change is in
progress or has been completed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_tag">
<description>
Extracts the tag list from the GstMessage. The tag list returned in the
output argument is a copy; the caller must free it when done.

Typical usage of this function might be:
|[
...
switch (GST_MESSAGE_TYPE (msg)) {
case GST_MESSAGE_TAG: {
GstTagList *tags = NULL;

gst_message_parse_tag (msg, &amp;tags);
g_print (&quot;Got tags from element %s\n&quot;, GST_OBJECT_NAME (msg-&gt;src));
handle_tags (tags);
gst_tag_list_free (tags);
break;
}
...
}
...
]|

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_TAG.
</parameter_description>
</parameter>
<parameter name="tag_list">
<parameter_description> return location for the tag-list.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_tag_full">
<description>
Extracts the tag list from the GstMessage. The tag list returned in the
output argument is a copy; the caller must free it when done.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_TAG.
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> location where the originating pad is stored,
unref after usage
</parameter_description>
</parameter>
<parameter name="tag_list">
<parameter_description> return location for the tag-list.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_parse_warning">
<description>
Extracts the GError and debug string from the GstMessage. The values returned
in the output arguments are copies; the caller must free them when done.

MT safe.

</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_WARNING.
</parameter_description>
</parameter>
<parameter name="gerror">
<parameter_description> location for the GError
</parameter_description>
</parameter>
<parameter name="debug">
<parameter_description> location for the debug message,
or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_set_buffering_stats">
<description>
Configures the buffering stats values in @message.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_BUFFERING.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a buffering mode 
</parameter_description>
</parameter>
<parameter name="avg_in">
<parameter_description> the average input rate
</parameter_description>
</parameter>
<parameter name="avg_out">
<parameter_description> the average output rate
</parameter_description>
</parameter>
<parameter name="buffering_left">
<parameter_description> amount of buffering time left in milliseconds
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_set_qos_stats">
<description>
Set the QoS stats representing the history of the current continuous pipeline
playback period.

When @format is @GST_FORMAT_UNDEFINED both @dropped and @processed are
invalid. Values of -1 for either @processed or @dropped mean unknown values.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_QOS.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> Units of the 'processed' and 'dropped' fields. Video sinks and video
filters will use GST_FORMAT_BUFFERS (frames). Audio sinks and audio filters
will likely use GST_FORMAT_DEFAULT (samples).
</parameter_description>
</parameter>
<parameter name="processed">
<parameter_description> Total number of units correctly processed since the last state
change to READY or a flushing operation.
</parameter_description>
</parameter>
<parameter name="dropped">
<parameter_description> Total number of units dropped since the last state change to READY
or a flushing operation.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_set_qos_values">
<description>
Set the QoS values that have been calculated/analysed from the QoS data

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_QOS.
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> The difference of the running-time against the deadline.
</parameter_description>
</parameter>
<parameter name="proportion">
<parameter_description> Long term prediction of the ideal rate relative to normal rate
to get optimal quality.
</parameter_description>
</parameter>
<parameter name="quality">
<parameter_description> An element dependent integer value that specifies the current
quality level of the element. The default maximum quality is 1000000.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_set_seqnum">
<description>
Set the sequence number of a message.

This function might be called by the creator of a message to indicate that
the message relates to other messages or events. See gst_message_get_seqnum()
for more information.

MT safe.


</description>
<parameters>
<parameter name="message">
<parameter_description> A #GstMessage.
</parameter_description>
</parameter>
<parameter name="seqnum">
<parameter_description> A sequence number.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_set_stream_status_object">
<description>
Configures the object handling the streaming thread. This is usually a
GstTask object but other objects might be added in the future.


</description>
<parameters>
<parameter name="message">
<parameter_description> A valid #GstMessage of type GST_MESSAGE_STREAM_STATUS.
</parameter_description>
</parameter>
<parameter name="object">
<parameter_description> the object controlling the streaming
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_message_type_get_name">
<description>
Get a printable name for the given message type. Do not modify or free.


</description>
<parameters>
<parameter name="type">
<parameter_description> the message type
</parameter_description>
</parameter>
</parameters>
<return> a reference to the static name of the message.
</return>
</function>

<function name="gst_message_type_to_quark">
<description>
Get the unique quark for the given message type.


</description>
<parameters>
<parameter name="type">
<parameter_description> the message type
</parameter_description>
</parameter>
</parameters>
<return> the quark associated with the message type
</return>
</function>

<function name="gst_mini_object_copy">
<description>
Creates a copy of the mini-object.

MT safe


</description>
<parameters>
<parameter name="mini_object">
<parameter_description> the mini-object to copy
</parameter_description>
</parameter>
</parameters>
<return> the new mini-object.
</return>
</function>

<function name="gst_mini_object_is_writable">
<description>
Checks if a mini-object is writable.  A mini-object is writable
if the reference count is one and the #GST_MINI_OBJECT_FLAG_READONLY
flag is not set.  Modification of a mini-object should only be
done after verifying that it is writable.

MT safe


</description>
<parameters>
<parameter name="mini_object">
<parameter_description> the mini-object to check
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the object is writable.
</return>
</function>

<function name="gst_mini_object_make_writable">
<description>
Checks if a mini-object is writable.  If not, a writable copy is made and
returned.  This gives away the reference to the original mini object,
and returns a reference to the new object.

MT safe


</description>
<parameters>
<parameter name="mini_object">
<parameter_description> the mini-object to make writable
</parameter_description>
</parameter>
</parameters>
<return> a mini-object (possibly the same pointer) that
is writable.
</return>
</function>

<function name="gst_mini_object_new">
<description>
Creates a new mini-object of the desired type.

MT safe


</description>
<parameters>
<parameter name="type">
<parameter_description> the #GType of the mini-object to create
</parameter_description>
</parameter>
</parameters>
<return> the new mini-object.
</return>
</function>

<function name="gst_mini_object_ref">
<description>
Increase the reference count of the mini-object.

Note that the refcount affects the writeability
of @mini-object, see gst_mini_object_is_writable(). It is
important to note that keeping additional references to
GstMiniObject instances can potentially increase the number
of memcpy operations in a pipeline, especially if the miniobject
is a #GstBuffer.


</description>
<parameters>
<parameter name="mini_object">
<parameter_description> the mini-object
</parameter_description>
</parameter>
</parameters>
<return> the mini-object.
</return>
</function>

<function name="gst_mini_object_replace">
<description>
Modifies a pointer to point to a new mini-object.  The modification
is done atomically, and the reference counts are updated correctly.
Either @newdata and the value pointed to by @olddata may be NULL.

</description>
<parameters>
<parameter name="olddata">
<parameter_description> pointer to a pointer to a mini-object to
be replaced
</parameter_description>
</parameter>
<parameter name="newdata">
<parameter_description> pointer to new mini-object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mini_object_unref">
<description>
Decreases the reference count of the mini-object, possibly freeing
the mini-object.

</description>
<parameters>
<parameter name="mini_object">
<parameter_description> the mini-object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mini_object_weak_ref">
<description>
Adds a weak reference callback to a mini object. Weak references are
used for notification when a mini object is finalized. They are called
&quot;weak references&quot; because they allow you to safely hold a pointer
to the mini object without calling gst_mini_object_ref()
(gst_mini_object_ref() adds a strong reference, that is, forces the object
to stay alive).


</description>
<parameters>
<parameter name="mini_object">
<parameter_description> #GstMiniObject to reference weakly
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> callback to invoke before the mini object is freed
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> extra data to pass to notify
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mini_object_weak_unref">
<description>
Removes a weak reference callback to a mini object.


</description>
<parameters>
<parameter name="mini_object">
<parameter_description> #GstMiniObject to remove a weak reference from
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> callback to search for
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to search for
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_missing_decoder_installer_detail_new">
<description>
Returns an opaque string containing all the details about the missing
element to be passed to an external installer called via
gst_install_plugins_async() or gst_install_plugins_sync().

This function is mainly for applications that call external plugin
installation mechanisms using one of the two above-mentioned functions in
the case where the application knows exactly what kind of plugin it is
missing.


</description>
<parameters>
<parameter name="decode_caps">
<parameter_description> the (fixed) caps for which a decoder element is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

</return>
</function>

<function name="gst_missing_decoder_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that a decoder element for a particular set of (fixed) caps is missing.
This function is mainly for use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="decode_caps">
<parameter_description> the (fixed) caps for which a decoder element is needed
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_missing_element_installer_detail_new">
<description>
Returns an opaque string containing all the details about the missing
element to be passed to an external installer called via
gst_install_plugins_async() or gst_install_plugins_sync().

This function is mainly for applications that call external plugin
installation mechanisms using one of the two above-mentioned functions in
the case where the application knows exactly what kind of plugin it is
missing.


</description>
<parameters>
<parameter name="factory_name">
<parameter_description> the name of the missing element (element factory),
e.g. &quot;videoscale&quot; or &quot;cdparanoiasrc&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

</return>
</function>

<function name="gst_missing_element_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that a certain required element is missing. This function is mainly for
use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="factory_name">
<parameter_description> the name of the missing element (element factory),
e.g. &quot;videoscale&quot; or &quot;cdparanoiasrc&quot;
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_missing_encoder_installer_detail_new">
<description>
Returns an opaque string containing all the details about the missing
element to be passed to an external installer called via
gst_install_plugins_async() or gst_install_plugins_sync().

This function is mainly for applications that call external plugin
installation mechanisms using one of the two above-mentioned functions in
the case where the application knows exactly what kind of plugin it is
missing.


</description>
<parameters>
<parameter name="encode_caps">
<parameter_description> the (fixed) caps for which an encoder element is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

</return>
</function>

<function name="gst_missing_encoder_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that an encoder element for a particular set of (fixed) caps is missing.
This function is mainly for use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="encode_caps">
<parameter_description> the (fixed) caps for which an encoder element is needed
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_missing_plugin_message_get_description">
<description>
Returns a localised string describing the missing feature, for use in
error dialogs and the like. Should never return NULL unless @msg is not
a valid missing-plugin message.

This function is mainly for applications that need a human-readable string
describing a missing plugin, given a previously collected missing-plugin
message


</description>
<parameters>
<parameter name="msg">
<parameter_description> a missing-plugin #GstMessage of type #GST_MESSAGE_ELEMENT
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_missing_plugin_message_get_installer_detail">
<description>
Returns an opaque string containing all the details about the missing
element to be passed to an external installer called via
gst_install_plugins_async() or gst_install_plugins_sync().

This function is mainly for applications that call external plugin
installation mechanisms using one of the two above-mentioned functions.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a missing-plugin #GstMessage of type #GST_MESSAGE_ELEMENT
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.
</return>
</function>

<function name="gst_missing_uri_sink_installer_detail_new">
<description>
Returns an opaque string containing all the details about the missing
element to be passed to an external installer called via
gst_install_plugins_async() or gst_install_plugins_sync().

This function is mainly for applications that call external plugin
installation mechanisms using one of the two above-mentioned functions in
the case where the application knows exactly what kind of plugin it is
missing.


</description>
<parameters>
<parameter name="protocol">
<parameter_description> the URI protocol the missing source needs to implement,
e.g. &quot;http&quot; or &quot;mms&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

</return>
</function>

<function name="gst_missing_uri_sink_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that a sink element for a particular URI protocol is missing. This
function is mainly for use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the URI protocol the missing sink needs to implement,
e.g. &quot;http&quot; or &quot;smb&quot;
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_missing_uri_source_installer_detail_new">
<description>
Returns an opaque string containing all the details about the missing
element to be passed to an external installer called via
gst_install_plugins_async() or gst_install_plugins_sync().

This function is mainly for applications that call external plugin
installation mechanisms using one of the two above-mentioned functions in
the case where the application knows exactly what kind of plugin it is
missing.


</description>
<parameters>
<parameter name="protocol">
<parameter_description> the URI protocol the missing source needs to implement,
e.g. &quot;http&quot; or &quot;mms&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

</return>
</function>

<function name="gst_missing_uri_source_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that a source element for a particular URI protocol is missing. This
function is mainly for use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the URI protocol the missing source needs to implement,
e.g. &quot;http&quot; or &quot;mms&quot;
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_mixer_get_mixer_flags">
<description>
Get the set of supported flags for this mixer implementation.


</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer implementation
</parameter_description>
</parameter>
</parameters>
<return> A set of or-ed GstMixerFlags for supported features.
</return>
</function>

<function name="gst_mixer_get_mixer_type">
<description>
Get the #GstMixerType of this mixer implementation.


</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer implementation
</parameter_description>
</parameter>
</parameters>
<return> A the #GstMixerType.

</return>
</function>

<function name="gst_mixer_get_option">
<description>
Get the current value of a name/value option in the mixer.


</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer (a #GstElement) that owns the optionlist.
</parameter_description>
</parameter>
<parameter name="opts">
<parameter_description> The #GstMixerOptions that we operate on.
</parameter_description>
</parameter>
</parameters>
<return> current value of the name/value option.
</return>
</function>

<function name="gst_mixer_get_volume">
<description>
Get the current volume(s) on the given track.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the GstMixerTrack to get the volume from.
</parameter_description>
</parameter>
<parameter name="volumes">
<parameter_description> a pre-allocated array of integers (of size
track-&gt;num_channels) to store the current volume
of each channel in the given track in.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_list_tracks">
<description>
Returns a list of available tracks for this mixer/element. Note
that it is allowed for sink (output) elements to only provide
the output tracks in this list. Likewise, for sources (inputs),
it is allowed to only provide input elements in this list.


</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) to get the tracks from.
</parameter_description>
</parameter>
</parameters>
<return> A #GList consisting of zero or more #GstMixerTracks.
The list is owned by the #GstMixer instance and must not be freed
or modified.
</return>
</function>

<function name="gst_mixer_message_get_type">
<description>
Check a bus message to see if it is a GstMixer notification
message and return the GstMixerMessageType identifying which
type of notification it is.


</description>
<parameters>
<parameter name="message">
<parameter_description> A GstMessage to inspect.
</parameter_description>
</parameter>
</parameters>
<return> The type of the GstMixerMessage, or GST_MIXER_MESSAGE_INVALID
if the message is not a GstMixer notification.

</return>
</function>

<function name="gst_mixer_message_parse_mute_toggled">
<description>
Extracts the contents of a mute-toggled bus message. Reads
the GstMixerTrack that has changed, and the new value of the mute
flag.

The GstMixerTrack remains valid until the message is freed.


</description>
<parameters>
<parameter name="message">
<parameter_description> A mute-toggled change notification message.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> Pointer to hold a GstMixerTrack object, or NULL.
</parameter_description>
</parameter>
<parameter name="mute">
<parameter_description> A pointer to a gboolean variable, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_message_parse_option_changed">
<description>
Extracts the GstMixerOptions and new value from a option-changed bus notification
message.

The options and value returned remain valid until the message is freed.


</description>
<parameters>
<parameter name="message">
<parameter_description> A volume-changed change notification message.
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> Pointer to hold a GstMixerOptions object, or NULL.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> Result location to receive the new options value, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_message_parse_options_list_changed">
<description>
Extracts the GstMixerOptions whose value list has changed from an
options-list-changed bus notification message.

The options object returned remains valid until the message is freed. You
do not need to unref it.


</description>
<parameters>
<parameter name="message">
<parameter_description> A volume-changed change notification message.
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> Pointer to hold a GstMixerOptions object, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_message_parse_record_toggled">
<description>
Extracts the contents of a record-toggled bus message. Reads
the GstMixerTrack that has changed, and the new value of the 
recording flag.

The GstMixerTrack remains valid until the message is freed.


</description>
<parameters>
<parameter name="message">
<parameter_description> A record-toggled change notification message.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> Pointer to hold a GstMixerTrack object, or NULL.
</parameter_description>
</parameter>
<parameter name="record">
<parameter_description> A pointer to a gboolean variable, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_message_parse_volume_changed">
<description>
Parses a volume-changed notification message and extracts the track object
it refers to, as well as an array of volumes and the size of the volumes array.

The track object remains valid until the message is freed.

The caller must free the array returned in the volumes parameter using g_free
when they are done with it.


</description>
<parameters>
<parameter name="message">
<parameter_description> A volume-changed change notification message.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> Pointer to hold a GstMixerTrack object, or NULL.
</parameter_description>
</parameter>
<parameter name="volumes">
<parameter_description> A pointer to receive an array of gint values, or NULL.
</parameter_description>
</parameter>
<parameter name="num_channels">
<parameter_description> Result location to receive the number of channels, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_mixer_changed">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the list of available
mixer tracks for a given mixer object has changed. Applications should
rebuild their interface when they receive this message.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.


</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) which has changed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_mute_toggled">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the given track
has changed mute state.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the GstMixerTrack that has change mute state.
</parameter_description>
</parameter>
<parameter name="mute">
<parameter_description> the new state of the mute flag on the track
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_option_changed">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the given options
object has changed state. 

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the options 
</parameter_description>
</parameter>
<parameter name="opts">
<parameter_description> the GstMixerOptions that has changed value.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value of the GstMixerOptions.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_options_get_values">
<description>
Get the values for the mixer option.


</description>
<parameters>
<parameter name="mixer_options">
<parameter_description> The #GstMixerOptions item that owns the values.
</parameter_description>
</parameter>
</parameters>
<return> A list of strings with all the possible values for the mixer
option. You must not free or modify the list or its contents, it belongs
to the @mixer_options object.
</return>
</function>

<function name="gst_mixer_options_list_changed">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the list of possible
options of a given options object has changed.

The new options are not contained in the message on purpose. Applications
should call gst_mixer_option_get_values() on @opts to make @opts update
its internal state and obtain the new list of values.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus
for this to work.


</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the options 
</parameter_description>
</parameter>
<parameter name="opts">
<parameter_description> the GstMixerOptions whose list of values has changed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_record_toggled">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the given track
has changed recording state.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the GstMixerTrack that has changed recording state.
</parameter_description>
</parameter>
<parameter name="record">
<parameter_description> the new state of the record flag on the track
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_set_mute">
<description>
Mutes or unmutes the given channel. To find out whether a
track is currently muted, use GST_MIXER_TRACK_HAS_FLAG ().

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the #GstMixerTrack to operate on.
</parameter_description>
</parameter>
<parameter name="mute">
<parameter_description> a boolean value indicating whether to turn on or off
muting.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_set_option">
<description>
Sets a name/value option in the mixer to the requested value.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer (a #GstElement) that owns the optionlist.
</parameter_description>
</parameter>
<parameter name="opts">
<parameter_description> The #GstMixerOptions that we operate on.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The requested new option value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_set_record">
<description>
Enables or disables recording on the given track. Note that
this is only possible on input tracks, not on output tracks
(see GST_MIXER_TRACK_HAS_FLAG () and the GST_MIXER_TRACK_INPUT
flag).

</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer (a #GstElement) that owns the track.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the #GstMixerTrack to operate on.
</parameter_description>
</parameter>
<parameter name="record">
<parameter_description> a boolean value that indicates whether to turn on
or off recording.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_set_volume">
<description>
Sets the volume on each channel in a track. Short note about
naming: a track is defined as one separate stream owned by
the mixer/element, such as 'Line-in' or 'Microphone'. A
channel is said to be a mono-stream inside this track. A
stereo track thus contains two channels.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer (a #GstElement) that owns the track.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> The #GstMixerTrack to set the volume on.
</parameter_description>
</parameter>
<parameter name="volumes">
<parameter_description> an array of integers (of size track-&gt;num_channels)
that gives the wanted volume for each channel in
this track.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_volume_changed">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the volume(s) for the
given track have changed.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the GstMixerTrack that has changed.
</parameter_description>
</parameter>
<parameter name="volumes">
<parameter_description> Array of volume values, one per channel on the mixer track.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_navigation_event_get_type">
<description>
Inspect a #GstEvent and return the #GstNavigationEventType of the event, or
#GST_NAVIGATION_EVENT_INVALID if the event is not a #GstNavigation event.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #GstEvent to inspect.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_navigation_event_parse_command">
<description>
Inspect a #GstNavigation command event and retrieve the enum value of the
associated command.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #GstEvent to inspect.
</parameter_description>
</parameter>
<parameter name="command">
<parameter_description> Pointer to GstNavigationCommand to receive the type of the
navigation event.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the navigation command could be extracted, otherwise FALSE.

</return>
</function>

<function name="gst_navigation_event_parse_key_event">
<description>

</description>
<parameters>
<parameter name="event">
<parameter_description> A #GstEvent to inspect.
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> A pointer to a location to receive the string identifying the key
press. The returned string is owned by the event, and valid only until the
event is unreffed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_navigation_event_parse_mouse_button_event">
<description>
Retrieve the details of either a #GstNavigation mouse button press event or
a mouse button release event. Determine which type the event is using
gst_navigation_event_get_type() to retrieve the #GstNavigationEventType.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #GstEvent to inspect.
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> Pointer to a gint that will receive the button number associated
with the event.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> Pointer to a gdouble to receive the x coordinate of the mouse button
event.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Pointer to a gdouble to receive the y coordinate of the mouse button
event.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the button number and both coordinates could be extracted,
otherwise FALSE.

</return>
</function>

<function name="gst_navigation_event_parse_mouse_move_event">
<description>
Inspect a #GstNavigation mouse movement event and extract the coordinates
of the event.


</description>
<parameters>
<parameter name="event">
<parameter_description> A #GstEvent to inspect.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> Pointer to a gdouble to receive the x coordinate of the mouse movement.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Pointer to a gdouble to receive the y coordinate of the mouse movement.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if both coordinates could be extracted, otherwise FALSE.

</return>
</function>

<function name="gst_navigation_message_get_type">
<description>
Check a bus message to see if it is a #GstNavigation event, and return
the #GstNavigationMessageType identifying the type of the message if so.


</description>
<parameters>
<parameter name="message">
<parameter_description> A #GstMessage to inspect.
</parameter_description>
</parameter>
</parameters>
<return> The type of the #GstNavigationMessage, or
#GST_NAVIGATION_MESSAGE_INVALID if the message is not a #GstNavigation
notification.

</return>
</function>

<function name="gst_navigation_message_new_angles_changed">
<description>
Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_ANGLES_CHANGED for notifying an application
that the current angle, or current number of angles available in a
multiangle video has changed.


</description>
<parameters>
<parameter name="src">
<parameter_description> A #GstObject to set as source of the new message.
</parameter_description>
</parameter>
<parameter name="cur_angle">
<parameter_description> The currently selected angle.
</parameter_description>
</parameter>
<parameter name="n_angles">
<parameter_description> The number of viewing angles now available.
</parameter_description>
</parameter>
</parameters>
<return> The new #GstMessage.
</return>
</function>

<function name="gst_navigation_message_new_commands_changed">
<description>
Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_COMMANDS_CHANGED


</description>
<parameters>
<parameter name="src">
<parameter_description> A #GstObject to set as source of the new message.
</parameter_description>
</parameter>
</parameters>
<return> The new #GstMessage.
</return>
</function>

<function name="gst_navigation_message_new_mouse_over">
<description>
Creates a new #GstNavigation message with type
#GST_NAVIGATION_MESSAGE_MOUSE_OVER.


</description>
<parameters>
<parameter name="src">
<parameter_description> A #GstObject to set as source of the new message.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> %TRUE if the mouse has entered a clickable area of the display.
%FALSE if it over a non-clickable area.
</parameter_description>
</parameter>
</parameters>
<return> The new #GstMessage.
</return>
</function>

<function name="gst_navigation_message_parse_angles_changed">
<description>
Parse a #GstNavigation message of type GST_NAVIGATION_MESSAGE_ANGLES_CHANGED
and extract the @cur_angle and @n_angles parameters.


</description>
<parameters>
<parameter name="message">
<parameter_description> A #GstMessage to inspect.
</parameter_description>
</parameter>
<parameter name="cur_angle">
<parameter_description> A pointer to a #guint to receive the new current angle number,
or NULL
</parameter_description>
</parameter>
<parameter name="n_angles">
<parameter_description> A pointer to a #guint to receive the new angle count, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the message could be successfully parsed. %FALSE if not.
</return>
</function>

<function name="gst_navigation_message_parse_mouse_over">
<description>
Parse a #GstNavigation message of type #GST_NAVIGATION_MESSAGE_MOUSE_OVER
and extract the active/inactive flag. If the mouse over event is marked
active, it indicates that the mouse is over a clickable area.


</description>
<parameters>
<parameter name="message">
<parameter_description> A #GstMessage to inspect.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> A pointer to a gboolean to receive the active/inactive state,
or NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the message could be successfully parsed. %FALSE if not.
</return>
</function>

<function name="gst_navigation_query_get_type">
<description>
Inspect a #GstQuery and return the #GstNavigationQueryType associated with
it if it is a #GstNavigation query.


</description>
<parameters>
<parameter name="query">
<parameter_description> The query to inspect
</parameter_description>
</parameter>
</parameters>
<return> The #GstNavigationQueryType of the query, or
#GST_NAVIGATION_QUERY_INVALID
</return>
</function>

<function name="gst_navigation_query_new_angles">
<description>
Create a new #GstNavigation angles query. When executed, it will
query the pipeline for the set of currently available angles, which may be
greater than one in a multiangle video.


</description>
<parameters>
</parameters>
<return> The new query.
</return>
</function>

<function name="gst_navigation_query_new_commands">
<description>
Create a new #GstNavigation commands query. When executed, it will
query the pipeline for the set of currently available commands.


</description>
<parameters>
</parameters>
<return> The new query.
</return>
</function>

<function name="gst_navigation_query_parse_angles">
<description>
Parse the current angle number in the #GstNavigation angles @query into the
#guint pointed to by the @cur_angle variable, and the number of available
angles into the #guint pointed to by the @n_angles variable.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="cur_angle">
<parameter_description> Pointer to a #guint into which to store the currently selected
angle value from the query, or NULL
</parameter_description>
</parameter>
<parameter name="n_angles">
<parameter_description> Pointer to a #guint into which to store the number of angles
value from the query, or NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the query could be successfully parsed. %FALSE if not.
</return>
</function>

<function name="gst_navigation_query_parse_commands_length">
<description>
Parse the number of commands in the #GstNavigation commands @query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="n_cmds">
<parameter_description> the number of commands in this query.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the query could be successfully parsed. %FALSE if not.
</return>
</function>

<function name="gst_navigation_query_parse_commands_nth">
<description>
Parse the #GstNavigation command query and retrieve the @nth command from
it into @cmd. If the list contains less elements than @nth, @cmd will be
set to #GST_NAVIGATION_COMMAND_INVALID.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth command to retrieve.
</parameter_description>
</parameter>
<parameter name="cmd">
<parameter_description> a pointer to store the nth command into.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the query could be successfully parsed. %FALSE if not.
</return>
</function>

<function name="gst_navigation_query_set_angles">
<description>
Set the #GstNavigation angles query result field in @query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="cur_angle">
<parameter_description> the current viewing angle to set.
</parameter_description>
</parameter>
<parameter name="n_angles">
<parameter_description> the number of viewing angles to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_navigation_query_set_commands">
<description>
Set the #GstNavigation command query result fields in @query. The number
of commands passed must be equal to @n_commands.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="n_cmds">
<parameter_description> the number of commands to set.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A list of @GstNavigationCommand values, @n_cmds entries long.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_navigation_query_set_commandsv">
<description>
Set the #GstNavigation command query result fields in @query. The number
of commands passed must be equal to @n_commands.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="n_cmds">
<parameter_description> the number of commands to set.
</parameter_description>
</parameter>
<parameter name="cmds">
<parameter_description> An array containing @n_cmds @GstNavigationCommand values.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_navigation_send_command">
<description>
Sends the indicated command to the navigation interface.


</description>
<parameters>
<parameter name="navigation">
<parameter_description> The navigation interface instance
</parameter_description>
</parameter>
<parameter name="command">
<parameter_description> The command to issue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_navigation_send_key_event">
<description>

</description>
<parameters>
<parameter name="navigation">
<parameter_description> The navigation interface instance
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> The type of the key event. Recognised values are &quot;key-press&quot; and
&quot;key-release&quot;
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> Character representation of the key. This is typically as produced
by XKeysymToString.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_navigation_send_mouse_event">
<description>
Sends a mouse event to the navigation interface. Mouse event coordinates
are sent relative to the display space of the related output area. This is
usually the size in pixels of the window associated with the element
implementing the #GstNavigation interface.


</description>
<parameters>
<parameter name="navigation">
<parameter_description> The navigation interface instance
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> The type of mouse event, as a text string. Recognised values are
&quot;mouse-button-press&quot;, &quot;mouse-button-release&quot; and &quot;mouse-move&quot;.
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> The button number of the button being pressed or released. Pass 0
for mouse-move events.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> The x coordinate of the mouse event.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> The y coordinate of the mouse event.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_net_client_clock_new">
<description>
Create a new #GstNetClientClock that will report the time
provided by the #GstNetTimeProvider on @remote_address and 
@remote_port.


</description>
<parameters>
<parameter name="name">
<parameter_description> a name for the clock
</parameter_description>
</parameter>
<parameter name="remote_address">
<parameter_description> the address of the remote clock provider
</parameter_description>
</parameter>
<parameter name="remote_port">
<parameter_description> the port of the remote clock provider
</parameter_description>
</parameter>
<parameter name="base_time">
<parameter_description> initial time of the clock
</parameter_description>
</parameter>
</parameters>
<return> a new #GstClock that receives a time from the remote
clock.
</return>
</function>

<function name="gst_net_time_packet_new">
<description>
Creates a new #GstNetTimePacket from a buffer received over the network. The
caller is responsible for ensuring that @buffer is at least
#GST_NET_TIME_PACKET_SIZE bytes long.

If @buffer is #NULL, the local and remote times will be set to
#GST_CLOCK_TIME_NONE.

MT safe. Caller owns return value (g_free to free).


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a buffer from which to construct the packet, or NULL
</parameter_description>
</parameter>
</parameters>
<return> The new #GstNetTimePacket.
</return>
</function>

<function name="gst_net_time_packet_receive">
<description>
Receives a #GstNetTimePacket over a socket. Handles interrupted system calls,
but otherwise returns NULL on error. See recvfrom(2) for more information on
how to interpret @sockaddr.

MT safe. Caller owns return value (g_free to free).


</description>
<parameters>
<parameter name="fd">
<parameter_description> a file descriptor created by socket(2)
</parameter_description>
</parameter>
<parameter name="addr">
<parameter_description> a pointer to a sockaddr to hold the address of the sender
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> a pointer to the size of the data pointed to by @addr
</parameter_description>
</parameter>
</parameters>
<return> The new #GstNetTimePacket.
</return>
</function>

<function name="gst_net_time_packet_send">
<description>
Sends a #GstNetTimePacket over a socket. Essentially a thin wrapper around
sendto(2) and gst_net_time_packet_serialize(). 

MT safe.


</description>
<parameters>
<parameter name="packet">
<parameter_description> the #GstNetTimePacket
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor created by socket(2)
</parameter_description>
</parameter>
<parameter name="addr">
<parameter_description> a pointer to a sockaddr to hold the address of the sender
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the size of the data pointed to by @addr
</parameter_description>
</parameter>
</parameters>
<return> The return value of sendto(2).
</return>
</function>

<function name="gst_net_time_packet_serialize">
<description>
Serialized a #GstNetTimePacket into a newly-allocated sequence of
#GST_NET_TIME_PACKET_SIZE bytes, in network byte order. The value returned is
suitable for passing to write(2) or sendto(2) for communication over the
network.

MT safe. Caller owns return value (g_free to free).


</description>
<parameters>
<parameter name="packet">
<parameter_description> the #GstNetTimePacket
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated sequence of #GST_NET_TIME_PACKET_SIZE bytes.
</return>
</function>

<function name="gst_net_time_provider_new">
<description>
Allows network clients to get the current time of @clock.


</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstClock to export over the network
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> an address to bind on as a dotted quad (xxx.xxx.xxx.xxx), or NULL
to bind to all addresses
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a port to bind on, or 0 to let the kernel choose
</parameter_description>
</parameter>
</parameters>
<return> the new #GstNetTimeProvider, or NULL on error
</return>
</function>

<function name="gst_netaddress_equal">
<description>
Compare two #GstNetAddress structures


</description>
<parameters>
<parameter name="naddr1">
<parameter_description> The first #GstNetAddress
</parameter_description>
</parameter>
<parameter name="naddr2">
<parameter_description> The second #GstNetAddress
</parameter_description>
</parameter>
</parameters>
<return> TRUE if they are identical, FALSE otherwise

</return>
</function>

<function name="gst_netaddress_get_address_bytes">
<description>
Get just the address bytes stored in @naddr into @address.

Note that @port is expressed in network byte order, use g_ntohs() to convert
it to host order. IP4 addresses are also stored in network byte order.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a location to store the result.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a location to store the port.
</parameter_description>
</parameter>
</parameters>
<return> number of bytes actually copied

</return>
</function>

<function name="gst_netaddress_get_ip4_address">
<description>
Get the IPv4 address stored in @naddr into @address. This function requires
that the address type of @naddr is of type #GST_NET_TYPE_IP4.

Note that @port and @address are expressed in network byte order, use
g_ntohs() and g_ntohl() to convert them to host order.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a location to store the address.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a location to store the port.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the address could be retrieved.
</return>
</function>

<function name="gst_netaddress_get_ip6_address">
<description>
Get the IPv6 address stored in @naddr into @address.

If @naddr is of type GST_NET_TYPE_IP4, the transitional IP6 address is
returned.

Note that @port is expressed in network byte order, use g_ntohs() to convert
it to host order.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a location to store the result.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a location to store the port.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the address could be retrieved.
</return>
</function>

<function name="gst_netaddress_get_net_type">
<description>
Get the type of address stored in @naddr.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
</parameters>
<return> the network type stored in @naddr.
</return>
</function>

<function name="gst_netaddress_set_address_bytes">
<description>
Set just the address bytes stored in @naddr into @address.

Note that @port must be expressed in network byte order, use g_htons() to
convert it to network byte order order. IP4 address bytes must also be
stored in network byte order.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the address type (IPv4 or IPV6)
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a location to store the result.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a location to store the port.
</parameter_description>
</parameter>
</parameters>
<return> number of bytes actually copied

</return>
</function>

<function name="gst_netaddress_set_ip4_address">
<description>
Set @naddr with the IPv4 @address and @port pair.

Note that @port and @address must be expressed in network byte order,
use g_htons() and g_htonl() to convert them to network byte order.

</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> an IPv4 network address.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a port number to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_netaddress_set_ip6_address">
<description>
Set @naddr with the IPv6 @address and @port pair.

Note that @port must be expressed in network byte order, use g_htons() to convert
it to network byte order.

</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> an IPv6 network address.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a port number to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_netaddress_to_string">
<description>
Copies a string representation of @naddr into @dest. Up to @len bytes are
copied.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a #GstNetAddress
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> destination
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> len of @dest
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes which would be produced if the buffer was large
enough

</return>
</function>

<function name="gst_netbuffer_new">
<description>
Create a new network buffer.


</description>
<parameters>
</parameters>
<return> a new #GstNetBuffer.
</return>
</function>

<function name="gst_object_check_uniqueness">
<description>
Checks to see if there is any object named @name in @list. This function
does not do any locking of any kind. You might want to protect the
provided list with the lock of the owner of the list. This function
will lock each #GstObject in the list to compare the name, so be
carefull when passing a list with a locked object.


</description>
<parameters>
<parameter name="list">
<parameter_description> a list of #GstObject to
check through
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to search for
</parameter_description>
</parameter>
</parameters>
<return> TRUE if a #GstObject named @name does not appear in @list,
FALSE if it does.

MT safe. Grabs and releases the LOCK of each object in the list.
</return>
</function>

<function name="gst_object_control_properties">
<description>
Convenience function for GObject

Creates a GstController that allows you to dynamically control one, or more, GObject properties.
If the given GObject already has a GstController, it adds the given properties to the existing
controller and returns that controller.


</description>
<parameters>
<parameter name="object">
<parameter_description> the object of which some properties should be controlled
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL terminated list of property names that should be controlled
</parameter_description>
</parameter>
</parameters>
<return> The GstController with which the user can control the given properties dynamically or NULL if
one or more of the given properties aren't available, or cannot be controlled, for the given element.
</return>
</function>

<function name="gst_object_default_deep_notify">
<description>
A default deep_notify signal callback for an object. The user data
should contain a pointer to an array of strings that should be excluded
from the notify. The default handler will print the new value of the property
using g_print.

MT safe. This function grabs and releases @object's LOCK for getting its
path string.

</description>
<parameters>
<parameter name="object">
<parameter_description> the #GObject that signalled the notify.
</parameter_description>
</parameter>
<parameter name="orig">
<parameter_description> a #GstObject that initiated the notify.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> a #GParamSpec of the property.
</parameter_description>
</parameter>
<parameter name="excluded_props">
<parameter_description> (array zero-terminated=1) (element-type gchar*)
(allow-none):a set of user-specified properties to exclude or
NULL to show all changes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_default_error">
<description>
A default error function.

The default handler will simply print the error string using g_print.

</description>
<parameters>
<parameter name="source">
<parameter_description> the #GstObject that initiated the error.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the GError.
</parameter_description>
</parameter>
<parameter name="debug">
<parameter_description> an additional debug information string, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_get_control_rate">
<description>
Obtain the control-rate for this @object. Audio processing #GstElement
objects will use this rate to sub-divide their processing loop and call
gst_object_sync_values() inbetween. The length of the processing segment
should be up to @control-rate nanoseconds.

If the @object is not under property control, this will return
%GST_CLOCK_TIME_NONE. This allows the element to avoid the sub-dividing.

The control-rate is not expected to change if the element is in
%GST_STATE_PAUSED or %GST_STATE_PLAYING.


</description>
<parameters>
<parameter name="object">
<parameter_description> the object that has controlled properties
</parameter_description>
</parameter>
</parameters>
<return> the control rate in nanoseconds
</return>
</function>

<function name="gst_object_get_control_source">
<description>
Gets the corresponding #GstControlSource for the property. This should be unreferenced
again after use.


</description>
<parameters>
<parameter name="object">
<parameter_description> the object
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property for which the #GstControlSource should be get
</parameter_description>
</parameter>
</parameters>
<return> the #GstControlSource for @property_name or NULL if the property is not
controlled by this controller or no #GstControlSource was assigned yet.

</return>
</function>

<function name="gst_object_get_controller">
<description>
Gets the controller for the given GObject


</description>
<parameters>
<parameter name="object">
<parameter_description> the object that has controlled properties
</parameter_description>
</parameter>
</parameters>
<return> the controller handling some of the given element's properties, %NULL if no controller
</return>
</function>

<function name="gst_object_get_name">
<description>
Returns a copy of the name of @object.
Caller should g_free() the return value after usage.
For a nameless object, this returns NULL, which you can safely g_free()
as well.

Free-function: g_free


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject
</parameter_description>
</parameter>
</parameters>
<return> the name of @object. g_free() after usage.

MT safe. This function grabs and releases @object's LOCK.
</return>
</function>

<function name="gst_object_get_name_prefix">
<description>
Returns a copy of the name prefix of @object.
Caller should g_free() the return value after usage.
For a prefixless object, this returns NULL, which you can safely g_free()
as well.

Deprecated: deprecated because the name prefix has never actually been used
for anything.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject
</parameter_description>
</parameter>
</parameters>
<return> the name prefix of @object. g_free() after usage.

MT safe. This function grabs and releases @object's LOCK.

</return>
</function>

<function name="gst_object_get_parent">
<description>
Returns the parent of @object. This function increases the refcount
of the parent object so you should gst_object_unref() it after usage.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject
</parameter_description>
</parameter>
</parameters>
<return> parent of @object, this can be NULL if @object
has no parent. unref after usage.

MT safe. Grabs and releases @object's LOCK.
</return>
</function>

<function name="gst_object_get_path_string">
<description>
Generates a string describing the path of @object in
the object hierarchy. Only useful (or used) for debugging.

Free-function: g_free


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject
</parameter_description>
</parameter>
</parameters>
<return> a string describing the path of @object. You must
g_free() the string after usage.

MT safe. Grabs and releases the #GstObject's LOCK for all objects
in the hierarchy.
</return>
</function>

<function name="gst_object_get_value_array">
<description>
Function to be able to get an array of values for one element properties

If the GstValueArray-&gt;values array is NULL, it will be created by the function.
The type of the values in the array are the same as the property's type.

The g_object_* functions are just convenience functions for GObject


</description>
<parameters>
<parameter name="object">
<parameter_description> the object that has controlled properties
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time that should be processed
</parameter_description>
</parameter>
<parameter name="value_array">
<parameter_description> array to put control-values in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given array(s) could be filled, %FALSE otherwise
</return>
</function>

<function name="gst_object_get_value_arrays">
<description>
Function to be able to get an array of values for one or more given element
properties.

If the GstValueArray-&gt;values array in list nodes is NULL, it will be created
by the function.
The type of the values in the array are the same as the property's type.

The g_object_* functions are just convenience functions for GObject


</description>
<parameters>
<parameter name="object">
<parameter_description> the object that has controlled properties
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time that should be processed
</parameter_description>
</parameter>
<parameter name="value_arrays">
<parameter_description> list to return the control-values in
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given array(s) could be filled, %FALSE otherwise
</return>
</function>

<function name="gst_object_has_ancestor">
<description>
Check if @object has an ancestor @ancestor somewhere up in
the hierarchy. One can e.g. check if a #GstElement is inside a #GstPipeline.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject to check
</parameter_description>
</parameter>
<parameter name="ancestor">
<parameter_description> a #GstObject to check as ancestor
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @ancestor is an ancestor of @object.

MT safe. Grabs and releases @object's locks.
</return>
</function>

<function name="gst_object_ref">
<description>
Increments the reference count on @object. This function
does not take the lock on @object because it relies on
atomic refcounting.

This object returns the input parameter to ease writing
constructs like :
result = gst_object_ref (object-&gt;parent);


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject to reference
</parameter_description>
</parameter>
</parameters>
<return> A pointer to @object
</return>
</function>

<function name="gst_object_ref_sink">
<description>
Increase the reference count of @object, and possibly remove the floating
reference, if @object has a floating reference.

In other words, if the object is floating, then this call &quot;assumes ownership&quot;
of the floating reference, converting it to a normal reference by clearing
the floating flag while leaving the reference count unchanged. If the object
is not floating, then this call adds a new normal reference increasing the
reference count by one.

MT safe. This function grabs and releases @object lock.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject to sink
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_replace">
<description>
Unrefs the #GstObject pointed to by @oldobj, refs @newobj and
puts @newobj in *@oldobj. Be carefull when calling this
function, it does not take any locks. You might want to lock
the object owning @oldobj pointer before calling this
function.

Make sure not to LOCK @oldobj because it might be unreffed
which could cause a deadlock when it is disposed.

</description>
<parameters>
<parameter name="oldobj">
<parameter_description> pointer to a place of a #GstObject to
replace
</parameter_description>
</parameter>
<parameter name="newobj">
<parameter_description> a new #GstObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_restore_thyself">
<description>
Restores @object with the data from the parent XML node.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject to load into
</parameter_description>
</parameter>
<parameter name="self">
<parameter_description> The XML node to load @object from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_save_thyself">
<description>
Saves @object into the parent XML node.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject to save
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> The parent XML node to save @object into
</parameter_description>
</parameter>
</parameters>
<return> the new xmlNodePtr with the saved object
</return>
</function>

<function name="gst_object_set_control_rate">
<description>
Change the control-rate for this @object. Audio processing #GstElement
objects will use this rate to sub-divide their processing loop and call
gst_object_sync_values() inbetween. The length of the processing segment
should be up to @control-rate nanoseconds.

The control-rate should not change if the element is in %GST_STATE_PAUSED or
%GST_STATE_PLAYING.


</description>
<parameters>
<parameter name="object">
<parameter_description> the object that has controlled properties
</parameter_description>
</parameter>
<parameter name="control_rate">
<parameter_description> the new control-rate in nanoseconds.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_set_control_source">
<description>
Sets the #GstControlSource for @property_name. If there already was a #GstControlSource
for this property it will be unreferenced.


</description>
<parameters>
<parameter name="object">
<parameter_description> the controller object
</parameter_description>
</parameter>
<parameter name="property_name">
<parameter_description> name of the property for which the #GstControlSource should be set
</parameter_description>
</parameter>
<parameter name="csource">
<parameter_description> the #GstControlSource that should be used for the property
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the given property isn't handled by the controller or the new #GstControlSource
couldn't be bound to the property, %TRUE if everything worked as expected.

</return>
</function>

<function name="gst_object_set_controller">
<description>
Sets the controller on the given GObject


</description>
<parameters>
<parameter name="object">
<parameter_description> the object that should get the controller
</parameter_description>
</parameter>
<parameter name="controller">
<parameter_description> the controller object to plug in
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if the GObject already has an controller, %TRUE otherwise
</return>
</function>

<function name="gst_object_set_name">
<description>
Sets the name of @object, or gives @object a guaranteed unique
name (if @name is NULL).
This function makes a copy of the provided name, so the caller
retains ownership of the name it sent.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description>   new name of object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the name could be set. Since Objects that have
a parent cannot be renamed, this function returns FALSE in those
cases.

MT safe.  This function grabs and releases @object's LOCK.
</return>
</function>

<function name="gst_object_set_name_prefix">
<description>
Sets the name prefix of @object to @name_prefix.
This function makes a copy of the provided name prefix, so the caller
retains ownership of the name prefix it sent.

MT safe.  This function grabs and releases @object's LOCK.

Deprecated: deprecated because the name prefix has never actually been used
for anything.

</description>
<parameters>
<parameter name="object">
<parameter_description>      a #GstObject
</parameter_description>
</parameter>
<parameter name="name_prefix">
<parameter_description> new name prefix of @object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_set_parent">
<description>
Sets the parent of @object to @parent. The object's reference count will
be incremented, and any floating reference will be removed (see gst_object_sink()).

This function causes the parent-set signal to be emitted when the parent
was successfully set.


</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> new parent of object
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @parent could be set or FALSE when @object
already had a parent or @object and @parent are the same.

MT safe. Grabs and releases @object's LOCK.
</return>
</function>

<function name="gst_object_sink">
<description>
If @object was floating, the #GST_OBJECT_FLOATING flag is removed
and @object is unreffed. When @object was not floating,
this function does nothing.

Any newly created object has a refcount of 1 and is floating.
This function should be used when creating a new object to
symbolically 'take ownership' of @object. This done by first doing a
gst_object_ref() to keep a reference to @object and then gst_object_sink()
to remove and unref any floating references to @object.
Use gst_object_set_parent() to have this done for you.

MT safe. This function grabs and releases @object lock.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject to sink
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_suggest_next_sync">
<description>
Convenience function for GObject


</description>
<parameters>
<parameter name="object">
<parameter_description> the object that has controlled properties
</parameter_description>
</parameter>
</parameters>
<return> same thing as gst_controller_suggest_next_sync()
</return>
</function>

<function name="gst_object_sync_values">
<description>
Convenience function for GObject


</description>
<parameters>
<parameter name="object">
<parameter_description> the object that has controlled properties
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the time that should be processed
</parameter_description>
</parameter>
</parameters>
<return> same thing as gst_controller_sync_values()
</return>
</function>

<function name="gst_object_uncontrol_properties">
<description>
Convenience function for GObject

Removes the given element's properties from it's controller


</description>
<parameters>
<parameter name="object">
<parameter_description> the object of which some properties should not be controlled anymore
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> %NULL terminated list of property names that should be controlled
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if one of the given property names isn't handled by the
controller, %TRUE otherwise
</return>
</function>

<function name="gst_object_unparent">
<description>
Clear the parent of @object, removing the associated reference.
This function decreases the refcount of @object.

MT safe. Grabs and releases @object's lock.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject to unparent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_object_unref">
<description>
Decrements the reference count on @object.  If reference count hits
zero, destroy @object. This function does not take the lock
on @object as it relies on atomic refcounting.

The unref method should never be called with the LOCK held since
this might deadlock the dispose function.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GstObject to unreference
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_accept_caps">
<description>
Check if the given pad accepts the caps.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to check
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> a #GstCaps to check on the pad
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pad can accept the caps.
</return>
</function>

<function name="gst_pad_activate_pull">
<description>
Activates or deactivates the given pad in pull mode via dispatching to the
pad's activatepullfunc. For use from within pad activation functions only.
When called on sink pads, will first proxy the call to the peer pad, which
is expected to activate its internally linked pads from within its
activate_pull function.

If you don't know what this is, you probably don't want to call it.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to activate or deactivate.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> whether or not the pad should be active.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the operation was successful.

MT safe.
</return>
</function>

<function name="gst_pad_activate_push">
<description>
Activates or deactivates the given pad in push mode via dispatching to the
pad's activatepushfunc. For use from within pad activation functions only.

If you don't know what this is, you probably don't want to call it.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to activate or deactivate.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> whether the pad should be active or not.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation was successful.

MT safe.
</return>
</function>

<function name="gst_pad_add_buffer_probe">
<description>
Adds a probe that will be called for all buffers passing through a pad. See
gst_pad_add_data_probe() for more information.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to add the buffer probe handler to
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> function to call when buffers are passed over pad
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass along with the handler
</parameter_description>
</parameter>
</parameters>
<return> The handler id
</return>
</function>

<function name="gst_pad_add_buffer_probe_full">
<description>
Adds a probe that will be called for all buffers passing through a pad. See
gst_pad_add_data_probe() for more information.

The @notify function is called when the probe is disconnected and usually
used to free @data.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to add the buffer probe handler to
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> function to call when buffer are passed over pad
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass along with the handler
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the probe is disconnected,
or NULL
</parameter_description>
</parameter>
</parameters>
<return> The handler id

</return>
</function>

<function name="gst_pad_add_data_probe">
<description>
Adds a &quot;data probe&quot; to a pad. This function will be called whenever data
passes through a pad. In this case data means both events and buffers. The
probe will be called with the data as an argument, meaning @handler should
have the same callback signature as the #GstPad::have-data signal.
Note that the data will have a reference count greater than 1, so it will
be immutable -- you must not change it.

For source pads, the probe will be called after the blocking function, if any
(see gst_pad_set_blocked_async()), but before looking up the peer to chain
to. For sink pads, the probe function will be called before configuring the
sink with new caps, if any, and before calling the pad's chain function.

Your data probe should return TRUE to let the data continue to flow, or FALSE
to drop it. Dropping data is rarely useful, but occasionally comes in handy
with events.

Although probes are implemented internally by connecting @handler to the
have-data signal on the pad, if you want to remove a probe it is insufficient
to only call g_signal_handler_disconnect on the returned handler id. To
remove a probe, use the appropriate function, such as
gst_pad_remove_data_probe().


</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to add the data probe handler to
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> function to call when data is passed over pad
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass along with the handler
</parameter_description>
</parameter>
</parameters>
<return> The handler id.
</return>
</function>

<function name="gst_pad_add_data_probe_full">
<description>
Adds a &quot;data probe&quot; to a pad. This function will be called whenever data
passes through a pad. In this case data means both events and buffers. The
probe will be called with the data as an argument, meaning @handler should
have the same callback signature as the #GstPad::have-data signal.
Note that the data will have a reference count greater than 1, so it will
be immutable -- you must not change it.

For source pads, the probe will be called after the blocking function, if any
(see gst_pad_set_blocked_async()), but before looking up the peer to chain
to. For sink pads, the probe function will be called before configuring the
sink with new caps, if any, and before calling the pad's chain function.

Your data probe should return TRUE to let the data continue to flow, or FALSE
to drop it. Dropping data is rarely useful, but occasionally comes in handy
with events.

Although probes are implemented internally by connecting @handler to the
have-data signal on the pad, if you want to remove a probe it is insufficient
to only call g_signal_handler_disconnect on the returned handler id. To
remove a probe, use the appropriate function, such as
gst_pad_remove_data_probe().

The @notify function is called when the probe is disconnected and usually
used to free @data.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to add the data probe handler to
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> function to call when data is passed over pad
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass along with the handler
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when the probe is disconnected,
or NULL
</parameter_description>
</parameter>
</parameters>
<return> The handler id.

</return>
</function>

<function name="gst_pad_add_event_probe">
<description>
Adds a probe that will be called for all events passing through a pad. See
gst_pad_add_data_probe() for more information.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to add the event probe handler to
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> function to call when events are passed over pad
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass along with the handler
</parameter_description>
</parameter>
</parameters>
<return> The handler id
</return>
</function>

<function name="gst_pad_add_event_probe_full">
<description>
Adds a probe that will be called for all events passing through a pad. See
gst_pad_add_data_probe() for more information.

The @notify function is called when the probe is disconnected and usually
used to free @data.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to add the event probe handler to
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> function to call when events are passed over pad
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to pass along with the handler, or NULL
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function to call when probe is disconnected, or NULL
</parameter_description>
</parameter>
</parameters>
<return> The handler id

</return>
</function>

<function name="gst_pad_alloc_buffer">
<description>
Allocates a new, empty buffer optimized to push to pad @pad.  This
function only works if @pad is a source pad and has a peer.

A new, empty #GstBuffer will be put in the @buf argument.
You need to check the caps of the buffer after performing this
function and renegotiate to the format if needed. If the caps changed, it is
possible that the buffer returned in @buf is not of the right size for the
new format, @buf needs to be unreffed and reallocated if this is the case.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a source #GstPad
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset of the new buffer in the stream
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the new buffer
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps of the new buffer
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> a newly allocated buffer
</parameter_description>
</parameter>
</parameters>
<return> a result code indicating success of the operation. Any
result code other than #GST_FLOW_OK is an error and @buf should
not be used.
An error can occur if the pad is not connected or when the downstream
peer elements cannot provide an acceptable buffer.

MT safe.
</return>
</function>

<function name="gst_pad_alloc_buffer_and_set_caps">
<description>
In addition to the function gst_pad_alloc_buffer(), this function
automatically calls gst_pad_set_caps() when the caps of the
newly allocated buffer are different from the @pad caps.

After a renegotiation, the size of the new buffer returned in @buf could
be of the wrong size for the new format and must be unreffed an reallocated
in that case.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a source #GstPad
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset of the new buffer in the stream
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the new buffer
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps of the new buffer
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> a newly allocated buffer
</parameter_description>
</parameter>
</parameters>
<return> a result code indicating success of the operation. Any
result code other than #GST_FLOW_OK is an error and @buf should
not be used.
An error can occur if the pad is not connected or when the downstream
peer elements cannot provide an acceptable buffer.

MT safe.
</return>
</function>

<function name="gst_pad_can_link">
<description>
Checks if the source pad and the sink pad are compatible so they can be
linked. 


</description>
<parameters>
<parameter name="srcpad">
<parameter_description> the source #GstPad.
</parameter_description>
</parameter>
<parameter name="sinkpad">
<parameter_description> the sink #GstPad.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pads can be linked.
</return>
</function>

<function name="gst_pad_chain">
<description>
Chain a buffer to @pad.

The function returns #GST_FLOW_WRONG_STATE if the pad was flushing.

If the caps on @buffer are different from the current caps on @pad, this
function will call any setcaps function (see gst_pad_set_setcaps_function())
installed on @pad. If the new caps are not acceptable for @pad, this
function returns #GST_FLOW_NOT_NEGOTIATED.

The function proceeds calling the chain function installed on @pad (see
gst_pad_set_chain_function()) and the return value of that function is
returned to the caller. #GST_FLOW_NOT_SUPPORTED is returned if @pad has no
chain function.

In all cases, success or failure, the caller loses its reference to @buffer
after calling this function.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a sink #GstPad, returns GST_FLOW_ERROR if not.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the #GstBuffer to send, return GST_FLOW_ERROR
if not.
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn from the pad.

MT safe.
</return>
</function>

<function name="gst_pad_chain_list">
<description>
Chain a bufferlist to @pad.

The function returns #GST_FLOW_WRONG_STATE if the pad was flushing.

If the caps on the first buffer of @list are different from the current
caps on @pad, this function will call any setcaps function
(see gst_pad_set_setcaps_function()) installed on @pad. If the new caps
are not acceptable for @pad, this function returns #GST_FLOW_NOT_NEGOTIATED.

The function proceeds calling the chainlist function installed on @pad (see
gst_pad_set_chain_list_function()) and the return value of that function is
returned to the caller. #GST_FLOW_NOT_SUPPORTED is returned if @pad has no
chainlist function.

In all cases, success or failure, the caller loses its reference to @list
after calling this function.

MT safe.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a sink #GstPad, returns GST_FLOW_ERROR if not.
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> the #GstBufferList to send, return GST_FLOW_ERROR
if not.
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn from the pad.

</return>
</function>

<function name="gst_pad_check_pull_range">
<description>
Checks if a gst_pad_pull_range() can be performed on the peer
source pad. This function is used by plugins that want to check
if they can use random access on the peer source pad.

The peer sourcepad can implement a custom #GstPadCheckGetRangeFunction
if it needs to perform some logic to determine if pull_range is
possible.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a sink #GstPad.
</parameter_description>
</parameter>
</parameters>
<return> a gboolean with the result.

MT safe.
</return>
</function>

<function name="gst_pad_dispatcher">
<description>
Invokes the given dispatcher function on each respective peer of
all pads that are internally linked to the given pad.
The GstPadDispatcherFunction should return TRUE when no further pads
need to be processed.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to dispatch.
</parameter_description>
</parameter>
<parameter name="dispatch">
<parameter_description> the #GstPadDispatcherFunction to call.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> gpointer user data passed to the dispatcher function.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if one of the dispatcher functions returned TRUE.
</return>
</function>

<function name="gst_pad_event_default">
<description>
Invokes the default event handler for the given pad. End-of-stream and
discontinuity events are handled specially, and then the event is sent to all
pads internally linked to @pad. Note that if there are many possible sink
pads that are internally linked to @pad, only one will be sent an event.
Multi-sinkpad elements should implement custom event handlers.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to call the default event handler on.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GstEvent to handle.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the event was sent succesfully.
</return>
</function>

<function name="gst_pad_fixate_caps">
<description>
Fixate a caps on the given pad. Modifies the caps in place, so you should
make sure that the caps are actually writable (see gst_caps_make_writable()).

</description>
<parameters>
<parameter name="pad">
<parameter_description> a  #GstPad to fixate
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the  #GstCaps to fixate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_get_allowed_caps">
<description>
Gets the capabilities of the allowed media types that can flow through
@pad and its peer.

The allowed capabilities is calculated as the intersection of the results of
calling gst_pad_get_caps() on @pad and its peer. The caller owns a reference
on the resulting caps.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
</parameters>
<return> the allowed #GstCaps of the pad link. Unref the
caps when you no longer need it. This function returns NULL when @pad
has no peer.

MT safe.
</return>
</function>

<function name="gst_pad_get_caps">
<description>
Gets the capabilities this pad can produce or consume.
Note that this method doesn't necessarily return the caps set by
gst_pad_set_caps() - use GST_PAD_CAPS() for that instead.
gst_pad_get_caps returns all possible caps a pad can operate with, using
the pad's get_caps function;
this returns the pad template caps if not explicitly set.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a  #GstPad to get the capabilities of.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of the #GstCaps of this pad

MT safe.
</return>
</function>

<function name="gst_pad_get_caps_reffed">
<description>
Gets the capabilities this pad can produce or consume. Preferred function if
one only wants to read or intersect the caps.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a  #GstPad to get the capabilities of.
</parameter_description>
</parameter>
</parameters>
<return> the caps of the pad with incremented ref-count.

</return>
</function>

<function name="gst_pad_get_direction">
<description>
Gets the direction of the pad. The direction of the pad is
decided at construction time so this function does not take
the LOCK.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to get the direction of.
</parameter_description>
</parameter>
</parameters>
<return> the #GstPadDirection of the pad.

MT safe.
</return>
</function>

<function name="gst_pad_get_element_private">
<description>
Gets the private data of a pad.
No locking is performed in this function.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the private data of.
</parameter_description>
</parameter>
</parameters>
<return> a #gpointer to the private data.
</return>
</function>

<function name="gst_pad_get_fixed_caps_func">
<description>
A helper function you can use as a GetCaps function that
will return the currently negotiated caps or the padtemplate
when NULL.

Free-function: gst_caps_unref


</description>
<parameters>
<parameter name="pad">
<parameter_description> the pad to use
</parameter_description>
</parameter>
</parameters>
<return> the currently negotiated caps or the padtemplate.
</return>
</function>

<function name="gst_pad_get_internal_links">
<description>
Gets a list of pads to which the given pad is linked to
inside of the parent element.
The caller must free this list after use.

Not MT safe.

Deprecated: This function does not ref the pads in the list so that they
could become invalid by the time the application accesses them. It's also
possible that the list changes while handling the pads, which the caller of
this function is unable to know. Use the thread-safe 
gst_pad_iterate_internal_links() instead.

</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the internal links of.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GList
of pads, free with g_list_free().

</return>
</function>

<function name="gst_pad_get_internal_links_default">
<description>
Gets a list of pads to which the given pad is linked to
inside of the parent element.
This is the default handler, and thus returns a list of all of the
pads inside the parent element with opposite direction.

The caller must free this list after use with g_list_free().

Deprecated: This function does not ref the pads in the list so that they
could become invalid by the time the application accesses them. It's also
possible that the list changes while handling the pads, which the caller of
this function is unable to know. Use the thread-safe 
gst_pad_iterate_internal_links_default() instead.

</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the internal links of.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GList
of pads, or NULL if the pad has no parent.

Not MT safe.

</return>
</function>

<function name="gst_pad_get_negotiated_caps">
<description>
Gets the capabilities of the media type that currently flows through @pad
and its peer.

This function can be used on both src and sinkpads. Note that srcpads are
always negotiated before sinkpads so it is possible that the negotiated caps
on the srcpad do not match the negotiated caps of the peer.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
</parameters>
<return> the negotiated #GstCaps of the pad link. Unref
the caps when you no longer need it. This function returns NULL when
the @pad has no peer or is not negotiated yet.

MT safe.
</return>
</function>

<function name="gst_pad_get_pad_template">
<description>
Gets the template for @pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
</parameters>
<return> the #GstPadTemplate from which this pad was
instantiated, or %NULL if this pad has no template.

FIXME: currently returns an unrefcounted padtemplate.
</return>
</function>

<function name="gst_pad_get_pad_template_caps">
<description>
Gets the capabilities for @pad's template.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to get the template capabilities from.
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps of this pad template. If you intend
to keep a reference on the caps, make a copy (see gst_caps_copy ()).
</return>
</function>

<function name="gst_pad_get_parent_element">
<description>
Gets the parent of @pad, cast to a #GstElement. If a @pad has no parent or
its parent is not an element, return NULL.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a pad
</parameter_description>
</parameter>
</parameters>
<return> the parent of the pad. The caller has a
reference on the parent, so unref when you're finished with it.

MT safe.
</return>
</function>

<function name="gst_pad_get_peer">
<description>
Gets the peer of @pad. This function refs the peer pad so
you need to unref it after use.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to get the peer of.
</parameter_description>
</parameter>
</parameters>
<return> the peer #GstPad. Unref after usage.

MT safe.
</return>
</function>

<function name="gst_pad_get_query_types">
<description>
Get an array of supported queries that can be performed
on this pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
</parameters>
<return> a zero-terminated array
of #GstQueryType.
</return>
</function>

<function name="gst_pad_get_query_types_default">
<description>
Invoke the default dispatcher for the query types on
the pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
</parameters>
<return> a zero-terminated array
of #GstQueryType, or NULL if none of the internally-linked pads has a
query types function.
</return>
</function>

<function name="gst_pad_get_range">
<description>
When @pad is flushing this function returns #GST_FLOW_WRONG_STATE
immediatly and @buffer is %NULL.

Calls the getrange function of @pad, see #GstPadGetRangeFunction for a
description of a getrange function. If @pad has no getrange function
installed (see gst_pad_set_getrange_function()) this function returns
#GST_FLOW_NOT_SUPPORTED.

This is a lowlevel function. Usualy gst_pad_pull_range() is used.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a src #GstPad, returns #GST_FLOW_ERROR if not.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The start offset of the buffer
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The length of the buffer
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a pointer to hold the #GstBuffer,
returns #GST_FLOW_ERROR if %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn from the pad.

MT safe.
</return>
</function>

<function name="gst_pad_is_active">
<description>
Query if a pad is active


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to query
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pad is active.

MT safe.
</return>
</function>

<function name="gst_pad_is_blocked">
<description>
Checks if the pad is blocked or not. This function returns the
last requested state of the pad. It is not certain that the pad
is actually blocking at this point (see gst_pad_is_blocking()).


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to query
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pad is blocked.

MT safe.
</return>
</function>

<function name="gst_pad_is_blocking">
<description>
Checks if the pad is blocking or not. This is a guaranteed state
of whether the pad is actually blocking on a #GstBuffer or a #GstEvent.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to query
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pad is blocking.

MT safe.

</return>
</function>

<function name="gst_pad_is_linked">
<description>
Checks if a @pad is linked to another pad or not.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to check
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pad is linked, FALSE otherwise.

MT safe.
</return>
</function>

<function name="gst_pad_iterate_internal_links">
<description>
Gets an iterator for the pads to which the given pad is linked to inside
of the parent element.

Each #GstPad element yielded by the iterator will have its refcount increased,
so unref after use.

Free-function: gst_iterator_free


</description>
<parameters>
<parameter name="pad">
<parameter_description> the GstPad to get the internal links of.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstIterator of #GstPad or %NULL when the
pad does not have an iterator function configured. Use
gst_iterator_free() after usage.

</return>
</function>

<function name="gst_pad_iterate_internal_links_default">
<description>
Iterate the list of pads to which the given pad is linked to inside of
the parent element.
This is the default handler, and thus returns an iterator of all of the
pads inside the parent element with opposite direction.

The caller must free this iterator after use with gst_iterator_free().


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the internal links of.
</parameter_description>
</parameter>
</parameters>
<return> a #GstIterator of #GstPad, or NULL if @pad has no parent. Unref each
returned pad with gst_object_unref().

</return>
</function>

<function name="gst_pad_link">
<description>
Links the source pad and the sink pad.


</description>
<parameters>
<parameter name="srcpad">
<parameter_description> the source #GstPad to link.
</parameter_description>
</parameter>
<parameter name="sinkpad">
<parameter_description> the sink #GstPad to link.
</parameter_description>
</parameter>
</parameters>
<return> A result code indicating if the connection worked or
what went wrong.

MT Safe.
</return>
</function>

<function name="gst_pad_link_full">
<description>
Links the source pad and the sink pad.

This variant of #gst_pad_link provides a more granular control on the
checks being done when linking. While providing some considerable speedups
the caller of this method must be aware that wrong usage of those flags
can cause severe issues. Refer to the documentation of #GstPadLinkCheck
for more information.

MT Safe.


</description>
<parameters>
<parameter name="srcpad">
<parameter_description> the source #GstPad to link.
</parameter_description>
</parameter>
<parameter name="sinkpad">
<parameter_description> the sink #GstPad to link.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the checks to validate when linking
</parameter_description>
</parameter>
</parameters>
<return> A result code indicating if the connection worked or
what went wrong.

</return>
</function>

<function name="gst_pad_load_and_link">
<description>
Reads the pad definition from the XML node and links the given pad
in the element to a pad of an element up in the hierarchy.

</description>
<parameters>
<parameter name="self">
<parameter_description> an #xmlNodePtr to read the description from.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the #GstObject element that owns the pad.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_new">
<description>
Creates a new pad with the given name in the given direction.
If name is NULL, a guaranteed unique name (across all pads)
will be assigned.
This function makes a copy of the name so you can safely free the name.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the new pad.
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the #GstPadDirection of the pad.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPad, or NULL in case of an error.

MT safe.
</return>
</function>

<function name="gst_pad_new_from_static_template">
<description>
Creates a new pad with the given name from the given static template.
If name is NULL, a guaranteed unique name (across all pads)
will be assigned.
This function makes a copy of the name so you can safely free the name.


</description>
<parameters>
<parameter name="templ">
<parameter_description> the #GstStaticPadTemplate to use
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the element
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPad, or NULL in case of an error.
</return>
</function>

<function name="gst_pad_new_from_template">
<description>
Creates a new pad with the given name from the given template.
If name is NULL, a guaranteed unique name (across all pads)
will be assigned.
This function makes a copy of the name so you can safely free the name.


</description>
<parameters>
<parameter name="templ">
<parameter_description> the pad template to use
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the element
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPad, or NULL in case of an error.
</return>
</function>

<function name="gst_pad_pause_task">
<description>
Pause the task of @pad. This function will also wait until the
function executed by the task is finished if this function is not
called from the task function.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to pause the task of
</parameter_description>
</parameter>
</parameters>
<return> a TRUE if the task could be paused or FALSE when the pad
has no task.
</return>
</function>

<function name="gst_pad_peer_accept_caps">
<description>
Check if the peer of @pad accepts @caps. If @pad has no peer, this function
returns TRUE.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a  #GstPad to check the peer of
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> a #GstCaps to check on the pad
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the peer of @pad can accept the caps or @pad has no peer.
</return>
</function>

<function name="gst_pad_peer_get_caps">
<description>
Gets the capabilities of the peer connected to this pad. Similar to
gst_pad_get_caps().


</description>
<parameters>
<parameter name="pad">
<parameter_description> a  #GstPad to get the peer capabilities of.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated copy of the #GstCaps of the
peer pad. Use gst_caps_unref() to get rid of it. This function
returns %NULL if there is no peer pad.
</return>
</function>

<function name="gst_pad_peer_get_caps_reffed">
<description>
Gets the capabilities of the peer connected to this pad. Preferred function
if one only wants to read or intersect the caps.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a  #GstPad to get the capabilities of.
</parameter_description>
</parameter>
</parameters>
<return> the caps of the pad with incremented ref-count

</return>
</function>

<function name="gst_pad_peer_query">
<description>
Performs gst_pad_query() on the peer of @pad.

The caller is responsible for both the allocation and deallocation of
the query structure.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to invoke the peer query on.
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> the #GstQuery to perform.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed. This function returns %FALSE
if @pad has no peer.

</return>
</function>

<function name="gst_pad_proxy_getcaps">
<description>
Calls gst_pad_get_allowed_caps() for every other pad belonging to the
same element as @pad, and returns the intersection of the results.

This function is useful as a default getcaps function for an element
that can handle any stream format, but requires all its pads to have
the same caps.  Two such elements are tee and adder.

Free-function: gst_caps_unref


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to proxy.
</parameter_description>
</parameter>
</parameters>
<return> the intersection of the other pads' allowed caps.
</return>
</function>

<function name="gst_pad_proxy_setcaps">
<description>
Calls gst_pad_set_caps() for every other pad belonging to the
same element as @pad.  If gst_pad_set_caps() fails on any pad,
the proxy setcaps fails. May be used only during negotiation.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to proxy from
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the #GstCaps to link with
</parameter_description>
</parameter>
</parameters>
<return> TRUE if sucessful
</return>
</function>

<function name="gst_pad_pull_range">
<description>
Pulls a @buffer from the peer pad.

This function will first trigger the pad block signal if it was
installed.

When @pad is not linked #GST_FLOW_NOT_LINKED is returned else this
function returns the result of gst_pad_get_range() on the peer pad.
See gst_pad_get_range() for a list of return values and for the
semantics of the arguments of this function.

@buffer's caps must either be unset or the same as what is already
configured on @pad. Renegotiation within a running pull-mode pipeline is not
supported.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a sink #GstPad, returns GST_FLOW_ERROR if not.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The start offset of the buffer
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The length of the buffer
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a pointer to hold the #GstBuffer, returns
GST_FLOW_ERROR if %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn from the peer pad.
When this function returns #GST_FLOW_OK, @buffer will contain a valid
#GstBuffer that should be freed with gst_buffer_unref() after usage.
@buffer may not be used or freed when any other return value than
#GST_FLOW_OK is returned.

MT safe.
</return>
</function>

<function name="gst_pad_push">
<description>
Pushes a buffer to the peer of @pad.

This function will call an installed pad block before triggering any
installed pad probes.

If the caps on @buffer are different from the currently configured caps on
@pad, this function will call any installed setcaps function on @pad (see
gst_pad_set_setcaps_function()). In case of failure to renegotiate the new
format, this function returns #GST_FLOW_NOT_NEGOTIATED.

The function proceeds calling gst_pad_chain() on the peer pad and returns
the value from that function. If @pad has no peer, #GST_FLOW_NOT_LINKED will
be returned.

In all cases, success or failure, the caller loses its reference to @buffer
after calling this function.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a source #GstPad, returns #GST_FLOW_ERROR if not.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the #GstBuffer to push returns GST_FLOW_ERROR
if not.
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn from the peer pad.

MT safe.
</return>
</function>

<function name="gst_pad_push_event">
<description>
Sends the event to the peer of the given pad. This function is
mainly used by elements to send events to their peer
elements.

This function takes owership of the provided event so you should
gst_event_ref() it if you want to reuse the event after this call.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to push the event to.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GstEvent to send to the pad.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the event was handled.

MT safe.
</return>
</function>

<function name="gst_pad_push_list">
<description>
Pushes a buffer list to the peer of @pad.

This function will call an installed pad block before triggering any
installed pad probes.

If the caps on the first buffer in the first group of @list are different
from the currently configured caps on @pad, this function will call any
installed setcaps function on @pad (see gst_pad_set_setcaps_function()). In
case of failure to renegotiate the new format, this function returns
#GST_FLOW_NOT_NEGOTIATED.

If there are any probes installed on @pad every group of the buffer list
will be merged into a normal #GstBuffer and pushed via gst_pad_push and the
buffer list will be unreffed.

The function proceeds calling the chain function on the peer pad and returns
the value from that function. If @pad has no peer, #GST_FLOW_NOT_LINKED will
be returned. If the peer pad does not have any installed chainlist function
every group buffer of the list will be merged into a normal #GstBuffer and
chained via gst_pad_chain().

In all cases, success or failure, the caller loses its reference to @list
after calling this function.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a source #GstPad, returns #GST_FLOW_ERROR if not.
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> the #GstBufferList to push returns GST_FLOW_ERROR
if not.
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn from the peer pad.

MT safe.

</return>
</function>

<function name="gst_pad_query">
<description>
Dispatches a query to a pad. The query should have been allocated by the
caller via one of the type-specific allocation functions. The element that
the pad belongs to is responsible for filling the query with an appropriate
response, which should then be parsed with a type-specific query parsing
function.

Again, the caller is responsible for both the allocation and deallocation of
the query structure.

Please also note that some queries might need a running pipeline to work.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to invoke the default query on.
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> the #GstQuery to perform.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_pad_query_convert">
<description>
Queries a pad to convert @src_val in @src_format to @dest_format.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to invoke the convert query on.
</parameter_description>
</parameter>
<parameter name="src_format">
<parameter_description> a #GstFormat to convert from.
</parameter_description>
</parameter>
<parameter name="src_val">
<parameter_description> a value to convert.
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> a pointer to the #GstFormat to convert to.
</parameter_description>
</parameter>
<parameter name="dest_val">
<parameter_description> a pointer to the result.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_pad_query_default">
<description>
Invokes the default query handler for the given pad.
The query is sent to all pads internally linked to @pad. Note that
if there are many possible sink pads that are internally linked to
@pad, only one will be sent the query.
Multi-sinkpad elements should implement custom query handlers.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to call the default query handler on.
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> the #GstQuery to handle.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query was performed succesfully.
</return>
</function>

<function name="gst_pad_query_duration">
<description>
Queries a pad for the total stream duration.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to invoke the duration query on.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a pointer to the #GstFormat asked for.
On return contains the #GstFormat used.
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> a location in which to store the total
duration, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_pad_query_peer_convert">
<description>
Queries the peer pad of a given sink pad to convert @src_val in @src_format
to @dest_format.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad, on whose peer pad to invoke the convert query on.
Must be a sink pad.
</parameter_description>
</parameter>
<parameter name="src_format">
<parameter_description> a #GstFormat to convert from.
</parameter_description>
</parameter>
<parameter name="src_val">
<parameter_description> a value to convert.
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> a pointer to the #GstFormat to convert to.
</parameter_description>
</parameter>
<parameter name="dest_val">
<parameter_description> a pointer to the result.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_pad_query_peer_duration">
<description>
Queries the peer pad of a given sink pad for the total stream duration.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad on whose peer pad to invoke the duration query on.
Must be a sink pad.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description>a pointer to the #GstFormat asked for.
On return contains the #GstFormat used.
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> a location in which to store the total
duration, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_pad_query_peer_position">
<description>
Queries the peer of a given sink pad for the stream position.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad on whose peer to invoke the position query on.
Must be a sink pad.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a pointer to the #GstFormat asked for.
On return contains the #GstFormat used.
</parameter_description>
</parameter>
<parameter name="cur">
<parameter_description> a location in which to store the current
position, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_pad_query_position">
<description>
Queries a pad for the stream position.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to invoke the position query on.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a pointer to the #GstFormat asked for.
On return contains the #GstFormat used.
</parameter_description>
</parameter>
<parameter name="cur">
<parameter_description> A location in which to store the current position, or NULL.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the query could be performed.
</return>
</function>

<function name="gst_pad_remove_buffer_probe">
<description>
Removes a buffer probe from @pad.

</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to remove the buffer probe handler from
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> handler id returned from gst_pad_add_buffer_probe
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_remove_data_probe">
<description>
Removes a data probe from @pad.

</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to remove the data probe handler from
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> handler id returned from gst_pad_add_data_probe
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_remove_event_probe">
<description>
Removes an event probe from @pad.

</description>
<parameters>
<parameter name="pad">
<parameter_description> pad to remove the event probe handler from
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> handler id returned from gst_pad_add_event_probe
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_save_thyself">
<description>
Saves the pad into an xml representation.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to save.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the parent #xmlNodePtr to save the description in.
</parameter_description>
</parameter>
</parameters>
<return> the #xmlNodePtr representation of the pad.
</return>
</function>

<function name="gst_pad_send_event">
<description>
Sends the event to the pad. This function can be used
by applications to send events in the pipeline.

If @pad is a source pad, @event should be an upstream event. If @pad is a
sink pad, @event should be a downstream event. For example, you would not
send a #GST_EVENT_EOS on a src pad; EOS events only propagate downstream.
Furthermore, some downstream events have to be serialized with data flow,
like EOS, while some can travel out-of-band, like #GST_EVENT_FLUSH_START. If
the event needs to be serialized with data flow, this function will take the
pad's stream lock while calling its event function.

To find out whether an event type is upstream, downstream, or downstream and
serialized, see #GstEventTypeFlags, gst_event_type_get_flags(),
#GST_EVENT_IS_UPSTREAM, #GST_EVENT_IS_DOWNSTREAM, and
#GST_EVENT_IS_SERIALIZED. Note that in practice that an application or
plugin doesn't need to bother itself with this information; the core handles
all necessary locks and checks.

This function takes owership of the provided event so you should
gst_event_ref() it if you want to reuse the event after this call.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad to send the event to.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GstEvent to send to the pad.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the event was handled.
</return>
</function>

<function name="gst_pad_set_acceptcaps_function">
<description>
Sets the given acceptcaps function for the pad.  The acceptcaps function
will be called to check if the pad can accept the given caps. Setting the
acceptcaps function to NULL restores the default behaviour of allowing
any caps that matches the caps from gst_pad_get_caps().

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="acceptcaps">
<parameter_description> the #GstPadAcceptCapsFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_activate_function">
<description>
Sets the given activate function for @pad. The activate function will
dispatch to gst_pad_activate_push() or gst_pad_activate_pull() to perform
the actual activation. Only makes sense to set on sink pads.

Call this function if your sink pad can start a pull-based task.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="activate">
<parameter_description> the #GstPadActivateFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_activatepull_function">
<description>
Sets the given activate_pull function for the pad. An activate_pull function
prepares the element and any upstream connections for pulling. See XXX
part-activation.txt for details.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="activatepull">
<parameter_description> the #GstPadActivateModeFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_activatepush_function">
<description>
Sets the given activate_push function for the pad. An activate_push function
prepares the element for pushing. See XXX part-activation.txt for details.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="activatepush">
<parameter_description> the #GstPadActivateModeFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_active">
<description>
Activates or deactivates the given pad.
Normally called from within core state change functions.

If @active, makes sure the pad is active. If it is already active, either in
push or pull mode, just return. Otherwise dispatches to the pad's activate
function to perform the actual activation.

If not @active, checks the pad's current mode and calls
gst_pad_activate_push() or gst_pad_activate_pull(), as appropriate, with a
FALSE argument.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to activate or deactivate.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> whether or not the pad should be active.
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if the operation was successful.

MT safe.
</return>
</function>

<function name="gst_pad_set_blocked">
<description>
Blocks or unblocks the dataflow on a pad. This function is
a shortcut for gst_pad_set_blocked_async() with a NULL
callback.

&lt;note&gt;
Pad blocks are only possible for source pads in push mode
and sink pads in pull mode.
&lt;/note&gt;


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to block or unblock
</parameter_description>
</parameter>
<parameter name="blocked">
<parameter_description> boolean indicating we should block or unblock
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pad could be blocked. This function can fail if the
wrong parameters were passed or the pad was already in the requested state.

MT safe.
</return>
</function>

<function name="gst_pad_set_blocked_async">
<description>
Blocks or unblocks the dataflow on a pad. The provided callback
is called when the operation succeeds; this happens right before the next
attempt at pushing a buffer on the pad.

This can take a while as the pad can only become blocked when real dataflow
is happening.
When the pipeline is stalled, for example in PAUSED, this can
take an indeterminate amount of time.
You can pass NULL as the callback to make this call block. Be careful with
this blocking call as it might not return for reasons stated above.

&lt;note&gt;
Pad block handlers are only called for source pads in push mode
and sink pads in pull mode.
&lt;/note&gt;


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to block or unblock
</parameter_description>
</parameter>
<parameter name="blocked">
<parameter_description> boolean indicating whether the pad should be blocked or unblocked
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> #GstPadBlockCallback that will be called when the
operation succeeds
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the callback
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pad could be blocked. This function can fail if the
wrong parameters were passed or the pad was already in the requested state.

MT safe.
</return>
</function>

<function name="gst_pad_set_blocked_async_full">
<description>
Blocks or unblocks the dataflow on a pad. The provided callback
is called when the operation succeeds; this happens right before the next
attempt at pushing a buffer on the pad.

This can take a while as the pad can only become blocked when real dataflow
is happening.
When the pipeline is stalled, for example in PAUSED, this can
take an indeterminate amount of time.
You can pass NULL as the callback to make this call block. Be careful with
this blocking call as it might not return for reasons stated above.

&lt;note&gt;
Pad block handlers are only called for source pads in push mode
and sink pads in pull mode.
&lt;/note&gt;


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to block or unblock
</parameter_description>
</parameter>
<parameter name="blocked">
<parameter_description> boolean indicating whether the pad should be blocked or unblocked
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> #GstPadBlockCallback that will be called when the
operation succeeds
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the callback
</parameter_description>
</parameter>
<parameter name="destroy_data">
<parameter_description> #GDestroyNotify for user_data
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pad could be blocked. This function can fail if the
wrong parameters were passed or the pad was already in the requested state.

MT safe.

</return>
</function>

<function name="gst_pad_set_bufferalloc_function">
<description>
Sets the given bufferalloc function for the pad. Note that the
bufferalloc function can only be set on sinkpads.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a sink #GstPad.
</parameter_description>
</parameter>
<parameter name="bufalloc">
<parameter_description> the #GstPadBufferAllocFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_caps">
<description>
Sets the capabilities of this pad. The caps must be fixed. Any previous
caps on the pad will be unreffed. This function refs the caps so you should
unref if as soon as you don't need it anymore.
It is possible to set NULL caps, which will make the pad unnegotiated
again.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a  #GstPad to set the capabilities of.
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> a #GstCaps to set.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the caps could be set. FALSE if the caps were not fixed
or bad parameters were provided to this function.

MT safe.
</return>
</function>

<function name="gst_pad_set_chain_function">
<description>
Sets the given chain function for the pad. The chain function is called to
process a #GstBuffer input buffer. see #GstPadChainFunction for more details.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a sink #GstPad.
</parameter_description>
</parameter>
<parameter name="chain">
<parameter_description> the #GstPadChainFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_chain_list_function">
<description>
Sets the given chain list function for the pad. The chainlist function is
called to process a #GstBufferList input buffer list. See
#GstPadChainListFunction for more details.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a sink #GstPad.
</parameter_description>
</parameter>
<parameter name="chainlist">
<parameter_description> the #GstPadChainListFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_checkgetrange_function">
<description>
Sets the given checkgetrange function for the pad. Implement this function
on a pad if you dynamically support getrange based scheduling on the pad.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a source #GstPad.
</parameter_description>
</parameter>
<parameter name="check">
<parameter_description> the #GstPadCheckGetRangeFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_element_private">
<description>
Set the given private data gpointer on the pad.
This function can only be used by the element that owns the pad.
No locking is performed in this function.

</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to set the private data of.
</parameter_description>
</parameter>
<parameter name="priv">
<parameter_description> The private data to attach to the pad.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_event_function">
<description>
Sets the given event handler for the pad.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad of either direction.
</parameter_description>
</parameter>
<parameter name="event">
<parameter_description> the #GstPadEventFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_fixatecaps_function">
<description>
Sets the given fixatecaps function for the pad.  The fixatecaps function
will be called whenever the default values for a GstCaps needs to be
filled in.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="fixatecaps">
<parameter_description> the #GstPadFixateCapsFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_getcaps_function">
<description>
Sets the given getcaps function for the pad. @getcaps should return the
allowable caps for a pad in the context of the element's state, its link to
other elements, and the devices or files it has opened. These caps must be a
subset of the pad template caps. In the NULL state with no links, @getcaps
should ideally return the same caps as the pad template. In rare
circumstances, an object property can affect the caps returned by @getcaps,
but this is discouraged.

You do not need to call this function if @pad's allowed caps are always the
same as the pad template caps. This can only be true if the padtemplate
has fixed simple caps.

For most filters, the caps returned by @getcaps is directly affected by the
allowed caps on other pads. For demuxers and decoders, the caps returned by
the srcpad's getcaps function is directly related to the stream data. Again,
@getcaps should return the most specific caps it reasonably can, since this
helps with autoplugging.

Note that the return value from @getcaps is owned by the caller, so the
caller should unref the caps after usage.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="getcaps">
<parameter_description> the #GstPadGetCapsFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_getrange_function">
<description>
Sets the given getrange function for the pad. The getrange function is
called to produce a new #GstBuffer to start the processing pipeline. see
#GstPadGetRangeFunction for a description of the getrange function.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a source #GstPad.
</parameter_description>
</parameter>
<parameter name="get">
<parameter_description> the #GstPadGetRangeFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_internal_link_function">
<description>
Sets the given internal link function for the pad.

Deprecated: Use the thread-safe gst_pad_set_iterate_internal_links_function()

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad of either direction.
</parameter_description>
</parameter>
<parameter name="intlink">
<parameter_description> the #GstPadIntLinkFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_iterate_internal_links_function">
<description>
Sets the given internal link iterator function for the pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad of either direction.
</parameter_description>
</parameter>
<parameter name="iterintlink">
<parameter_description> the #GstPadIterIntLinkFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_link_function">
<description>
Sets the given link function for the pad. It will be called when
the pad is linked with another pad.

The return value #GST_PAD_LINK_OK should be used when the connection can be
made.

The return value #GST_PAD_LINK_REFUSED should be used when the connection
cannot be made for some reason.

If @link is installed on a source pad, it should call the #GstPadLinkFunction
of the peer sink pad, if present.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="link">
<parameter_description> the #GstPadLinkFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_query_function">
<description>
Set the given query function for the pad.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad of either direction.
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> the #GstPadQueryFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_query_type_function">
<description>
Set the given query type function for the pad.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad of either direction.
</parameter_description>
</parameter>
<parameter name="type_func">
<parameter_description> the #GstPadQueryTypeFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_setcaps_function">
<description>
Sets the given setcaps function for the pad.  The setcaps function
will be called whenever a buffer with a new media type is pushed or
pulled from the pad. The pad/element needs to update its internal
structures to process the new media type. If this new type is not
acceptable, the setcaps function should return FALSE.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="setcaps">
<parameter_description> the #GstPadSetCapsFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_set_unlink_function">
<description>
Sets the given unlink function for the pad. It will be called
when the pad is unlinked.

</description>
<parameters>
<parameter name="pad">
<parameter_description> a #GstPad.
</parameter_description>
</parameter>
<parameter name="unlink">
<parameter_description> the #GstPadUnlinkFunction to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_start_task">
<description>
Starts a task that repeatedly calls @func with @data. This function
is mostly used in pad activation functions to start the dataflow.
The #GST_PAD_STREAM_LOCK of @pad will automatically be acquired
before @func is called.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to start the task of
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the task function to call
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data passed to the task function
</parameter_description>
</parameter>
</parameters>
<return> a %TRUE if the task could be started.
</return>
</function>

<function name="gst_pad_stop_task">
<description>
Stop the task of @pad. This function will also make sure that the
function executed by the task will effectively stop if not called
from the GstTaskFunction.

This function will deadlock if called from the GstTaskFunction of
the task. Use gst_task_pause() instead.

Regardless of whether the pad has a task, the stream lock is acquired and
released so as to ensure that streaming through this pad has finished.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to stop the task of
</parameter_description>
</parameter>
</parameters>
<return> a TRUE if the task could be stopped or FALSE on error.
</return>
</function>

<function name="gst_pad_template_get_caps">
<description>
Gets the capabilities of the pad template.


</description>
<parameters>
<parameter name="templ">
<parameter_description> a #GstPadTemplate to get capabilities of.
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps of the pad template. If you need to
keep a reference to the caps, take a ref (see gst_caps_ref ()).
</return>
</function>

<function name="gst_pad_template_new">
<description>
Creates a new pad template with a name according to the given template
and with the given arguments. This functions takes ownership of the provided
caps, so be sure to not use them afterwards.


</description>
<parameters>
<parameter name="name_template">
<parameter_description> the name template.
</parameter_description>
</parameter>
<parameter name="direction">
<parameter_description> the #GstPadDirection of the template.
</parameter_description>
</parameter>
<parameter name="presence">
<parameter_description> the #GstPadPresence of the pad.
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> a #GstCaps set for the template. The caps are
taken ownership of.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPadTemplate.
</return>
</function>

<function name="gst_pad_template_pad_created">
<description>
Emit the pad-created signal for this template when created by this pad.

</description>
<parameters>
<parameter name="templ">
<parameter_description> a #GstPadTemplate that has been created
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description>   the #GstPad that created it
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pad_unlink">
<description>
Unlinks the source pad from the sink pad. Will emit the #GstPad::unlinked
signal on both pads.


</description>
<parameters>
<parameter name="srcpad">
<parameter_description> the source #GstPad to unlink.
</parameter_description>
</parameter>
<parameter name="sinkpad">
<parameter_description> the sink #GstPad to unlink.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the pads were unlinked. This function returns FALSE if
the pads were not linked together.

MT safe.
</return>
</function>

<function name="gst_pad_use_fixed_caps">
<description>
A helper function you can use that sets the
@gst_pad_get_fixed_caps_func as the getcaps function for the
pad. This way the function will always return the negotiated caps
or in case the pad is not negotiated, the padtemplate caps.

Use this function on a pad that, once gst_pad_set_caps() has been called
on it, cannot be renegotiated to something else.

</description>
<parameters>
<parameter name="pad">
<parameter_description> the pad to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_param_spec_fraction">
<description>
This function creates a fraction GParamSpec for use by objects/elements
that want to expose properties of fraction type. This function is typically
used in connection with g_object_class_install_property() in a GObjects's
instance_init function.


</description>
<parameters>
<parameter name="name">
<parameter_description> canonical name of the property specified
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> nick name for the property specified
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> description of the property specified
</parameter_description>
</parameter>
<parameter name="min_num">
<parameter_description> minimum value (fraction numerator)
</parameter_description>
</parameter>
<parameter name="min_denom">
<parameter_description> minimum value (fraction denominator)
</parameter_description>
</parameter>
<parameter name="max_num">
<parameter_description> maximum value (fraction numerator)
</parameter_description>
</parameter>
<parameter name="max_denom">
<parameter_description> maximum value (fraction denominator)
</parameter_description>
</parameter>
<parameter name="default_num">
<parameter_description> default value (fraction numerator)
</parameter_description>
</parameter>
<parameter name="default_denom">
<parameter_description> default value (fraction denominator)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags for the property specified
</parameter_description>
</parameter>
</parameters>
<return> a newly created parameter specification

</return>
</function>

<function name="gst_param_spec_mini_object">
<description>
Creates a new #GParamSpec instance that hold #GstMiniObject references.


</description>
<parameters>
<parameter name="name">
<parameter_description> the canonical name of the property
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> the nickname of the property
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> a short description of the property
</parameter_description>
</parameter>
<parameter name="object_type">
<parameter_description> the #GstMiniObject #GType for the property
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a combination of #GParamFlags
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GParamSpec instance
</return>
</function>

<function name="gst_parse_bin_from_description">
<description>
This is a convenience wrapper around gst_parse_launch() to create a
#GstBin from a gst-launch-style pipeline description. See
gst_parse_launch() and the gst-launch man page for details about the
syntax. Ghost pads on the bin for unlinked source or sink pads
within the bin can automatically be created (but only a maximum of
one ghost pad for each direction will be created; if you expect
multiple unlinked source pads or multiple unlinked sink pads
and want them all ghosted, you will have to create the ghost pads
yourself).


</description>
<parameters>
<parameter name="bin_description">
<parameter_description> command line describing the bin
</parameter_description>
</parameter>
<parameter name="ghost_unlinked_pads">
<parameter_description> whether to automatically create ghost pads
for unlinked source or sink pads within the bin
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> where to store the error message in case of an error, or NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly-created bin, or NULL if an error occurred.

</return>
</function>

<function name="gst_parse_bin_from_description_full">
<description>
This is a convenience wrapper around gst_parse_launch() to create a
#GstBin from a gst-launch-style pipeline description. See
gst_parse_launch() and the gst-launch man page for details about the
syntax. Ghost pads on the bin for unlinked source or sink pads
within the bin can automatically be created (but only a maximum of
one ghost pad for each direction will be created; if you expect
multiple unlinked source pads or multiple unlinked sink pads
and want them all ghosted, you will have to create the ghost pads
yourself).


</description>
<parameters>
<parameter name="bin_description">
<parameter_description> command line describing the bin
</parameter_description>
</parameter>
<parameter name="ghost_unlinked_pads">
<parameter_description> whether to automatically create ghost pads
for unlinked source or sink pads within the bin
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a parse context allocated with
gst_parse_context_new(), or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> parsing options, or #GST_PARSE_FLAG_NONE
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> where to store the error message in case of an error, or NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly-created bin, or NULL if an error occurred.

</return>
</function>

<function name="gst_parse_context_free">
<description>
Frees a parse context previously allocated with gst_parse_context_new().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstParseContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_parse_context_get_missing_elements">
<description>
Retrieve missing elements from a previous run of gst_parse_launch_full()
or gst_parse_launchv_full(). Will only return results if an error code
of %GST_PARSE_ERROR_NO_SUCH_ELEMENT was returned.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstParseContext
</parameter_description>
</parameter>
</parameters>
<return> a
NULL-terminated array of element factory name strings of missing
elements. Free with g_strfreev() when no longer needed.

</return>
</function>

<function name="gst_parse_context_new">
<description>
Allocates a parse context for use with gst_parse_launch_full() or
gst_parse_launchv_full().

Free-function: gst_parse_context_free


</description>
<parameters>
</parameters>
<return> a newly-allocated parse context. Free with
gst_parse_context_free() when no longer needed.

</return>
</function>

<function name="gst_parse_error_quark">
<description>
Get the error quark used by the parsing subsystem.


</description>
<parameters>
</parameters>
<return> the quark of the parse errors.
</return>
</function>

<function name="gst_parse_launch">
<description>
Create a new pipeline based on command line syntax.
Please note that you might get a return value that is not %NULL even though
the @error is set. In this case there was a recoverable parsing error and you
can try to play the pipeline.


</description>
<parameters>
<parameter name="pipeline_description">
<parameter_description> the command line describing the pipeline
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the error message in case of an erroneous pipeline.
</parameter_description>
</parameter>
</parameters>
<return> a new element on success, %NULL on failure. If
more than one toplevel element is specified by the @pipeline_description,
all elements are put into a #GstPipeline, which than is returned.
</return>
</function>

<function name="gst_parse_launch_full">
<description>
Create a new pipeline based on command line syntax.
Please note that you might get a return value that is not %NULL even though
the @error is set. In this case there was a recoverable parsing error and you
can try to play the pipeline.


</description>
<parameters>
<parameter name="pipeline_description">
<parameter_description> the command line describing the pipeline
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a parse context allocated with
gst_parse_context_new(), or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> parsing options, or #GST_PARSE_FLAG_NONE
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the error message in case of an erroneous pipeline.
</parameter_description>
</parameter>
</parameters>
<return> a new element on success, %NULL on failure. If
more than one toplevel element is specified by the @pipeline_description,
all elements are put into a #GstPipeline, which then is returned.

</return>
</function>

<function name="gst_parse_launchv">
<description>
Create a new element based on command line syntax.
@error will contain an error message if an erroneuos pipeline is specified.
An error does not mean that the pipeline could not be constructed.


</description>
<parameters>
<parameter name="argv">
<parameter_description> null-terminated array of arguments
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> pointer to a #GError
</parameter_description>
</parameter>
</parameters>
<return> a new element on success and %NULL on failure.
</return>
</function>

<function name="gst_parse_launchv_full">
<description>
Create a new element based on command line syntax.
@error will contain an error message if an erroneous pipeline is specified.
An error does not mean that the pipeline could not be constructed.


</description>
<parameters>
<parameter name="argv">
<parameter_description> null-terminated array of arguments
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a parse context allocated with
gst_parse_context_new(), or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> parsing options, or #GST_PARSE_FLAG_NONE
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> pointer to a #GError (which must be initialised to %NULL)
</parameter_description>
</parameter>
</parameters>
<return> a new element on success; on failure, either %NULL
or a partially-constructed bin or element will be returned and @error will
be set (unless you passed #GST_PARSE_FLAG_FATAL_ERRORS in @flags, then
%NULL will always be returned on failure)

</return>
</function>

<function name="gst_pb_utils_add_codec_description_to_tag_list">
<description>
Adds a codec tag describing the format specified by @caps to @taglist.


</description>
<parameters>
<parameter name="taglist">
<parameter_description> a #GstTagList
</parameter_description>
</parameter>
<parameter name="codec_tag">
<parameter_description> a GStreamer codec tag such as #GST_TAG_AUDIO_CODEC,
#GST_TAG_VIDEO_CODEC or #GST_TAG_CODEC
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the (fixed) #GstCaps for which a codec tag should be added.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if a codec tag was added, FALSE otherwise.
</return>
</function>

<function name="gst_pb_utils_get_codec_description">
<description>
Returns a localised (as far as this is possible) string describing the
media format specified in @caps, for use in error dialogs or other messages
to be seen by the user. Should never return NULL unless @caps is invalid.

Also see the convenience function
gst_pb_utils_add_codec_description_to_tag_list().


</description>
<parameters>
<parameter name="caps">
<parameter_description> the (fixed) #GstCaps for which an format description is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_pb_utils_get_decoder_description">
<description>
Returns a localised string describing an decoder for the format specified
in @caps, for use in error dialogs or other messages to be seen by the user.
Should never return NULL unless @factory_name or @caps are invalid.

This function is mainly for internal use, applications would typically
use gst_missing_plugin_message_get_description() to get a description of
a missing feature from a missing-plugin message.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the (fixed) #GstCaps for which an decoder description is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_pb_utils_get_element_description">
<description>
Returns a localised string describing the given element, for use in
error dialogs or other messages to be seen by the user. Should never
return NULL unless @factory_name is invalid.

This function is mainly for internal use, applications would typically
use gst_missing_plugin_message_get_description() to get a description of
a missing feature from a missing-plugin message.


</description>
<parameters>
<parameter name="factory_name">
<parameter_description> the name of the element, e.g. &quot;gnomevfssrc&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_pb_utils_get_encoder_description">
<description>
Returns a localised string describing an encoder for the format specified
in @caps, for use in error dialogs or other messages to be seen by the user.
Should never return NULL unless @factory_name or @caps are invalid.

This function is mainly for internal use, applications would typically
use gst_missing_plugin_message_get_description() to get a description of
a missing feature from a missing-plugin message.


</description>
<parameters>
<parameter name="caps">
<parameter_description> the (fixed) #GstCaps for which an encoder description is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_pb_utils_get_sink_description">
<description>
Returns a localised string describing a sink element handling the protocol
specified in @protocol, for use in error dialogs or other messages to be
seen by the user. Should never return NULL unless @protocol is invalid.

This function is mainly for internal use, applications would typically
use gst_missing_plugin_message_get_description() to get a description of
a missing feature from a missing-plugin message.


</description>
<parameters>
<parameter name="protocol">
<parameter_description> the protocol the sink element needs to handle, e.g. &quot;http&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_pb_utils_get_source_description">
<description>
Returns a localised string describing a source element handling the protocol
specified in @protocol, for use in error dialogs or other messages to be
seen by the user. Should never return NULL unless @protocol is invalid.

This function is mainly for internal use, applications would typically
use gst_missing_plugin_message_get_description() to get a description of
a missing feature from a missing-plugin message.


</description>
<parameters>
<parameter name="protocol">
<parameter_description> the protocol the source element needs to handle, e.g. &quot;http&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_pb_utils_init">
<description>
Initialises the base utils support library. This function is not
thread-safe. Applications should call it after calling gst_init(),
plugins should call it from their plugin_init function.

This function may be called multiple times. It will do nothing if the
library has already been initialised.


</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_pipeline_auto_clock">
<description>
Let @pipeline select a clock automatically. This is the default
behaviour.

Use this function if you previous forced a fixed clock with
gst_pipeline_use_clock() and want to restore the default
pipeline clock selection algorithm.

MT safe.

</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pipeline_get_auto_flush_bus">
<description>
Check if @pipeline will automatically flush messages when going to
the NULL state.


</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
</parameters>
<return> whether the pipeline will automatically flush its bus when
going from READY to NULL state or not.

MT safe.

</return>
</function>

<function name="gst_pipeline_get_bus">
<description>
Gets the #GstBus of @pipeline. The bus allows applications to receive
#GstMessage packets.


</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
</parameters>
<return> a #GstBus, unref after usage.

MT safe.
</return>
</function>

<function name="gst_pipeline_get_clock">
<description>
Gets the current clock used by @pipeline.


</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
</parameters>
<return> a #GstClock, unref after usage.
</return>
</function>

<function name="gst_pipeline_get_delay">
<description>
Get the configured delay (see gst_pipeline_set_delay()).


</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
</parameters>
<return> The configured delay.

MT safe.

</return>
</function>

<function name="gst_pipeline_get_last_stream_time">
<description>
Gets the last running time of @pipeline. If the pipeline is PLAYING,
the returned time is the running time used to configure the element's
base time in the PAUSED-&gt;PLAYING state. If the pipeline is PAUSED, the
returned time is the running time when the pipeline was paused.

This function returns #GST_CLOCK_TIME_NONE if the pipeline was
configured to not handle the management of the element's base time
(see gst_pipeline_set_new_stream_time()).

MT safe.

Deprecated: This function has the wrong name and is equivalent to
gst_element_get_start_time(). 

</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
</parameters>
<return> a #GstClockTime.

</return>
</function>

<function name="gst_pipeline_new">
<description>
Create a new pipeline with the given name.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of new pipeline
</parameter_description>
</parameter>
</parameters>
<return> newly created GstPipeline

MT safe.
</return>
</function>

<function name="gst_pipeline_set_auto_flush_bus">
<description>
Usually, when a pipeline goes from READY to NULL state, it automatically
flushes all pending messages on the bus, which is done for refcounting
purposes, to break circular references.

This means that applications that update state using (async) bus messages
(e.g. do certain things when a pipeline goes from PAUSED to READY) might
not get to see messages when the pipeline is shut down, because they might
be flushed before they can be dispatched in the main thread. This behaviour
can be disabled using this function.

It is important that all messages on the bus are handled when the
automatic flushing is disabled else memory leaks will be introduced.

MT safe.


</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
<parameter name="auto_flush">
<parameter_description> whether or not to automatically flush the bus when
the pipeline goes from READY to NULL state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pipeline_set_clock">
<description>
Set the clock for @pipeline. The clock will be distributed
to all the elements managed by the pipeline.


</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> the clock to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the clock could be set on the pipeline. FALSE if
some element did not accept the clock.

MT safe.
</return>
</function>

<function name="gst_pipeline_set_delay">
<description>
Set the expected delay needed for all elements to perform the
PAUSED to PLAYING state change. @delay will be added to the
base time of the elements so that they wait an additional @delay
amount of time before starting to process buffers and cannot be
#GST_CLOCK_TIME_NONE.

This option is used for tuning purposes and should normally not be
used.

MT safe.


</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
<parameter name="delay">
<parameter_description> the delay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pipeline_set_new_stream_time">
<description>
Set the new start time of @pipeline to @time. The start time is used to
set the base time on the elements (see gst_element_set_base_time())
in the PAUSED-&gt;PLAYING state transition.

Setting @time to #GST_CLOCK_TIME_NONE will disable the pipeline's management
of element base time. The application will then be responsible for
performing base time distribution. This is sometimes useful if you want to
synchronize capture from multiple pipelines, and you can also ensure that the
pipelines have the same clock.

MT safe.

Deprecated: This function has the wrong name and is equivalent to
gst_element_set_start_time(). 

</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the new running time to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pipeline_use_clock">
<description>
Force @pipeline to use the given @clock. The pipeline will
always use the given clock even if new clock providers are added
to this pipeline.

If @clock is NULL all clocking will be disabled which will make
the pipeline run as fast as possible.

MT safe.

</description>
<parameters>
<parameter name="pipeline">
<parameter_description> a #GstPipeline
</parameter_description>
</parameter>
<parameter name="clock">
<parameter_description> the clock to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugin_add_dependency">
<description>
Make GStreamer aware of external dependencies which affect the feature
set of this plugin (ie. the elements or typefinders associated with it).

GStreamer will re-inspect plugins with external dependencies whenever any
of the external dependencies change. This is useful for plugins which wrap
other plugin systems, e.g. a plugin which wraps a plugin-based visualisation
library and makes visualisations available as GStreamer elements, or a
codec loader which exposes elements and/or caps dependent on what external
codec libraries are currently installed.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> a #GstPlugin
</parameter_description>
</parameter>
<parameter name="env_vars">
<parameter_description> NULL-terminated array of environent variables affecting the
feature set of the plugin (e.g. an environment variable containing
paths where to look for additional modules/plugins of a library),
or NULL. Environment variable names may be followed by a path component
which will be added to the content of the environment variable, e.g.
&quot;HOME/.mystuff/plugins&quot;.
</parameter_description>
</parameter>
<parameter name="paths">
<parameter_description> NULL-terminated array of directories/paths where dependent files
may be.
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> NULL-terminated array of file names (or file name suffixes,
depending on @flags) to be used in combination with the paths from
@paths and/or the paths extracted from the environment variables in
@env_vars, or NULL.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> optional flags, or #GST_PLUGIN_DEPENDENCY_FLAG_NONE
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugin_add_dependency_simple">
<description>
Make GStreamer aware of external dependencies which affect the feature
set of this plugin (ie. the elements or typefinders associated with it).

GStreamer will re-inspect plugins with external dependencies whenever any
of the external dependencies change. This is useful for plugins which wrap
other plugin systems, e.g. a plugin which wraps a plugin-based visualisation
library and makes visualisations available as GStreamer elements, or a
codec loader which exposes elements and/or caps dependent on what external
codec libraries are currently installed.

Convenience wrapper function for gst_plugin_add_dependency() which
takes simple strings as arguments instead of string arrays, with multiple
arguments separated by predefined delimiters (see above).


</description>
<parameters>
<parameter name="plugin">
<parameter_description> the #GstPlugin
</parameter_description>
</parameter>
<parameter name="env_vars">
<parameter_description> one or more environent variables (separated by ':', ';' or ','),
or NULL. Environment variable names may be followed by a path component
which will be added to the content of the environment variable, e.g.
&quot;HOME/.mystuff/plugins:MYSTUFF_PLUGINS_PATH&quot;
</parameter_description>
</parameter>
<parameter name="paths">
<parameter_description> one ore more directory paths (separated by ':' or ';' or ','),
or NULL. Example: &quot;/usr/lib/mystuff/plugins&quot;
</parameter_description>
</parameter>
<parameter name="names">
<parameter_description> one or more file names or file name suffixes (separated by commas),
or NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> optional flags, or #GST_PLUGIN_DEPENDENCY_FLAG_NONE
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugin_feature_check_version">
<description>
Checks whether the given plugin feature is at least
the required version


</description>
<parameters>
<parameter name="feature">
<parameter_description> a feature
</parameter_description>
</parameter>
<parameter name="min_major">
<parameter_description> minimum required major version
</parameter_description>
</parameter>
<parameter name="min_minor">
<parameter_description> minimum required minor version
</parameter_description>
</parameter>
<parameter name="min_micro">
<parameter_description> minimum required micro version
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if the plugin feature has at least
the required version, otherwise #FALSE.
</return>
</function>

<function name="gst_plugin_feature_get_name">
<description>
Gets the name of a plugin feature.


</description>
<parameters>
<parameter name="feature">
<parameter_description> a feature
</parameter_description>
</parameter>
</parameters>
<return> the name
</return>
</function>

<function name="gst_plugin_feature_get_rank">
<description>
Gets the rank of a plugin feature.


</description>
<parameters>
<parameter name="feature">
<parameter_description> a feature
</parameter_description>
</parameter>
</parameters>
<return> The rank of the feature
</return>
</function>

<function name="gst_plugin_feature_list">
<description>
Runs a filter against all plugin features and returns a GList with
the results. If the first flag is set, only the first match is
returned (as a list with a single object).


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to query
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> the filter to use
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description> only return first match
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the filter function
</parameter_description>
</parameter>
</parameters>
<return> a GList of features, g_list_free after use.
</return>
</function>

<function name="gst_plugin_feature_list_copy">
<description>
Copies the list of features. Caller should call @gst_plugin_feature_list_free
when done with the list.


</description>
<parameters>
<parameter name="list">
<parameter_description> list
of #GstPluginFeature
</parameter_description>
</parameter>
</parameters>
<return> a copy of @list,
with each feature's reference count incremented.

</return>
</function>

<function name="gst_plugin_feature_list_debug">
<description>
Debug the plugin feature names in @list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList of
plugin features
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugin_feature_list_free">
<description>
Unrefs each member of @list, then frees the list.

</description>
<parameters>
<parameter name="list">
<parameter_description> list
of #GstPluginFeature
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugin_feature_load">
<description>
Loads the plugin containing @feature if it's not already loaded. @feature is
unaffected; use the return value instead.

Normally this function is used like this:
|[
GstPluginFeature *loaded_feature;

loaded_feature = gst_plugin_feature_load (feature);
// presumably, we're no longer interested in the potentially-unloaded feature
gst_object_unref (feature);
feature = loaded_feature;
]|


</description>
<parameters>
<parameter name="feature">
<parameter_description> the plugin feature to check
</parameter_description>
</parameter>
</parameters>
<return> a reference to the loaded feature, or NULL on error
</return>
</function>

<function name="gst_plugin_feature_rank_compare_func">
<description>
Compares the two given #GstPluginFeature instances. This function can be
used as a #GCompareFunc when sorting by rank and then by name.


</description>
<parameters>
<parameter name="p1">
<parameter_description> a #GstPluginFeature
</parameter_description>
</parameter>
<parameter name="p2">
<parameter_description> a #GstPluginFeature
</parameter_description>
</parameter>
</parameters>
<return> negative value if the rank of p1 &gt; the rank of p2 or the ranks are
equal but the name of p1 comes before the name of p2; zero if the rank
and names are equal; positive value if the rank of p1 &lt; the rank of p2 or the
ranks are equal but the name of p2 comes after the name of p1

</return>
</function>

<function name="gst_plugin_feature_set_name">
<description>
Sets the name of a plugin feature. The name uniquely identifies a feature
within all features of the same type. Renaming a plugin feature is not
allowed. A copy is made of the name so you should free the supplied @name
after calling this function.

</description>
<parameters>
<parameter name="feature">
<parameter_description> a feature
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugin_feature_set_rank">
<description>
Specifies a rank for a plugin feature, so that autoplugging uses
the most appropriate feature.

</description>
<parameters>
<parameter name="feature">
<parameter_description> feature to rank
</parameter_description>
</parameter>
<parameter name="rank">
<parameter_description> rank value - higher number means more priority rank
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugin_feature_type_name_filter">
<description>
Compares type and name of plugin feature. Can be used with gst_filter_run().


</description>
<parameters>
<parameter name="feature">
<parameter_description> the #GstPluginFeature
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the type and name to check against
</parameter_description>
</parameter>
</parameters>
<return> TRUE if equal.
</return>
</function>

<function name="gst_plugin_find_feature">
<description>
Find a feature of the given name and type in the given plugin.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the feature from
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name of the feature to find
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The type of the feature to find
</parameter_description>
</parameter>
</parameters>
<return> a GstPluginFeature or NULL if the feature was not found.
</return>
</function>

<function name="gst_plugin_find_feature_by_name">
<description>
Find a feature of the given name in the given plugin.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the feature from
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name of the feature to find
</parameter_description>
</parameter>
</parameters>
<return> a GstPluginFeature or NULL if the feature was not found.
</return>
</function>

<function name="gst_plugin_get_cache_data">
<description>
Gets the plugin specific data cache. If it is %NULL there is no cached data
stored. This is the case when the registry is getting rebuilt.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> a plugin
</parameter_description>
</parameter>
</parameters>
<return> The cached data as a #GstStructure or %NULL.

</return>
</function>

<function name="gst_plugin_get_description">
<description>
Get the long descriptive name of the plugin


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get long name of
</parameter_description>
</parameter>
</parameters>
<return> the long name of the plugin
</return>
</function>

<function name="gst_plugin_get_filename">
<description>
get the filename of the plugin


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the filename of
</parameter_description>
</parameter>
</parameters>
<return> the filename of the plugin
</return>
</function>

<function name="gst_plugin_get_license">
<description>
get the license of the plugin


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the license of
</parameter_description>
</parameter>
</parameters>
<return> the license of the plugin
</return>
</function>

<function name="gst_plugin_get_module">
<description>
Gets the #GModule of the plugin. If the plugin isn't loaded yet, NULL is
returned.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to query
</parameter_description>
</parameter>
</parameters>
<return> module belonging to the plugin or NULL if the
plugin isn't loaded yet.
</return>
</function>

<function name="gst_plugin_get_name">
<description>
Get the short name of the plugin


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the name of
</parameter_description>
</parameter>
</parameters>
<return> the name of the plugin
</return>
</function>

<function name="gst_plugin_get_origin">
<description>
get the URL where the plugin comes from


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the origin of
</parameter_description>
</parameter>
</parameters>
<return> the origin of the plugin
</return>
</function>

<function name="gst_plugin_get_package">
<description>
get the package the plugin belongs to.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the package of
</parameter_description>
</parameter>
</parameters>
<return> the package of the plugin
</return>
</function>

<function name="gst_plugin_get_source">
<description>
get the source module the plugin belongs to.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the source of
</parameter_description>
</parameter>
</parameters>
<return> the source of the plugin
</return>
</function>

<function name="gst_plugin_get_version">
<description>
get the version of the plugin


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to get the version of
</parameter_description>
</parameter>
</parameters>
<return> the version of the plugin
</return>
</function>

<function name="gst_plugin_is_loaded">
<description>
queries if the plugin is loaded into memory


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to query
</parameter_description>
</parameter>
</parameters>
<return> TRUE is loaded, FALSE otherwise
</return>
</function>

<function name="gst_plugin_list_feature_filter">
<description>
Runs a filter against all plugin features of the plugins in the given
list and returns a GList with the results.
If the first flag is set, only the first match is
returned (as a list with a single object).


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GList of plugins to query
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> the filter function to use
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description> only return first match
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the filter function
</parameter_description>
</parameter>
</parameters>
<return> a GList of features, g_list_free after use.
</return>
</function>

<function name="gst_plugin_list_free">
<description>
Unrefs each member of @list, then frees the list.

</description>
<parameters>
<parameter name="list">
<parameter_description> list of #GstPlugin
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugin_load">
<description>
Loads @plugin. Note that the *return value* is the loaded plugin; @plugin is
untouched. The normal use pattern of this function goes like this:

&lt;programlisting&gt;
GstPlugin *loaded_plugin;
loaded_plugin = gst_plugin_load (plugin);
// presumably, we're no longer interested in the potentially-unloaded plugin
gst_object_unref (plugin);
plugin = loaded_plugin;
&lt;/programlisting&gt;


</description>
<parameters>
<parameter name="plugin">
<parameter_description> plugin to load
</parameter_description>
</parameter>
</parameters>
<return> a reference to a loaded plugin, or NULL on error.
</return>
</function>

<function name="gst_plugin_load_by_name">
<description>
Load the named plugin. Refs the plugin.


</description>
<parameters>
<parameter name="name">
<parameter_description> name of plugin to load
</parameter_description>
</parameter>
</parameters>
<return> a reference to a loaded plugin, or NULL on error.
</return>
</function>

<function name="gst_plugin_load_file">
<description>
Loads the given plugin and refs it.  Caller needs to unref after use.


</description>
<parameters>
<parameter name="filename">
<parameter_description> the plugin filename to load
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> pointer to a NULL-valued GError
</parameter_description>
</parameter>
</parameters>
<return> a reference to the existing loaded GstPlugin, a 
reference to the newly-loaded GstPlugin, or NULL if an error occurred.
</return>
</function>

<function name="gst_plugin_name_filter">
<description>
A standard filter that returns TRUE when the plugin is of the
given name.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> the plugin to check
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the plugin
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the plugin is of the given name.
</return>
</function>

<function name="gst_plugin_register_static">
<description>
Registers a static plugin, ie. a plugin which is private to an application
or library and contained within the application or library (as opposed to
being shipped as a separate module file).

You must make sure that GStreamer has been initialised (with gst_init() or
via gst_init_get_option_group()) before calling this function.


</description>
<parameters>
<parameter name="major_version">
<parameter_description> the major version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MAJOR here
</parameter_description>
</parameter>
<parameter name="minor_version">
<parameter_description> the minor version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MINOR here
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a unique name of the plugin (ideally prefixed with an application- or
library-specific namespace prefix in order to avoid name conflicts in
case a similar plugin with the same name ever gets added to GStreamer)
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> description of the plugin
</parameter_description>
</parameter>
<parameter name="init_func">
<parameter_description> pointer to the init function of this plugin.
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> version string of the plugin
</parameter_description>
</parameter>
<parameter name="license">
<parameter_description> effective license of plugin. Must be one of the approved licenses
(see #GstPluginDesc above) or the plugin will not be registered.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> source module plugin belongs to
</parameter_description>
</parameter>
<parameter name="package">
<parameter_description> shipped package plugin belongs to
</parameter_description>
</parameter>
<parameter name="origin">
<parameter_description> URL to provider of plugin
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the plugin was registered correctly, otherwise FALSE.

</return>
</function>

<function name="gst_plugin_register_static_full">
<description>
Registers a static plugin, ie. a plugin which is private to an application
or library and contained within the application or library (as opposed to
being shipped as a separate module file) with a #GstPluginInitFullFunc
which allows user data to be passed to the callback function (useful
for bindings).

You must make sure that GStreamer has been initialised (with gst_init() or
via gst_init_get_option_group()) before calling this function.



</description>
<parameters>
<parameter name="major_version">
<parameter_description> the major version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MAJOR here
</parameter_description>
</parameter>
<parameter name="minor_version">
<parameter_description> the minor version number of the GStreamer core that the
plugin was compiled for, you can just use GST_VERSION_MINOR here
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a unique name of the plugin (ideally prefixed with an application- or
library-specific namespace prefix in order to avoid name conflicts in
case a similar plugin with the same name ever gets added to GStreamer)
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> description of the plugin
</parameter_description>
</parameter>
<parameter name="init_full_func">
<parameter_description> pointer to the init function with user data
of this plugin.
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> version string of the plugin
</parameter_description>
</parameter>
<parameter name="license">
<parameter_description> effective license of plugin. Must be one of the approved licenses
(see #GstPluginDesc above) or the plugin will not be registered.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> source module plugin belongs to
</parameter_description>
</parameter>
<parameter name="package">
<parameter_description> shipped package plugin belongs to
</parameter_description>
</parameter>
<parameter name="origin">
<parameter_description> URL to provider of plugin
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> gpointer to user data
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the plugin was registered correctly, otherwise FALSE.

</return>
</function>

<function name="gst_plugin_set_cache_data">
<description>
Adds plugin specific data to cache. Passes the ownership of the structure to
the @plugin.

The cache is flushed every time the registry is rebuilt.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> a plugin
</parameter_description>
</parameter>
<parameter name="cache_data">
<parameter_description> a structure containing the data to cache
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugins_base_version">
<description>
Gets the version number of the GStreamer Plugins Base libraries.


</description>
<parameters>
<parameter name="major">
<parameter_description> pointer to a guint to store the major version number, or %NULL
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> pointer to a guint to store the minor version number, or %NULL
</parameter_description>
</parameter>
<parameter name="micro">
<parameter_description> pointer to a guint to store the micro version number, or %NULL
</parameter_description>
</parameter>
<parameter name="nano">
<parameter_description> pointer to a guint to store the nano version number, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_plugins_base_version_string">
<description>
This function returns a string that is useful for describing this version
of GStreamer's gst-plugins-base libraries to the outside world: user agent
strings, logging, about dialogs ...


</description>
<parameters>
</parameters>
<return> a newly allocated string describing this version of gst-plugins-base

</return>
</function>

<function name="gst_poll_add_fd">
<description>
Add a file descriptor to the file descriptor set.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file descriptor was successfully added to the set.

</return>
</function>

<function name="gst_poll_fd_can_read">
<description>
Check if @fd in @set has data to be read.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the descriptor has data to be read.

</return>
</function>

<function name="gst_poll_fd_can_write">
<description>
Check if @fd in @set can be used for writing.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the descriptor can be used for writing.

</return>
</function>

<function name="gst_poll_fd_ctl_read">
<description>
Control whether the descriptor @fd in @set will be monitored for
readability.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> a new status.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the descriptor was successfully updated.

</return>
</function>

<function name="gst_poll_fd_ctl_write">
<description>
Control whether the descriptor @fd in @set will be monitored for
writability.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> a new status.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the descriptor was successfully updated.

</return>
</function>

<function name="gst_poll_fd_has_closed">
<description>
Check if @fd in @set has closed the connection.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the connection was closed.

</return>
</function>

<function name="gst_poll_fd_has_error">
<description>
Check if @fd in @set has an error.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the descriptor has an error.

</return>
</function>

<function name="gst_poll_fd_ignored">
<description>
Mark @fd as ignored so that the next call to gst_poll_wait() will yield
the same result for @fd as last time. This function must be called if no
operation (read/write/recv/send/etc.) will be performed on @fd before
the next call to gst_poll_wait().

The reason why this is needed is because the underlying implementation
might not allow querying the fd more than once between calls to one of
the re-enabling operations.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_poll_fd_init">
<description>
Initializes @fd. Alternatively you can initialize it with
#GST_POLL_FD_INIT.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a #GstPollFD
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_poll_free">
<description>
Free a file descriptor set.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_poll_get_read_gpollfd">
<description>
Get a GPollFD for the reading part of the control socket. This is useful when
integrating with a GSource and GMainLoop.


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GstPoll
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a #GPollFD
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_poll_new">
<description>
Create a new file descriptor set. If @controllable, it
is possible to restart or flush a call to gst_poll_wait() with
gst_poll_restart() and gst_poll_set_flushing() respectively.

Free-function: gst_poll_free


</description>
<parameters>
<parameter name="controllable">
<parameter_description> whether it should be possible to control a wait.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPoll, or %NULL in case of an error.
Free with gst_poll_free().

</return>
</function>

<function name="gst_poll_new_timer">
<description>
Create a new poll object that can be used for scheduling cancellable
timeouts.

A timeout is performed with gst_poll_wait(). Multiple timeouts can be
performed from different threads. 

Free-function: gst_poll_free


</description>
<parameters>
</parameters>
<return> a new #GstPoll, or %NULL in case of an error.
Free with gst_poll_free().

</return>
</function>

<function name="gst_poll_read_control">
<description>
Read a byte from the control socket of the controllable @set.
This function is mostly useful for timer #GstPoll objects created with
gst_poll_new_timer(). 


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GstPoll.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success. %FALSE when @set is not controllable or when there
was no byte to read.

</return>
</function>

<function name="gst_poll_remove_fd">
<description>
Remove a file descriptor from the file descriptor set.


</description>
<parameters>
<parameter name="set">
<parameter_description> a file descriptor set.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file descriptor was successfully removed from the set.

</return>
</function>

<function name="gst_poll_restart">
<description>
Restart any gst_poll_wait() that is in progress. This function is typically
used after adding or removing descriptors to @set.

If @set is not controllable, then this call will have no effect.


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GstPoll.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_poll_set_controllable">
<description>
When @controllable is %TRUE, this function ensures that future calls to
gst_poll_wait() will be affected by gst_poll_restart() and
gst_poll_set_flushing().


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GstPoll.
</parameter_description>
</parameter>
<parameter name="controllable">
<parameter_description> new controllable state.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the controllability of @set could be updated.

</return>
</function>

<function name="gst_poll_set_flushing">
<description>
When @flushing is %TRUE, this function ensures that current and future calls
to gst_poll_wait() will return -1, with errno set to EBUSY.

Unsetting the flushing state will restore normal operation of @set.


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GstPoll.
</parameter_description>
</parameter>
<parameter name="flushing">
<parameter_description> new flushing state.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_poll_wait">
<description>
Wait for activity on the file descriptors in @set. This function waits up to
the specified @timeout.  A timeout of #GST_CLOCK_TIME_NONE waits forever.

For #GstPoll objects created with gst_poll_new(), this function can only be
called from a single thread at a time.  If called from multiple threads,
-1 will be returned with errno set to EPERM.

This is not true for timer #GstPoll objects created with
gst_poll_new_timer(), where it is allowed to have multiple threads waiting
simultaneously.


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GstPoll.
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout in nanoseconds.
</parameter_description>
</parameter>
</parameters>
<return> The number of #GstPollFD in @set that have activity or 0 when no
activity was detected after @timeout. If an error occurs, -1 is returned
and errno is set.

</return>
</function>

<function name="gst_poll_write_control">
<description>
Write a byte to the control socket of the controllable @set.
This function is mostly useful for timer #GstPoll objects created with
gst_poll_new_timer(). 

It will make any current and future gst_poll_wait() function return with
1, meaning the control socket is set. After an equal amount of calls to
gst_poll_read_control() have been performed, calls to gst_poll_wait() will
block again until their timeout expired.


</description>
<parameters>
<parameter name="set">
<parameter_description> a #GstPoll.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success. %FALSE when @set is not controllable or when the
byte could not be written.

</return>
</function>

<function name="gst_preset_delete_preset">
<description>
Delete the given preset.


</description>
<parameters>
<parameter name="preset">
<parameter_description> a #GObject that implements #GstPreset
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> preset name to remove
</parameter_description>
</parameter>
</parameters>
<return> %TRUE for success, %FALSE if e.g. there is no preset with that @name

</return>
</function>

<function name="gst_preset_get_meta">
<description>
Gets the @value for an existing meta data @tag. Meta data @tag names can be
something like e.g. &quot;comment&quot;. Returned values need to be released when done.


</description>
<parameters>
<parameter name="preset">
<parameter_description> a #GObject that implements #GstPreset
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> preset name
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> meta data item name
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE for success, %FALSE if e.g. there is no preset with that @name
or no value for the given @tag

</return>
</function>

<function name="gst_preset_get_preset_names">
<description>
Get a copy of preset names as a NULL terminated string array.


</description>
<parameters>
<parameter name="preset">
<parameter_description> a #GObject that implements #GstPreset
</parameter_description>
</parameter>
</parameters>
<return>
list with names, ue g_strfreev() after usage.

</return>
</function>

<function name="gst_preset_get_property_names">
<description>
Get a the names of the GObject properties that can be used for presets.


</description>
<parameters>
<parameter name="preset">
<parameter_description> a #GObject that implements #GstPreset
</parameter_description>
</parameter>
</parameters>
<return> an
array of property names which should be freed with g_strfreev() after use.

</return>
</function>

<function name="gst_preset_load_preset">
<description>
Load the given preset.


</description>
<parameters>
<parameter name="preset">
<parameter_description> a #GObject that implements #GstPreset
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> preset name to load
</parameter_description>
</parameter>
</parameters>
<return> %TRUE for success, %FALSE if e.g. there is no preset with that @name

</return>
</function>

<function name="gst_preset_rename_preset">
<description>
Renames a preset. If there is already a preset by the @new_name it will be
overwritten.


</description>
<parameters>
<parameter name="preset">
<parameter_description> a #GObject that implements #GstPreset
</parameter_description>
</parameter>
<parameter name="old_name">
<parameter_description> current preset name
</parameter_description>
</parameter>
<parameter name="new_name">
<parameter_description> new preset name
</parameter_description>
</parameter>
</parameters>
<return> %TRUE for success, %FALSE if e.g. there is no preset with @old_name

</return>
</function>

<function name="gst_preset_save_preset">
<description>
Save the current object settings as a preset under the given name. If there
is already a preset by this @name it will be overwritten.


</description>
<parameters>
<parameter name="preset">
<parameter_description> a #GObject that implements #GstPreset
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> preset name to save
</parameter_description>
</parameter>
</parameters>
<return> %TRUE for success, %FALSE

</return>
</function>

<function name="gst_preset_set_meta">
<description>
Sets a new @value for an existing meta data item or adds a new item. Meta
data @tag names can be something like e.g. &quot;comment&quot;. Supplying %NULL for the
@value will unset an existing value.


</description>
<parameters>
<parameter name="preset">
<parameter_description> a #GObject that implements #GstPreset
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> preset name
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> meta data item name
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> new value
</parameter_description>
</parameter>
</parameters>
<return> %TRUE for success, %FALSE if e.g. there is no preset with that @name

</return>
</function>

<function name="gst_print_element_args">
<description>
Print the element argument in a human readable format in the given
GString.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the buffer to print the args in
</parameter_description>
</parameter>
<parameter name="indent">
<parameter_description> initial indentation
</parameter_description>
</parameter>
<parameter name="element">
<parameter_description> the element to print the args of
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_print_pad_caps">
<description>
Write the pad capabilities in a human readable format into
the given GString.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the buffer to print the caps in
</parameter_description>
</parameter>
<parameter name="indent">
<parameter_description> initial indentation
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> the pad to print the caps from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_property_probe_get_properties">
<description>
Get a list of properties for which probing is supported.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe to get the properties for.
</parameter_description>
</parameter>
</parameters>
<return> the list of properties for which probing is supported
by this element.
</return>
</function>

<function name="gst_property_probe_get_property">
<description>
Get #GParamSpec for a property for which probing is supported.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe to get the properties for.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the property.
</parameter_description>
</parameter>
</parameters>
<return> the #GParamSpec of %NULL.
</return>
</function>

<function name="gst_property_probe_get_values">
<description>
Gets the possible (probed) values for the given property,
requires the property to have been probed before.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec property identifier.
</parameter_description>
</parameter>
</parameters>
<return> A list of valid values for the given property.
</return>
</function>

<function name="gst_property_probe_get_values_name">
<description>
Same as gst_property_probe_get_values ().


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property to get values for.
</parameter_description>
</parameter>
</parameters>
<return> A list of valid values for the given property.
</return>
</function>

<function name="gst_property_probe_needs_probe">
<description>
Checks whether a property needs a probe. This might be because
the property wasn't initialized before, or because host setup
changed. This might be, for example, because a new device was
added, and thus device probing needs to be refreshed to display
the new device.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object to which the given property belongs.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> a #GParamSpec that identifies the property to check.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the property needs a new probe, FALSE if not.
</return>
</function>

<function name="gst_property_probe_needs_probe_name">
<description>
Same as gst_property_probe_needs_probe ().


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object to which the given property belongs.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property to check.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the property needs a new probe, FALSE if not.
</return>
</function>

<function name="gst_property_probe_probe_and_get_values">
<description>
Check whether the given property requires a new probe. If so,
fo the probe. After that, retrieve a value list. Meant as a
utility function that wraps the above functions.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> The #GParamSpec property identifier.
</parameter_description>
</parameter>
</parameters>
<return> the list of valid values for this property.
</return>
</function>

<function name="gst_property_probe_probe_and_get_values_name">
<description>
Same as gst_property_probe_probe_and_get_values ().


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property to get values for.
</parameter_description>
</parameter>
</parameters>
<return> the list of valid values for this property.
</return>
</function>

<function name="gst_property_probe_probe_property">
<description>
Runs a probe on the property specified by @pspec

</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe to check.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> #GParamSpec of the property.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_property_probe_probe_property_name">
<description>
Runs a probe on the property specified by @name.

</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe to check.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the property.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_proxy_pad_save_thyself">
<description>
Saves the ghost pad into an xml representation.


</description>
<parameters>
<parameter name="pad">
<parameter_description> a ghost #GstPad to save.
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the parent #xmlNodePtr to save the description in.
</parameter_description>
</parameter>
</parameters>
<return> the #xmlNodePtr representation of the pad.
</return>
</function>

<function name="gst_query_add_buffering_range">
<description>
Set the buffering-ranges array field in @query. The current last
start position of the array should be inferior to @start.


</description>
<parameters>
<parameter name="query">
<parameter_description> a GST_QUERY_BUFFERING type query #GstQuery
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> start position of the range
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> stop position of the range
</parameter_description>
</parameter>
</parameters>
<return> a #gboolean indicating if the range was added or not.

</return>
</function>

<function name="gst_query_get_n_buffering_ranges">
<description>
Retrieve the number of values currently stored in the
buffered-ranges array of the query's structure.


</description>
<parameters>
<parameter name="query">
<parameter_description> a GST_QUERY_BUFFERING type query #GstQuery
</parameter_description>
</parameter>
</parameters>
<return> the range array size as a #guint.

</return>
</function>

<function name="gst_query_get_structure">
<description>
Get the structure of a query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
</parameters>
<return> the #GstStructure of the query. The structure is
still owned by the query and will therefore be freed when the query
is unreffed.
</return>
</function>

<function name="gst_query_new_application">
<description>
Constructs a new custom application query object. Use gst_query_unref()
when done with it.

Free-function: gst_query_unref


</description>
<parameters>
<parameter name="type">
<parameter_description> the query type
</parameter_description>
</parameter>
<parameter name="structure">
<parameter_description> a structure for the query
</parameter_description>
</parameter>
</parameters>
<return> a new #GstQuery
</return>
</function>

<function name="gst_query_new_buffering">
<description>
Constructs a new query object for querying the buffering status of
a stream.

Free-function: gst_query_new


</description>
<parameters>
<parameter name="format">
<parameter_description> the default #GstFormat for the new query
</parameter_description>
</parameter>
</parameters>
<return> a new #GstQuery

</return>
</function>

<function name="gst_query_new_convert">
<description>
Constructs a new convert query object. Use gst_query_unref()
when done with it. A convert query is used to ask for a conversion between
one format and another.

Free-function: gst_query_unref


</description>
<parameters>
<parameter name="src_format">
<parameter_description> the source #GstFormat for the new query
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value to convert
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> the target #GstFormat
</parameter_description>
</parameter>
</parameters>
<return> a #GstQuery
</return>
</function>

<function name="gst_query_new_duration">
<description>
Constructs a new stream duration query object to query in the given format.
Use gst_query_unref() when done with it. A duration query will give the
total length of the stream.

Free-function: gst_query_unref


</description>
<parameters>
<parameter name="format">
<parameter_description> the #GstFormat for this duration query
</parameter_description>
</parameter>
</parameters>
<return> a new #GstQuery
</return>
</function>

<function name="gst_query_new_formats">
<description>
Constructs a new query object for querying formats of
the stream.

Free-function: gst_query_unref


</description>
<parameters>
</parameters>
<return> a new #GstQuery

</return>
</function>

<function name="gst_query_new_latency">
<description>
Constructs a new latency query object.
Use gst_query_unref() when done with it. A latency query is usually performed
by sinks to compensate for additional latency introduced by elements in the
pipeline.

Free-function: gst_query_unref


</description>
<parameters>
</parameters>
<return> a #GstQuery

</return>
</function>

<function name="gst_query_new_position">
<description>
Constructs a new query stream position query object. Use gst_query_unref()
when done with it. A position query is used to query the current position
of playback in the streams, in some format.

Free-function: gst_query_unref


</description>
<parameters>
<parameter name="format">
<parameter_description> the default #GstFormat for the new query
</parameter_description>
</parameter>
</parameters>
<return> a new #GstQuery
</return>
</function>

<function name="gst_query_new_seeking">
<description>
Constructs a new query object for querying seeking properties of
the stream.

Free-function: gst_query_unref


</description>
<parameters>
<parameter name="format">
<parameter_description> the default #GstFormat for the new query
</parameter_description>
</parameter>
</parameters>
<return> a new #GstQuery
</return>
</function>

<function name="gst_query_new_segment">
<description>
Constructs a new segment query object. Use gst_query_unref()
when done with it. A segment query is used to discover information about the
currently configured segment for playback.

Free-function: gst_query_unref


</description>
<parameters>
<parameter name="format">
<parameter_description> the #GstFormat for the new query
</parameter_description>
</parameter>
</parameters>
<return> a new #GstQuery
</return>
</function>

<function name="gst_query_new_uri">
<description>
Constructs a new query URI query object. Use gst_query_unref()
when done with it. An URI query is used to query the current URI
that is used by the source or sink.

Free-function: gst_query_unref


</description>
<parameters>
</parameters>
<return> a new #GstQuery

</return>
</function>

<function name="gst_query_parse_buffering_percent">
<description>
Get the percentage of buffered data. This is a value between 0 and 100.
The @busy indicator is %TRUE when the buffering is in progress.


</description>
<parameters>
<parameter name="query">
<parameter_description> A valid #GstQuery of type GST_QUERY_BUFFERING.
</parameter_description>
</parameter>
<parameter name="busy">
<parameter_description> if buffering is busy, or NULL
</parameter_description>
</parameter>
<parameter name="percent">
<parameter_description> a buffering percent, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_buffering_range">
<description>
Parse an available query, writing the format into @format, and
other results into the passed parameters, if the respective parameters
are non-NULL


</description>
<parameters>
<parameter name="query">
<parameter_description> a GST_QUERY_BUFFERING type query #GstQuery
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format to set for the @segment_start
and @segment_end values, or NULL
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start to set, or NULL
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the stop to set, or NULL
</parameter_description>
</parameter>
<parameter name="estimated_total">
<parameter_description> estimated total amount of download
time, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_buffering_stats">
<description>
Extracts the buffering stats values from @query.


</description>
<parameters>
<parameter name="query">
<parameter_description> A valid #GstQuery of type GST_QUERY_BUFFERING.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a buffering mode, or NULL
</parameter_description>
</parameter>
<parameter name="avg_in">
<parameter_description> the average input rate, or NULL
</parameter_description>
</parameter>
<parameter name="avg_out">
<parameter_description> the average output rat, or NULLe
</parameter_description>
</parameter>
<parameter name="buffering_left">
<parameter_description> amount of buffering time left, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_convert">
<description>
Parse a convert query answer. Any of @src_format, @src_value, @dest_format,
and @dest_value may be NULL, in which case that value is omitted.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="src_format">
<parameter_description> the storage for the #GstFormat of the
source value, or NULL
</parameter_description>
</parameter>
<parameter name="src_value">
<parameter_description> the storage for the source value, or NULL
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> the storage for the #GstFormat of the
destination value, or NULL
</parameter_description>
</parameter>
<parameter name="dest_value">
<parameter_description> the storage for the destination value,
or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_duration">
<description>
Parse a duration query answer. Write the format of the duration into @format,
and the value into @duration, if the respective variables are non-NULL.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the storage for the #GstFormat of the duration
value, or NULL.
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the storage for the total duration, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_formats_length">
<description>
Parse the number of formats in the formats @query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="n_formats">
<parameter_description> the number of formats in this query.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_formats_nth">
<description>
Parse the format query and retrieve the @nth format from it into
@format. If the list contains less elements than @nth, @format will be
set to GST_FORMAT_UNDEFINED.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth format to retrieve.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a pointer to store the nth format
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_latency">
<description>
Parse a latency query answer.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="live">
<parameter_description> storage for live or NULL
</parameter_description>
</parameter>
<parameter name="min_latency">
<parameter_description> the storage for the min latency or NULL
</parameter_description>
</parameter>
<parameter name="max_latency">
<parameter_description> the storage for the max latency or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_nth_buffering_range">
<description>
Parse an available query and get the start and stop values stored
at the @index of the buffered ranges array.


</description>
<parameters>
<parameter name="query">
<parameter_description> a GST_QUERY_BUFFERING type query #GstQuery
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> position in the buffered-ranges array to read
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start position to set, or NULL
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the stop position to set, or NULL
</parameter_description>
</parameter>
</parameters>
<return> a #gboolean indicating if the parsing succeeded.

</return>
</function>

<function name="gst_query_parse_position">
<description>
Parse a position query, writing the format into @format, and the position
into @cur, if the respective parameters are non-NULL.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the storage for the #GstFormat of the
position values (may be NULL)
</parameter_description>
</parameter>
<parameter name="cur">
<parameter_description> the storage for the current position (may be NULL)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_seeking">
<description>
Parse a seeking query, writing the format into @format, and
other results into the passed parameters, if the respective parameters
are non-NULL

</description>
<parameters>
<parameter name="query">
<parameter_description> a GST_QUERY_SEEKING type query #GstQuery
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format to set for the @segment_start
and @segment_end values, or NULL
</parameter_description>
</parameter>
<parameter name="seekable">
<parameter_description> the seekable flag to set, or NULL
</parameter_description>
</parameter>
<parameter name="segment_start">
<parameter_description> the segment_start to set, or NULL
</parameter_description>
</parameter>
<parameter name="segment_end">
<parameter_description> the segment_end to set, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_segment">
<description>
Parse a segment query answer. Any of @rate, @format, @start_value, and
@stop_value may be NULL, which will cause this value to be omitted.

See gst_query_set_segment() for an explanation of the function arguments.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the storage for the rate of the segment, or NULL
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the storage for the #GstFormat of the values,
or NULL
</parameter_description>
</parameter>
<parameter name="start_value">
<parameter_description> the storage for the start value, or NULL
</parameter_description>
</parameter>
<parameter name="stop_value">
<parameter_description> the storage for the stop value, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_parse_uri">
<description>
Parse an URI query, writing the URI into @uri as a newly
allocated string, if the respective parameters are non-NULL.
Free the string with g_free() after usage.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the storage for the current URI
(may be NULL)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_buffering_percent">
<description>
Set the percentage of buffered data. This is a value between 0 and 100.
The @busy indicator is %TRUE when the buffering is in progress.


</description>
<parameters>
<parameter name="query">
<parameter_description> A valid #GstQuery of type GST_QUERY_BUFFERING.
</parameter_description>
</parameter>
<parameter name="busy">
<parameter_description> if buffering is busy
</parameter_description>
</parameter>
<parameter name="percent">
<parameter_description> a buffering percent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_buffering_range">
<description>
Set the available query result fields in @query.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format to set for the @start and @stop values
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start to set
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the stop to set
</parameter_description>
</parameter>
<parameter name="estimated_total">
<parameter_description> estimated total amount of download time
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_buffering_stats">
<description>
Configures the buffering stats values in @query.


</description>
<parameters>
<parameter name="query">
<parameter_description> A valid #GstQuery of type GST_QUERY_BUFFERING.
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> a buffering mode
</parameter_description>
</parameter>
<parameter name="avg_in">
<parameter_description> the average input rate
</parameter_description>
</parameter>
<parameter name="avg_out">
<parameter_description> the average output rate
</parameter_description>
</parameter>
<parameter name="buffering_left">
<parameter_description> amount of buffering time left
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_convert">
<description>
Answer a convert query by setting the requested values.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="src_format">
<parameter_description> the source #GstFormat
</parameter_description>
</parameter>
<parameter name="src_value">
<parameter_description> the source value
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> the destination #GstFormat
</parameter_description>
</parameter>
<parameter name="dest_value">
<parameter_description> the destination value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_duration">
<description>
Answer a duration query by setting the requested value in the given format.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the #GstFormat for the duration
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration of the stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_formats">
<description>
Set the formats query result fields in @query. The number of formats passed
must be equal to @n_formats.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="n_formats">
<parameter_description> the number of formats to set.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> A number of @GstFormats equal to @n_formats.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_formatsv">
<description>
Set the formats query result fields in @query. The number of formats passed
in the @formats array must be equal to @n_formats.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="n_formats">
<parameter_description> the number of formats to set.
</parameter_description>
</parameter>
<parameter name="formats">
<parameter_description> an array containing @n_formats
@GstFormat values.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_latency">
<description>
Answer a latency query by setting the requested values in the given format.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="live">
<parameter_description> if there is a live element upstream
</parameter_description>
</parameter>
<parameter name="min_latency">
<parameter_description> the minimal latency of the live element
</parameter_description>
</parameter>
<parameter name="max_latency">
<parameter_description> the maximal latency of the live element
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_position">
<description>
Answer a position query by setting the requested value in the given format.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery with query type GST_QUERY_POSITION
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the requested #GstFormat
</parameter_description>
</parameter>
<parameter name="cur">
<parameter_description> the position to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_seeking">
<description>
Set the seeking query result fields in @query.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format to set for the @segment_start and @segment_end values
</parameter_description>
</parameter>
<parameter name="seekable">
<parameter_description> the seekable flag to set
</parameter_description>
</parameter>
<parameter name="segment_start">
<parameter_description> the segment_start to set
</parameter_description>
</parameter>
<parameter name="segment_end">
<parameter_description> the segment_end to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_segment">
<description>
Answer a segment query by setting the requested values. The normal
playback segment of a pipeline is 0 to duration at the default rate of
1.0. If a seek was performed on the pipeline to play a different
segment, this query will return the range specified in the last seek.

@start_value and @stop_value will respectively contain the configured
playback range start and stop values expressed in @format.
The values are always between 0 and the duration of the media and
@start_value &lt;= @stop_value. @rate will contain the playback rate. For
negative rates, playback will actually happen from @stop_value to
@start_value.

</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the rate of the segment
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the #GstFormat of the segment values (@start_value and @stop_value)
</parameter_description>
</parameter>
<parameter name="start_value">
<parameter_description> the start value
</parameter_description>
</parameter>
<parameter name="stop_value">
<parameter_description> the stop value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_set_uri">
<description>
Answer a URI query by setting the requested URI.


</description>
<parameters>
<parameter name="query">
<parameter_description> a #GstQuery with query type GST_QUERY_URI
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_query_type_get_by_nick">
<description>
Get the query type registered with @nick.


</description>
<parameters>
<parameter name="nick">
<parameter_description> The nick of the query
</parameter_description>
</parameter>
</parameters>
<return> The query registered with @nick or #GST_QUERY_NONE
if the query was not registered.
</return>
</function>

<function name="gst_query_type_get_details">
<description>
Get details about the given #GstQueryType.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GstQueryType
</parameter_description>
</parameter>
</parameters>
<return> The #GstQueryTypeDefinition for @type or NULL on failure.
</return>
</function>

<function name="gst_query_type_get_name">
<description>
Get a printable name for the given query type. Do not modify or free.


</description>
<parameters>
<parameter name="query">
<parameter_description> the query type
</parameter_description>
</parameter>
</parameters>
<return> a reference to the static name of the query.
</return>
</function>

<function name="gst_query_type_iterate_definitions">
<description>
Get a #GstIterator of all the registered query types. The definitions
iterated over are read only.

Free-function: gst_iterator_free


</description>
<parameters>
</parameters>
<return> a #GstIterator of #GstQueryTypeDefinition.
</return>
</function>

<function name="gst_query_type_register">
<description>
Create a new GstQueryType based on the nick or return an
already registered query with that nick


</description>
<parameters>
<parameter name="nick">
<parameter_description> The nick of the new query
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> The description of the new query
</parameter_description>
</parameter>
</parameters>
<return> A new GstQueryType or an already registered query
with the same nick.
</return>
</function>

<function name="gst_query_type_to_quark">
<description>
Get the unique quark for the given query type.


</description>
<parameters>
<parameter name="query">
<parameter_description> the query type
</parameter_description>
</parameter>
</parameters>
<return> the quark associated with the query type
</return>
</function>

<function name="gst_query_types_contains">
<description>
See if the given #GstQueryType is inside the @types query types array.


</description>
<parameters>
<parameter name="types">
<parameter_description> The query array to search
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GstQueryType to find
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the type is found inside the array
</return>
</function>

<function name="gst_registry_add_feature">
<description>
Add the feature to the registry. The feature-added signal will be emitted.
This function sinks @feature.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to add the plugin to
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description> the feature to add
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success.

MT safe.
</return>
</function>

<function name="gst_registry_add_path">
<description>
Add the given path to the registry. The syntax of the
path is specific to the registry. If the path has already been
added, do nothing.

</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to add the path to
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to add to the registry
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_registry_add_plugin">
<description>
Add the plugin to the registry. The plugin-added signal will be emitted.
This function will sink @plugin.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to add the plugin to
</parameter_description>
</parameter>
<parameter name="plugin">
<parameter_description> the plugin to add
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success.

MT safe.
</return>
</function>

<function name="gst_registry_binary_read_cache">
<description>
Read the contents of the binary cache file at @location into @registry.


</description>
<parameters>
<parameter name="registry">
<parameter_description> a #GstRegistry
</parameter_description>
</parameter>
<parameter name="location">
<parameter_description> a filename
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success.
</return>
</function>

<function name="gst_registry_binary_write_cache">
<description>
Write the @registry to a cache to file at given @location.


</description>
<parameters>
<parameter name="registry">
<parameter_description> a #GstRegistry
</parameter_description>
</parameter>
<parameter name="location">
<parameter_description> a filename
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success.
</return>
</function>

<function name="gst_registry_feature_filter">
<description>
Runs a filter against all features of the plugins in the registry
and returns a GList with the results.
If the first flag is set, only the first match is
returned (as a list with a single object).


</description>
<parameters>
<parameter name="registry">
<parameter_description> registry to query
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> the filter to use
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description> only return first match
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the filter function
</parameter_description>
</parameter>
</parameters>
<return> a #GList of
#GstPluginFeature. Use gst_plugin_feature_list_free() after usage.

MT safe.
</return>
</function>

<function name="gst_registry_find_feature">
<description>
Find the pluginfeature with the given name and type in the registry.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to search
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the pluginfeature name to find
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the pluginfeature type to find
</parameter_description>
</parameter>
</parameters>
<return> the pluginfeature with the given name and type
or NULL if the plugin was not found. gst_object_unref() after usage.

MT safe.
</return>
</function>

<function name="gst_registry_find_plugin">
<description>
Find the plugin with the given name in the registry.
The plugin will be reffed; caller is responsible for unreffing.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to search
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the plugin name to find
</parameter_description>
</parameter>
</parameters>
<return> the plugin with the given name or NULL if the
plugin was not found. gst_object_unref() after usage.

MT safe.
</return>
</function>

<function name="gst_registry_fork_is_enabled">
<description>
By default GStreamer will perform scanning and rebuilding of the
registry file using a helper child process.

Applications might want to disable this behaviour with the
gst_registry_fork_set_enabled() function, in which case new plugins
are scanned (and loaded) into the application process.


</description>
<parameters>
</parameters>
<return> %TRUE if GStreamer will use the child helper process when
rebuilding the registry.

</return>
</function>

<function name="gst_registry_fork_set_enabled">
<description>
Applications might want to disable/enable spawning of a child helper process
when rebuilding the registry. See gst_registry_fork_is_enabled() for more
information.


</description>
<parameters>
<parameter name="enabled">
<parameter_description> whether rebuilding the registry can use a temporary child helper process.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_registry_get_default">
<description>
Retrieves the default registry. The caller does not own a reference on the
registry, as it is alive as long as GStreamer is initialized.


</description>
<parameters>
</parameters>
<return> The default #GstRegistry.
</return>
</function>

<function name="gst_registry_get_feature_list">
<description>
Retrieves a #GList of #GstPluginFeature of @type.


</description>
<parameters>
<parameter name="registry">
<parameter_description> a #GstRegistry
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GType.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of
#GstPluginFeature of @type. Use gst_plugin_feature_list_free() after use

MT safe.
</return>
</function>

<function name="gst_registry_get_feature_list_by_plugin">
<description>
Retrieves a #GList of features of the plugin with name @name.


</description>
<parameters>
<parameter name="registry">
<parameter_description> a #GstRegistry.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a plugin name.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of
#GstPluginFeature. Use gst_plugin_feature_list_free() after usage.
</return>
</function>

<function name="gst_registry_get_feature_list_cookie">
<description>
Returns the registrys feature list cookie. This changes
every time a feature is added or removed from the registry.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry
</parameter_description>
</parameter>
</parameters>
<return> the feature list cookie.

</return>
</function>

<function name="gst_registry_get_path_list">
<description>
Get the list of paths for the given registry.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to get the pathlist of
</parameter_description>
</parameter>
</parameters>
<return> A #GList of paths as
strings. g_list_free after use.

MT safe.
</return>
</function>

<function name="gst_registry_get_plugin_list">
<description>
Get a copy of all plugins registered in the given registry. The refcount
of each element in the list in incremented.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to search
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GstPlugin.
Use gst_plugin_list_free() after usage.

MT safe.
</return>
</function>

<function name="gst_registry_lookup">
<description>
Look up a plugin in the given registry with the given filename.
If found, plugin is reffed.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to look up in
</parameter_description>
</parameter>
<parameter name="filename">
<parameter_description> the name of the file to look up
</parameter_description>
</parameter>
</parameters>
<return> the #GstPlugin if found, or NULL if not.
gst_object_unref() after usage.
</return>
</function>

<function name="gst_registry_lookup_feature">
<description>
Find a #GstPluginFeature with @name in @registry.


</description>
<parameters>
<parameter name="registry">
<parameter_description> a #GstRegistry
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a #GstPluginFeature name
</parameter_description>
</parameter>
</parameters>
<return> a #GstPluginFeature with its refcount incremented,
use gst_object_unref() after usage.

MT safe.
</return>
</function>

<function name="gst_registry_plugin_filter">
<description>
Runs a filter against all plugins in the registry and returns a #GList with
the results. If the first flag is set, only the first match is
returned (as a list with a single object).
Every plugin is reffed; use gst_plugin_list_free() after use, which
will unref again.


</description>
<parameters>
<parameter name="registry">
<parameter_description> registry to query
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> the filter to use
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description> only return first match
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the filter function
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GstPlugin.
Use gst_plugin_list_free() after usage.

MT safe.
</return>
</function>

<function name="gst_registry_remove_feature">
<description>
Remove the feature from the registry.

MT safe.

</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to remove the feature from
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description> the feature to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_registry_remove_plugin">
<description>
Remove the plugin from the registry.

MT safe.

</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to remove the plugin from
</parameter_description>
</parameter>
<parameter name="plugin">
<parameter_description> the plugin to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_registry_scan_path">
<description>
Scan the given path for plugins to add to the registry. The syntax of the
path is specific to the registry.


</description>
<parameters>
<parameter name="registry">
<parameter_description> the registry to add found plugins to
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> the path to scan
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if registry changed
</return>
</function>

<function name="gst_riff_create_video_caps">
<description>

</description>
<parameters>
<parameter name="codec_fcc">
<parameter_description> fourCC codec for this codec.
</parameter_description>
</parameter>
<parameter name="strh">
<parameter_description> pointer to the strh stream header structure.
</parameter_description>
</parameter>
<parameter name="strf">
<parameter_description> pointer to the strf stream header structure, including any
data that is within the range of strf.size, but excluding any
additional data withint this chunk but outside strf.size.
</parameter_description>
</parameter>
<parameter name="strf_data">
<parameter_description> a #GstBuffer containing the additional data in the strf
chunk outside reach of strf.size. Ususally a palette.
</parameter_description>
</parameter>
<parameter name="strd_data">
<parameter_description> a #GstBuffer containing the data in the strd stream header
chunk. Usually codec initialization data.
</parameter_description>
</parameter>
<parameter name="codec_name">
<parameter_description> if given, will be filled with a human-readable codec name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_riff_init">
<description>
Initialize riff library.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_riff_parse_chunk">
<description>
Reads a single chunk.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input buffer.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset in the buffer in the caller. Is incremented
by the read size by this function.
</parameter_description>
</parameter>
<parameter name="fourcc">
<parameter_description> fourcc (returned by this function0 of the chunk.
</parameter_description>
</parameter>
<parameter name="chunk_data">
<parameter_description> buffer (returned by the function) containing the
chunk data, which may be NULL if chunksize == 0
</parameter_description>
</parameter>
</parameters>
<return> FALSE on error, TRUE otherwise
</return>
</function>

<function name="gst_riff_parse_file_header">
<description>
Reads the first few bytes from the provided buffer, checks
if this stream is a RIFF stream, and determines document type.
This function takes ownership of @buf so it should not be used anymore
after calling this function.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input buffer from which the file header will be parsed,
should be at least 12 bytes long.
</parameter_description>
</parameter>
<parameter name="doctype">
<parameter_description> a fourcc (returned by this function) to indicate the
type of document (according to the header).
</parameter_description>
</parameter>
</parameters>
<return> FALSE if this is not a RIFF stream (in which case the
caller should error out; we already throw an error), or TRUE
if it is.
</return>
</function>

<function name="gst_riff_parse_info">
<description>
Parses stream metadata from input data.

</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="taglist">
<parameter_description> a pointer to a taglist (returned by this function)
containing information about this stream. May be
NULL if no supported tags were found.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_riff_parse_strf_auds">
<description>
Parses an audio stream´s strf structure plus optionally some
extradata from input data. This function takes ownership of @buf.
use.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="strf">
<parameter_description> a pointer (returned by this function) to a filled-in
strf/auds structure. Caller should free it.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer (returned by this function) to a buffer
containing extradata for this particular stream (e.g.
codec initialization data).
</parameter_description>
</parameter>
</parameters>
<return> TRUE if parsing succeeded, otherwise FALSE. The stream
should be skipped on error, but it is not fatal.
</return>
</function>

<function name="gst_riff_parse_strf_iavs">
<description>
Parses a interleaved (also known as &quot;complex&quot;)  stream´s strf
structure plus optionally some extradata from input data. This 
function takes ownership of @buf.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="strf">
<parameter_description> a pointer (returned by this function) to a filled-in
strf/iavs structure. Caller should free it.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer (returned by this function) to a buffer
containing extradata for this particular stream (e.g.
codec initialization data).
</parameter_description>
</parameter>
</parameters>
<return> TRUE if parsing succeeded, otherwise FALSE.
</return>
</function>

<function name="gst_riff_parse_strf_vids">
<description>
Parses a video stream´s strf structure plus optionally some
extradata from input data. This function takes ownership of @buf.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="strf">
<parameter_description> a pointer (returned by this function) to a filled-in
strf/vids structure. Caller should free it.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer (returned by this function) to a buffer
containing extradata for this particular stream (e.g.
palette, codec initialization data).
</parameter_description>
</parameter>
</parameters>
<return> TRUE if parsing succeeded, otherwise FALSE. The stream
should be skipped on error, but it is not fatal.
</return>
</function>

<function name="gst_riff_parse_strh">
<description>
Parses a strh structure from input data. Takes ownership of @buf.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="strh">
<parameter_description> a pointer (returned by this function) to a filled-in
strh structure. Caller should free it.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if parsing succeeded, otherwise FALSE. The stream
should be skipped on error, but it is not fatal.
</return>
</function>

<function name="gst_riff_read_chunk">
<description>
Reads a single chunk of data. Since 0.10.8 'JUNK' chunks
are skipped automatically.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging).
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> pad to pull data from.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset to pull from, incremented by this function.
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> fourcc of the chunk (returned by this function).
</parameter_description>
</parameter>
<parameter name="chunk_data">
<parameter_description> buffer (returned by this function).
</parameter_description>
</parameter>
</parameters>
<return> flow status.
</return>
</function>

<function name="gst_ring_buffer_acquire">
<description>
Allocate the resources for the ringbuffer. This function fills
in the data pointer of the ring buffer with a valid #GstBuffer
to which samples can be written.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to acquire
</parameter_description>
</parameter>
<parameter name="spec">
<parameter_description> the specs of the buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be acquired, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_activate">
<description>
Activate @buf to start or stop pulling data.

MT safe.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to activate
</parameter_description>
</parameter>
<parameter name="active">
<parameter_description> the new mode
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be activated in the requested mode,
FALSE on error.

</return>
</function>

<function name="gst_ring_buffer_advance">
<description>
Subclasses should call this function to notify the fact that 
@advance segments are now processed by the device.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to advance
</parameter_description>
</parameter>
<parameter name="advance">
<parameter_description> the number of segments written
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_clear">
<description>
Clear the given segment of the buffer with silence samples.
This function is used by subclasses.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to clear
</parameter_description>
</parameter>
<parameter name="segment">
<parameter_description> the segment to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_clear_all">
<description>
Fill the ringbuffer with silence.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_close_device">
<description>
Close the audio device associated with the ring buffer. The ring buffer
should already have been released via gst_ring_buffer_release().


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be closed, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_commit">
<description>
Same as gst_ring_buffer_commit_full() but with a in_samples and out_samples
equal to @len, ignoring accum.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to commit
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample position of the data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to commit
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of samples in the data to commit
</parameter_description>
</parameter>
</parameters>
<return> The number of samples written to the ringbuffer or -1 on
error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_commit_full">
<description>
Commit @in_samples samples pointed to by @data to the ringbuffer @buf. 

@in_samples and @out_samples define the rate conversion to perform on the the
samples in @data. For negative rates, @out_samples must be negative and
@in_samples positive.

When @out_samples is positive, the first sample will be written at position @sample
in the ringbuffer. When @out_samples is negative, the last sample will be written to
@sample in reverse order.

@out_samples does not need to be a multiple of the segment size of the ringbuffer
although it is recommended for optimal performance. 

@accum will hold a temporary accumulator used in rate conversion and should be
set to 0 when this function is first called. In case the commit operation is
interrupted, one can resume the processing by passing the previously returned
@accum value back to this function.

MT safe.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to commit
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample position of the data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to commit
</parameter_description>
</parameter>
<parameter name="in_samples">
<parameter_description> the number of samples in the data to commit
</parameter_description>
</parameter>
<parameter name="out_samples">
<parameter_description> the number of samples to write to the ringbuffer
</parameter_description>
</parameter>
<parameter name="accum">
<parameter_description> accumulator for rate conversion.
</parameter_description>
</parameter>
</parameters>
<return> The number of samples written to the ringbuffer or -1 on error. The
number of samples written can be less than @out_samples when @buf was interrupted
with a flush or stop.

</return>
</function>

<function name="gst_ring_buffer_convert">
<description>
Convert @src_val in @src_fmt to the equivalent value in @dest_fmt. The result
will be put in @dest_val.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
<parameter name="src_fmt">
<parameter_description> the source format
</parameter_description>
</parameter>
<parameter name="src_val">
<parameter_description> the source value
</parameter_description>
</parameter>
<parameter name="dest_fmt">
<parameter_description> the destination format
</parameter_description>
</parameter>
<parameter name="dest_val">
<parameter_description> a location to store the converted value
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the conversion succeeded.

</return>
</function>

<function name="gst_ring_buffer_debug_spec_buff">
<description>
Print debug info about the buffer sized in @spec to the debug log.

</description>
<parameters>
<parameter name="spec">
<parameter_description> the spec to debug
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_debug_spec_caps">
<description>
Print debug info about the parsed caps in @spec to the debug log.

</description>
<parameters>
<parameter name="spec">
<parameter_description> the spec to debug
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_delay">
<description>
Get the number of samples queued in the audio device. This is
usually less than the segment size but can be bigger when the
implementation uses another internal buffer between the audio
device.

For playback ringbuffers this is the amount of samples transfered from the
ringbuffer to the device but still not played.

For capture ringbuffers this is the amount of samples in the device that are
not yet transfered to the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to query
</parameter_description>
</parameter>
</parameters>
<return> The number of samples queued in the audio device.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_device_is_open">
<description>
Checks the status of the device associated with the ring buffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device was open, FALSE if it was closed.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_is_acquired">
<description>
Check if the ringbuffer is acquired and ready to use.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to check
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the ringbuffer is acquired, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_is_active">
<description>
Check if @buf is activated.

MT safe.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device is active.

</return>
</function>

<function name="gst_ring_buffer_may_start">
<description>
Tell the ringbuffer that it is allowed to start playback when
the ringbuffer is filled with samples. 

MT safe.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
<parameter name="allowed">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_open_device">
<description>
Open the audio device associated with the ring buffer. Does not perform any
setup on the device. You must open the device before acquiring the ring
buffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be opened, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_parse_caps">
<description>
Parse @caps into @spec.


</description>
<parameters>
<parameter name="spec">
<parameter_description> a spec
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> a #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the caps could be parsed.
</return>
</function>

<function name="gst_ring_buffer_pause">
<description>
Pause processing samples from the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to pause
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be paused, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_prepare_read">
<description>
Returns a pointer to memory where the data from segment @segment
can be found. This function is mostly used by subclasses.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to read from
</parameter_description>
</parameter>
<parameter name="segment">
<parameter_description> the segment to read
</parameter_description>
</parameter>
<parameter name="readptr">
<parameter_description> the pointer to the memory where samples can be read
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of bytes to read
</parameter_description>
</parameter>
</parameters>
<return> FALSE if the buffer is not started.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_read">
<description>
Read @len samples from the ringbuffer into the memory pointed 
to by @data.
The first sample should be read from position @sample in
the ringbuffer.

@len should not be a multiple of the segment size of the ringbuffer
although it is recommended.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to read from
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample position of the data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> where the data should be read
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of samples in data to read
</parameter_description>
</parameter>
</parameters>
<return> The number of samples read from the ringbuffer or -1 on
error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_release">
<description>
Free the resources of the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to release
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be released, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_samples_done">
<description>
Get the number of samples that were processed by the ringbuffer
since it was last started. This does not include the number of samples not
yet processed (see gst_ring_buffer_delay()).


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to query
</parameter_description>
</parameter>
</parameters>
<return> The number of samples processed by the ringbuffer.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_set_callback">
<description>
Sets the given callback function on the buffer. This function
will be called every time a segment has been written to a device.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to set the callback on
</parameter_description>
</parameter>
<parameter name="cb">
<parameter_description> the callback to set
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_set_flushing">
<description>
Set the ringbuffer to flushing mode or normal mode.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to flush
</parameter_description>
</parameter>
<parameter name="flushing">
<parameter_description> the new mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_set_sample">
<description>
Make sure that the next sample written to the device is
accounted for as being the @sample sample written to the
device. This value will be used in reporting the current
sample position of the ringbuffer.

This function will also clear the buffer with silence.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to use
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample number to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_start">
<description>
Start processing samples from the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to start
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be started, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_stop">
<description>
Stop processing samples from the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to stop
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be stopped, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_rtcp_buffer_add_packet">
<description>
Add a new packet of @type to @buffer. @packet will point to the newly created 
packet.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a valid RTCP buffer
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GstRTCPType of the new packet
</parameter_description>
</parameter>
<parameter name="packet">
<parameter_description> pointer to new packet
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet could be created. This function returns %FALSE
if the max mtu is exceeded for the buffer.
</return>
</function>

<function name="gst_rtcp_buffer_end">
<description>
Finish @buffer after being constructured. This function is usually called
after gst_rtcp_buffer_new() and after adding the RTCP items to the new buffer. 

The function adjusts the size of @buffer with the total length of all the
added packets.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a buffer with an RTCP packet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_buffer_get_first_packet">
<description>
Initialize a new #GstRTCPPacket pointer that points to the first packet in
@buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a valid RTCP buffer
</parameter_description>
</parameter>
<parameter name="packet">
<parameter_description> a #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the packet existed in @buffer.
</return>
</function>

<function name="gst_rtcp_buffer_get_packet_count">
<description>
Get the number of RTCP packets in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a valid RTCP buffer
</parameter_description>
</parameter>
</parameters>
<return> the number of RTCP packets in @buffer.
</return>
</function>

<function name="gst_rtcp_buffer_new">
<description>
Create a new buffer for constructing RTCP packets. The packet will have a
maximum size of @mtu.


</description>
<parameters>
<parameter name="mtu">
<parameter_description> the maximum mtu size.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer.
</return>
</function>

<function name="gst_rtcp_buffer_new_copy_data">
<description>
Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.


</description>
<parameters>
<parameter name="data">
<parameter_description> data for the new buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of data
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer with a copy of @data and of size @len.
</return>
</function>

<function name="gst_rtcp_buffer_new_take_data">
<description>
Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.


</description>
<parameters>
<parameter name="data">
<parameter_description> data for the new buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of data
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer with @data and of size @len.
</return>
</function>

<function name="gst_rtcp_buffer_validate">
<description>
Check if the data pointed to by @buffer is a valid RTCP packet using
gst_rtcp_buffer_validate_data().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer is a valid RTCP packet.
</return>
</function>

<function name="gst_rtcp_buffer_validate_data">
<description>
Check if the @data and @size point to the data of a valid RTCP (compound)
packet. 
Use this function to validate a packet before using the other functions in
this module.


</description>
<parameters>
<parameter name="data">
<parameter_description> the data to validate
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @data to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the data points to a valid RTCP packet.
</return>
</function>

<function name="gst_rtcp_ntp_to_unix">
<description>
Converts an NTP time to UNIX nanoseconds. @ntptime can typically be
the NTP time of an SR RTCP message and contains, in the upper 32 bits, the
number of seconds since 1900 and, in the lower 32 bits, the fractional
seconds. The resulting value will be the number of nanoseconds since 1970.


</description>
<parameters>
<parameter name="ntptime">
<parameter_description> an NTP timestamp
</parameter_description>
</parameter>
</parameters>
<return> the UNIX time for @ntptime in nanoseconds.
</return>
</function>

<function name="gst_rtcp_packet_add_rb">
<description>
Add a new report block to @packet with the given values.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR or RR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> data source being reported
</parameter_description>
</parameter>
<parameter name="fractionlost">
<parameter_description> fraction lost since last SR/RR
</parameter_description>
</parameter>
<parameter name="packetslost">
<parameter_description> the cumululative number of packets lost
</parameter_description>
</parameter>
<parameter name="exthighestseq">
<parameter_description> the extended last sequence number received
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> the interarrival jitter
</parameter_description>
</parameter>
<parameter name="lsr">
<parameter_description> the last SR packet from this source
</parameter_description>
</parameter>
<parameter name="dlsr">
<parameter_description> the delay since last SR packet
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet was created. This function can return %FALSE if
the max MTU is exceeded or the number of report blocks is greater than
#GST_RTCP_MAX_RB_COUNT.
</return>
</function>

<function name="gst_rtcp_packet_bye_add_ssrc">
<description>
Add @ssrc to the BYE @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> an SSRC to add
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the ssrc was added. This function can return %FALSE if
the max MTU is exceeded or the number of sources blocks is greater than
#GST_RTCP_MAX_BYE_SSRC_COUNT.
</return>
</function>

<function name="gst_rtcp_packet_bye_add_ssrcs">
<description>
Adds @len SSRCs in @ssrc to BYE @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> an array of SSRCs to add
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> number of elements in @ssrc
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the all the SSRCs were added. This function can return %FALSE if
the max MTU is exceeded or the number of sources blocks is greater than
#GST_RTCP_MAX_BYE_SSRC_COUNT.
</return>
</function>

<function name="gst_rtcp_packet_bye_get_nth_ssrc">
<description>
Get the @nth SSRC of the BYE @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth SSRC to get
</parameter_description>
</parameter>
</parameters>
<return> The @nth SSRC of @packet.
</return>
</function>

<function name="gst_rtcp_packet_bye_get_reason">
<description>
Get the reason in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The reason for the BYE @packet or NULL if the packet did not contain
a reason string. The string must be freed with g_free() after usage.
</return>
</function>

<function name="gst_rtcp_packet_bye_get_reason_len">
<description>
Get the length of the reason string.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The length of the reason string or 0 when there is no reason string
present.
</return>
</function>

<function name="gst_rtcp_packet_bye_get_ssrc_count">
<description>
Get the number of SSRC fields in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The number of SSRC fields in @packet.
</return>
</function>

<function name="gst_rtcp_packet_bye_set_reason">
<description>
Set the reason string to @reason in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> a reason string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the string could be set.
</return>
</function>

<function name="gst_rtcp_packet_fb_get_fci">
<description>
Get the Feedback Control Information attached to a RTPFB or PSFB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the FCI

</return>
</function>

<function name="gst_rtcp_packet_fb_get_fci_length">
<description>
Get the length of the Feedback Control Information attached to a
RTPFB or PSFB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The length of the FCI in 32-bit words.

</return>
</function>

<function name="gst_rtcp_packet_fb_get_media_ssrc">
<description>
Get the media SSRC field of the RTPFB or PSFB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> the media SSRC.

</return>
</function>

<function name="gst_rtcp_packet_fb_get_sender_ssrc">
<description>
Get the sender SSRC field of the RTPFB or PSFB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> the sender SSRC.

</return>
</function>

<function name="gst_rtcp_packet_fb_get_type">
<description>
Get the feedback message type of the FB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The feedback message type.

</return>
</function>

<function name="gst_rtcp_packet_fb_set_fci_length">
<description>
Set the length of the Feedback Control Information attached to a
RTPFB or PSFB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="wordlen">
<parameter_description> Length of the FCI in 32-bit words
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was enough space in the packet to add this much FCI

</return>
</function>

<function name="gst_rtcp_packet_fb_set_media_ssrc">
<description>
Set the media SSRC field of the RTPFB or PSFB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> a media SSRC
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_fb_set_sender_ssrc">
<description>
Set the sender SSRC field of the RTPFB or PSFB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> a sender SSRC
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_fb_set_type">
<description>
Set the feedback message type of the FB @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RTPFB or PSFB #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GstRTCPFBType to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_get_count">
<description>
Get the count field in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The count field in @packet or -1 if @packet does not point to a
valid packet.
</return>
</function>

<function name="gst_rtcp_packet_get_length">
<description>
Get the length field of @packet. This is the length of the packet in 
32-bit words minus one.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The length field of @packet.
</return>
</function>

<function name="gst_rtcp_packet_get_padding">
<description>
Get the packet padding of the packet pointed to by @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> If the packet has the padding bit set.
</return>
</function>

<function name="gst_rtcp_packet_get_rb">
<description>
Parse the values of the @nth report block in @packet and store the result in
the values.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR or RR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth report block in @packet
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> result for data source being reported
</parameter_description>
</parameter>
<parameter name="fractionlost">
<parameter_description> result for fraction lost since last SR/RR
</parameter_description>
</parameter>
<parameter name="packetslost">
<parameter_description> result for the cumululative number of packets lost
</parameter_description>
</parameter>
<parameter name="exthighestseq">
<parameter_description> result for the extended last sequence number received
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> result for the interarrival jitter
</parameter_description>
</parameter>
<parameter name="lsr">
<parameter_description> result for the last SR packet from this source
</parameter_description>
</parameter>
<parameter name="dlsr">
<parameter_description> result for the delay since last SR packet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_get_rb_count">
<description>
Get the number of report blocks in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR or RR #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The number of report blocks in @packet.
</return>
</function>

<function name="gst_rtcp_packet_get_type">
<description>
Get the packet type of the packet pointed to by @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The packet type or GST_RTCP_TYPE_INVALID when @packet is not
pointing to a valid packet.
</return>
</function>

<function name="gst_rtcp_packet_move_to_next">
<description>
Move the packet pointer @packet to the next packet in the payload.
Use gst_rtcp_buffer_get_first_packet() to initialize @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @packet is pointing to a valid packet after calling this
function.
</return>
</function>

<function name="gst_rtcp_packet_remove">
<description>
Removes the packet pointed to by @packet and moves pointer to the next one


</description>
<parameters>
<parameter name="packet">
<parameter_description> a #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @packet is pointing to a valid packet after calling this
function.
</return>
</function>

<function name="gst_rtcp_packet_rr_get_ssrc">
<description>
Get the ssrc field of the RR @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RR #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> the ssrc.
</return>
</function>

<function name="gst_rtcp_packet_rr_set_ssrc">
<description>
Set the ssrc field of the RR @packet.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the SSRC to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_sdes_add_entry">
<description>
Add a new SDES entry to the current item in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GstRTCPSDESType of the SDES entry
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the data length
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item could be added, %FALSE if the MTU has been
reached.
</return>
</function>

<function name="gst_rtcp_packet_sdes_add_item">
<description>
Add a new SDES item for @ssrc to @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the SSRC of the new item to add
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item could be added, %FALSE if the maximum amount of
items has been exceeded for the SDES packet or the MTU has been reached.
</return>
</function>

<function name="gst_rtcp_packet_sdes_copy_entry">
<description>
This function is like gst_rtcp_packet_sdes_get_entry() but it returns a
null-terminated copy of the data instead. use g_free() after usage.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> result of the entry type
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> result length of the entry data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> result entry data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was valid data.
</return>
</function>

<function name="gst_rtcp_packet_sdes_first_entry">
<description>
Move to the first SDES entry in the current item.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a first entry.
</return>
</function>

<function name="gst_rtcp_packet_sdes_first_item">
<description>
Move to the first SDES item in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there was a first item.
</return>
</function>

<function name="gst_rtcp_packet_sdes_get_entry">
<description>
Get the data of the current SDES item entry. @type (when not NULL) will
contain the type of the entry. @data (when not NULL) will point to @len
bytes.

When @type refers to a text item, @data will point to a UTF8 string. Note
that this UTF8 string is NOT null-terminated. Use
gst_rtcp_packet_sdes_copy_entry() to get a null-termined copy of the entry.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> result of the entry type
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> result length of the entry data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> result entry data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was valid data.
</return>
</function>

<function name="gst_rtcp_packet_sdes_get_item_count">
<description>
Get the number of items in the SDES packet @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The number of items in @packet.
</return>
</function>

<function name="gst_rtcp_packet_sdes_get_ssrc">
<description>
Get the SSRC of the current SDES item.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> the SSRC of the current item.
</return>
</function>

<function name="gst_rtcp_packet_sdes_next_entry">
<description>
Move to the next SDES entry in the current item.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a next entry.
</return>
</function>

<function name="gst_rtcp_packet_sdes_next_item">
<description>
Move to the next SDES item in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there was a next item.
</return>
</function>

<function name="gst_rtcp_packet_set_rb">
<description>
Set the @nth new report block in @packet with the given values.

Note: Not implemented.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR or RR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth report block to set
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> data source being reported
</parameter_description>
</parameter>
<parameter name="fractionlost">
<parameter_description> fraction lost since last SR/RR
</parameter_description>
</parameter>
<parameter name="packetslost">
<parameter_description> the cumululative number of packets lost
</parameter_description>
</parameter>
<parameter name="exthighestseq">
<parameter_description> the extended last sequence number received
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> the interarrival jitter
</parameter_description>
</parameter>
<parameter name="lsr">
<parameter_description> the last SR packet from this source
</parameter_description>
</parameter>
<parameter name="dlsr">
<parameter_description> the delay since last SR packet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_sr_get_sender_info">
<description>
Parse the SR sender info and store the values.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> result SSRC
</parameter_description>
</parameter>
<parameter name="ntptime">
<parameter_description> result NTP time
</parameter_description>
</parameter>
<parameter name="rtptime">
<parameter_description> result RTP time
</parameter_description>
</parameter>
<parameter name="packet_count">
<parameter_description> result packet count
</parameter_description>
</parameter>
<parameter name="octet_count">
<parameter_description> result octect count
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_sr_set_sender_info">
<description>
Set the given values in the SR packet @packet.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the SSRC 
</parameter_description>
</parameter>
<parameter name="ntptime">
<parameter_description> the NTP time
</parameter_description>
</parameter>
<parameter name="rtptime">
<parameter_description> the RTP time
</parameter_description>
</parameter>
<parameter name="packet_count">
<parameter_description> the packet count
</parameter_description>
</parameter>
<parameter name="octet_count">
<parameter_description> the octect count
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_sdes_name_to_type">
<description>
Convert @name into a @GstRTCPSDESType. @name is typically a key in a
#GstStructure containing SDES items.


</description>
<parameters>
<parameter name="name">
<parameter_description> a SDES name
</parameter_description>
</parameter>
</parameters>
<return> the #GstRTCPSDESType for @name or #GST_RTCP_SDES_PRIV when @name
is a private sdes item.

</return>
</function>

<function name="gst_rtcp_sdes_type_to_name">
<description>
Converts @type to the string equivalent. The string is typically used as a
key in a #GstStructure containing SDES items.


</description>
<parameters>
<parameter name="type">
<parameter_description> a #GstRTCPSDESType
</parameter_description>
</parameter>
</parameters>
<return> the string equivalent of @type

</return>
</function>

<function name="gst_rtcp_unix_to_ntp">
<description>
Converts a UNIX timestamp in nanoseconds to an NTP time. The caller should
pass a value with nanoseconds since 1970. The NTP time will, in the upper
32 bits, contain the number of seconds since 1900 and, in the lower 32
bits, the fractional seconds. The resulting value can be used as an ntptime
for constructing SR RTCP packets.


</description>
<parameters>
<parameter name="unixtime">
<parameter_description> an UNIX timestamp in nanoseconds
</parameter_description>
</parameter>
</parameters>
<return> the NTP time for @unixtime.
</return>
</function>

<function name="gst_rtp_buffer_add_extension_onebyte_header">
<description>
Adds a RFC 5285 header extension with a one byte header to the end of the
RTP header. If there is already a RFC 5285 header extension with a one byte
header, the new extension will be appended.
It will not work if there is already a header extension that does not follow
the mecanism described in RFC 5285 or if there is a header extension with
a two bytes header as described in RFC 5285. In that case, use
gst_rtp_buffer_add_extension_twobytes_header()


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> The ID of the header extension (between 1 and 14).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if header extension could be added

</return>
</function>

<function name="gst_rtp_buffer_add_extension_twobytes_header">
<description>
Adds a RFC 5285 header extension with a two bytes header to the end of the
RTP header. If there is already a RFC 5285 header extension with a two bytes
header, the new extension will be appended.
It will not work if there is already a header extension that does not follow
the mecanism described in RFC 5285 or if there is a header extension with
a one byte header as described in RFC 5285. In that case, use
gst_rtp_buffer_add_extension_onebyte_header()


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="appbits">
<parameter_description> Application specific bits
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> The ID of the header extension
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if header extension could be added

</return>
</function>

<function name="gst_rtp_buffer_allocate_data">
<description>
Allocate enough data in @buffer to hold an RTP packet with @csrc_count CSRCs,
a payload length of @payload_len and padding of @pad_len.
MALLOCDATA of @buffer will be overwritten and will not be freed. 
All other RTP header fields will be set to 0/FALSE.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
<parameter name="payload_len">
<parameter_description> the length of the payload
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_calc_header_len">
<description>
Calculate the header length of an RTP packet with @csrc_count CSRC entries.
An RTP packet can have at most 15 CSRC entries.


</description>
<parameters>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> The length of an RTP header with @csrc_count CSRC entries.
</return>
</function>

<function name="gst_rtp_buffer_calc_packet_len">
<description>
Calculate the total length of an RTP packet with a payload size of @payload_len,
a padding of @pad_len and a @csrc_count CSRC entries.


</description>
<parameters>
<parameter name="payload_len">
<parameter_description> the length of the payload
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> The total length of an RTP header with given parameters.
</return>
</function>

<function name="gst_rtp_buffer_calc_payload_len">
<description>
Calculate the length of the payload of an RTP packet with size @packet_len,
a padding of @pad_len and a @csrc_count CSRC entries.


</description>
<parameters>
<parameter name="packet_len">
<parameter_description> the length of the total RTP packet
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> The length of the payload of an RTP packet  with given parameters.
</return>
</function>

<function name="gst_rtp_buffer_compare_seqnum">
<description>
Compare two sequence numbers, taking care of wraparounds. This function
returns the difference between @seqnum1 and @seqnum2.


</description>
<parameters>
<parameter name="seqnum1">
<parameter_description> a sequence number
</parameter_description>
</parameter>
<parameter name="seqnum2">
<parameter_description> a sequence number
</parameter_description>
</parameter>
</parameters>
<return> a negative value if @seqnum1 is bigger than @seqnum2, 0 if they
are equal or a positive value if @seqnum1 is smaller than @segnum2.

</return>
</function>

<function name="gst_rtp_buffer_default_clock_rate">
<description>
Get the default clock-rate for the static payload type @payload_type.


</description>
<parameters>
<parameter name="payload_type">
<parameter_description> the static payload type
</parameter_description>
</parameter>
</parameters>
<return> the default clock rate or -1 if the payload type is not static or
the clock-rate is undefined.

</return>
</function>

<function name="gst_rtp_buffer_ext_timestamp">
<description>
Update the @exttimestamp field with @timestamp. For the first call of the
method, @exttimestamp should point to a location with a value of -1.

This function makes sure that the returned value is a constantly increasing
value even in the case where there is a timestamp wraparound.


</description>
<parameters>
<parameter name="exttimestamp">
<parameter_description> a previous extended timestamp
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a new timestamp
</parameter_description>
</parameter>
</parameters>
<return> The extended timestamp of @timestamp.

</return>
</function>

<function name="gst_rtp_buffer_get_csrc">
<description>
Get the CSRC at index @idx in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the index of the CSRC to get
</parameter_description>
</parameter>
</parameters>
<return> the CSRC at index @idx in host order.
</return>
</function>

<function name="gst_rtp_buffer_get_csrc_count">
<description>
Get the CSRC count of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> the CSRC count of @buffer.
</return>
</function>

<function name="gst_rtp_buffer_get_extension">
<description>
Check if the extension bit is set on the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer has the extension bit set.
</return>
</function>

<function name="gst_rtp_buffer_get_extension_data">
<description>
Get the extension data. @bits will contain the extension 16 bits of custom
data. @data will point to the data in the extension and @wordlen will contain
the length of @data in 32 bits words.

If @buffer did not contain an extension, this function will return %FALSE
with @bits, @data and @wordlen unchanged.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="bits">
<parameter_description> location for result bits
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="wordlen">
<parameter_description> location for length of @data in 32 bits words
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer had the extension bit set.

</return>
</function>

<function name="gst_rtp_buffer_get_extension_onebyte_header">
<description>
Parses RFC 5285 style header extensions with a one byte header. It will
return the nth extension with the requested id.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> The ID of the header extension to be read (between 1 and 14).
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> Read the nth extension packet with the requested ID
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer had the requested header extension

</return>
</function>

<function name="gst_rtp_buffer_get_extension_twobytes_header">
<description>
Parses RFC 5285 style header extensions with a two bytes header. It will
return the nth extension with the requested id.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="appbits">
<parameter_description> Application specific bits
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> The ID of the header extension to be read (between 1 and 14).
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> Read the nth extension packet with the requested ID
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer had the requested header extension

</return>
</function>

<function name="gst_rtp_buffer_get_header_len">
<description>
Return the total length of the header in @buffer. This include the length of
the fixed header, the CSRC list and the extension header.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The total length of the header in @buffer.
</return>
</function>

<function name="gst_rtp_buffer_get_marker">
<description>
Check if the marker bit is set on the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer has the marker bit set.
</return>
</function>

<function name="gst_rtp_buffer_get_packet_len">
<description>
Return the total length of the packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The total length of the packet in @buffer.
</return>
</function>

<function name="gst_rtp_buffer_get_padding">
<description>
Check if the padding bit is set on the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer has the padding bit set.
</return>
</function>

<function name="gst_rtp_buffer_get_payload">
<description>
Get a pointer to the payload data in @buffer. This pointer is valid as long
as a reference to @buffer is held.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> A pointer to the payload data in @buffer.
</return>
</function>

<function name="gst_rtp_buffer_get_payload_buffer">
<description>
Create a buffer of the payload of the RTP packet in @buffer. This function
will internally create a subbuffer of @buffer so that a memcpy can be
avoided.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> A new buffer with the data of the payload.
</return>
</function>

<function name="gst_rtp_buffer_get_payload_len">
<description>
Get the length of the payload of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The length of the payload in @buffer.
</return>
</function>

<function name="gst_rtp_buffer_get_payload_subbuffer">
<description>
Create a subbuffer of the payload of the RTP packet in @buffer. @offset bytes
are skipped in the payload and the subbuffer will be of size @len.
If @len is -1 the total payload starting from @offset if subbuffered.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset in the payload
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length in the payload
</parameter_description>
</parameter>
</parameters>
<return> A new buffer with the specified data of the payload.

</return>
</function>

<function name="gst_rtp_buffer_get_payload_type">
<description>
Get the payload type of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The payload type.
</return>
</function>

<function name="gst_rtp_buffer_get_seq">
<description>
Get the sequence number of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The sequence number in host order.
</return>
</function>

<function name="gst_rtp_buffer_get_ssrc">
<description>
Get the SSRC of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> the SSRC of @buffer in host order.
</return>
</function>

<function name="gst_rtp_buffer_get_timestamp">
<description>
Get the timestamp of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The timestamp in host order.
</return>
</function>

<function name="gst_rtp_buffer_get_version">
<description>
Get the version number of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The version of @buffer.
</return>
</function>

<function name="gst_rtp_buffer_list_add_extension_onebyte_header">
<description>
Adds a RFC 5285 header extension with a one byte header to the end of the
RTP header. If there is already a RFC 5285 header extension with a one byte
header, the new extension will be appended.
It will not work if there is already a header extension that does not follow
the mecanism described in RFC 5285 or if there is a header extension with
a two bytes header as described in RFC 5285. In that case, use
gst_rtp_buffer_list_add_extension_twobytes_header()

This function will not modify the data section of the RTP buffer, only
the header.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator pointing right after the #GstBuffer where
the header extension should be added
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> The ID of the header extension (between 1 and 14).
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if header extension could be added

</return>
</function>

<function name="gst_rtp_buffer_list_add_extension_twobytes_header">
<description>
Adds a RFC 5285 header extension with a two bytes header to the end of the
RTP header. If there is already a RFC 5285 header extension with a two bytes
header, the new extension will be appended.
It will not work if there is already a header extension that does not follow
the mecanism described in RFC 5285 or if there is a header extension with
a one byte header as described in RFC 5285. In that case, use
gst_rtp_buffer_add_extension_onebyte_header()

This function will not modify the data section of the RTP buffer, only
the header.


</description>
<parameters>
<parameter name="it">
<parameter_description> a #GstBufferListIterator pointing right after the #GstBuffer where
the header extension should be added
</parameter_description>
</parameter>
<parameter name="appbits">
<parameter_description> Application specific bits
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> The ID of the header extension
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if header extension could be added

</return>
</function>

<function name="gst_rtp_buffer_list_from_buffer">
<description>
Splits a #GstBuffer into a #GstBufferList containing separate
buffers for the header and data sections.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GstBuffer containing a RTP packet
</parameter_description>
</parameter>
</parameters>
<return> a #GstBufferList
</return>
</function>

<function name="gst_rtp_buffer_list_get_extension_onebyte_header">
<description>
Parses RFC 5285 style header extensions with a one byte header. It will
return the nth extension with the requested id.


</description>
<parameters>
<parameter name="bufferlist">
<parameter_description> the bufferlist
</parameter_description>
</parameter>
<parameter name="group_idx">
<parameter_description> The index of the group in the #GstBufferList
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> The ID of the header extension to be read (between 1 and 14).
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> Read the nth extension packet with the requested ID
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer had the requested header extension

</return>
</function>

<function name="gst_rtp_buffer_list_get_extension_twobytes_header">
<description>
Parses RFC 5285 style header extensions with a two bytes header. It will
return the nth extension with the requested id.


</description>
<parameters>
<parameter name="bufferlist">
<parameter_description> the bufferlist
</parameter_description>
</parameter>
<parameter name="group_idx">
<parameter_description> The index of the group in the #GstBufferList
</parameter_description>
</parameter>
<parameter name="appbits">
<parameter_description> Application specific bits
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> The ID of the header extension to be read (between 1 and 14).
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> Read the nth extension packet with the requested ID
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the data in bytes
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer had the requested header extension

</return>
</function>

<function name="gst_rtp_buffer_list_get_payload_len">
<description>
Get the length of the payload of the RTP packet in @list.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
</parameters>
<return> The length of the payload in @list.

</return>
</function>

<function name="gst_rtp_buffer_list_get_payload_type">
<description>
Get the payload type of the first RTP packet in @list.
All packets in @list should have the same payload type.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
</parameters>
<return> The payload type.

</return>
</function>

<function name="gst_rtp_buffer_list_get_seq">
<description>
Get the sequence number of the first RTP packet in @list.
All packets within @list have the same sequence number.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
</parameters>
<return> The seq number

</return>
</function>

<function name="gst_rtp_buffer_list_get_ssrc">
<description>
Get the SSRC of the first RTP packet in @list.
All RTP packets within @list have the same SSRC.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
</parameters>
<return> the SSRC of @list in host order.

</return>
</function>

<function name="gst_rtp_buffer_list_get_timestamp">
<description>
Get the timestamp of the first RTP packet in @list.
All packets within @list have the same timestamp.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
</parameters>
<return> The timestamp in host order.

</return>
</function>

<function name="gst_rtp_buffer_list_set_payload_type">
<description>
Set the payload type of each RTP packet in @list to @payload_type.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
<parameter name="payload_type">
<parameter_description> the new type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_list_set_seq">
<description>
Set the sequence number of each RTP packet in @list to @seq.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
<parameter name="seq">
<parameter_description> the new sequence number
</parameter_description>
</parameter>
</parameters>
<return> The seq number of the last packet in the list + 1.

</return>
</function>

<function name="gst_rtp_buffer_list_set_ssrc">
<description>
Set the SSRC on each RTP packet in @list to @ssrc.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the new SSRC
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_list_set_timestamp">
<description>
Set the timestamp of each RTP packet in @list to @timestamp.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the new timestamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_list_validate">
<description>
Check if all RTP packets in the @list are valid using validate_data().
Use this function to validate an list before using the other functions in
this module.


</description>
<parameters>
<parameter name="list">
<parameter_description> the buffer list to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @list consists only of valid RTP packets.

</return>
</function>

<function name="gst_rtp_buffer_new_allocate">
<description>
Allocate a new #GstBuffer with enough data to hold an RTP packet with
@csrc_count CSRCs, a payload length of @payload_len and padding of @pad_len.
All other RTP header fields will be set to 0/FALSE.


</description>
<parameters>
<parameter name="payload_len">
<parameter_description> the length of the payload
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer that can hold an RTP packet with given
parameters.
</return>
</function>

<function name="gst_rtp_buffer_new_allocate_len">
<description>
Create a new #GstBuffer that can hold an RTP packet that is exactly
@packet_len long. The length of the payload depends on @pad_len and
@csrc_count and can be calculated with gst_rtp_buffer_calc_payload_len().
All RTP header fields will be set to 0/FALSE.


</description>
<parameters>
<parameter name="packet_len">
<parameter_description> the total length of the packet
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer that can hold an RTP packet of @packet_len.
</return>
</function>

<function name="gst_rtp_buffer_new_copy_data">
<description>
Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.


</description>
<parameters>
<parameter name="data">
<parameter_description> data for the new buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of data
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer with a copy of @data and of size @len.
</return>
</function>

<function name="gst_rtp_buffer_new_take_data">
<description>
Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.


</description>
<parameters>
<parameter name="data">
<parameter_description> data for the new buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of data
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer with @data and of size @len.
</return>
</function>

<function name="gst_rtp_buffer_pad_to">
<description>
Set the amount of padding in the RTP packet in @buffer to
@len. If @len is 0, the padding is removed.

NOTE: This function does not work correctly.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the new amount of padding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_csrc">
<description>
Modify the CSRC at index @idx in @buffer to @csrc.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the CSRC index to set
</parameter_description>
</parameter>
<parameter name="csrc">
<parameter_description> the CSRC in host order to set at @idx
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_extension">
<description>
Set the extension bit on the RTP packet in @buffer to @extension.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="extension">
<parameter_description> the new extension
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_extension_data">
<description>
Set the extension bit of the rtp buffer and fill in the @bits and @length of the
extension header. It will refuse to set the extension data if the buffer is not
large enough.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="bits">
<parameter_description> the bits specific for the extension
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length that counts the number of 32-bit words in
the extension, excluding the extension header ( therefore zero is a valid length)
</parameter_description>
</parameter>
</parameters>
<return> True if done.

</return>
</function>

<function name="gst_rtp_buffer_set_marker">
<description>
Set the marker bit on the RTP packet in @buffer to @marker.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="marker">
<parameter_description> the new marker
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_packet_len">
<description>
Set the total @buffer size to @len. The data in the buffer will be made
larger if needed. Any padding will be removed from the packet. 

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the new packet length
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_padding">
<description>
Set the padding bit on the RTP packet in @buffer to @padding.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="padding">
<parameter_description> the new padding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_payload_type">
<description>
Set the payload type of the RTP packet in @buffer to @payload_type.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="payload_type">
<parameter_description> the new type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_seq">
<description>
Set the sequence number of the RTP packet in @buffer to @seq.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="seq">
<parameter_description> the new sequence number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_ssrc">
<description>
Set the SSRC on the RTP packet in @buffer to @ssrc.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the new SSRC
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_timestamp">
<description>
Set the timestamp of the RTP packet in @buffer to @timestamp.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the new timestamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_version">
<description>
Set the version of the RTP packet in @buffer to @version.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> the new version
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_validate">
<description>
Check if the data pointed to by @buffer is a valid RTP packet using
validate_data().
Use this function to validate a packet before using the other functions in
this module.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer is a valid RTP packet.
</return>
</function>

<function name="gst_rtp_buffer_validate_data">
<description>
Check if the @data and @size point to the data of a valid RTP packet.
This function checks the length, version and padding of the packet data.
Use this function to validate a packet before using the other functions in
this module.


</description>
<parameters>
<parameter name="data">
<parameter_description> the data to validate
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @data to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the data points to a valid RTP packet.
</return>
</function>

<function name="gst_rtp_payload_info_for_name">
<description>
Get the #GstRTPPayloadInfo for @media and @encoding_name. This function is
mostly used to get the default clock-rate and bandwidth for dynamic payload
types specified with @media and @encoding name.

The search for @encoding_name will be performed in a case insensitve way.


</description>
<parameters>
<parameter name="media">
<parameter_description> the media to find
</parameter_description>
</parameter>
<parameter name="encoding_name">
<parameter_description> the encoding name to find
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTPPayloadInfo or NULL when no info could be found.
</return>
</function>

<function name="gst_rtp_payload_info_for_pt">
<description>
Get the #GstRTPPayloadInfo for @payload_type. This function is
mostly used to get the default clock-rate and bandwidth for static payload
types specified with @payload_type.


</description>
<parameters>
<parameter name="payload_type">
<parameter_description> the payload_type to find
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTPPayloadInfo or NULL when no info could be found.
</return>
</function>

<function name="gst_rtsp_base64_decode_ip">
<description>
Decode the base64 string pointed to by @data in-place. When @len is not #NULL
it will contain the length of the decoded data.

Deprecated: use g_base64_decode_inplace() instead.

</description>
<parameters>
<parameter name="data">
<parameter_description> the base64 encoded data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> location for output length or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_base64_encode">
<description>
Encode a sequence of binary data into its Base-64 stringified representation.

Deprecated: Use g_base64_encode()


</description>
<parameters>
<parameter name="data">
<parameter_description> the binary data to encode
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @data
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated, zero-terminated Base-64 encoded string
representing @data.
</return>
</function>

<function name="gst_rtsp_connection_accept">
<description>
Accept a new connection on @sock and create a new #GstRTSPConnection for
handling communication on new socket.


</description>
<parameters>
<parameter name="sock">
<parameter_description> a socket
</parameter_description>
</parameter>
<parameter name="conn">
<parameter_description> storage for a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK when @conn contains a valid connection.

</return>
</function>

<function name="gst_rtsp_connection_clear_auth_params">
<description>
Clear the list of authentication directives stored in @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_connection_close">
<description>
Close the connected @conn. After this call, the connection is in the same
state as when it was first created.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_rtsp_connection_connect">
<description>
Attempt to connect to the url of @conn made with
gst_rtsp_connection_create(). If @timeout is #NULL this function can block
forever. If @timeout contains a valid timeout, this function will return
#GST_RTSP_ETIMEOUT after the timeout expired.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection 
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a #GTimeVal timeout
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK when a connection could be made.
</return>
</function>

<function name="gst_rtsp_connection_create">
<description>
Create a newly allocated #GstRTSPConnection from @url and store it in @conn.
The connection will not yet attempt to connect to @url, use
gst_rtsp_connection_connect().

A copy of @url will be made.


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl 
</parameter_description>
</parameter>
<parameter name="conn">
<parameter_description> storage for a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK when @conn contains a valid connection.
</return>
</function>

<function name="gst_rtsp_connection_create_from_fd">
<description>
Create a new #GstRTSPConnection for handling communication on the existing
file descriptor @fd. The @initial_buffer contains any data already read from
@fd which should be used before starting to read new data.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a file descriptor
</parameter_description>
</parameter>
<parameter name="ip">
<parameter_description> the IP address of the other end
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port used by the other end
</parameter_description>
</parameter>
<parameter name="initial_buffer">
<parameter_description> data already read from @fd
</parameter_description>
</parameter>
<parameter name="conn">
<parameter_description> storage for a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK when @conn contains a valid connection.

</return>
</function>

<function name="gst_rtsp_connection_do_tunnel">
<description>
If @conn received the first tunnel connection and @conn2 received
the second tunnel connection, link the two connections together so that
@conn manages the tunneled connection.

After this call, @conn2 cannot be used anymore and must be freed with
gst_rtsp_connection_free().

If @conn2 is %NULL then only the base64 decoding context will be setup for
@conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="conn2">
<parameter_description> a #GstRTSPConnection or %NULL
</parameter_description>
</parameter>
</parameters>
<return> return GST_RTSP_OK on success.

</return>
</function>

<function name="gst_rtsp_connection_flush">
<description>
Start or stop the flushing action on @conn. When flushing, all current
and future actions on @conn will return #GST_RTSP_EINTR until the connection
is set to non-flushing mode again.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> start or stop the flush
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_connection_free">
<description>
Close and free @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_rtsp_connection_get_ip">
<description>
Retrieve the IP address of the other end of @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> The IP address as a string. this value remains valid until the
connection is closed.

</return>
</function>

<function name="gst_rtsp_connection_get_readfd">
<description>
Get the file descriptor for reading.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> the file descriptor used for reading or -1 on error. The file
descriptor remains valid until the connection is closed.

</return>
</function>

<function name="gst_rtsp_connection_get_tunnelid">
<description>
Get the tunnel session id the connection. 


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> returns a non-empty string if @conn is being tunneled over HTTP.

</return>
</function>

<function name="gst_rtsp_connection_get_url">
<description>
Retrieve the URL of the other end of @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> The URL. This value remains valid until the
connection is freed.

</return>
</function>

<function name="gst_rtsp_connection_get_writefd">
<description>
Get the file descriptor for writing.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> the file descriptor used for writing or -1 on error. The file
descriptor remains valid until the connection is closed.

</return>
</function>

<function name="gst_rtsp_connection_is_tunneled">
<description>
Get the tunneling state of the connection. 


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> if @conn is using HTTP tunneling.

</return>
</function>

<function name="gst_rtsp_connection_next_timeout">
<description>
Calculate the next timeout for @conn, storing the result in @timeout.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_connection_poll">
<description>
Wait up to the specified @timeout for the connection to become available for
at least one of the operations specified in @events. When the function returns
with #GST_RTSP_OK, @revents will contain a bitmask of available operations on
@conn.

@timeout can be #NULL, in which case this function might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> a bitmask of #GstRTSPEvent flags to check
</parameter_description>
</parameter>
<parameter name="revents">
<parameter_description> location for result flags 
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.

</return>
</function>

<function name="gst_rtsp_connection_read">
<description>
Attempt to read @size bytes into @data from the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to read
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_rtsp_connection_receive">
<description>
Attempt to read into @message from the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the message to read
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_rtsp_connection_reset_timeout">
<description>
Reset the timeout of @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_connection_send">
<description>
Attempt to send @message to the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the message to send
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_rtsp_connection_set_auth">
<description>
Configure @conn for authentication mode @method with @user and @pass as the
user and password respectively.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> authentication method
</parameter_description>
</parameter>
<parameter name="user">
<parameter_description> the user
</parameter_description>
</parameter>
<parameter name="pass">
<parameter_description> the password
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_connection_set_auth_param">
<description>
Setup @conn with authentication directives. This is not necesary for
methods #GST_RTSP_AUTH_NONE and #GST_RTSP_AUTH_BASIC. For
#GST_RTSP_AUTH_DIGEST, directives should be taken from the digest challenge
in the WWW-Authenticate response header and can include realm, domain,
nonce, opaque, stale, algorithm, qop as per RFC2617.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> authentication directive
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_connection_set_http_mode">
<description>
By setting the HTTP mode to %TRUE the message parsing will support HTTP
messages in addition to the RTSP messages. It will also disable the
automatic handling of setting up an HTTP tunnel.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="enable">
<parameter_description> %TRUE to enable manual HTTP mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_connection_set_ip">
<description>
Set the IP address of the server.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="ip">
<parameter_description> an ip address
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_connection_set_proxy">
<description>
Set the proxy host and port.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="host">
<parameter_description> the proxy host
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the proxy port
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.

</return>
</function>

<function name="gst_rtsp_connection_set_qos_dscp">
<description>
Configure @conn to use the specified DSCP value.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="qos_dscp">
<parameter_description> DSCP value
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.

</return>
</function>

<function name="gst_rtsp_connection_set_tunneled">
<description>
Set the HTTP tunneling state of the connection. This must be configured before
the @conn is connected.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="tunneled">
<parameter_description> the new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_connection_write">
<description>
Attempt to write @size bytes of @data to the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to write
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_rtsp_find_header_field">
<description>
Convert @header to a #GstRTSPHeaderField.


</description>
<parameters>
<parameter name="header">
<parameter_description> a header string
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPHeaderField for @header or #GST_RTSP_HDR_INVALID if the
header field is unknown.
</return>
</function>

<function name="gst_rtsp_find_method">
<description>
Convert @method to a #GstRTSPMethod.


</description>
<parameters>
<parameter name="method">
<parameter_description> a method
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPMethod for @method or #GST_RTSP_INVALID if the
method is unknown.
</return>
</function>

<function name="gst_rtsp_header_allow_multiple">
<description>
Check whether @field may appear multiple times in a message.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if multiple headers are allowed.

</return>
</function>

<function name="gst_rtsp_header_as_text">
<description>
Convert @field to a string.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
</parameters>
<return> a string representation of @field.
</return>
</function>

<function name="gst_rtsp_message_add_header">
<description>
Add a header with key @field and @value to @msg. This function takes a copy
of @value.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the header
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_append_headers">
<description>
Append the currently configured headers in @msg to the #GString @str suitable
for transmission.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_message_dump">
<description>
Dump the contents of @msg to stdout.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_message_free">
<description>
Free the memory used by @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_get_body">
<description>
Get the body of @msg. @data remains valid for as long as @msg is valid and
unchanged.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for the data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> location for the size of @data
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_message_get_header">
<description>
Get the @indx header value with key @field from @msg. The result in @value
stays valid as long as it remains present in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> pointer to hold the result
</parameter_description>
</parameter>
<parameter name="indx">
<parameter_description> the index of the header
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK when @field was found, #GST_RTSP_ENOTIMPL if the key
was not found.
</return>
</function>

<function name="gst_rtsp_message_get_type">
<description>
Get the message type of @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> the message type.
</return>
</function>

<function name="gst_rtsp_message_init">
<description>
Initialize @msg. This function is mostly used when @msg is allocated on the
stack. The reverse operation of this is gst_rtsp_message_unset().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_init_data">
<description>
Initialize a new data #GstRTSPMessage for @channel.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> a channel
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_init_request">
<description>
Initialize @msg as a request message with @method and @uri. To clear @msg
again, use gst_rtsp_message_unset().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> the request method to use
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the uri of the request
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_init_response">
<description>
Initialize @msg with @code and @reason.

When @reason is #NULL, the default reason for @code will be used.

When @request is not #NULL, the relevant headers will be copied to the new
response message.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> the status code
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> the status reason or #NULL
</parameter_description>
</parameter>
<parameter name="request">
<parameter_description> the request that triggered the response or #NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_new">
<description>
Create a new initialized #GstRTSPMessage. Free with gst_rtsp_message_free().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a location for the new #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_new_data">
<description>
Create a new data #GstRTSPMessage with @channel and store the
result message in @msg. Free with gst_rtsp_message_free().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a location for the new #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> the channel
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_new_request">
<description>
Create a new #GstRTSPMessage with @method and @uri and store the result
request message in @msg. Free with gst_rtsp_message_free().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a location for the new #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> the request method to use
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the uri of the request
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_new_response">
<description>
Create a new response #GstRTSPMessage with @code and @reason and store the
result message in @msg. Free with gst_rtsp_message_free().

When @reason is #NULL, the default reason for @code will be used.

When @request is not #NULL, the relevant headers will be copied to the new
response message.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a location for the new #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> the status code
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> the status reason or #NULL
</parameter_description>
</parameter>
<parameter name="request">
<parameter_description> the request that triggered the response or #NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_parse_data">
<description>
Parse the data message @msg and store the channel in @channel.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> location to hold the channel
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_parse_request">
<description>
Parse the request message @msg and store the values @method, @uri and
@version. The result locations can be #NULL if one is not interested in its
value.

@uri remains valid for as long as @msg is valid and unchanged.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> location to hold the method
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> location to hold the uri
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> location to hold the version
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_parse_response">
<description>
Parse the response message @msg and store the values @code, @reason and
@version. The result locations can be #NULL if one is not interested in its
value.

@reason remains valid for as long as @msg is valid and unchanged.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> location to hold the status code
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> location to hold the status reason
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> location to hold the version
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_remove_header">
<description>
Remove the @indx header with key @field from @msg. If @indx equals -1, all
headers will be removed.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
<parameter name="indx">
<parameter_description> the index of the header
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_message_set_body">
<description>
Set the body of @msg to a copy of @data.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_message_steal_body">
<description>
Take the body of @msg and store it in @data and @size. After this method,
the body and size of @msg will be set to #NULL and 0 respectively.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for the data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> location for the size of @data
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_message_take_body">
<description>
Set the body of @msg to @data and @size. This method takes ownership of
@data.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_message_take_header">
<description>
Add a header with key @field and @value to @msg. This function takes
ownership of @value.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the header
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.

</return>
</function>

<function name="gst_rtsp_message_unset">
<description>
Unset the contents of @msg so that it becomes an uninitialized
#GstRTSPMessage again. This function is mostly used in combination with 
gst_rtsp_message_init_request(), gst_rtsp_message_init_response() and
gst_rtsp_message_init_data() on stack allocated #GstRTSPMessage structures.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_method_as_text">
<description>
Convert @method to a string.


</description>
<parameters>
<parameter name="method">
<parameter_description> a #GstRTSPMethod
</parameter_description>
</parameter>
</parameters>
<return> a string representation of @method.
</return>
</function>

<function name="gst_rtsp_options_as_text">
<description>
Convert @options to a string.


</description>
<parameters>
<parameter name="options">
<parameter_description> one or more #GstRTSPMethod
</parameter_description>
</parameter>
</parameters>
<return> a new string of @options. g_free() after usage.

</return>
</function>

<function name="gst_rtsp_range_free">
<description>
Free the memory alocated by @range.

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GstRTSPTimeRange
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_range_parse">
<description>
Parse @rangestr to a #GstRTSPTimeRange.


</description>
<parameters>
<parameter name="rangestr">
<parameter_description> a range string to parse
</parameter_description>
</parameter>
<parameter name="range">
<parameter_description> location to hold the #GstRTSPTimeRange result
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_rtsp_range_to_string">
<description>
Convert @range into a string representation.


</description>
<parameters>
<parameter name="range">
<parameter_description> a #GstRTSPTimeRange
</parameter_description>
</parameter>
</parameters>
<return> The string representation of @range. g_free() after usage.

</return>
</function>

<function name="gst_rtsp_status_as_text">
<description>
Convert @code to a string.


</description>
<parameters>
<parameter name="code">
<parameter_description> a #GstRTSPStatusCode
</parameter_description>
</parameter>
</parameters>
<return> a string representation of @code.
</return>
</function>

<function name="gst_rtsp_strresult">
<description>
Convert @result in a human readable string.


</description>
<parameters>
<parameter name="result">
<parameter_description> a #GstRTSPResult
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string. g_free() after usage.
</return>
</function>

<function name="gst_rtsp_transport_as_text">
<description>
Convert @transport into a string that can be used to signal the transport in
an RTSP SETUP response.


</description>
<parameters>
<parameter name="transport">
<parameter_description> a #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> a string describing the RTSP transport or #NULL when the transport
is invalid.
</return>
</function>

<function name="gst_rtsp_transport_free">
<description>
Free the memory used by @transport.


</description>
<parameters>
<parameter name="transport">
<parameter_description> a #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_transport_get_manager">
<description>
Get the #GStreamer element that can handle the buffers transported over
@trans.

It is possible that there are several managers available, use @option to
selected one.

@manager will contain an element name or #NULL when no manager is
needed/available for @trans.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstRTSPTransMode
</parameter_description>
</parameter>
<parameter name="manager">
<parameter_description> location to hold the result
</parameter_description>
</parameter>
<parameter name="option">
<parameter_description> option index.
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK. 
</return>
</function>

<function name="gst_rtsp_transport_get_mime">
<description>
Get the mime type of the transport mode @trans. This mime type is typically
used to generate #GstCaps on buffers.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstRTSPTransMode
</parameter_description>
</parameter>
<parameter name="mime">
<parameter_description> location to hold the result
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK. 
</return>
</function>

<function name="gst_rtsp_transport_init">
<description>
Initialize @transport so that it can be used.


</description>
<parameters>
<parameter name="transport">
<parameter_description> a #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK. 
</return>
</function>

<function name="gst_rtsp_transport_new">
<description>
Allocate a new initialized #GstRTSPTransport. Use gst_rtsp_transport_free()
after usage.


</description>
<parameters>
<parameter name="transport">
<parameter_description> location to hold the new #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult. 
</return>
</function>

<function name="gst_rtsp_transport_parse">
<description>
Parse the RTSP transport string @str into @transport.


</description>
<parameters>
<parameter name="str">
<parameter_description> a transport string
</parameter_description>
</parameter>
<parameter name="transport">
<parameter_description> a #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_url_copy">
<description>
Make a copy of @url.


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
</parameters>
<return> a copy of @url. Free with gst_rtsp_url_free () after usage.

</return>
</function>

<function name="gst_rtsp_url_decode_path_components">
<description>
Splits the path of @url on '/' boundaries, decoding the resulting components,

The decoding performed by this routine is &quot;URI decoding&quot;, as defined in RFC
3986, commonly known as percent-decoding. For example, a string &quot;foo%2fbar&quot;
will decode to &quot;foo/bar&quot; -- the %2f being replaced by the corresponding byte
with hex value 0x2f. Note that there is no guarantee that the resulting byte
sequence is valid in any given encoding. As a special case, %00 is not
unescaped to NUL, as that would prematurely terminate the string.

Also note that since paths usually start with a slash, the first component
will usually be the empty string.


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
</parameters>
<return> a string vector. g_strfreev() after usage.

</return>
</function>

<function name="gst_rtsp_url_free">
<description>
Free the memory used by @url.

</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_url_get_port">
<description>
Get the port number of @url.


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> location to hold the port
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_url_get_request_uri">
<description>
Get a newly allocated string describing the request URI for @url. 


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
</parameters>
<return> a string with the request URI. g_free() after usage.
</return>
</function>

<function name="gst_rtsp_url_parse">
<description>
Parse the RTSP @urlstr into a newly allocated #GstRTSPUrl. Free after usage
with gst_rtsp_url_free().


</description>
<parameters>
<parameter name="urlstr">
<parameter_description> the url string to parse
</parameter_description>
</parameter>
<parameter name="url">
<parameter_description> location to hold the result.
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_url_set_port">
<description>
Set the port number in @url to @port.


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_version_as_text">
<description>
Convert @version to a string.


</description>
<parameters>
<parameter name="version">
<parameter_description> a #GstRTSPVersion
</parameter_description>
</parameter>
</parameters>
<return> a string representation of @version.
</return>
</function>

<function name="gst_rtsp_watch_attach">
<description>
Adds a #GstRTSPWatch to a context so that it will be executed within that context.


</description>
<parameters>
<parameter name="watch">
<parameter_description> a #GstRTSPWatch
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a GMainContext (if NULL, the default context will be used)
</parameter_description>
</parameter>
</parameters>
<return> the ID (greater than 0) for the watch within the GMainContext. 

</return>
</function>

<function name="gst_rtsp_watch_new">
<description>
Create a watch object for @conn. The functions provided in @funcs will be
called with @user_data when activity happened on the watch.

The new watch is usually created so that it can be attached to a
maincontext with gst_rtsp_watch_attach(). 

@conn must exist for the entire lifetime of the watch.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="funcs">
<parameter_description> watch functions
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @funcs
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> notify when @user_data is not referenced anymore
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPWatch that can be used for asynchronous RTSP
communication. Free with gst_rtsp_watch_unref () after usage.

</return>
</function>

<function name="gst_rtsp_watch_queue_data">
<description>
Queue @data for transmission in @watch. It will be transmitted when the
connection of the @watch becomes writable.

This function will take ownership of @data and g_free() it after use.

The return value of this function will be used as the id argument in the
message_sent callback.

Deprecated: Use gst_rtsp_watch_write_data()


</description>
<parameters>
<parameter name="watch">
<parameter_description> a #GstRTSPWatch
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to queue
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
</parameters>
<return> an id.

</return>
</function>

<function name="gst_rtsp_watch_queue_message">
<description>
Queue a @message for transmission in @watch. The contents of this
message will be serialized and transmitted when the connection of the
@watch becomes writable.

The return value of this function will be used as the id argument in the
message_sent callback.

Deprecated: Use gst_rtsp_watch_send_message()


</description>
<parameters>
<parameter name="watch">
<parameter_description> a #GstRTSPWatch
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> an id.

</return>
</function>

<function name="gst_rtsp_watch_reset">
<description>
Reset @watch, this is usually called after gst_rtsp_connection_do_tunnel()
when the file descriptors of the connection might have changed.


</description>
<parameters>
<parameter name="watch">
<parameter_description> a #GstRTSPWatch
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_watch_send_message">
<description>
Send a @message using the connection of the @watch. If it cannot be sent
immediately, it will be queued for transmission in @watch. The contents of
@message will then be serialized and transmitted when the connection of the
@watch becomes writable. In case the @message is queued, the ID returned in
@id will be non-zero and used as the ID argument in the message_sent
callback.


</description>
<parameters>
<parameter name="watch">
<parameter_description> a #GstRTSPWatch
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> location for a message ID or %NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.

</return>
</function>

<function name="gst_rtsp_watch_unref">
<description>
Decreases the reference count of @watch by one. If the resulting reference
count is zero the watch and associated memory will be destroyed.


</description>
<parameters>
<parameter name="watch">
<parameter_description> a #GstRTSPWatch
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_watch_write_data">
<description>
Write @data using the connection of the @watch. If it cannot be sent
immediately, it will be queued for transmission in @watch. The contents of
@message will then be serialized and transmitted when the connection of the
@watch becomes writable. In case the @message is queued, the ID returned in
@id will be non-zero and used as the ID argument in the message_sent
callback.

This function will take ownership of @data and g_free() it after use.


</description>
<parameters>
<parameter name="watch">
<parameter_description> a #GstRTSPWatch
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to queue
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> location for a message ID or %NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.

</return>
</function>

<function name="gst_sdp_address_is_multicast">
<description>
Check if the given @addr is a multicast address.


</description>
<parameters>
<parameter name="nettype">
<parameter_description> a network type
</parameter_description>
</parameter>
<parameter name="addrtype">
<parameter_description> an address type
</parameter_description>
</parameter>
<parameter name="addr">
<parameter_description> an address
</parameter_description>
</parameter>
</parameters>
<return> TRUE when @addr is multicast.

</return>
</function>

<function name="gst_sdp_media_add_attribute">
<description>
Add the attribute with @key and @value to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a value
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_media_add_bandwidth">
<description>
Add the bandwidth information with @bwtype and @bandwidth to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="bwtype">
<parameter_description> the bandwidth modifier type
</parameter_description>
</parameter>
<parameter name="bandwidth">
<parameter_description> the bandwidth in kilobits per second
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_media_add_connection">
<description>
Add the given connection parameters to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="nettype">
<parameter_description> the type of network. &quot;IN&quot; is defined to have the meaning
&quot;Internet&quot;.
</parameter_description>
</parameter>
<parameter name="addrtype">
<parameter_description> the type of address.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> the address
</parameter_description>
</parameter>
<parameter name="ttl">
<parameter_description> the time to live of the address
</parameter_description>
</parameter>
<parameter name="addr_number">
<parameter_description> the number of layers
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_add_format">
<description>
Add the format information to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_media_as_text">
<description>
Convert the contents of @media to a text string.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> A dynamically allocated string representing the media.
</return>
</function>

<function name="gst_sdp_media_attributes_len">
<description>
Get the number of attribute fields in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of attributes in @media.
</return>
</function>

<function name="gst_sdp_media_bandwidths_len">
<description>
Get the number of bandwidth fields in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of bandwidths in @media.
</return>
</function>

<function name="gst_sdp_media_connections_len">
<description>
Get the number of connection fields in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of connections in @media.
</return>
</function>

<function name="gst_sdp_media_formats_len">
<description>
Get the number of formats in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of formats in @media.
</return>
</function>

<function name="gst_sdp_media_free">
<description>
Free all resources allocated by @media. @media should not be used anymore after
this function. This function should be used when @media was dynamically
allocated with gst_sdp_media_new().


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_get_attribute">
<description>
Get the attribute at position @idx in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the #GstSDPAttribute at position @idx.
</return>
</function>

<function name="gst_sdp_media_get_attribute_val">
<description>
Get the first attribute value for @key in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
</parameters>
<return> the first attribute value for @key.
</return>
</function>

<function name="gst_sdp_media_get_attribute_val_n">
<description>
Get the @nth attribute value for @key in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the @nth attribute value.
</return>
</function>

<function name="gst_sdp_media_get_bandwidth">
<description>
Get the bandwidth at position @idx in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the #GstSDPBandwidth at position @idx.
</return>
</function>

<function name="gst_sdp_media_get_connection">
<description>
Get the connection at position @idx in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the #GstSDPConnection at position @idx.
</return>
</function>

<function name="gst_sdp_media_get_format">
<description>
Get the format information at position @idx in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the format at position @idx.
</return>
</function>

<function name="gst_sdp_media_get_information">
<description>
Get the information of @media


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the information of @media.
</return>
</function>

<function name="gst_sdp_media_get_key">
<description>
Get the encryption information from @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPKey.
</return>
</function>

<function name="gst_sdp_media_get_media">
<description>
Get the media description of @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the media description.
</return>
</function>

<function name="gst_sdp_media_get_num_ports">
<description>
Get the number of ports for @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of ports for @media.
</return>
</function>

<function name="gst_sdp_media_get_port">
<description>
Get the port number for @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the port number of @media.
</return>
</function>

<function name="gst_sdp_media_get_proto">
<description>
Get the transport protocol of @media


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the transport protocol of @media.
</return>
</function>

<function name="gst_sdp_media_init">
<description>
Initialize @media so that its contents are as if it was freshly allocated
with gst_sdp_media_new(). This function is mostly used to initialize a media
allocated on the stack. gst_sdp_media_uninit() undoes this operation.

When this function is invoked on newly allocated data (with malloc or on the
stack), its contents should be set to 0 before calling this function.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_new">
<description>
Allocate a new GstSDPMedia and store the result in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> pointer to new #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_set_information">
<description>
Set the media information of @media to @information.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="information">
<parameter_description> the media information
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_media_set_key">
<description>
Adds the encryption information to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the encryption type
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the encryption data
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_set_media">
<description>
Set the media description of @media to @med.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="med">
<parameter_description> the media description
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_media_set_port_info">
<description>
Set the port information in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port number
</parameter_description>
</parameter>
<parameter name="num_ports">
<parameter_description> the number of ports
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_media_set_proto">
<description>
Set the media transport protocol of @media to @proto.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="proto">
<parameter_description> the media transport protocol
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_media_uninit">
<description>
Free all resources allocated in @media. @media should not be used anymore after
this function. This function should be used when @media was allocated on the
stack and initialized with gst_sdp_media_init().


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_add_attribute">
<description>
Add the attribute with @key and @value to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value
</parameter_description>
</parameter>
</parameters>
<return> @GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_message_add_bandwidth">
<description>
Add the specified bandwidth information to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="bwtype">
<parameter_description> the bandwidth modifier type
</parameter_description>
</parameter>
<parameter name="bandwidth">
<parameter_description> the bandwidth in kilobits per second
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_add_email">
<description>
Add @email to the list of emails in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="email">
<parameter_description> an email
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_add_media">
<description>
Adds @media to the array of medias in @msg. This function takes ownership of
the contents of @media so that @media will have to be reinitialized with
gst_media_init() before it can be used again.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="media">
<parameter_description> a #GstSDPMedia to add
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_add_phone">
<description>
Add @phone to the list of phones in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="phone">
<parameter_description> a phone
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_add_time">
<description>
Add time information @start and @stop to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start time
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the stop time
</parameter_description>
</parameter>
<parameter name="repeat">
<parameter_description> the repeat times
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_add_zone">
<description>
Add time zone information to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="adj_time">
<parameter_description> the NTP time that a time zone adjustment happens
</parameter_description>
</parameter>
<parameter name="typed_time">
<parameter_description> the offset from the time when the session was first scheduled
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_as_text">
<description>
Convert the contents of @msg to a text string.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> A dynamically allocated string representing the SDP description.
</return>
</function>

<function name="gst_sdp_message_as_uri">
<description>
Creates a uri from @msg with the given @scheme. The uri has the format:

@scheme:///[#type=value *[&amp;type=value]]

Where each value is url encoded.


</description>
<parameters>
<parameter name="scheme">
<parameter_description> the uri scheme
</parameter_description>
</parameter>
<parameter name="msg">
<parameter_description> the #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a uri for @msg.

</return>
</function>

<function name="gst_sdp_message_attributes_len">
<description>
Get the number of attributes in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of attributes in @msg.
</return>
</function>

<function name="gst_sdp_message_bandwidths_len">
<description>
Get the number of bandwidth information in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of bandwidth information in @msg.
</return>
</function>

<function name="gst_sdp_message_dump">
<description>
Dump the parsed contents of @msg to stdout.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_emails_len">
<description>
Get the number of emails in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of emails in @msg.
</return>
</function>

<function name="gst_sdp_message_free">
<description>
Free all resources allocated by @msg. @msg should not be used anymore after
this function. This function should be used when @msg was dynamically
allocated with gst_sdp_message_new().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_get_attribute">
<description>
Get the attribute at position @idx in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the index
</parameter_description>
</parameter>
</parameters>
<return> the #GstSDPAttribute at position @idx.
</return>
</function>

<function name="gst_sdp_message_get_attribute_val">
<description>
Get the first attribute with key @key in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key
</parameter_description>
</parameter>
</parameters>
<return> the attribute value of the first attribute with @key.
</return>
</function>

<function name="gst_sdp_message_get_attribute_val_n">
<description>
Get the @nth attribute with key @key in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the index
</parameter_description>
</parameter>
</parameters>
<return> the attribute value of the @nth attribute with @key.
</return>
</function>

<function name="gst_sdp_message_get_bandwidth">
<description>
Get the bandwidth at index @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the bandwidth index
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPBandwidth.
</return>
</function>

<function name="gst_sdp_message_get_connection">
<description>
Get the connection of @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPConnection. The result remains valid as long as @msg is valid.
</return>
</function>

<function name="gst_sdp_message_get_email">
<description>
Get the email with number @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an email index
</parameter_description>
</parameter>
</parameters>
<return> the email at position @idx.
</return>
</function>

<function name="gst_sdp_message_get_information">
<description>
Get the information in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_get_key">
<description>
Get the encryption information from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPKey.
</return>
</function>

<function name="gst_sdp_message_get_media">
<description>
Get the media description at index @idx in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the index
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPMedia.
</return>
</function>

<function name="gst_sdp_message_get_origin">
<description>
Get the origin of @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPOrigin. The result remains valid as long as @msg is valid.
</return>
</function>

<function name="gst_sdp_message_get_phone">
<description>
Get the phone with number @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> a phone index
</parameter_description>
</parameter>
</parameters>
<return> the phone at position @idx.
</return>
</function>

<function name="gst_sdp_message_get_session_name">
<description>
Get the session name in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_get_time">
<description>
Get time information with index @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the time index
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPTime.
</return>
</function>

<function name="gst_sdp_message_get_uri">
<description>
Get the URI in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_get_version">
<description>
Get the version in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_get_zone">
<description>
Get time zone information with index @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the zone index
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPZone.
</return>
</function>

<function name="gst_sdp_message_init">
<description>
Initialize @msg so that its contents are as if it was freshly allocated
with gst_sdp_message_new(). This function is mostly used to initialize a message
allocated on the stack. gst_sdp_message_uninit() undoes this operation.

When this function is invoked on newly allocated data (with malloc or on the
stack), its contents should be set to 0 before calling this function.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_medias_len">
<description>
Get the number of media descriptions in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of media descriptions in @msg.
</return>
</function>

<function name="gst_sdp_message_new">
<description>
Allocate a new GstSDPMessage and store the result in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> pointer to new #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_parse_buffer">
<description>
Parse the contents of @size bytes pointed to by @data and store the result in
@msg.


</description>
<parameters>
<parameter name="data">
<parameter_description> the start of the buffer
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the buffer
</parameter_description>
</parameter>
<parameter name="msg">
<parameter_description> the result #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK on success.
</return>
</function>

<function name="gst_sdp_message_parse_uri">
<description>
Parse the null-terminated @uri and store the result in @msg.

The uri should be of the form:

scheme://[address[:ttl=ttl][:noa=noa]]/[sessionname]
[#type=value *[&amp;type=value]]

where value is url encoded. This looslely resembles
http://tools.ietf.org/html/draft-fujikawa-sdp-url-01


</description>
<parameters>
<parameter name="uri">
<parameter_description> the start of the uri
</parameter_description>
</parameter>
<parameter name="msg">
<parameter_description> the result #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK on success.

</return>
</function>

<function name="gst_sdp_message_phones_len">
<description>
Get the number of phones in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of phones in @msg.
</return>
</function>

<function name="gst_sdp_message_set_connection">
<description>
Configure the SDP connection in @msg with the given parameters.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="nettype">
<parameter_description> the type of network. &quot;IN&quot; is defined to have the meaning
&quot;Internet&quot;.
</parameter_description>
</parameter>
<parameter name="addrtype">
<parameter_description> the type of address.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> the address
</parameter_description>
</parameter>
<parameter name="ttl">
<parameter_description> the time to live of the address
</parameter_description>
</parameter>
<parameter name="addr_number">
<parameter_description> the number of layers
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_set_information">
<description>
Set the information in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="information">
<parameter_description> the information
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_set_key">
<description>
Adds the encryption information to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the encryption type
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the encryption data
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_set_origin">
<description>
Configure the SDP origin in @msg with the given parameters.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> the user name
</parameter_description>
</parameter>
<parameter name="sess_id">
<parameter_description> a session id
</parameter_description>
</parameter>
<parameter name="sess_version">
<parameter_description> a session version
</parameter_description>
</parameter>
<parameter name="nettype">
<parameter_description> a network type
</parameter_description>
</parameter>
<parameter name="addrtype">
<parameter_description> an address type
</parameter_description>
</parameter>
<parameter name="addr">
<parameter_description> an address
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_message_set_session_name">
<description>
Set the session name in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="session_name">
<parameter_description> the session name
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_set_uri">
<description>
Set the URI in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_set_version">
<description>
Set the version in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> the version
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_times_len">
<description>
Get the number of time information entries in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of time information entries in @msg.
</return>
</function>

<function name="gst_sdp_message_uninit">
<description>
Free all resources allocated in @msg. @msg should not be used anymore after
this function. This function should be used when @msg was allocated on the
stack and initialized with gst_sdp_message_init().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_zones_len">
<description>
Get the number of time zone information entries in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of time zone information entries in @msg.
</return>
</function>

<function name="gst_segment_clip">
<description>
Clip the given @start and @stop values to the segment boundaries given
in @segment. @start and @stop are compared and clipped to @segment 
start and stop values.

If the function returns FALSE, @start and @stop are known to fall
outside of @segment and @clip_start and @clip_stop are not updated.

When the function returns TRUE, @clip_start and @clip_stop will be
updated. If @clip_start or @clip_stop are different from @start or @stop
respectively, the region fell partially in the segment.

Note that when @stop is -1, @clip_stop will be set to the end of the
segment. Depending on the use case, this may or may not be what you want.


</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start position in the segment
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the stop position in the segment
</parameter_description>
</parameter>
<parameter name="clip_start">
<parameter_description> the clipped start position in the segment
</parameter_description>
</parameter>
<parameter name="clip_stop">
<parameter_description> the clipped stop position in the segment
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the given @start and @stop times fall partially or 
completely in @segment, FALSE if the values are completely outside 
of the segment.
</return>
</function>

<function name="gst_segment_copy">
<description>
Create a copy of given @segment.

Free-function: gst_segment_free


</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment
</parameter_description>
</parameter>
</parameters>
<return> a new #GstSegment, free with gst_segment_free().

</return>
</function>

<function name="gst_segment_free">
<description>
Free the allocated segment @segment.

</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_segment_init">
<description>
The start/last_stop positions are set to 0 and the stop/duration
fields are set to -1 (unknown). The default rate of 1.0 and no
flags are set.

Initialize @segment to its default values.

</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_segment_new">
<description>
Allocate a new #GstSegment structure and initialize it using 
gst_segment_init().

Free-function: gst_segment_free


</description>
<parameters>
</parameters>
<return> a new #GstSegment, free with gst_segment_free().
</return>
</function>

<function name="gst_segment_set_duration">
<description>
Set the duration of the segment to @duration. This function is mainly
used by elements that perform seeking and know the total duration of the
segment. 

This field should be set to allow seeking requests relative to the
duration.

</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration of the segment info or -1 if unknown.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_segment_set_last_stop">
<description>
Set the last observed stop position in the segment to @position.

This field should be set to allow seeking requests relative to the
current playing position.

</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_segment_set_newsegment">
<description>
Update the segment structure with the field values of a new segment event and
with a default applied_rate of 1.0.


</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="update">
<parameter_description> flag indicating a new segment is started or updated
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the rate of the segment.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the new start value
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the new stop value
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the new stream time
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_segment_set_newsegment_full">
<description>
Update the segment structure with the field values of a new segment event.

</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="update">
<parameter_description> flag indicating a new segment is started or updated
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the rate of the segment.
</parameter_description>
</parameter>
<parameter name="applied_rate">
<parameter_description> the applied rate of the segment.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the new start value
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the new stop value
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> the new stream time
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_segment_set_running_time">
<description>
Adjust the start/stop and accum values of @segment such that the next valid
buffer will be one with @running_time.


</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="running_time">
<parameter_description> the running_time in the segment
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the segment could be updated successfully. If %FALSE is
returned, @running_time is -1 or not in @segment.

</return>
</function>

<function name="gst_segment_set_seek">
<description>
Update the segment structure with the field values of a seek event (see
gst_event_new_seek()).

After calling this method, the segment field last_stop and time will
contain the requested new position in the segment. The new requested
position in the segment depends on @rate and @start_type and @stop_type. 

For positive @rate, the new position in the segment is the new @segment
start field when it was updated with a @start_type different from
#GST_SEEK_TYPE_NONE. If no update was performed on @segment start position
(#GST_SEEK_TYPE_NONE), @start is ignored and @segment last_stop is
unmodified.

For negative @rate, the new position in the segment is the new @segment
stop field when it was updated with a @stop_type different from
#GST_SEEK_TYPE_NONE. If no stop was previously configured in the segment, the
duration of the segment will be used to update the stop position.
If no update was performed on @segment stop position (#GST_SEEK_TYPE_NONE),
@stop is ignored and @segment last_stop is unmodified.

The applied rate of the segment will be set to 1.0 by default.
If the caller can apply a rate change, it should update @segment
rate and applied_rate after calling this function.

@update will be set to TRUE if a seek should be performed to the segment 
last_stop field. This field can be FALSE if, for example, only the @rate
has been changed but not the playback position.

</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> the rate of the segment.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> the seek flags for the segment
</parameter_description>
</parameter>
<parameter name="start_type">
<parameter_description> the seek method
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the seek start value
</parameter_description>
</parameter>
<parameter name="stop_type">
<parameter_description> the seek method
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the seek stop value
</parameter_description>
</parameter>
<parameter name="update">
<parameter_description> boolean holding whether last_stop was updated.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_segment_to_position">
<description>
Convert @running_time into a position in the segment so that
gst_segment_to_running_time() with that position returns @running_time.


</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="running_time">
<parameter_description> the running_time in the segment
</parameter_description>
</parameter>
</parameters>
<return> the position in the segment for @running_time. This function returns
-1 when @running_time is -1 or when it is not inside @segment.

</return>
</function>

<function name="gst_segment_to_running_time">
<description>
Translate @position to the total running time using the currently configured 
and previously accumulated segments. Position is a value between @segment
start and stop time.

This function is typically used by elements that need to synchronize to the
global clock in a pipeline. The runnning time is a constantly increasing value
starting from 0. When gst_segment_init() is called, this value will reset to
0.

This function returns -1 if the position is outside of @segment start and stop.


</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position in the segment
</parameter_description>
</parameter>
</parameters>
<return> the position as the total running time or -1 when an invalid position
was given.
</return>
</function>

<function name="gst_segment_to_stream_time">
<description>
Translate @position to stream time using the currently configured 
segment. The @position value must be between @segment start and
stop value. 

This function is typically used by elements that need to operate on
the stream time of the buffers it receives, such as effect plugins.
In those use cases, @position is typically the buffer timestamp or 
clock time that one wants to convert to the stream time.
The stream time is always between 0 and the total duration of the 
media stream. 


</description>
<parameters>
<parameter name="segment">
<parameter_description> a #GstSegment structure.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format of the segment.
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> the position in the segment
</parameter_description>
</parameter>
</parameters>
<return> the position in stream_time or -1 when an invalid position
was given.
</return>
</function>

<function name="gst_segtrap_is_enabled">
<description>
Some functions in the GStreamer core might install a custom SIGSEGV handler
to better catch and report errors to the application. Currently this feature
is enabled by default when loading plugins.

Applications might want to disable this behaviour with the
gst_segtrap_set_enabled() function. This is typically done if the application
wants to install its own handler without GStreamer interfering.


</description>
<parameters>
</parameters>
<return> %TRUE if GStreamer is allowed to install a custom SIGSEGV handler.

</return>
</function>

<function name="gst_segtrap_set_enabled">
<description>
Applications might want to disable/enable the SIGSEGV handling of
the GStreamer core. See gst_segtrap_is_enabled() for more information.


</description>
<parameters>
<parameter name="enabled">
<parameter_description> whether a custom SIGSEGV handler should be installed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_static_caps_get">
<description>
Converts a #GstStaticCaps to a #GstCaps.


</description>
<parameters>
<parameter name="static_caps">
<parameter_description> the #GstStaticCaps to convert
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the #GstCaps. Unref after usage.
Since the core holds an additional ref to the returned caps,
use gst_caps_make_writable() on the returned caps to modify it.
</return>
</function>

<function name="gst_static_pad_template_get">
<description>
Converts a #GstStaticPadTemplate into a #GstPadTemplate.


</description>
<parameters>
<parameter name="pad_template">
<parameter_description> the static pad template
</parameter_description>
</parameter>
</parameters>
<return> a new #GstPadTemplate.
</return>
</function>

<function name="gst_static_pad_template_get_caps">
<description>
Gets the capabilities of the static pad template.


</description>
<parameters>
<parameter name="templ">
<parameter_description> a #GstStaticPadTemplate to get capabilities of.
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps of the static pad template.
Unref after usage. Since the core holds an additional
ref to the returned caps, use gst_caps_make_writable()
on the returned caps to modify it.
</return>
</function>

<function name="gst_stream_volume_convert_volume">
<description>

</description>
<parameters>
<parameter name="from">
<parameter_description> #GstStreamVolumeFormat to convert from
</parameter_description>
</parameter>
<parameter name="to">
<parameter_description> #GstStreamVolumeFormat to convert to
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Volume in @from format that should be converted
</parameter_description>
</parameter>
</parameters>
<return> the converted volume

</return>
</function>

<function name="gst_stream_volume_get_mute">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description> #GstStreamVolume that should be used
</parameter_description>
</parameter>
</parameters>
<return> Returns %TRUE if the stream is muted

</return>
</function>

<function name="gst_stream_volume_get_volume">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description> #GstStreamVolume that should be used
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> #GstStreamVolumeFormat which should be returned
</parameter_description>
</parameter>
</parameters>
<return> The current stream volume as linear factor

</return>
</function>

<function name="gst_stream_volume_set_mute">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description> #GstStreamVolume that should be used
</parameter_description>
</parameter>
<parameter name="mute">
<parameter_description> Mute state that should be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_stream_volume_set_volume">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description> #GstStreamVolume that should be used
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> #GstStreamVolumeFormat of @val
</parameter_description>
</parameter>
<parameter name="val">
<parameter_description> Linear volume factor that should be set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_copy">
<description>
Duplicates a #GstStructure and all its fields and values.

Free-function: gst_structure_free


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure to duplicate
</parameter_description>
</parameter>
</parameters>
<return> a new #GstStructure.
</return>
</function>

<function name="gst_structure_empty_new">
<description>
Creates a new, empty #GstStructure with the given @name.

See gst_structure_set_name() for constraints on the @name parameter.

Free-function: gst_structure_free


</description>
<parameters>
<parameter name="name">
<parameter_description> name of new structure
</parameter_description>
</parameter>
</parameters>
<return> a new, empty #GstStructure
</return>
</function>

<function name="gst_structure_fixate_field_boolean">
<description>
Fixates a #GstStructure by changing the given @field_name field to the given
@target boolean if that field is not fixed yet.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field_name">
<parameter_description> a field in @structure
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target value of the fixation
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure could be fixated
</return>
</function>

<function name="gst_structure_fixate_field_nearest_double">
<description>
Fixates a #GstStructure by changing the given field to the nearest
double to @target that is a subset of the existing field.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field_name">
<parameter_description> a field in @structure
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target value of the fixation
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure could be fixated
</return>
</function>

<function name="gst_structure_fixate_field_nearest_fraction">
<description>
Fixates a #GstStructure by changing the given field to the nearest
fraction to @target_numerator/@target_denominator that is a subset
of the existing field.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field_name">
<parameter_description> a field in @structure
</parameter_description>
</parameter>
<parameter name="target_numerator">
<parameter_description> The numerator of the target value of the fixation
</parameter_description>
</parameter>
<parameter name="target_denominator">
<parameter_description> The denominator of the target value of the fixation
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure could be fixated
</return>
</function>

<function name="gst_structure_fixate_field_nearest_int">
<description>
Fixates a #GstStructure by changing the given field to the nearest
integer to @target that is a subset of the existing field.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field_name">
<parameter_description> a field in @structure
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target value of the fixation
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure could be fixated
</return>
</function>

<function name="gst_structure_fixate_field_string">
<description>
Fixates a #GstStructure by changing the given @field_name field to the given
@target string if that field is not fixed yet.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field_name">
<parameter_description> a field in @structure
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the target value of the fixation
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure could be fixated

</return>
</function>

<function name="gst_structure_foreach">
<description>
Calls the provided function once for each field in the #GstStructure. The
function must not modify the fields. Also see gst_structure_map_in_place().


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function to call for each field
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> private data
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the supplied function returns TRUE For each of the fields,
FALSE otherwise.
</return>
</function>

<function name="gst_structure_free">
<description>
Frees a #GstStructure and all its fields and values. The structure must not
have a parent when this function is called.

</description>
<parameters>
<parameter name="structure">
<parameter_description> the #GstStructure to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_from_string">
<description>
Creates a #GstStructure from a string representation.
If end is not NULL, a pointer to the place inside the given string
where parsing ended will be returned.

Free-function: gst_structure_free


</description>
<parameters>
<parameter name="string">
<parameter_description> a string representation of a #GstStructure.
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> pointer to store the end of the string in.
</parameter_description>
</parameter>
</parameters>
<return> a new #GstStructure or NULL when the string could
not be parsed. Free with gst_structure_free() after use.
</return>
</function>

<function name="gst_structure_get">
<description>
Parses the variable arguments and reads fields from @structure accordingly.
Variable arguments should be in the form field name, field type
(as a GType), pointer(s) to a variable(s) to hold the return value(s).
The last variable argument should be NULL.

For refcounted (mini)objects you will acquire your own reference which
you must release with a suitable _unref() when no longer needed. For
strings and boxed types you will acquire a copy which you will need to
release with either g_free() or the suiteable function for the boxed type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="first_fieldname">
<parameter_description> the name of the first field to read
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return> FALSE if there was a problem reading any of the fields (e.g.
because the field requested did not exist, or was of a type other
than the type specified), otherwise TRUE.

</return>
</function>

<function name="gst_structure_get_boolean">
<description>
Sets the boolean pointed to by @value corresponding to the value of the
given field.  Caller is responsible for making sure the field exists
and has the correct type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to a #gboolean to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain a boolean, this
function returns FALSE.
</return>
</function>

<function name="gst_structure_get_clock_time">
<description>
Sets the clock time pointed to by @value corresponding to the clock time
of the given field.  Caller is responsible for making sure the field exists
and has the correct type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to a #GstClockTime to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain a #GstClockTime, this
function returns FALSE.
</return>
</function>

<function name="gst_structure_get_date">
<description>
Sets the date pointed to by @value corresponding to the date of the
given field.  Caller is responsible for making sure the field exists
and has the correct type.

On success @value will point to a newly-allocated copy of the date which
should be freed with g_date_free() when no longer needed (note: this is
inconsistent with e.g. gst_structure_get_string() which doesn't return a
copy of the string).


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to a #GDate to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain a data, this function
returns FALSE.
</return>
</function>

<function name="gst_structure_get_date_time">
<description>
Sets the datetime pointed to by @value corresponding to the datetime of the
given field. Caller is responsible for making sure the field exists
and has the correct type.

On success @value will point to a reference of the datetime which
should be unreffed with gst_date_time_unref() when no longer needed
(note: this is inconsistent with e.g. gst_structure_get_string()
which doesn't return a copy of the string).


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to a #GstDateTime to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain a data, this function
returns FALSE.

</return>
</function>

<function name="gst_structure_get_double">
<description>
Sets the double pointed to by @value corresponding to the value of the
given field.  Caller is responsible for making sure the field exists
and has the correct type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to a gdouble to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain a double, this
function returns FALSE.
</return>
</function>

<function name="gst_structure_get_enum">
<description>
Sets the int pointed to by @value corresponding to the value of the
given field.  Caller is responsible for making sure the field exists,
has the correct type and that the enumtype is correct.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="enumtype">
<parameter_description> the enum type of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to an int to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain an enum of the given
type, this function returns FALSE.
</return>
</function>

<function name="gst_structure_get_field_type">
<description>
Finds the field with the given name, and returns the type of the
value it contains.  If the field is not found, G_TYPE_INVALID is
returned.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field
</parameter_description>
</parameter>
</parameters>
<return> the #GValue of the field
</return>
</function>

<function name="gst_structure_get_fourcc">
<description>
Sets the Fourcc pointed to by @value corresponding to the value of the
given field.  Caller is responsible for making sure the field exists
and has the correct type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to a 32bit unsigned int to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain a fourcc, this function
returns FALSE.
</return>
</function>

<function name="gst_structure_get_fraction">
<description>
Sets the integers pointed to by @value_numerator and @value_denominator
corresponding to the value of the given field.  Caller is responsible
for making sure the field exists and has the correct type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value_numerator">
<parameter_description> a pointer to an int to set
</parameter_description>
</parameter>
<parameter name="value_denominator">
<parameter_description> a pointer to an int to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the values could be set correctly. If there was no field
with @fieldname or the existing field did not contain a GstFraction, this
function returns FALSE.
</return>
</function>

<function name="gst_structure_get_int">
<description>
Sets the int pointed to by @value corresponding to the value of the
given field.  Caller is responsible for making sure the field exists
and has the correct type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to an int to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain an int, this function
returns %FALSE.
</return>
</function>

<function name="gst_structure_get_name">
<description>
Get the name of @structure as a string.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
</parameters>
<return> the name of the structure.
</return>
</function>

<function name="gst_structure_get_name_id">
<description>
Get the name of @structure as a GQuark.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
</parameters>
<return> the quark representing the name of the structure.
</return>
</function>

<function name="gst_structure_get_string">
<description>
Finds the field corresponding to @fieldname, and returns the string
contained in the field's value.  Caller is responsible for making
sure the field exists and has the correct type.

The string should not be modified, and remains valid until the next
call to a gst_structure_*() function with the given structure.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
</parameters>
<return> a pointer to the string or NULL when the field did not exist
or did not contain a string.
</return>
</function>

<function name="gst_structure_get_uint">
<description>
Sets the uint pointed to by @value corresponding to the value of the
given field.  Caller is responsible for making sure the field exists
and has the correct type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a pointer to a uint to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the value could be set correctly. If there was no field
with @fieldname or the existing field did not contain a uint, this function
returns %FALSE.

</return>
</function>

<function name="gst_structure_get_valist">
<description>
Parses the variable arguments and reads fields from @structure accordingly.
valist-variant of gst_structure_get(). Look at the documentation of
gst_structure_get() for more details.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="first_fieldname">
<parameter_description> the name of the first field to read
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return> TRUE, or FALSE if there was a problem reading any of the fields

</return>
</function>

<function name="gst_structure_get_value">
<description>
Get the value of the field with name @fieldname.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to get
</parameter_description>
</parameter>
</parameters>
<return> the #GValue corresponding to the field with the given name.
</return>
</function>

<function name="gst_structure_has_field">
<description>
Check if @structure contains a field named @fieldname.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure contains a field with the given name
</return>
</function>

<function name="gst_structure_has_field_typed">
<description>
Check if @structure contains a field named @fieldname and with GType @type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of a field
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of a value
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure contains a field with the given name and type
</return>
</function>

<function name="gst_structure_has_name">
<description>
Checks if the structure has the given name


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> structure name to check for
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @name matches the name of the structure.
</return>
</function>

<function name="gst_structure_id_empty_new">
<description>
Creates a new, empty #GstStructure with the given name as a GQuark.

Free-function: gst_structure_free


</description>
<parameters>
<parameter name="quark">
<parameter_description> name of new structure
</parameter_description>
</parameter>
</parameters>
<return> a new, empty #GstStructure
</return>
</function>

<function name="gst_structure_id_get">
<description>
Parses the variable arguments and reads fields from @structure accordingly.
Variable arguments should be in the form field id quark, field type
(as a GType), pointer(s) to a variable(s) to hold the return value(s).
The last variable argument should be NULL (technically it should be a
0 quark, but we require NULL so compilers that support it can check for
the NULL terminator and warn if it's not there).

This function is just like gst_structure_get() only that it is slightly
more efficient since it saves the string-to-quark lookup in the global
quark hashtable.

For refcounted (mini)objects you will acquire your own reference which
you must release with a suitable _unref() when no longer needed. For
strings and boxed types you will acquire a copy which you will need to
release with either g_free() or the suiteable function for the boxed type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="first_field_id">
<parameter_description> the quark of the first field to read
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return> FALSE if there was a problem reading any of the fields (e.g.
because the field requested did not exist, or was of a type other
than the type specified), otherwise TRUE.

</return>
</function>

<function name="gst_structure_id_get_valist">
<description>
Parses the variable arguments and reads fields from @structure accordingly.
valist-variant of gst_structure_id_get(). Look at the documentation of
gst_structure_id_get() for more details.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="first_field_id">
<parameter_description> the quark of the first field to read
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return> TRUE, or FALSE if there was a problem reading any of the fields

</return>
</function>

<function name="gst_structure_id_get_value">
<description>
Get the value of the field with GQuark @field.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> the #GQuark of the field to get
</parameter_description>
</parameter>
</parameters>
<return> the #GValue corresponding to the field with the given name
identifier.
</return>
</function>

<function name="gst_structure_id_has_field">
<description>
Check if @structure contains a field named @field.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> #GQuark of the field name
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure contains a field with the given name

</return>
</function>

<function name="gst_structure_id_has_field_typed">
<description>
Check if @structure contains a field named @field and with GType @type.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> #GQuark of the field name
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of a value
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the structure contains a field with the given name and type

</return>
</function>

<function name="gst_structure_id_new">
<description>
Creates a new #GstStructure with the given name as a GQuark, followed by
fieldname quark, GType, argument(s) &quot;triplets&quot; in the same format as
gst_structure_id_set(). Basically a convenience wrapper around
gst_structure_id_empty_new() and gst_structure_id_set().

The last variable argument must be NULL (or 0).

Free-function: gst_structure_free


</description>
<parameters>
<parameter name="name_quark">
<parameter_description> name of new structure
</parameter_description>
</parameter>
<parameter name="field_quark">
<parameter_description> the GQuark for the name of the field to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return> a new #GstStructure

</return>
</function>

<function name="gst_structure_id_set">
<description>
Identical to gst_structure_set, except that field names are
passed using the GQuark for the field name. This allows more efficient
setting of the structure if the caller already knows the associated
quark values.
The last variable argument must be NULL.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the GQuark for the name of the field to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_id_set_valist">
<description>
va_list form of gst_structure_id_set().


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to set
</parameter_description>
</parameter>
<parameter name="varargs">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_id_set_value">
<description>
Sets the field with the given GQuark @field to @value.  If the field
does not exist, it is created.  If the field exists, the previous
value is replaced and freed.

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GQuark representing a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value of the field
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_id_take_value">
<description>
Sets the field with the given GQuark @field to @value.  If the field
does not exist, it is created.  If the field exists, the previous
value is replaced and freed.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GQuark representing a field
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value of the field
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_map_in_place">
<description>
Calls the provided function once for each field in the #GstStructure. In
contrast to gst_structure_foreach(), the function may modify but not delete the
fields. The structure must be mutable.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function to call for each field
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> private data
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the supplied function returns TRUE For each of the fields,
FALSE otherwise.
</return>
</function>

<function name="gst_structure_n_fields">
<description>
Get the number of fields in the structure.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
</parameters>
<return> the number of fields in the structure
</return>
</function>

<function name="gst_structure_new">
<description>
Creates a new #GstStructure with the given name.  Parses the
list of variable arguments and sets fields to the values listed.
Variable arguments should be passed as field name, field type,
and value.  Last variable argument should be NULL.

Free-function: gst_structure_free


</description>
<parameters>
<parameter name="name">
<parameter_description> name of new structure
</parameter_description>
</parameter>
<parameter name="firstfield">
<parameter_description> name of first field to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> additional arguments
</parameter_description>
</parameter>
</parameters>
<return> a new #GstStructure
</return>
</function>

<function name="gst_structure_new_valist">
<description>
Creates a new #GstStructure with the given @name.  Structure fields
are set according to the varargs in a manner similar to
gst_structure_new().

See gst_structure_set_name() for constraints on the @name parameter.

Free-function: gst_structure_free


</description>
<parameters>
<parameter name="name">
<parameter_description> name of new structure
</parameter_description>
</parameter>
<parameter name="firstfield">
<parameter_description> name of first field to set
</parameter_description>
</parameter>
<parameter name="varargs">
<parameter_description> variable argument list
</parameter_description>
</parameter>
</parameters>
<return> a new #GstStructure
</return>
</function>

<function name="gst_structure_nth_field_name">
<description>
Get the name of the given field number, counting from 0 onwards.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> the index to get the name of
</parameter_description>
</parameter>
</parameters>
<return> the name of the given field number
</return>
</function>

<function name="gst_structure_remove_all_fields">
<description>
Removes all fields in a GstStructure.

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_remove_field">
<description>
Removes the field with the given name.  If the field with the given
name does not exist, the structure is unchanged.

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_remove_fields">
<description>
Removes the fields with the given names. If a field does not exist, the
argument is ignored.

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to remove
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> NULL-terminated list of more fieldnames to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_remove_fields_valist">
<description>
va_list form of gst_structure_remove_fields().

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to remove
</parameter_description>
</parameter>
<parameter name="varargs">
<parameter_description> NULL-terminated list of more fieldnames to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_set">
<description>
Parses the variable arguments and sets fields accordingly.
Variable arguments should be in the form field name, field type
(as a GType), value(s).  The last variable argument should be NULL.

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_set_name">
<description>
Sets the name of the structure to the given @name.  The string
provided is copied before being used. It must not be empty, start with a
letter and can be followed by letters, numbers and any of &quot;/-_.:&quot;.

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the new name of the structure
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_set_parent_refcount">
<description>
Sets the parent_refcount field of #GstStructure. This field is used to
determine whether a structure is mutable or not. This function should only be
called by code implementing parent objects of #GstStructure, as described in
the MT Refcounting section of the design documents.

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="refcount">
<parameter_description> a pointer to the parent's refcount
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_set_valist">
<description>
va_list form of gst_structure_set().

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to set
</parameter_description>
</parameter>
<parameter name="varargs">
<parameter_description> variable arguments
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_set_value">
<description>
Sets the field with the given name @field to @value.  If the field
does not exist, it is created.  If the field exists, the previous
value is replaced and freed.

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value of the field
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_take_value">
<description>
Sets the field with the given name @field to @value.  If the field
does not exist, it is created.  If the field exists, the previous
value is replaced and freed. The function will take ownership of @value.


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the name of the field to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value of the field
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_structure_to_string">
<description>
Converts @structure to a human-readable string representation.

For debugging purposes its easier to do something like this:
|[
GST_LOG (&quot;structure is %&quot; GST_PTR_FORMAT, structure);
]|
This prints the structure in human readble form.

Free-function: g_free


</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
</parameters>
<return> (transfer full)L a pointer to string allocated by g_malloc().
g_free() after usage.
</return>
</function>

<function name="gst_system_clock_obtain">
<description>
Get a handle to the default system clock. The refcount of the
clock will be increased so you need to unref the clock after
usage.


</description>
<parameters>
</parameters>
<return> the default clock.

MT safe.
</return>
</function>

<function name="gst_tag_exists">
<description>
Checks if the given type is already registered.


</description>
<parameters>
<parameter name="tag">
<parameter_description> name of the tag
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the type is already registered
</return>
</function>

<function name="gst_tag_freeform_string_to_utf8">
<description>
Convenience function to read a string with unknown character encoding. If
the string is already in UTF-8 encoding, it will be returned right away.
If not it tries to detect byte-order-mark for UTF-16/32 cases and use that.
Otherwise, the environment will be searched for a number of environment
variables (whose names are specified in the NULL-terminated string array
@env_vars) containing a list of character encodings to try/use. If none
are specified, the current locale will be tried. If that also doesn't work,
WINDOWS-1252/ISO-8859-1 is assumed (which will almost always succeed).


</description>
<parameters>
<parameter name="data">
<parameter_description> string data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> length of string data, or -1 if the string is NUL-terminated
</parameter_description>
</parameter>
<parameter name="env_vars">
<parameter_description> a NULL-terminated string array of environment variable names,
or NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string in UTF-8 encoding, or NULL

</return>
</function>

<function name="gst_tag_from_id3_tag">
<description>
Looks up the GStreamer tag for a ID3v2 tag.


</description>
<parameters>
<parameter name="id3_tag">
<parameter_description> ID3v2 tag to convert to GStreamer tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding GStreamer tag or NULL if none exists.
</return>
</function>

<function name="gst_tag_from_id3_user_tag">
<description>
Looks up the GStreamer tag for an ID3v2 user tag (e.g. description in
TXXX frame or owner in UFID frame).


</description>
<parameters>
<parameter name="type">
<parameter_description> the type of ID3v2 user tag (e.g. &quot;TXXX&quot; or &quot;UDIF&quot;)
</parameter_description>
</parameter>
<parameter name="id3_user_tag">
<parameter_description> ID3v2 user tag to convert to GStreamer tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding GStreamer tag or NULL if none exists.
</return>
</function>

<function name="gst_tag_from_vorbis_tag">
<description>
Looks up the GStreamer tag for a vorbiscomment tag.


</description>
<parameters>
<parameter name="vorbis_tag">
<parameter_description> vorbiscomment tag to convert to GStreamer tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding GStreamer tag or NULL if none exists.
</return>
</function>

<function name="gst_tag_get_description">
<description>
Returns the human-readable description of this tag, You must not change or
free this string.


</description>
<parameters>
<parameter name="tag">
<parameter_description> the tag
</parameter_description>
</parameter>
</parameters>
<return> the human-readable description of this tag
</return>
</function>

<function name="gst_tag_get_flag">
<description>
Gets the flag of @tag.


</description>
<parameters>
<parameter name="tag">
<parameter_description> the tag
</parameter_description>
</parameter>
</parameters>
<return> the flag of this tag.
</return>
</function>

<function name="gst_tag_get_language_code_iso_639_1">
<description>
Returns two-letter ISO-639-1 language code given a three-letter ISO-639-2
language code or two-letter ISO-639-1 language code (both are accepted for
convenience).

Language codes are case-sensitive and expected to be lower case.


</description>
<parameters>
<parameter name="lang_code">
<parameter_description> ISO-639 language code (e.g. &quot;deu&quot; or &quot;ger&quot; or &quot;de&quot;)
</parameter_description>
</parameter>
</parameters>
<return> two-letter ISO-639-1 language code string that maps to @lang_code,
or NULL if no mapping is known. The returned string must not be
modified or freed.

</return>
</function>

<function name="gst_tag_get_language_code_iso_639_2B">
<description>
Returns three-letter ISO-639-2 &quot;bibliographic&quot; language code given a
two-letter ISO-639-1 language code or a three-letter ISO-639-2 language
code (both are accepted for convenience).

The &quot;bibliographic&quot; code is derived from the English name of the language
(e.g. &quot;ger&quot; for German instead of &quot;de&quot; or &quot;deu&quot;). In most scenarios, the
&quot;terminological&quot; codes are prefered.

Language codes are case-sensitive and expected to be lower case.


</description>
<parameters>
<parameter name="lang_code">
<parameter_description> ISO-639 language code (e.g. &quot;deu&quot; or &quot;ger&quot; or &quot;de&quot;)
</parameter_description>
</parameter>
</parameters>
<return> three-letter ISO-639-2 language code string that maps to @lang_code,
or NULL if no mapping is known. The returned string must not be
modified or freed.

</return>
</function>

<function name="gst_tag_get_language_code_iso_639_2T">
<description>
Returns three-letter ISO-639-2 &quot;terminological&quot; language code given a
two-letter ISO-639-1 language code or a three-letter ISO-639-2 language
code (both are accepted for convenience).

The &quot;terminological&quot; code is derived from the local name of the language
(e.g. &quot;deu&quot; for German instead of &quot;ger&quot;). In most scenarios, the
&quot;terminological&quot; codes are prefered over the &quot;bibliographic&quot; ones.

Language codes are case-sensitive and expected to be lower case.


</description>
<parameters>
<parameter name="lang_code">
<parameter_description> ISO-639 language code (e.g. &quot;deu&quot; or &quot;ger&quot; or &quot;de&quot;)
</parameter_description>
</parameter>
</parameters>
<return> three-letter ISO-639-2 language code string that maps to @lang_code,
or NULL if no mapping is known. The returned string must not be
modified or freed.

</return>
</function>

<function name="gst_tag_get_language_codes">
<description>
Returns a list of known language codes (in form of two-letter ISO-639-1
codes). This is useful for UIs to build a list of available languages for
tagging purposes (e.g. to tag an audio track appropriately in a video or
audio editor).


</description>
<parameters>
</parameters>
<return> NULL-terminated string array with two-letter language codes. Free
with g_strfreev() when no longer needed.

</return>
</function>

<function name="gst_tag_get_language_name">
<description>
Returns the name of the language given an ISO-639 language code, such
as often found in a GST_TAG_LANGUAGE tag. The name will be translated
according to the current locale (if the library was built against the
iso-codes package, otherwise the English name will be returned).

Language codes are case-sensitive and expected to be lower case.


</description>
<parameters>
<parameter name="language_code">
<parameter_description> two or three-letter ISO-639 language code
</parameter_description>
</parameter>
</parameters>
<return> language name in UTF-8 format, or NULL if @language_code could
not be mapped to a language name. The returned string must not be
modified and does not need to freed; it will stay valid until the
application is terminated.

</return>
</function>

<function name="gst_tag_get_nick">
<description>
Returns the human-readable name of this tag, You must not change or free
this string.


</description>
<parameters>
<parameter name="tag">
<parameter_description> the tag
</parameter_description>
</parameter>
</parameters>
<return> the human-readable name of this tag
</return>
</function>

<function name="gst_tag_get_type">
<description>
Gets the #GType used for this tag.


</description>
<parameters>
<parameter name="tag">
<parameter_description> the tag
</parameter_description>
</parameter>
</parameters>
<return> the #GType of this tag
</return>
</function>

<function name="gst_tag_id3_genre_count">
<description>
Gets the number of ID3v1 genres that can be identified. Winamp genres are 
included.


</description>
<parameters>
</parameters>
<return> the number of ID3v1 genres that can be identified
</return>
</function>

<function name="gst_tag_id3_genre_get">
<description>
Gets the ID3v1 genre name for a given ID.


</description>
<parameters>
<parameter name="id">
<parameter_description> ID of genre to query
</parameter_description>
</parameter>
</parameters>
<return> the genre or NULL if no genre is associated with that ID.
</return>
</function>

<function name="gst_tag_image_data_to_image_buffer">
<description>
Helper function for tag-reading plugins to create a #GstBuffer suitable to
add to a #GstTagList as an image tag (such as #GST_TAG_IMAGE or
#GST_TAG_PREVIEW_IMAGE) from the encoded image data and an (optional) image
type.

Background: cover art and other images in tags are usually stored as a
blob of binary image data, often accompanied by a MIME type or some other
content type string (e.g. 'png', 'jpeg', 'jpg'). Sometimes there is also an
'image type' to indicate what kind of image this is (e.g. front cover,
back cover, artist, etc.). The image data may also be an URI to the image
rather than the image itself.

In GStreamer, image tags are #GstBuffer&lt;!-- --&gt;s containing the raw image
data, with the buffer caps describing the content type of the image
(e.g. image/jpeg, image/png, text/uri-list). The buffer caps may contain
an additional 'image-type' field of #GST_TYPE_TAG_IMAGE_TYPE to describe
the type of image (front cover, back cover etc.). #GST_TAG_PREVIEW_IMAGE
tags should not carry an image type, their type is already indicated via
the special tag name.

This function will do various checks and typefind the encoded image
data (we can't trust the declared mime type).


</description>
<parameters>
<parameter name="image_data">
<parameter_description> the (encoded) image
</parameter_description>
</parameter>
<parameter name="image_data_len">
<parameter_description> the length of the encoded image data at @image_data
</parameter_description>
</parameter>
<parameter name="image_type">
<parameter_description> type of the image, or #GST_TAG_IMAGE_TYPE_UNDEFINED. Pass
#GST_TAG_IMAGE_TYPE_NONE if no image type should be set at all (e.g.
for preview images)
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated image buffer for use in tag lists, or NULL

</return>
</function>

<function name="gst_tag_is_fixed">
<description>
Checks if the given tag is fixed. A fixed tag can only contain one value.
Unfixed tags can contain lists of values.


</description>
<parameters>
<parameter name="tag">
<parameter_description> tag to check
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if the given tag is fixed.
</return>
</function>

<function name="gst_tag_list_add">
<description>
Sets the values for the given tags using the specified mode.

</description>
<parameters>
<parameter name="list">
<parameter_description> list to set tags in
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> NULL-terminated list of values to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_add_id3_image">
<description>
Adds an image from an ID3 APIC frame (or similar, such as used in FLAC)
to the given tag list. Also see gst_tag_image_data_to_image_buffer() for
more information on image tags in GStreamer.


</description>
<parameters>
<parameter name="tag_list">
<parameter_description> a tag list
</parameter_description>
</parameter>
<parameter name="image_data">
<parameter_description> the (encoded) image
</parameter_description>
</parameter>
<parameter name="image_data_len">
<parameter_description> the length of the encoded image data at @image_data
</parameter_description>
</parameter>
<parameter name="id3_picture_type">
<parameter_description> picture type as per the ID3 (v2.4.0) specification for
the APIC frame (0 = unknown/other)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image was processed, otherwise %FALSE

</return>
</function>

<function name="gst_tag_list_add_valist">
<description>
Sets the values for the given tags using the specified mode.

</description>
<parameters>
<parameter name="list">
<parameter_description> list to set tags in
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> tag / value pairs to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_add_valist_values">
<description>
Sets the GValues for the given tags using the specified mode.

</description>
<parameters>
<parameter name="list">
<parameter_description> list to set tags in
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> tag / GValue pairs to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_add_value">
<description>
Sets the GValue for a given tag using the specified mode.


</description>
<parameters>
<parameter name="list">
<parameter_description> list to set tags in
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> GValue for this tag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_add_values">
<description>
Sets the GValues for the given tags using the specified mode.

</description>
<parameters>
<parameter name="list">
<parameter_description> list to set tags in
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> GValues to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_copy">
<description>
Copies a given #GstTagList.

Free-function: gst_tag_list_free


</description>
<parameters>
<parameter name="list">
<parameter_description> list to copy
</parameter_description>
</parameter>
</parameters>
<return> copy of the given list
</return>
</function>

<function name="gst_tag_list_copy_value">
<description>
Copies the contents for the given tag into the value,
merging multiple values into one if multiple values are associated
with the tag.
You must g_value_unset() the value after use.


</description>
<parameters>
<parameter name="dest">
<parameter_description> uninitialized #GValue to copy into
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> list to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_foreach">
<description>
Calls the given function for each tag inside the tag list. Note that if there
is no tag, the function won't be called at all.

</description>
<parameters>
<parameter name="list">
<parameter_description> list to iterate over
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to be called for each tag
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user specified data
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_free">
<description>
Frees the given list and all associated values.

</description>
<parameters>
<parameter name="list">
<parameter_description> the list to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_from_exif_buffer">
<description>
Parses the IFD and IFD tags data contained in the buffer and puts it
on a taglist. The base_offset is used to subtract from the offset in
the tag entries and be able to get the offset relative to the buffer
start


</description>
<parameters>
<parameter name="buffer">
<parameter_description> The exif buffer
</parameter_description>
</parameter>
<parameter name="byte_order">
<parameter_description> byte order of the data
</parameter_description>
</parameter>
<parameter name="base_offset">
<parameter_description> Offset from the tiff header to this buffer
</parameter_description>
</parameter>
</parameters>
<return> The parsed taglist

</return>
</function>

<function name="gst_tag_list_from_exif_buffer_with_tiff_header">
<description>
Parses the exif tags starting with a tiff header structure.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> The exif buffer
</parameter_description>
</parameter>
</parameters>
<return> The taglist

</return>
</function>

<function name="gst_tag_list_from_vorbiscomment_buffer">
<description>
Creates a new tag list that contains the information parsed out of a
vorbiscomment packet.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> buffer to convert
</parameter_description>
</parameter>
<parameter name="id_data">
<parameter_description> identification data at start of stream
</parameter_description>
</parameter>
<parameter name="id_data_length">
<parameter_description> length of identification data
</parameter_description>
</parameter>
<parameter name="vendor_string">
<parameter_description> pointer to a string that should take the vendor string
of this vorbis comment or NULL if you don't need it.
</parameter_description>
</parameter>
</parameters>
<return> A new #GstTagList with all tags that could be extracted from the
given vorbiscomment buffer or NULL on error.
</return>
</function>

<function name="gst_tag_list_from_xmp_buffer">
<description>
Parse a xmp packet into a taglist.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> buffer
</parameter_description>
</parameter>
</parameters>
<return> new taglist or %NULL, free the list when done

</return>
</function>

<function name="gst_tag_list_get_boolean">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_boolean_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_buffer">
<description>
Copies the first buffer for the given tag in the taglist into the variable
pointed to by @value. Free the buffer with gst_buffer_unref() when it is
no longer needed.

Free-function: gst_buffer_unref


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> address of a GstBuffer
pointer variable to store the result into
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a buffer was copied, FALSE if the tag didn't exist in the
given list or if it was #NULL.

</return>
</function>

<function name="gst_tag_list_get_buffer_index">
<description>
Gets the buffer that is at the given index for the given tag in the given
list and copies it into the variable pointed to by @value. Free the buffer
with gst_buffer_unref() when it is no longer needed.

Free-function: gst_buffer_unref


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> address of a GstBuffer
pointer variable to store the result into
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a buffer was copied, FALSE if the tag didn't exist in the
given list or if it was #NULL.

</return>
</function>

<function name="gst_tag_list_get_char">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_char_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_date">
<description>
Copies the first date for the given tag in the taglist into the variable
pointed to by @value. Free the date with g_date_free() when it is no longer
needed.

Free-function: g_date_free


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> address of a GDate pointer
variable to store the result into
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a date was copied, FALSE if the tag didn't exist in the
given list or if it was #NULL.
</return>
</function>

<function name="gst_tag_list_get_date_index">
<description>
Gets the date that is at the given index for the given tag in the given
list and copies it into the variable pointed to by @value. Free the date
with g_date_free() when it is no longer needed.

Free-function: g_date_free


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list or if it was #NULL.
</return>
</function>

<function name="gst_tag_list_get_date_time">
<description>
Copies the first datetime for the given tag in the taglist into the variable
pointed to by @value. Unref the date with gst_date_time_unref() when
it is no longer needed.

Free-function: gst_date_time_unref


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> address of a #GstDateTime
pointer variable to store the result into
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a datetime was copied, FALSE if the tag didn't exist in
thegiven list or if it was #NULL.

</return>
</function>

<function name="gst_tag_list_get_date_time_index">
<description>
Gets the datetime that is at the given index for the given tag in the given
list and copies it into the variable pointed to by @value. Unref the datetime
with gst_date_time_unref() when it is no longer needed.

Free-function: gst_date_time_unref


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list or if it was #NULL.

</return>
</function>

<function name="gst_tag_list_get_double">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_double_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_float">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_float_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_int">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_int64">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_int64_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_int_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_long">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_long_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_pointer">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_pointer_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_string">
<description>
Copies the contents for the given tag into the value, possibly merging
multiple values into one if multiple values are associated with the tag.

Use gst_tag_list_get_string_index (list, tag, 0, value) if you want
to retrieve the first string associated with this tag unmodified.

The resulting string in @value will be in UTF-8 encoding and should be
freed by the caller using g_free when no longer needed. Since 0.10.24 the
returned string is also guaranteed to be non-NULL and non-empty.

Free-function: g_free


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_string_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.

The resulting string in @value will be in UTF-8 encoding and should be
freed by the caller using g_free when no longer needed. Since 0.10.24 the
returned string is also guaranteed to be non-NULL and non-empty.

Free-function: g_free


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_tag_size">
<description>
Checks how many value are stored in this tag list for the given tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a taglist
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> the tag to query
</parameter_description>
</parameter>
</parameters>
<return> The number of tags stored
</return>
</function>

<function name="gst_tag_list_get_uchar">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_uchar_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_uint">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_uint64">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_uint64_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_uint_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_ulong">
<description>
Copies the contents for the given tag into the value, merging multiple values
into one if multiple values are associated with the tag.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_ulong_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was copied, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_get_value_index">
<description>
Gets the value that is at the given index for the given tag in the given
list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
</parameters>
<return> The GValue for the specified entry or NULL if the
tag wasn't available or the tag doesn't have as many entries
</return>
</function>

<function name="gst_tag_list_insert">
<description>
Inserts the tags of the @from list into the first list using the given mode.

</description>
<parameters>
<parameter name="into">
<parameter_description> list to merge into
</parameter_description>
</parameter>
<parameter name="from">
<parameter_description> list to merge from
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_is_empty">
<description>
Checks if the given taglist is empty.


</description>
<parameters>
<parameter name="list">
<parameter_description> A #GstTagList.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the taglist is empty, otherwise FALSE.

</return>
</function>

<function name="gst_tag_list_merge">
<description>
Merges the two given lists into a new list. If one of the lists is NULL, a
copy of the other is returned. If both lists are NULL, NULL is returned.

Free-function: gst_tag_list_free


</description>
<parameters>
<parameter name="list1">
<parameter_description> first list to merge
</parameter_description>
</parameter>
<parameter name="list2">
<parameter_description> second list to merge
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
</parameters>
<return> the new list
</return>
</function>

<function name="gst_tag_list_new">
<description>
Creates a new empty GstTagList.

Free-function: gst_tag_list_free


</description>
<parameters>
</parameters>
<return> An empty tag list
</return>
</function>

<function name="gst_tag_list_new_from_id3v1">
<description>
Parses the data containing an ID3v1 tag and returns a #GstTagList from the
parsed data.


</description>
<parameters>
<parameter name="data">
<parameter_description> 128 bytes of data containing the ID3v1 tag
</parameter_description>
</parameter>
</parameters>
<return> A new tag list or NULL if the data was not an ID3v1 tag.
</return>
</function>

<function name="gst_tag_list_new_full">
<description>
Creates a new taglist and appends the values for the given tags. It expects
tag-value pairs like gst_tag_list_add(), and a NULL terminator after the
last pair. The type of the values is implicit and is documented in the API
reference, but can also be queried at runtime with gst_tag_get_type(). It
is an error to pass a value of a type not matching the tag type into this
function. The tag list will make copies of any arguments passed
(e.g. strings, buffers).

Free-function: gst_tag_list_free


</description>
<parameters>
<parameter name="tag">
<parameter_description> tag
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> NULL-terminated list of values to set
</parameter_description>
</parameter>
</parameters>
<return> a new #GstTagList. Free with gst_tag_list_free()
when no longer needed.

</return>
</function>

<function name="gst_tag_list_new_full_valist">
<description>
Just like gst_tag_list_new_full(), only that it takes a va_list argument.
Useful mostly for language bindings.

Free-function: gst_tag_list_free


</description>
<parameters>
<parameter name="var_args">
<parameter_description> tag / value pairs to set
</parameter_description>
</parameter>
</parameters>
<return> a new #GstTagList. Free with gst_tag_list_free()
when no longer needed.

</return>
</function>

<function name="gst_tag_list_peek_string_index">
<description>
Peeks at the value that is at the given index for the given tag in the given
list.

The resulting string in @value will be in UTF-8 encoding and doesn't need
to be freed by the caller. The returned string is also guaranteed to
be non-NULL and non-empty.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList to get the tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to read out
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> number of entry to read out
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> location for the result
</parameter_description>
</parameter>
</parameters>
<return> TRUE, if a value was set, FALSE if the tag didn't exist in the
given list.
</return>
</function>

<function name="gst_tag_list_remove_tag">
<description>
Removes the given tag from the taglist.

</description>
<parameters>
<parameter name="list">
<parameter_description> list to remove tag from
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_to_exif_buffer">
<description>
Formats the tags in taglist on exif format. The resulting buffer contains
the tags IFD and is followed by the data pointed by the tag entries.


</description>
<parameters>
<parameter name="taglist">
<parameter_description> The taglist
</parameter_description>
</parameter>
<parameter name="byte_order">
<parameter_description> byte order used in writing (G_LITTLE_ENDIAN or G_BIG_ENDIAN)
</parameter_description>
</parameter>
<parameter name="base_offset">
<parameter_description> Offset from the tiff header first byte
</parameter_description>
</parameter>
</parameters>
<return> A GstBuffer containing the tag entries followed by the tag data

</return>
</function>

<function name="gst_tag_list_to_exif_buffer_with_tiff_header">
<description>
Formats the tags in taglist into exif structure, a tiff header
is put in the beginning of the buffer.


</description>
<parameters>
<parameter name="taglist">
<parameter_description> The taglist
</parameter_description>
</parameter>
</parameters>
<return> A GstBuffer containing the data

</return>
</function>

<function name="gst_tag_list_to_vorbiscomment_buffer">
<description>
Creates a new vorbiscomment buffer from a tag list.


</description>
<parameters>
<parameter name="list">
<parameter_description> tag list to convert
</parameter_description>
</parameter>
<parameter name="id_data">
<parameter_description> identification data at start of stream
</parameter_description>
</parameter>
<parameter name="id_data_length">
<parameter_description> length of identification data, may be 0 if @id_data is NULL
</parameter_description>
</parameter>
<parameter name="vendor_string">
<parameter_description> string that describes the vendor string or NULL
</parameter_description>
</parameter>
</parameters>
<return> A new #GstBuffer containing a vorbiscomment buffer with all tags
that could be converted from the given tag list.
</return>
</function>

<function name="gst_tag_list_to_xmp_buffer">
<description>
Formats a taglist as a xmp packet.


</description>
<parameters>
<parameter name="list">
<parameter_description> tags
</parameter_description>
</parameter>
<parameter name="read_only">
<parameter_description> does the container forbid inplace editing
</parameter_description>
</parameter>
</parameters>
<return> new buffer or %NULL, unref the buffer when done

</return>
</function>

<function name="gst_tag_list_to_xmp_buffer_full">
<description>
Formats a taglist as a xmp packet using only the selected
schemas. An empty list (%NULL) means that all schemas should
be used


</description>
<parameters>
<parameter name="list">
<parameter_description> tags
</parameter_description>
</parameter>
<parameter name="read_only">
<parameter_description> does the container forbid inplace editing
</parameter_description>
</parameter>
<parameter name="schemas">
<parameter_description> %NULL terminated array of schemas to be used on serialization
</parameter_description>
</parameter>
</parameters>
<return> new buffer or %NULL, unref the buffer when done

</return>
</function>

<function name="gst_tag_merge_strings_with_comma">
<description>
This is a convenience function for the func argument of gst_tag_register().
It concatenates all given strings using a comma. The tag must be registered
as a G_TYPE_STRING or this function will fail.

</description>
<parameters>
<parameter name="dest">
<parameter_description> uninitialized GValue to store result in
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> GValue to copy from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_merge_use_first">
<description>
This is a convenience function for the func argument of gst_tag_register().
It creates a copy of the first value from the list.

</description>
<parameters>
<parameter name="dest">
<parameter_description> uninitialized GValue to store result in
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> GValue to copy from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_parse_extended_comment">
<description>
Convenience function to parse a GST_TAG_EXTENDED_COMMENT string and
separate it into its components.

If successful, @key, @lang and/or @value will be set to newly allocated
strings that you need to free with g_free() when done. @key and @lang
may also be set to NULL by this function if there is no key or no language
code in the extended comment string.


</description>
<parameters>
<parameter name="ext_comment">
<parameter_description> an extended comment string, see #GST_TAG_EXTENDED_COMMENT
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> return location for the comment description key, or NULL
</parameter_description>
</parameter>
<parameter name="lang">
<parameter_description> return location for the comment ISO-639 language code, or NULL
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for the actual comment string, or NULL
</parameter_description>
</parameter>
<parameter name="fail_if_no_key">
<parameter_description> whether to fail if strings are not in key=value form
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the string could be parsed, otherwise FALSE

</return>
</function>

<function name="gst_tag_register">
<description>
Registers a new tag type for the use with GStreamer's type system. If a type
with that name is already registered, that one is used.
The old registration may have used a different type however. So don't rely
on your supplied values.

Important: if you do not supply a merge function the implication will be
that there can only be one single value for this tag in a tag list and
any additional values will silenty be discarded when being added (unless
#GST_TAG_MERGE_REPLACE, #GST_TAG_MERGE_REPLACE_ALL, or
#GST_TAG_MERGE_PREPEND is used as merge mode, in which case the new
value will replace the old one in the list).

The merge function will be called from gst_tag_list_copy_value() when
it is required that one or more values for a tag be condensed into
one single value. This may happen from gst_tag_list_get_string(),
gst_tag_list_get_int(), gst_tag_list_get_double() etc. What will happen
exactly in that case depends on how the tag was registered and if a
merge function was supplied and if so which one.

Two default merge functions are provided: gst_tag_merge_use_first() and
gst_tag_merge_strings_with_comma().

</description>
<parameters>
<parameter name="name">
<parameter_description> the name or identifier string
</parameter_description>
</parameter>
<parameter name="flag">
<parameter_description> a flag describing the type of tag info
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type this data is in
</parameter_description>
</parameter>
<parameter name="nick">
<parameter_description> human-readable name
</parameter_description>
</parameter>
<parameter name="blurb">
<parameter_description> a human-readable description about this tag
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function for merging multiple values of this tag, or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_register_musicbrainz_tags">
<description>
Registers additional musicbrainz-specific tags with the GStreamer tag
system. Plugins and applications that use these tags should call this
function before using them. Can be called multiple times.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_tag_setter_add_tag_valist">
<description>
Adds the given tag / value pairs on the setter using the given merge mode.
The list must be terminated with NULL.

</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to set
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> tag / value pairs to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_setter_add_tag_valist_values">
<description>
Adds the given tag / GValue pairs on the setter using the given merge mode.
The list must be terminated with NULL.

</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to set
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> tag / GValue pairs to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_setter_add_tag_value">
<description>
Adds the given tag / GValue pair on the setter using the given merge mode.


</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> GValue to set for the tag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_setter_add_tag_values">
<description>
Adds the given tag / GValue pairs on the setter using the given merge mode.
The list must be terminated with NULL.

</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> more tag / GValue pairs to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_setter_add_tags">
<description>
Adds the given tag / value pairs on the setter using the given merge mode.
The list must be terminated with NULL.

</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to use
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> tag to set
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> more tag / value pairs to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_setter_get_tag_list">
<description>
Returns the current list of tags the setter uses.  The list should not be
modified or freed.

This function is not thread-safe.


</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
</parameters>
<return> a current snapshot of the taglist used in the
setter or NULL if none is used.
</return>
</function>

<function name="gst_tag_setter_get_tag_merge_mode">
<description>
Queries the mode by which tags inside the setter are overwritten by tags
from events


</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
</parameters>
<return> the merge mode used inside the element.
</return>
</function>

<function name="gst_tag_setter_merge_tags">
<description>
Merges the given list into the setter's list using the given mode.

</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> a tag list to merge from
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode to merge with
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_setter_reset_tags">
<description>
Reset the internal taglist. Elements should call this from within the
state-change handler.


</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_setter_set_tag_merge_mode">
<description>
Sets the given merge mode that is used for adding tags from events to tags
specified by this interface. The default is #GST_TAG_MERGE_KEEP, which keeps
the tags set with this interface and discards tags from events.

</description>
<parameters>
<parameter name="setter">
<parameter_description> a #GstTagSetter
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> The mode with which tags are added
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_to_id3_tag">
<description>
Looks up the ID3v2 tag for a GStreamer tag.


</description>
<parameters>
<parameter name="gst_tag">
<parameter_description> GStreamer tag to convert to vorbiscomment tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding ID3v2 tag or NULL if none exists.
</return>
</function>

<function name="gst_tag_to_vorbis_comments">
<description>
Creates a new tag list that contains the information parsed out of a
vorbiscomment packet.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a GStreamer tag identifier, such as #GST_TAG_ARTIST
</parameter_description>
</parameter>
</parameters>
<return> A #GList of newly-allowcated key=value strings. Free with
g_list_foreach (list, (GFunc) g_free, NULL) plus g_list_free (list)
</return>
</function>

<function name="gst_tag_to_vorbis_tag">
<description>
Looks up the vorbiscomment tag for a GStreamer tag.


</description>
<parameters>
<parameter name="gst_tag">
<parameter_description> GStreamer tag to convert to vorbiscomment tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding vorbiscomment tag or NULL if none exists.
</return>
</function>

<function name="gst_tag_xmp_list_schemas">
<description>
Gets the list of supported schemas in the xmp lib


</description>
<parameters>
</parameters>
<return> a %NULL terminated array of strings with the schema names

</return>
</function>

<function name="gst_tag_xmp_writer_add_all_schemas">
<description>
Adds all available XMP schemas to the configuration. Meaning that
all will be used.


</description>
<parameters>
<parameter name="config">
<parameter_description> a #GstTagXmpWriter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_xmp_writer_add_schema">
<description>
Adds @schema to the list schemas


</description>
<parameters>
<parameter name="config">
<parameter_description> a #GstTagXmpWriter
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description> the schema to be added
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_xmp_writer_has_schema">
<description>
Checks if @schema is going to be used


</description>
<parameters>
<parameter name="config">
<parameter_description> a #GstTagXmpWriter
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description> the schema to test
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it is going to be used
</return>
</function>

<function name="gst_tag_xmp_writer_remove_all_schemas">
<description>
Removes all schemas from the list of schemas to use. Meaning that no
XMP will be generated.


</description>
<parameters>
<parameter name="config">
<parameter_description> a #GstTagXmpWriter
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_xmp_writer_remove_schema">
<description>
Removes a schema from the list of schemas to use. Nothing is done if
the schema wasn't in the list


</description>
<parameters>
<parameter name="config">
<parameter_description> a #GstTagXmpWriter
</parameter_description>
</parameter>
<parameter name="schema">
<parameter_description> the schema to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_task_cleanup_all">
<description>
Wait for all tasks to be stopped. This is mainly used internally
to ensure proper cleanup of internal data structures in test suites.

MT safe.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_task_create">
<description>
Create a new Task that will repeatedly call the provided @func
with @data as a parameter. Typically the task will run in
a new thread.

The function cannot be changed after the task has been created. You
must create a new #GstTask to change the function.

This function will not yet create and start a thread. Use gst_task_start() or
gst_task_pause() to create and start the GThread.

Before the task can be used, a #GStaticRecMutex must be configured using the
gst_task_set_lock() function. This lock will always be acquired while
@func is called.


</description>
<parameters>
<parameter name="func">
<parameter_description> The #GstTaskFunction to use
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> User data to pass to @func
</parameter_description>
</parameter>
</parameters>
<return> A new #GstTask.

MT safe.
</return>
</function>

<function name="gst_task_get_pool">
<description>
Get the #GstTaskPool that this task will use for its streaming
threads.

MT safe.


</description>
<parameters>
<parameter name="task">
<parameter_description> a #GstTask
</parameter_description>
</parameter>
</parameters>
<return> the #GstTaskPool used by @task. gst_object_unref()
after usage.

</return>
</function>

<function name="gst_task_get_state">
<description>
Get the current state of the task.


</description>
<parameters>
<parameter name="task">
<parameter_description> The #GstTask to query
</parameter_description>
</parameter>
</parameters>
<return> The #GstTaskState of the task

MT safe.
</return>
</function>

<function name="gst_task_join">
<description>
Joins @task. After this call, it is safe to unref the task
and clean up the lock set with gst_task_set_lock().

The task will automatically be stopped with this call.

This function cannot be called from within a task function as this
would cause a deadlock. The function will detect this and print a
g_warning.


</description>
<parameters>
<parameter name="task">
<parameter_description> The #GstTask to join
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the task could be joined.

MT safe.
</return>
</function>

<function name="gst_task_pause">
<description>
Pauses @task. This method can also be called on a task in the
stopped state, in which case a thread will be started and will remain
in the paused state. This function does not wait for the task to complete
the paused state.


</description>
<parameters>
<parameter name="task">
<parameter_description> The #GstTask to pause
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the task could be paused.

MT safe.
</return>
</function>

<function name="gst_task_pool_cleanup">
<description>
Wait for all tasks to be stopped. This is mainly used internally
to ensure proper cleanup of internal data structures in test suites.

MT safe.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GstTaskPool
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_task_pool_join">
<description>
Join a task and/or return it to the pool. @id is the id obtained from 
gst_task_pool_push().


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GstTaskPool
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the id
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_task_pool_new">
<description>
Create a new default task pool. The default task pool will use a regular
GThreadPool for threads.


</description>
<parameters>
</parameters>
<return> a new #GstTaskPool. gst_object_unref() after usage.

</return>
</function>

<function name="gst_task_pool_prepare">
<description>
Prepare the taskpool for accepting gst_task_pool_push() operations.

MT safe.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GstTaskPool
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> an error return location
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_task_pool_push">
<description>
Start the execution of a new thread from @pool.


</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GstTaskPool
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for an error
</parameter_description>
</parameter>
</parameters>
<return> a pointer that should be used for the gst_task_pool_join
function. This pointer can be NULL, you must check @error to detect
errors.

</return>
</function>

<function name="gst_task_set_lock">
<description>
Set the mutex used by the task. The mutex will be acquired before
calling the #GstTaskFunction.

This function has to be called before calling gst_task_pause() or
gst_task_start().

MT safe.

</description>
<parameters>
<parameter name="task">
<parameter_description> The #GstTask to use
</parameter_description>
</parameter>
<parameter name="mutex">
<parameter_description> The #GMutex to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_task_set_pool">
<description>
Set @pool as the new GstTaskPool for @task. Any new streaming threads that
will be created by @task will now use @pool.

MT safe.


</description>
<parameters>
<parameter name="task">
<parameter_description> a #GstTask
</parameter_description>
</parameter>
<parameter name="pool">
<parameter_description> a #GstTaskPool
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_task_set_priority">
<description>
Changes the priority of @task to @priority.

Note: try not to depend on task priorities.

MT safe.


</description>
<parameters>
<parameter name="task">
<parameter_description> a #GstTask
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> a new priority for @task
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_task_set_state">
<description>
Sets the state of @task to @state.

The @task must have a lock associated with it using
gst_task_set_lock() when going to GST_TASK_STARTED or GST_TASK_PAUSED or
this function will return %FALSE.

MT safe.


</description>
<parameters>
<parameter name="task">
<parameter_description> a #GstTask
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> the new task state
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the state could be changed.

</return>
</function>

<function name="gst_task_set_thread_callbacks">
<description>
Set callbacks which will be executed when a new thread is needed, the thread
function is entered and left and when the thread is joined.

By default a thread for @task will be created from a default thread pool.

Objects can use custom GThreads or can perform additional configuration of
the threads (such as changing the thread priority) by installing callbacks.

MT safe.


</description>
<parameters>
<parameter name="task">
<parameter_description> The #GstTask to use
</parameter_description>
</parameter>
<parameter name="callbacks">
<parameter_description> a #GstTaskThreadCallbacks pointer
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the callbacks
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> called when @user_data is no longer referenced
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_task_start">
<description>
Starts @task. The @task must have a lock associated with it using
gst_task_set_lock() or this function will return %FALSE.


</description>
<parameters>
<parameter name="task">
<parameter_description> The #GstTask to start
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the task could be started.

MT safe.
</return>
</function>

<function name="gst_task_stop">
<description>
Stops @task. This method merely schedules the task to stop and
will not wait for the task to have completely stopped. Use
gst_task_join() to stop and wait for completion.


</description>
<parameters>
<parameter name="task">
<parameter_description> The #GstTask to stop
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the task could be stopped.

MT safe.
</return>
</function>

<function name="gst_trace_destroy">
<description>
Flush an close the previously allocated @trace.

</description>
<parameters>
<parameter name="trace">
<parameter_description> the #GstTrace to destroy
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_trace_flush">
<description>
Flush any pending trace entries in @trace to the trace file.
@trace can be NULL in which case the default #GstTrace will be
flushed.

</description>
<parameters>
<parameter name="trace">
<parameter_description> the #GstTrace to flush.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_trace_new">
<description>
Create a ringbuffer of @size in the file with @filename to
store trace results in.

Free-function: gst_trace_destroy


</description>
<parameters>
<parameter name="filename">
<parameter_description> a filename
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the max size of the file
</parameter_description>
</parameter>
</parameters>
<return> a new #GstTrace.
</return>
</function>

<function name="gst_trace_read_tsc">
<description>
Read a platform independent timer value that can be used in
benchmarks.

</description>
<parameters>
<parameter name="dst">
<parameter_description> (out) pointer to hold the result.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_trace_set_default">
<description>
Set the default #GstTrace to @trace.

</description>
<parameters>
<parameter name="trace">
<parameter_description> the #GstTrace to set as the default.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_trace_text_flush">
<description>
Flush any pending trace entries in @trace to the trace file,
formatted as a text line with timestamp and sequence numbers.
@trace can be NULL in which case the default #GstTrace will be
flushed.

</description>
<parameters>
<parameter name="trace">
<parameter_description> the #GstTrace to flush.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_channel_changed">
<description>
Called by elements implementing the #GstTuner interface when the
current channel changes. Fires the #GstTuner::channel-changed signal.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A #GstTunerChannel instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_find_channel_by_name">
<description>
Look up a #GstTunerChannel by name.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A string containing the name of a #GstTunerChannel
</parameter_description>
</parameter>
</parameters>
<return> A #GstTunerChannel, or NULL if no channel with the provided name
is available.
</return>
</function>

<function name="gst_tuner_find_norm_by_name">
<description>
Look up a #GstTunerNorm by name.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="norm">
<parameter_description> A string containing the name of a #GstTunerNorm
</parameter_description>
</parameter>
</parameters>
<return> A #GstTunerNorm, or NULL if no norm with the provided name
is available.
</return>
</function>

<function name="gst_tuner_frequency_changed">
<description>
Called by elements implementing the #GstTuner interface when the
configured frequency changes. Fires the #GstTuner::frequency-changed
signal on the tuner, and the #GstTunerChannel::frequency-changed signal
on the channel.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The current #GstTunerChannel
</parameter_description>
</parameter>
<parameter name="frequency">
<parameter_description> The new frequency setting
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_get_channel">
<description>
Retrieve the current channel from the tuner.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) to get the current channel from.
</parameter_description>
</parameter>
</parameters>
<return> the current channel of the tuner object.
</return>
</function>

<function name="gst_tuner_get_frequency">
<description>
Retrieve the current frequency from the given channel. As for
gst_tuner_set_frequency(), the #GstTunerChannel must support frequency
operations, as indicated by the GST_TUNER_CHANNEL_FREQUENCY flag.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> The #GstTuner (a #GstElement) that owns the given channel.
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The #GstTunerChannel to retrieve the frequency from.
</parameter_description>
</parameter>
</parameters>
<return> The current frequency, or 0 on error.
</return>
</function>

<function name="gst_tuner_get_norm">
<description>
Get the current video norm from the given tuner object for the
currently selected channel.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) to get the current norm from.
</parameter_description>
</parameter>
</parameters>
<return> the current norm.
</return>
</function>

<function name="gst_tuner_list_channels">
<description>
Retrieve a #GList of #GstTunerChannels available
(e.g. 'composite', 's-video', ...) from the given tuner object.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) to get the channels from.
</parameter_description>
</parameter>
</parameters>
<return> A list of channels available on this tuner. The list is
owned by the GstTuner and must not be freed.
</return>
</function>

<function name="gst_tuner_list_norms">
<description>
Retrieve a GList of available #GstTunerNorm settings for the currently
tuned channel on the given tuner object.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (*a #GstElement) to get the list of norms from.
</parameter_description>
</parameter>
</parameters>
<return> A list of norms available on the current channel for this
tuner object. The list is owned by the GstTuner and must not
be freed.
</return>
</function>

<function name="gst_tuner_norm_changed">
<description>
Called by elements implementing the #GstTuner interface when the
current norm changes. Fires the #GstTuner::norm-changed signal.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="norm">
<parameter_description> A #GstTunerNorm instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_set_channel">
<description>
Tunes the object to the given channel, which should be one of the
channels returned by gst_tuner_list_channels().

</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) that owns the channel.
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> the channel to tune to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_set_frequency">
<description>
Sets a tuning frequency on the given tuner/channel. Note that this
requires the given channel to be a &quot;tuning&quot; channel, which can be
checked using GST_TUNER_CHANNEL_HAS_FLAG (), with the proper flag
being GST_TUNER_CHANNEL_FREQUENCY.

The frequency is in Hz, with minimum steps indicated by the 
frequency_multiplicator provided in the #GstTunerChannel. The
valid range is provided in the min_frequency and max_frequency properties
of the #GstTunerChannel.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> The #GstTuner (a #GstElement) that owns the given channel.
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The #GstTunerChannel to set the frequency on.
</parameter_description>
</parameter>
<parameter name="frequency">
<parameter_description> The frequency to tune in to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_set_norm">
<description>
Changes the video norm on this tuner to the given norm, which should be
one of the norms returned by gst_tuner_list_norms().

</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) to set the norm on.
</parameter_description>
</parameter>
<parameter name="norm">
<parameter_description> the norm to use for the current channel.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_signal_changed">
<description>
Called by elements implementing the #GstTuner interface when the
incoming signal strength changes. Fires the #GstTuner::signal-changed
signal on the tuner and the #GstTunerChannel::signal-changed signal on 
the channel.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The current #GstTunerChannel
</parameter_description>
</parameter>
<parameter name="signal">
<parameter_description> The new signal strength
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_signal_strength">
<description>
Get the strength of the signal on this channel. Note that this
requires the current channel to be a &quot;tuning&quot; channel, i.e. a
channel on which frequency can be set. This can be checked using
GST_TUNER_CHANNEL_HAS_FLAG (), and the appropriate flag to check
for is GST_TUNER_CHANNEL_FREQUENCY.

The valid range of the signal strength is indicated in the 
min_signal and max_signal properties of the #GstTunerChannel.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) that owns the given channel.
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> the #GstTunerChannel to get the signal strength from.
</parameter_description>
</parameter>
</parameters>
<return> Signal strength, or 0 on error.
</return>
</function>

<function name="gst_type_find_factory_call_function">
<description>
Calls the #GstTypeFindFunction associated with this factory.

</description>
<parameters>
<parameter name="factory">
<parameter_description> A #GstTypeFindFactory
</parameter_description>
</parameter>
<parameter name="find">
<parameter_description> a properly setup #GstTypeFind entry. The get_data
and suggest_type members must be set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_type_find_factory_get_caps">
<description>
Gets the #GstCaps associated with a typefind factory.


</description>
<parameters>
<parameter name="factory">
<parameter_description> A #GstTypeFindFactory
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps associated with this factory
</return>
</function>

<function name="gst_type_find_factory_get_extensions">
<description>
Gets the extensions associated with a #GstTypeFindFactory. The returned
array should not be changed. If you need to change stuff in it, you should
copy it using g_strdupv().  This function may return NULL to indicate
a 0-length list.


</description>
<parameters>
<parameter name="factory">
<parameter_description> A #GstTypeFindFactory
</parameter_description>
</parameter>
</parameters>
<return> a
NULL-terminated array of extensions associated with this factory
</return>
</function>

<function name="gst_type_find_factory_get_list">
<description>
Gets the list of all registered typefind factories. You must free the
list using gst_plugin_feature_list_free().

The returned factories are sorted by highest rank first, and then by
factory name. (behaviour change since 0.10.26)

Free-function: gst_plugin_feature_list_free


</description>
<parameters>
</parameters>
<return> the list of all
registered #GstTypeFindFactory.
</return>
</function>

<function name="gst_type_find_get_length">
<description>
Get the length of the data stream.


</description>
<parameters>
<parameter name="find">
<parameter_description> The #GstTypeFind the function was called with
</parameter_description>
</parameter>
</parameters>
<return> The length of the data stream, or 0 if it is not available.
</return>
</function>

<function name="gst_type_find_helper">
<description>
Tries to find what type of data is flowing from the given source #GstPad.

Free-function: gst_caps_unref


</description>
<parameters>
<parameter name="src">
<parameter_description> A source #GstPad
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The length in bytes
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps corresponding to the data stream.
Returns #NULL if no #GstCaps matches the data stream.
</return>
</function>

<function name="gst_type_find_helper_for_buffer">
<description>
Tries to find what type of data is contained in the given #GstBuffer, the
assumption being that the buffer represents the beginning of the stream or
file.

All available typefinders will be called on the data in order of rank. If
a typefinding function returns a probability of #GST_TYPE_FIND_MAXIMUM,
typefinding is stopped immediately and the found caps will be returned
right away. Otherwise, all available typefind functions will the tried,
and the caps with the highest probability will be returned, or #NULL if
the content of the buffer could not be identified.

Free-function: gst_caps_unref


</description>
<parameters>
<parameter name="obj">
<parameter_description> object doing the typefinding, or NULL (used for logging)
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> a #GstBuffer with data to typefind
</parameter_description>
</parameter>
<parameter name="prob">
<parameter_description> location to store the probability of the found
caps, or #NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps corresponding to the data, or #NULL
if no type could be found. The caller should free the caps returned
with gst_caps_unref().
</return>
</function>

<function name="gst_type_find_helper_for_extension">
<description>
Tries to find the best #GstCaps associated with @extension.

All available typefinders will be checked against the extension in order
of rank. The caps of the first typefinder that can handle @extension will be
returned.

Free-function: gst_caps_unref


</description>
<parameters>
<parameter name="obj">
<parameter_description> object doing the typefinding, or NULL (used for logging)
</parameter_description>
</parameter>
<parameter name="extension">
<parameter_description> an extension
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps corresponding to @extension, or
#NULL if no type could be found. The caller should free the caps
returned with gst_caps_unref().

</return>
</function>

<function name="gst_type_find_helper_get_range">
<description>
Utility function to do pull-based typefinding. Unlike gst_type_find_helper()
however, this function will use the specified function @func to obtain the
data needed by the typefind functions, rather than operating on a given
source pad. This is useful mostly for elements like tag demuxers which
strip off data at the beginning and/or end of a file and want to typefind
the stripped data stream before adding their own source pad (the specified
callback can then call the upstream peer pad with offsets adjusted for the
tag size, for example).

Free-function: gst_caps_unref


</description>
<parameters>
<parameter name="obj">
<parameter_description> A #GstObject that will be passed as first argument to @func
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A generic #GstTypeFindHelperGetRangeFunction that will
be used to access data at random offsets when doing the typefinding
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The length in bytes
</parameter_description>
</parameter>
<parameter name="prob">
<parameter_description> location to store the probability of the found
caps, or #NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps corresponding to the data stream.
Returns #NULL if no #GstCaps matches the data stream.
</return>
</function>

<function name="gst_type_find_helper_get_range_ext">
<description>
Utility function to do pull-based typefinding. Unlike gst_type_find_helper()
however, this function will use the specified function @func to obtain the
data needed by the typefind functions, rather than operating on a given
source pad. This is useful mostly for elements like tag demuxers which
strip off data at the beginning and/or end of a file and want to typefind
the stripped data stream before adding their own source pad (the specified
callback can then call the upstream peer pad with offsets adjusted for the
tag size, for example).

When @extension is not NULL, this function will first try the typefind
functions for the given extension, which might speed up the typefinding
in many cases.

Free-function: gst_caps_unref


</description>
<parameters>
<parameter name="obj">
<parameter_description> A #GstObject that will be passed as first argument to @func
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> A generic #GstTypeFindHelperGetRangeFunction that will
be used to access data at random offsets when doing the typefinding
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The length in bytes
</parameter_description>
</parameter>
<parameter name="extension">
<parameter_description> extension of the media
</parameter_description>
</parameter>
<parameter name="prob">
<parameter_description> location to store the probability of the found
caps, or #NULL
</parameter_description>
</parameter>
</parameters>
<return> the #GstCaps corresponding to the data stream.
Returns #NULL if no #GstCaps matches the data stream.

</return>
</function>

<function name="gst_type_find_peek">
<description>
Returns the @size bytes of the stream to identify beginning at offset. If
offset is a positive number, the offset is relative to the beginning of the
stream, if offset is a negative number the offset is relative to the end of
the stream. The returned memory is valid until the typefinding function
returns and must not be freed.


</description>
<parameters>
<parameter name="find">
<parameter_description> The #GstTypeFind object the function was called with
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The number of bytes to return
</parameter_description>
</parameter>
</parameters>
<return> the requested data, or NULL
if that data is not available.
</return>
</function>

<function name="gst_type_find_register">
<description>
Registers a new typefind function to be used for typefinding. After
registering this function will be available for typefinding.
This function is typically called during an element's plugin initialization.


</description>
<parameters>
<parameter name="plugin">
<parameter_description> A #GstPlugin, or NULL for a static typefind function (note that
passing NULL only works in GStreamer 0.10.16 and later)
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name for registering
</parameter_description>
</parameter>
<parameter name="rank">
<parameter_description> The rank (or importance) of this typefind function
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The #GstTypeFindFunction to use
</parameter_description>
</parameter>
<parameter name="extensions">
<parameter_description>
Optional extensions that could belong to this type
</parameter_description>
</parameter>
<parameter name="possible_caps">
<parameter_description> Optionally the caps that could be returned when typefinding
succeeds
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Optional user data. This user data must be available until the plugin
is unloaded.
</parameter_description>
</parameter>
<parameter name="data_notify">
<parameter_description> a #GDestroyNotify that will be called on @data when the plugin
is unloaded.
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success, FALSE otherwise
</return>
</function>

<function name="gst_type_find_suggest">
<description>
If a #GstTypeFindFunction calls this function it suggests the caps with the
given probability. A #GstTypeFindFunction may supply different suggestions
in one call.
It is up to the caller of the #GstTypeFindFunction to interpret these values.

</description>
<parameters>
<parameter name="find">
<parameter_description> The #GstTypeFind object the function was called with
</parameter_description>
</parameter>
<parameter name="probability">
<parameter_description> The probability in percent that the suggestion is right
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> The fixed #GstCaps to suggest
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_type_find_suggest_simple">
<description>
If a #GstTypeFindFunction calls this function it suggests the caps with the
given probability. A #GstTypeFindFunction may supply different suggestions
in one call. It is up to the caller of the #GstTypeFindFunction to interpret
these values.

This function is similar to gst_type_find_suggest(), only that instead of
passing a #GstCaps argument you can create the caps on the fly in the same
way as you can with gst_caps_new_simple().

Make sure you terminate the list of arguments with a NULL argument and that
the values passed have the correct type (in terms of width in bytes when
passed to the vararg function - this applies particularly to gdouble and
guint64 arguments).


</description>
<parameters>
<parameter name="find">
<parameter_description> The #GstTypeFind object the function was called with
</parameter_description>
</parameter>
<parameter name="probability">
<parameter_description> The probability in percent that the suggestion is right
</parameter_description>
</parameter>
<parameter name="media_type">
<parameter_description> the media type of the suggested caps
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> first field of the suggested caps, or NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> additional arguments to the suggested caps in the same format as the
arguments passed to gst_structure_new() (ie. triplets of field name,
field GType and field value)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_type_register_static_full">
<description>
Helper function which constructs a #GTypeInfo structure and registers a
GType, but which generates less linker overhead than a static const
#GTypeInfo structure. For further details of the parameters, please see
#GTypeInfo in the GLib documentation.

Registers type_name as the name of a new static type derived from
parent_type. The value of flags determines the nature (e.g. abstract or
not) of the type. It works by filling a GTypeInfo struct and calling
g_type_register_static().


</description>
<parameters>
<parameter name="parent_type">
<parameter_description> The GType of the parent type the newly registered type will
derive from
</parameter_description>
</parameter>
<parameter name="type_name">
<parameter_description> NULL-terminated string used as the name of the new type
</parameter_description>
</parameter>
<parameter name="class_size">
<parameter_description> Size of the class structure.
</parameter_description>
</parameter>
<parameter name="base_init">
<parameter_description> Location of the base initialization function (optional).
</parameter_description>
</parameter>
<parameter name="base_finalize">
<parameter_description> Location of the base finalization function (optional).
</parameter_description>
</parameter>
<parameter name="class_init">
<parameter_description> Location of the class initialization function for class types
Location of the default vtable inititalization function for interface
types. (optional)
</parameter_description>
</parameter>
<parameter name="class_finalize">
<parameter_description> Location of the class finalization function for class types.
Location of the default vtable finalization function for interface types.
(optional)
</parameter_description>
</parameter>
<parameter name="class_data">
<parameter_description> User-supplied data passed to the class init/finalize functions.
</parameter_description>
</parameter>
<parameter name="instance_size">
<parameter_description> Size of the instance (object) structure (required for
instantiatable types only).
</parameter_description>
</parameter>
<parameter name="n_preallocs">
<parameter_description> The number of pre-allocated (cached) instances to reserve
memory for (0 indicates no caching). Ignored on recent GLib's.
</parameter_description>
</parameter>
<parameter name="instance_init">
<parameter_description> Location of the instance initialization function (optional,
for instantiatable types only).
</parameter_description>
</parameter>
<parameter name="value_table">
<parameter_description> A GTypeValueTable function table for generic handling of
GValues of this type (usually only useful for fundamental types).
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GTypeFlags for this GType. E.g: G_TYPE_FLAG_ABSTRACT
</parameter_description>
</parameter>
</parameters>
<return> A #GType for the newly-registered type.

</return>
</function>

<function name="gst_update_registry">
<description>
Forces GStreamer to re-scan its plugin paths and update the default
plugin registry.

Applications will almost never need to call this function, it is only
useful if the application knows new plugins have been installed (or old
ones removed) since the start of the application (or, to be precise, the
first call to gst_init()) and the application wants to make use of any
newly-installed plugins without restarting the application.

Applications should assume that the registry update is neither atomic nor
thread-safe and should therefore not have any dynamic pipelines running
(including the playbin and decodebin elements) and should also not create
any elements or access the GStreamer registry while the update is in
progress.

Note that this function may block for a significant amount of time.


</description>
<parameters>
</parameters>
<return> %TRUE if the registry has been updated successfully (does not
imply that there were changes), otherwise %FALSE.

</return>
</function>

<function name="gst_uri_construct">
<description>
Constructs a URI for a given valid protocol and location.

Free-function: g_free


</description>
<parameters>
<parameter name="protocol">
<parameter_description> Protocol for URI
</parameter_description>
</parameter>
<parameter name="location">
<parameter_description> Location for URI
</parameter_description>
</parameter>
</parameters>
<return> a new string for this
URI. Returns NULL if the given URI protocol is not valid, or the given
location is NULL.
</return>
</function>

<function name="gst_uri_get_location">
<description>
Extracts the location out of a given valid URI, ie. the protocol and &quot;://&quot;
are stripped from the URI, which means that the location returned includes
the hostname if one is specified. The returned string must be freed using
g_free().

Free-function: g_free


</description>
<parameters>
<parameter name="uri">
<parameter_description> A URI string
</parameter_description>
</parameter>
</parameters>
<return> the location for this
URI. Returns NULL if the URI isn't valid. If the URI does not contain
a location, an empty string is returned.
</return>
</function>

<function name="gst_uri_get_protocol">
<description>
Extracts the protocol out of a given valid URI. The returned string must be
freed using g_free().


</description>
<parameters>
<parameter name="uri">
<parameter_description> A URI string
</parameter_description>
</parameter>
</parameters>
<return> The protocol for this URI.
</return>
</function>

<function name="gst_uri_handler_get_protocols">
<description>
Gets the list of protocols supported by @handler. This list may not be
modified.


</description>
<parameters>
<parameter name="handler">
<parameter_description> A #GstURIHandler.
</parameter_description>
</parameter>
</parameters>
<return> the
supported protocols. Returns NULL if the @handler isn't implemented
properly, or the @handler doesn't support any protocols.
</return>
</function>

<function name="gst_uri_handler_get_uri">
<description>
Gets the currently handled URI.


</description>
<parameters>
<parameter name="handler">
<parameter_description> A #GstURIHandler
</parameter_description>
</parameter>
</parameters>
<return> the URI currently handled by the @handler.
Returns NULL if there are no URI currently handled. The
returned string must not be modified or freed.
</return>
</function>

<function name="gst_uri_handler_get_uri_type">
<description>
Gets the type of the given URI handler


</description>
<parameters>
<parameter name="handler">
<parameter_description> A #GstURIHandler.
</parameter_description>
</parameter>
</parameters>
<return> the #GstURIType of the URI handler.
Returns #GST_URI_UNKNOWN if the @handler isn't implemented correctly.
</return>
</function>

<function name="gst_uri_handler_new_uri">
<description>
Emits the new-uri signal for a given handler, when that handler has a new URI.
This function should only be called by URI handlers themselves.

</description>
<parameters>
<parameter name="handler">
<parameter_description> A #GstURIHandler
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> new URI or NULL if it was unset
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_uri_handler_set_uri">
<description>
Tries to set the URI of the given handler.


</description>
<parameters>
<parameter name="handler">
<parameter_description> A #GstURIHandler
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> URI to set
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the URI was set successfully, else FALSE.
</return>
</function>

<function name="gst_uri_has_protocol">
<description>
Checks if the protocol of a given valid URI matches @protocol.


</description>
<parameters>
<parameter name="uri">
<parameter_description> a URI string
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> a protocol string (e.g. &quot;http&quot;)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the protocol matches.

</return>
</function>

<function name="gst_uri_is_valid">
<description>
Tests if the given string is a valid URI identifier. URIs start with a valid
scheme followed by &quot;:&quot; and maybe a string identifying the location.


</description>
<parameters>
<parameter name="uri">
<parameter_description> A URI string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the string is a valid URI
</return>
</function>

<function name="gst_uri_protocol_is_supported">
<description>
Checks if an element exists that supports the given URI protocol. Note
that a positive return value does not imply that a subsequent call to
gst_element_make_from_uri() is guaranteed to work.


</description>
<parameters>
<parameter name="type">
<parameter_description> Whether to check for a source or a sink
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> Protocol that should be checked for (e.g. &quot;http&quot; or &quot;smb&quot;)
</parameter_description>
</parameter>
</parameters>
<return> TRUE

</return>
</function>

<function name="gst_uri_protocol_is_valid">
<description>
Tests if the given string is a valid protocol identifier. Protocols
must consist of alphanumeric characters, '+', '-' and '.' and must
start with a alphabetic character. See RFC 3986 Section 3.1.


</description>
<parameters>
<parameter name="protocol">
<parameter_description> A string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the string is a valid protocol identifier, FALSE otherwise.
</return>
</function>

<function name="gst_util_array_binary_search">
<description>
Searches inside @array for @search_data by using the comparison function
@search_func. @array must be sorted ascending.

As @search_data is always passed as second argument to @search_func it's
not required that @search_data has the same type as the array elements.

The complexity of this search function is O(log (num_elements)).


</description>
<parameters>
<parameter name="array">
<parameter_description> the sorted input array
</parameter_description>
</parameter>
<parameter name="num_elements">
<parameter_description> number of elements in the array
</parameter_description>
</parameter>
<parameter name="element_size">
<parameter_description> size of every element in bytes
</parameter_description>
</parameter>
<parameter name="search_func">
<parameter_description> function to compare two elements, @search_data will always be passed as second argument
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> search mode that should be used
</parameter_description>
</parameter>
<parameter name="search_data">
<parameter_description> element that should be found
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @search_func
</parameter_description>
</parameter>
</parameters>
<return> The address of the found element or %NULL if nothing was found

</return>
</function>

<function name="gst_util_double_to_fraction">
<description>
Transforms a #gdouble to a fraction and simplifies
the result.


</description>
<parameters>
<parameter name="src">
<parameter_description> #gdouble to transform
</parameter_description>
</parameter>
<parameter name="dest_n">
<parameter_description> pointer to a #gint to hold the result numerator
</parameter_description>
</parameter>
<parameter name="dest_d">
<parameter_description> pointer to a #gint to hold the result denominator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_util_dump_mem">
<description>
Dumps the memory block into a hex representation. Useful for debugging.

</description>
<parameters>
<parameter name="mem">
<parameter_description> a pointer to the memory to dump
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the memory block to dump
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_util_fraction_add">
<description>
Adds the fractions @a_n/@a_d and @b_n/@b_d and stores
the result in @res_n and @res_d.


</description>
<parameters>
<parameter name="a_n">
<parameter_description> Numerator of first value
</parameter_description>
</parameter>
<parameter name="a_d">
<parameter_description> Denominator of first value
</parameter_description>
</parameter>
<parameter name="b_n">
<parameter_description> Numerator of second value
</parameter_description>
</parameter>
<parameter name="b_d">
<parameter_description> Denominator of second value
</parameter_description>
</parameter>
<parameter name="res_n">
<parameter_description> Pointer to #gint to hold the result numerator
</parameter_description>
</parameter>
<parameter name="res_d">
<parameter_description> Pointer to #gint to hold the result denominator
</parameter_description>
</parameter>
</parameters>
<return> %FALSE on overflow, %TRUE otherwise.

</return>
</function>

<function name="gst_util_fraction_compare">
<description>
Compares the fractions @a_n/@a_d and @b_n/@b_d and returns
-1 if a &lt; b, 0 if a = b and 1 if a &gt; b.


</description>
<parameters>
<parameter name="a_n">
<parameter_description> Numerator of first value
</parameter_description>
</parameter>
<parameter name="a_d">
<parameter_description> Denominator of first value
</parameter_description>
</parameter>
<parameter name="b_n">
<parameter_description> Numerator of second value
</parameter_description>
</parameter>
<parameter name="b_d">
<parameter_description> Denominator of second value
</parameter_description>
</parameter>
</parameters>
<return> -1 if a &lt; b; 0 if a = b; 1 if a &gt; b.

</return>
</function>

<function name="gst_util_fraction_multiply">
<description>
Multiplies the fractions @a_n/@a_d and @b_n/@b_d and stores
the result in @res_n and @res_d.


</description>
<parameters>
<parameter name="a_n">
<parameter_description> Numerator of first value
</parameter_description>
</parameter>
<parameter name="a_d">
<parameter_description> Denominator of first value
</parameter_description>
</parameter>
<parameter name="b_n">
<parameter_description> Numerator of second value
</parameter_description>
</parameter>
<parameter name="b_d">
<parameter_description> Denominator of second value
</parameter_description>
</parameter>
<parameter name="res_n">
<parameter_description> Pointer to #gint to hold the result numerator
</parameter_description>
</parameter>
<parameter name="res_d">
<parameter_description> Pointer to #gint to hold the result denominator
</parameter_description>
</parameter>
</parameters>
<return> %FALSE on overflow, %TRUE otherwise.

</return>
</function>

<function name="gst_util_fraction_to_double">
<description>
Transforms a fraction to a #gdouble.


</description>
<parameters>
<parameter name="src_n">
<parameter_description> Fraction numerator as #gint
</parameter_description>
</parameter>
<parameter name="src_d">
<parameter_description> Fraction denominator #gint
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> pointer to a #gdouble for the result
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_util_get_timestamp">
<description>
Get a timestamp as GstClockTime to be used for interval meassurements.
The timestamp should not be interpreted in any other way.


</description>
<parameters>
</parameters>
<return> the timestamp

</return>
</function>

<function name="gst_util_greatest_common_divisor">
<description>
Calculates the greatest common divisor of @a
and @b.


</description>
<parameters>
<parameter name="a">
<parameter_description> First value as #gint
</parameter_description>
</parameter>
<parameter name="b">
<parameter_description> Second value as #gint
</parameter_description>
</parameter>
</parameters>
<return> Greatest common divisor of @a and @b

</return>
</function>

<function name="gst_util_seqnum_compare">
<description>
Compare two sequence numbers, handling wraparound.

The current implementation just returns (gint32)(@s1 - @s2).


</description>
<parameters>
<parameter name="s1">
<parameter_description> A sequence number.
</parameter_description>
</parameter>
<parameter name="s2">
<parameter_description> Another sequence number.
</parameter_description>
</parameter>
</parameters>
<return> A negative number if @s1 is before @s2, 0 if they are equal, or a
positive number if @s1 is after @s2.

</return>
</function>

<function name="gst_util_seqnum_next">
<description>
Return a constantly incrementing sequence number.

This function is used internally to GStreamer to be able to determine which
events and messages are &quot;the same&quot;. For example, elements may set the seqnum
on a segment-done message to be the same as that of the last seek event, to
indicate that event and the message correspond to the same segment.


</description>
<parameters>
</parameters>
<return> A constantly incrementing 32-bit unsigned integer, which might
overflow back to 0 at some point. Use gst_util_seqnum_compare() to make sure
you handle wraparound correctly.

</return>
</function>

<function name="gst_util_set_object_arg">
<description>
Convertes the string value to the type of the objects argument and
sets the argument with it.

Note that this function silently returns if @object has no property named
@name or when @value cannot be converted to the type of the property.

</description>
<parameters>
<parameter name="object">
<parameter_description> the object to set the argument of
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the argument to set
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the string value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_util_set_value_from_string">
<description>
Converts the string to the type of the value and
sets the value with it.

Note that this function is dangerous as it does not return any indication
if the conversion worked or not.

</description>
<parameters>
<parameter name="value">
<parameter_description> the value to set
</parameter_description>
</parameter>
<parameter name="value_str">
<parameter_description> the string to get the value from
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_util_uint64_scale">
<description>
Scale @val by the rational number @num / @denom, avoiding overflows and
underflows and without loss of precision.

This function can potentially be very slow if val and num are both
greater than G_MAXUINT32.


</description>
<parameters>
<parameter name="val">
<parameter_description> the number to scale
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> the numerator of the scale ratio
</parameter_description>
</parameter>
<parameter name="denom">
<parameter_description> the denominator of the scale ratio
</parameter_description>
</parameter>
</parameters>
<return> @val * @num / @denom.  In the case of an overflow, this
function returns G_MAXUINT64.  If the result is not exactly
representable as an integer it is truncated.  See also
gst_util_uint64_scale_round(), gst_util_uint64_scale_ceil(),
gst_util_uint64_scale_int(), gst_util_uint64_scale_int_round(),
gst_util_uint64_scale_int_ceil().
</return>
</function>

<function name="gst_util_uint64_scale_ceil">
<description>
Scale @val by the rational number @num / @denom, avoiding overflows and
underflows and without loss of precision.

This function can potentially be very slow if val and num are both
greater than G_MAXUINT32.


</description>
<parameters>
<parameter name="val">
<parameter_description> the number to scale
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> the numerator of the scale ratio
</parameter_description>
</parameter>
<parameter name="denom">
<parameter_description> the denominator of the scale ratio
</parameter_description>
</parameter>
</parameters>
<return> @val * @num / @denom.  In the case of an overflow, this
function returns G_MAXUINT64.  If the result is not exactly
representable as an integer, it is rounded up.  See also
gst_util_uint64_scale(), gst_util_uint64_scale_round(),
gst_util_uint64_scale_int(), gst_util_uint64_scale_int_round(),
gst_util_uint64_scale_int_ceil().
</return>
</function>

<function name="gst_util_uint64_scale_int">
<description>
Scale @val by the rational number @num / @denom, avoiding overflows and
underflows and without loss of precision.  @num must be non-negative and
@denom must be positive.


</description>
<parameters>
<parameter name="val">
<parameter_description> guint64 (such as a #GstClockTime) to scale.
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> numerator of the scale factor.
</parameter_description>
</parameter>
<parameter name="denom">
<parameter_description> denominator of the scale factor.
</parameter_description>
</parameter>
</parameters>
<return> @val * @num / @denom.  In the case of an overflow, this
function returns G_MAXUINT64.  If the result is not exactly
representable as an integer, it is truncated.  See also
gst_util_uint64_scale_int_round(), gst_util_uint64_scale_int_ceil(),
gst_util_uint64_scale(), gst_util_uint64_scale_round(),
gst_util_uint64_scale_ceil().
</return>
</function>

<function name="gst_util_uint64_scale_int_ceil">
<description>
Scale @val by the rational number @num / @denom, avoiding overflows and
underflows and without loss of precision.  @num must be non-negative and
@denom must be positive.


</description>
<parameters>
<parameter name="val">
<parameter_description> guint64 (such as a #GstClockTime) to scale.
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> numerator of the scale factor.
</parameter_description>
</parameter>
<parameter name="denom">
<parameter_description> denominator of the scale factor.
</parameter_description>
</parameter>
</parameters>
<return> @val * @num / @denom.  In the case of an overflow, this
function returns G_MAXUINT64.  If the result is not exactly
representable as an integer, it is rounded up.  See also
gst_util_uint64_scale_int(), gst_util_uint64_scale_int_round(),
gst_util_uint64_scale(), gst_util_uint64_scale_round(),
gst_util_uint64_scale_ceil().
</return>
</function>

<function name="gst_util_uint64_scale_int_round">
<description>
Scale @val by the rational number @num / @denom, avoiding overflows and
underflows and without loss of precision.  @num must be non-negative and
@denom must be positive.


</description>
<parameters>
<parameter name="val">
<parameter_description> guint64 (such as a #GstClockTime) to scale.
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> numerator of the scale factor.
</parameter_description>
</parameter>
<parameter name="denom">
<parameter_description> denominator of the scale factor.
</parameter_description>
</parameter>
</parameters>
<return> @val * @num / @denom.  In the case of an overflow, this
function returns G_MAXUINT64.  If the result is not exactly
representable as an integer, it is rounded to the nearest integer
(half-way cases are rounded up).  See also gst_util_uint64_scale_int(),
gst_util_uint64_scale_int_ceil(), gst_util_uint64_scale(),
gst_util_uint64_scale_round(), gst_util_uint64_scale_ceil().
</return>
</function>

<function name="gst_util_uint64_scale_round">
<description>
Scale @val by the rational number @num / @denom, avoiding overflows and
underflows and without loss of precision.

This function can potentially be very slow if val and num are both
greater than G_MAXUINT32.


</description>
<parameters>
<parameter name="val">
<parameter_description> the number to scale
</parameter_description>
</parameter>
<parameter name="num">
<parameter_description> the numerator of the scale ratio
</parameter_description>
</parameter>
<parameter name="denom">
<parameter_description> the denominator of the scale ratio
</parameter_description>
</parameter>
</parameters>
<return> @val * @num / @denom.  In the case of an overflow, this
function returns G_MAXUINT64.  If the result is not exactly
representable as an integer, it is rounded to the nearest integer
(half-way cases are rounded up).  See also gst_util_uint64_scale(),
gst_util_uint64_scale_ceil(), gst_util_uint64_scale_int(),
gst_util_uint64_scale_int_round(), gst_util_uint64_scale_int_ceil().
</return>
</function>

<function name="gst_value_array_append_value">
<description>
Appends @append_value to the GstValueArray in @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue of type #GST_TYPE_ARRAY
</parameter_description>
</parameter>
<parameter name="append_value">
<parameter_description> the value to append
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_array_get_size">
<description>
Gets the number of values contained in @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue of type #GST_TYPE_ARRAY
</parameter_description>
</parameter>
</parameters>
<return> the number of values
</return>
</function>

<function name="gst_value_array_get_value">
<description>
Gets the value that is a member of the array contained in @value and
has the index @index.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue of type #GST_TYPE_ARRAY
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> index of value to get from the array
</parameter_description>
</parameter>
</parameters>
<return> the value at the given index
</return>
</function>

<function name="gst_value_array_prepend_value">
<description>
Prepends @prepend_value to the GstValueArray in @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue of type #GST_TYPE_ARRAY
</parameter_description>
</parameter>
<parameter name="prepend_value">
<parameter_description> the value to prepend
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_can_compare">
<description>
Determines if @value1 and @value2 can be compared.


</description>
<parameters>
<parameter name="value1">
<parameter_description> a value to compare
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> another value to compare
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the values can be compared
</return>
</function>

<function name="gst_value_can_intersect">
<description>
Determines if intersecting two values will produce a valid result.
Two values will produce a valid intersection if they have the same
type, or if there is a method (registered by
gst_value_register_intersect_func()) to calculate the intersection.


</description>
<parameters>
<parameter name="value1">
<parameter_description> a value to intersect
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> another value to intersect
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the values can intersect
</return>
</function>

<function name="gst_value_can_subtract">
<description>
Checks if it's possible to subtract @subtrahend from @minuend.


</description>
<parameters>
<parameter name="minuend">
<parameter_description> the value to subtract from
</parameter_description>
</parameter>
<parameter name="subtrahend">
<parameter_description> the value to subtract
</parameter_description>
</parameter>
</parameters>
<return> TRUE if a subtraction is possible
</return>
</function>

<function name="gst_value_can_union">
<description>
Determines if @value1 and @value2 can be non-trivially unioned.
Any two values can be trivially unioned by adding both of them
to a GstValueList.  However, certain types have the possibility
to be unioned in a simpler way.  For example, an integer range
and an integer can be unioned if the integer is a subset of the
integer range.  If there is the possibility that two values can
be unioned, this function returns TRUE.


</description>
<parameters>
<parameter name="value1">
<parameter_description> a value to union
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> another value to union
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there is a function allowing the two values to
be unioned.
</return>
</function>

<function name="gst_value_compare">
<description>
Compares @value1 and @value2.  If @value1 and @value2 cannot be
compared, the function returns GST_VALUE_UNORDERED.  Otherwise,
if @value1 is greater than @value2, GST_VALUE_GREATER_THAN is returned.
If @value1 is less than @value2, GST_VALUE_LESS_THAN is returned.
If the values are equal, GST_VALUE_EQUAL is returned.


</description>
<parameters>
<parameter name="value1">
<parameter_description> a value to compare
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> another value to compare
</parameter_description>
</parameter>
</parameters>
<return> comparison result
</return>
</function>

<function name="gst_value_deserialize">
<description>
Tries to deserialize a string into the type specified by the given GValue.
If the operation succeeds, TRUE is returned, FALSE otherwise.


</description>
<parameters>
<parameter name="dest">
<parameter_description> #GValue to fill with contents of
deserialization
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> string to deserialize
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success
</return>
</function>

<function name="gst_value_dup_mini_object">
<description>
Get the contents of a %GST_TYPE_MINI_OBJECT derived #GValue,
increasing its reference count. If the contents of the #GValue
are %NULL, %NULL will be returned.


</description>
<parameters>
<parameter name="value">
<parameter_description>   a valid #GValue of %GST_TYPE_MINI_OBJECT derived type
</parameter_description>
</parameter>
</parameters>
<return> mini object contents of @value

</return>
</function>

<function name="gst_value_fraction_multiply">
<description>
Multiplies the two #GValue items containing a #GST_TYPE_FRACTION and sets
@product to the product of the two fractions.


</description>
<parameters>
<parameter name="product">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
<parameter name="factor1">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
<parameter name="factor2">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
</parameters>
<return> FALSE in case of an error (like integer overflow), TRUE otherwise.
</return>
</function>

<function name="gst_value_fraction_subtract">
<description>
Subtracts the @subtrahend from the @minuend and sets @dest to the result.


</description>
<parameters>
<parameter name="dest">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
<parameter name="minuend">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
<parameter name="subtrahend">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
</parameters>
<return> FALSE in case of an error (like integer overflow), TRUE otherwise.
</return>
</function>

<function name="gst_value_get_caps">
<description>
Gets the contents of @value. The reference count of the returned
#GstCaps will not be modified, therefore the caller must take one
before getting rid of the @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_CAPS
</parameter_description>
</parameter>
</parameters>
<return> the contents of @value
</return>
</function>

<function name="gst_value_get_date">
<description>
Gets the contents of @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_DATE
</parameter_description>
</parameter>
</parameters>
<return> the contents of @value
</return>
</function>

<function name="gst_value_get_double_range_max">
<description>
Gets the maximum of the range specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_DOUBLE_RANGE
</parameter_description>
</parameter>
</parameters>
<return> the maxumum of the range
</return>
</function>

<function name="gst_value_get_double_range_min">
<description>
Gets the minimum of the range specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_DOUBLE_RANGE
</parameter_description>
</parameter>
</parameters>
<return> the minimum of the range
</return>
</function>

<function name="gst_value_get_fourcc">
<description>
Gets the #guint32 fourcc contained in @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to #GST_TYPE_FOURCC
</parameter_description>
</parameter>
</parameters>
<return> the #guint32 fourcc contained in @value.
</return>
</function>

<function name="gst_value_get_fraction_denominator">
<description>
Gets the denominator of the fraction specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
</parameters>
<return> the denominator of the fraction.
</return>
</function>

<function name="gst_value_get_fraction_numerator">
<description>
Gets the numerator of the fraction specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
</parameters>
<return> the numerator of the fraction.
</return>
</function>

<function name="gst_value_get_fraction_range_max">
<description>
Gets the maximum of the range specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_FRACTION_RANGE
</parameter_description>
</parameter>
</parameters>
<return> the maximum of the range
</return>
</function>

<function name="gst_value_get_fraction_range_min">
<description>
Gets the minimum of the range specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_FRACTION_RANGE
</parameter_description>
</parameter>
</parameters>
<return> the minimum of the range
</return>
</function>

<function name="gst_value_get_int64_range_max">
<description>
Gets the maximum of the range specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_INT64_RANGE
</parameter_description>
</parameter>
</parameters>
<return> the maxumum of the range

</return>
</function>

<function name="gst_value_get_int64_range_min">
<description>
Gets the minimum of the range specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_INT64_RANGE
</parameter_description>
</parameter>
</parameters>
<return> the minimum of the range

</return>
</function>

<function name="gst_value_get_int_range_max">
<description>
Gets the maximum of the range specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_INT_RANGE
</parameter_description>
</parameter>
</parameters>
<return> the maxumum of the range
</return>
</function>

<function name="gst_value_get_int_range_min">
<description>
Gets the minimum of the range specified by @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_INT_RANGE
</parameter_description>
</parameter>
</parameters>
<return> the minimum of the range
</return>
</function>

<function name="gst_value_get_mini_object">
<description>
Get the contents of a %GST_TYPE_MINI_OBJECT derived #GValue.
Does not increase the refcount of the returned object.


</description>
<parameters>
<parameter name="value">
<parameter_description>   a valid #GValue of %GST_TYPE_MINI_OBJECT derived type
</parameter_description>
</parameter>
</parameters>
<return> mini object contents of @value
</return>
</function>

<function name="gst_value_get_structure">
<description>
Gets the contents of @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_STRUCTURE
</parameter_description>
</parameter>
</parameters>
<return> the contents of @value

</return>
</function>

<function name="gst_value_init_and_copy">
<description>
Initialises the target value to be of the same type as source and then copies
the contents from source to target.

</description>
<parameters>
<parameter name="dest">
<parameter_description> the target value
</parameter_description>
</parameter>
<parameter name="src">
<parameter_description> the source value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_intersect">
<description>
Calculates the intersection of two values.  If the values have
a non-empty intersection, the value representing the intersection
is placed in @dest.  If the intersection is non-empty, @dest is
not modified.


</description>
<parameters>
<parameter name="dest">
<parameter_description> a uninitialized #GValue that will hold the calculated
intersection value
</parameter_description>
</parameter>
<parameter name="value1">
<parameter_description> a value to intersect
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> another value to intersect
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the intersection is non-empty
</return>
</function>

<function name="gst_value_is_fixed">
<description>
Tests if the given GValue, if available in a GstStructure (or any other
container) contains a &quot;fixed&quot; (which means: one value) or an &quot;unfixed&quot;
(which means: multiple possible values, such as data lists or data
ranges) value.


</description>
<parameters>
<parameter name="value">
<parameter_description> the #GValue to check
</parameter_description>
</parameter>
</parameters>
<return> true if the value is &quot;fixed&quot;.
</return>
</function>

<function name="gst_value_list_append_value">
<description>
Appends @append_value to the GstValueList in @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue of type #GST_TYPE_LIST
</parameter_description>
</parameter>
<parameter name="append_value">
<parameter_description> the value to append
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_list_concat">
<description>
Concatenates copies of @value1 and @value2 into a list.  Values that are not
of type #GST_TYPE_LIST are treated as if they were lists of length 1.
@dest will be initialized to the type #GST_TYPE_LIST.

</description>
<parameters>
<parameter name="dest">
<parameter_description> an uninitialized #GValue to take the result
</parameter_description>
</parameter>
<parameter name="value1">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_list_get_size">
<description>
Gets the number of values contained in @value.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue of type #GST_TYPE_LIST
</parameter_description>
</parameter>
</parameters>
<return> the number of values
</return>
</function>

<function name="gst_value_list_get_value">
<description>
Gets the value that is a member of the list contained in @value and
has the index @index.


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue of type #GST_TYPE_LIST
</parameter_description>
</parameter>
<parameter name="index">
<parameter_description> index of value to get from the list
</parameter_description>
</parameter>
</parameters>
<return> the value at the given index
</return>
</function>

<function name="gst_value_list_merge">
<description>
Merges copies of @value1 and @value2.  Values that are not
of type #GST_TYPE_LIST are treated as if they were lists of length 1.

The result will be put into @dest and will either be a list that will not
contain any duplicates, or a non-list type (if @value1 and @value2
were equal).


</description>
<parameters>
<parameter name="dest">
<parameter_description> an uninitialized #GValue to take the result
</parameter_description>
</parameter>
<parameter name="value1">
<parameter_description> a #GValue
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> a #GValue
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_list_prepend_value">
<description>
Prepends @prepend_value to the GstValueList in @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue of type #GST_TYPE_LIST
</parameter_description>
</parameter>
<parameter name="prepend_value">
<parameter_description> the value to prepend
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_register">
<description>
Registers functions to perform calculations on #GValue items of a given
type. Each type can only be added once.

</description>
<parameters>
<parameter name="table">
<parameter_description> structure containing functions to register
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_register_intersect_func">
<description>
Registers a function that is called to calculate the intersection
of the values having the types @type1 and @type2.

Intersect functions should be registered at startup before any pipelines are
started, as gst_value_register_intersect_func() is not thread-safe and
cannot be used at the same time as gst_value_intersect() or
gst_value_can_intersect().

</description>
<parameters>
<parameter name="type1">
<parameter_description> the first type to intersect
</parameter_description>
</parameter>
<parameter name="type2">
<parameter_description> the second type to intersect
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the intersection function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_register_subtract_func">
<description>
Registers @func as a function capable of subtracting the values of
@subtrahend_type from values of @minuend_type.

Subtract functions should be registered at startup before any pipelines are
started, as gst_value_register_subtract_func() is not thread-safe and
cannot be used at the same time as gst_value_subtract().

</description>
<parameters>
<parameter name="minuend_type">
<parameter_description> type of the minuend
</parameter_description>
</parameter>
<parameter name="subtrahend_type">
<parameter_description> type of the subtrahend
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> function to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_register_union_func">
<description>
Registers a union function that can create a union between #GValue items
of the type @type1 and @type2.

Union functions should be registered at startup before any pipelines are
started, as gst_value_register_union_func() is not thread-safe and cannot
be used at the same time as gst_value_union() or gst_value_can_union().

</description>
<parameters>
<parameter name="type1">
<parameter_description> a type to union
</parameter_description>
</parameter>
<parameter name="type2">
<parameter_description> another type to union
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function that implments creating a union between the two types
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_serialize">
<description>
tries to transform the given @value into a string representation that allows
getting back this string later on using gst_value_deserialize().

Free-function: g_free


</description>
<parameters>
<parameter name="value">
<parameter_description> a #GValue to serialize
</parameter_description>
</parameter>
</parameters>
<return> the serialization for @value or NULL if none exists
</return>
</function>

<function name="gst_value_set_caps">
<description>
Sets the contents of @value to @caps. A reference to the
provided @caps will be taken by the @value.

</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_CAPS
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the caps to set the value to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_date">
<description>
Sets the contents of @value to coorespond to @date.  The actual
#GDate structure is copied before it is used.

</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_DATE
</parameter_description>
</parameter>
<parameter name="date">
<parameter_description> the date to set the value to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_double_range">
<description>
Sets @value to the range specified by @start and @end.

</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_DOUBLE_RANGE
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start of the range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> the end of the range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_fourcc">
<description>
Sets @value to @fourcc.

</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to #GST_TYPE_FOURCC
</parameter_description>
</parameter>
<parameter name="fourcc">
<parameter_description> the #guint32 fourcc to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_fraction">
<description>
Sets @value to the fraction specified by @numerator over @denominator.
The fraction gets reduced to the smallest numerator and denominator,
and if necessary the sign is moved to the numerator.

</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to #GST_TYPE_FRACTION
</parameter_description>
</parameter>
<parameter name="numerator">
<parameter_description> the numerator of the fraction
</parameter_description>
</parameter>
<parameter name="denominator">
<parameter_description> the denominator of the fraction
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_fraction_range">
<description>
Sets @value to the range specified by @start and @end.

</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_FRACTION_RANGE
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start of the range (a GST_TYPE_FRACTION GValue)
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> the end of the range (a GST_TYPE_FRACTION GValue)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_fraction_range_full">
<description>
Sets @value to the range specified by @numerator_start/@denominator_start
and @numerator_end/@denominator_end.

</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_FRACTION_RANGE
</parameter_description>
</parameter>
<parameter name="numerator_start">
<parameter_description> the numerator start of the range
</parameter_description>
</parameter>
<parameter name="denominator_start">
<parameter_description> the denominator start of the range
</parameter_description>
</parameter>
<parameter name="numerator_end">
<parameter_description> the numerator end of the range
</parameter_description>
</parameter>
<parameter name="denominator_end">
<parameter_description> the denominator end of the range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_int64_range">
<description>
Sets @value to the range specified by @start and @end.


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_INT64_RANGE
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start of the range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> the end of the range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_int_range">
<description>
Sets @value to the range specified by @start and @end.

</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_INT_RANGE
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start of the range
</parameter_description>
</parameter>
<parameter name="end">
<parameter_description> the end of the range
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_mini_object">
<description>
Set the contents of a %GST_TYPE_MINI_OBJECT derived #GValue to
@mini_object.
The caller retains ownership of the reference.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %GST_TYPE_MINI_OBJECT derived type
</parameter_description>
</parameter>
<parameter name="mini_object">
<parameter_description> mini object value to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_set_structure">
<description>
Sets the contents of @value to @structure.  The actual


</description>
<parameters>
<parameter name="value">
<parameter_description> a GValue initialized to GST_TYPE_STRUCTURE
</parameter_description>
</parameter>
<parameter name="structure">
<parameter_description> the structure to set the value to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_subtract">
<description>
Subtracts @subtrahend from @minuend and stores the result in @dest.
Note that this means subtraction as in sets, not as in mathematics.


</description>
<parameters>
<parameter name="dest">
<parameter_description> the destination value for the result if the
subtraction is not empty
</parameter_description>
</parameter>
<parameter name="minuend">
<parameter_description> the value to subtract from
</parameter_description>
</parameter>
<parameter name="subtrahend">
<parameter_description> the value to subtract
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the subtraction is not empty
</return>
</function>

<function name="gst_value_take_mini_object">
<description>
Set the contents of a %GST_TYPE_MINI_OBJECT derived #GValue to
@mini_object.
Takes over the ownership of the caller's reference to @mini_object;
the caller doesn't have to unref it any more.

</description>
<parameters>
<parameter name="value">
<parameter_description> a valid #GValue of %GST_TYPE_MINI_OBJECT derived type
</parameter_description>
</parameter>
<parameter name="mini_object">
<parameter_description> mini object value to take
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_value_union">
<description>
Creates a GValue corresponding to the union of @value1 and @value2.


</description>
<parameters>
<parameter name="dest">
<parameter_description> the destination value
</parameter_description>
</parameter>
<parameter name="value1">
<parameter_description> a value to union
</parameter_description>
</parameter>
<parameter name="value2">
<parameter_description> another value to union
</parameter_description>
</parameter>
</parameters>
<return> always returns %TRUE
</return>
</function>

<function name="gst_version">
<description>
Gets the version number of the GStreamer library.

</description>
<parameters>
<parameter name="major">
<parameter_description> pointer to a guint to store the major version number
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> pointer to a guint to store the minor version number
</parameter_description>
</parameter>
<parameter name="micro">
<parameter_description> pointer to a guint to store the micro version number
</parameter_description>
</parameter>
<parameter name="nano">
<parameter_description> pointer to a guint to store the nano version number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_version_string">
<description>
This function returns a string that is useful for describing this version
of GStreamer to the outside world: user agent strings, logging, ...


</description>
<parameters>
</parameters>
<return> a newly allocated string describing this version
of GStreamer.
</return>
</function>

<function name="gst_video_calculate_display_ratio">
<description>
Given the Pixel Aspect Ratio and size of an input video frame, and the 
pixel aspect ratio of the intended display device, calculates the actual 
display ratio the video will be rendered with.


</description>
<parameters>
<parameter name="dar_n">
<parameter_description> Numerator of the calculated display_ratio
</parameter_description>
</parameter>
<parameter name="dar_d">
<parameter_description> Denominator of the calculated display_ratio
</parameter_description>
</parameter>
<parameter name="video_width">
<parameter_description> Width of the video frame in pixels
</parameter_description>
</parameter>
<parameter name="video_height">
<parameter_description> Height of the video frame in pixels
</parameter_description>
</parameter>
<parameter name="video_par_n">
<parameter_description> Numerator of the pixel aspect ratio of the input video.
</parameter_description>
</parameter>
<parameter name="video_par_d">
<parameter_description> Denominator of the pixel aspect ratio of the input video.
</parameter_description>
</parameter>
<parameter name="display_par_n">
<parameter_description> Numerator of the pixel aspect ratio of the display device
</parameter_description>
</parameter>
<parameter name="display_par_d">
<parameter_description> Denominator of the pixel aspect ratio of the display device
</parameter_description>
</parameter>
</parameters>
<return> A boolean indicating success and a calculated Display Ratio in the 
dar_n and dar_d parameters. 
The return value is FALSE in the case of integer overflow or other error. 

</return>
</function>

<function name="gst_video_convert_frame">
<description>
Converts a raw video buffer into the specified output caps.

The output caps can be any raw video formats or any image formats (jpeg, png, ...).

The width, height and pixel-aspect-ratio can also be specified in the output caps.



</description>
<parameters>
<parameter name="buf">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
<parameter name="to_caps">
<parameter_description> the #GstCaps to convert to
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> the maximum amount of time allowed for the processing.
</parameter_description>
</parameter>
<parameter name="err">
<parameter_description> pointer to a #GError. Can be %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The converted #GstBuffer, or %NULL if an error happened (in which case @err
will point to the #GError).

</return>
</function>

<function name="gst_video_convert_frame_async">
<description>
Converts a raw video buffer into the specified output caps.

The output caps can be any raw video formats or any image formats (jpeg, png, ...).

The width, height and pixel-aspect-ratio can also be specified in the output caps.

@callback will be called after conversion, when an error occured or if conversion didn't
finish after @timeout. @callback will always be called from the thread default
%GMainContext, see g_main_context_get_thread_default(). If GLib before 2.22 is used,
this will always be the global default main context.

@destroy_notify will be called after the callback was called and @user_data is not needed
anymore.



</description>
<parameters>
<parameter name="buf">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
<parameter name="to_caps">
<parameter_description> the #GstCaps to convert to
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> the maximum amount of time allowed for the processing.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> %GstVideoConvertFrameCallback that will be called after conversion.
</parameter_description>
</parameter>
<parameter name="destroy_notify">
<parameter_description> %GDestroyNotify to be called after @user_data is not needed anymore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_event_new_still_frame">
<description>
Creates a new Still Frame event. If @in_still is %TRUE, then the event
represents the start of a still frame sequence. If it is %FALSE, then
the event ends a still frame sequence.

To parse an event created by gst_video_event_new_still_frame() use
gst_video_event_parse_still_frame().


</description>
<parameters>
<parameter name="in_still">
<parameter_description> boolean value for the still-frame state of the event.
</parameter_description>
</parameter>
</parameters>
<return> The new GstEvent
</return>
</function>

<function name="gst_video_event_parse_still_frame">
<description>
Parse a #GstEvent, identify if it is a Still Frame event, and
return the still-frame state from the event if it is.
If the event represents the start of a still frame, the in_still
variable will be set to TRUE, otherwise FALSE. It is OK to pass NULL for the
in_still variable order to just check whether the event is a valid still-frame
event.

Create a still frame event using gst_video_event_new_still_frame()


</description>
<parameters>
<parameter name="event">
<parameter_description> A #GstEvent to parse
</parameter_description>
</parameter>
<parameter name="in_still">
<parameter_description> A boolean to receive the still-frame status from the event, or NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event is a valid still-frame event. %FALSE if not
</return>
</function>

<function name="gst_video_format_convert">
<description>
Converts among various #GstFormat types.  This function handles
GST_FORMAT_BYTES, GST_FORMAT_TIME, and GST_FORMAT_DEFAULT.  For
raw video, GST_FORMAT_DEFAULT corresponds to video frames.  This
function can be to handle pad queries of the type GST_QUERY_CONVERT.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of video
</parameter_description>
</parameter>
<parameter name="fps_n">
<parameter_description> frame rate numerator
</parameter_description>
</parameter>
<parameter name="fps_d">
<parameter_description> frame rate denominator
</parameter_description>
</parameter>
<parameter name="src_format">
<parameter_description> #GstFormat of the @src_value
</parameter_description>
</parameter>
<parameter name="src_value">
<parameter_description> value to convert
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> #GstFormat of the @dest_value
</parameter_description>
</parameter>
<parameter name="dest_value">
<parameter_description> pointer to destination value
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the conversion was successful.
</return>
</function>

<function name="gst_video_format_from_fourcc">
<description>
Converts a FOURCC value into the corresponding #GstVideoFormat.
If the FOURCC cannot be represented by #GstVideoFormat,
#GST_VIDEO_FORMAT_UNKNOWN is returned.



</description>
<parameters>
<parameter name="fourcc">
<parameter_description> a FOURCC value representing raw YUV video
</parameter_description>
</parameter>
</parameters>
<return> the #GstVideoFormat describing the FOURCC value
</return>
</function>

<function name="gst_video_format_get_component_depth">
<description>
Returns the number of bits used to encode an individual pixel of
a given component.  Typically this is 8, although higher and lower
values are possible for some formats.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
</parameters>
<return> depth of component
</return>
</function>

<function name="gst_video_format_get_component_height">
<description>
Calculates the height of the component.  See
@gst_video_format_get_row_stride for a description
of the component index.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of video
</parameter_description>
</parameter>
</parameters>
<return> height of component @component
</return>
</function>

<function name="gst_video_format_get_component_offset">
<description>
Calculates the offset (in bytes) of the first pixel of the component
with index @component.  For packed formats, this will typically be a
small integer (0, 1, 2, 3).  For planar formats, this will be a
(relatively) large offset to the beginning of the second or third
component planes.  See @gst_video_format_get_row_stride for a description
of the component index.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of video
</parameter_description>
</parameter>
</parameters>
<return> offset of component @component
</return>
</function>

<function name="gst_video_format_get_component_width">
<description>
Calculates the width of the component.  See
@gst_video_format_get_row_stride for a description
of the component index.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
</parameters>
<return> width of component @component
</return>
</function>

<function name="gst_video_format_get_pixel_stride">
<description>
Calculates the pixel stride (number of bytes from one pixel to the
pixel to its immediate left) for the video component with an index
of @component.  See @gst_video_format_get_row_stride for a description
of the component index.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
</parameters>
<return> pixel stride of component @component
</return>
</function>

<function name="gst_video_format_get_row_stride">
<description>
Calculates the row stride (number of bytes from one row of pixels to
the next) for the video component with an index of @component.  For
YUV video, Y, U, and V have component indices of 0, 1, and 2,
respectively.  For RGB video, R, G, and B have component indicies of
0, 1, and 2, respectively.  Alpha channels, if present, have a component
index of 3.  The @width parameter always represents the width of the
video, not the component.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
</parameters>
<return> row stride of component @component
</return>
</function>

<function name="gst_video_format_get_size">
<description>
Calculates the total number of bytes in the raw video format.  This
number should be used when allocating a buffer for raw video.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of video
</parameter_description>
</parameter>
</parameters>
<return> size (in bytes) of raw video format
</return>
</function>

<function name="gst_video_format_has_alpha">
<description>
Returns TRUE or FALSE depending on if the video format provides an
alpha channel.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @format has an alpha channel
</return>
</function>

<function name="gst_video_format_is_gray">
<description>
Determine whether the video format is a grayscale format.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @format represents grayscale video
</return>
</function>

<function name="gst_video_format_is_rgb">
<description>
Determine whether the video format is an RGB format.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @format represents RGB video
</return>
</function>

<function name="gst_video_format_is_yuv">
<description>
Determine whether the video format is a YUV format.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @format represents YUV video
</return>
</function>

<function name="gst_video_format_new_caps">
<description>
Creates a new #GstCaps object based on the parameters provided.



</description>
<parameters>
<parameter name="format">
<parameter_description> the #GstVideoFormat describing the raw video format
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of video
</parameter_description>
</parameter>
<parameter name="framerate_n">
<parameter_description> numerator of frame rate
</parameter_description>
</parameter>
<parameter name="framerate_d">
<parameter_description> denominator of frame rate
</parameter_description>
</parameter>
<parameter name="par_n">
<parameter_description> numerator of pixel aspect ratio
</parameter_description>
</parameter>
<parameter name="par_d">
<parameter_description> denominator of pixel aspect ratio
</parameter_description>
</parameter>
</parameters>
<return> a new #GstCaps object, or NULL if there was an error
</return>
</function>

<function name="gst_video_format_new_caps_interlaced">
<description>
Creates a new #GstCaps object based on the parameters provided.



</description>
<parameters>
<parameter name="format">
<parameter_description> the #GstVideoFormat describing the raw video format
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of video
</parameter_description>
</parameter>
<parameter name="framerate_n">
<parameter_description> numerator of frame rate
</parameter_description>
</parameter>
<parameter name="framerate_d">
<parameter_description> denominator of frame rate
</parameter_description>
</parameter>
<parameter name="par_n">
<parameter_description> numerator of pixel aspect ratio
</parameter_description>
</parameter>
<parameter name="par_d">
<parameter_description> denominator of pixel aspect ratio
</parameter_description>
</parameter>
<parameter name="interlaced">
<parameter_description> #TRUE if the format is interlaced
</parameter_description>
</parameter>
</parameters>
<return> a new #GstCaps object, or NULL if there was an error
</return>
</function>

<function name="gst_video_format_new_template_caps">
<description>
Creates a new #GstCaps object based on the parameters provided.
Size, frame rate, and pixel aspect ratio are set to the full
range.



</description>
<parameters>
<parameter name="format">
<parameter_description> the #GstVideoFormat describing the raw video format
</parameter_description>
</parameter>
</parameters>
<return> a new #GstCaps object, or NULL if there was an error
</return>
</function>

<function name="gst_video_format_parse_caps">
<description>
Determines the #GstVideoFormat of @caps and places it in the location
pointed to by @format.  Extracts the size of the video and places it
in the location pointed to by @width and @height.  If @caps does not
represent one of the raw video formats listed in #GstVideoFormat, the
function will fail and return FALSE.



</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to parse
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the #GstVideoFormat of the video represented by @caps (output)
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the video represented by @caps, may be NULL (output)
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the video represented by @caps, may be NULL (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps was parsed correctly.
</return>
</function>

<function name="gst_video_format_parse_caps_interlaced">
<description>
Extracts whether the caps represents interlaced content or not and places it
in @interlaced.



</description>
<parameters>
<parameter name="caps">
<parameter_description> the fixed #GstCaps to parse
</parameter_description>
</parameter>
<parameter name="interlaced">
<parameter_description> whether @caps represents interlaced video or not, may be NULL (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps was parsed correctly.
</return>
</function>

<function name="gst_video_format_to_fourcc">
<description>
Converts a #GstVideoFormat value into the corresponding FOURCC.  Only
a few YUV formats have corresponding FOURCC values.  If @format has
no corresponding FOURCC value, 0 is returned.



</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat video format
</parameter_description>
</parameter>
</parameters>
<return> the FOURCC corresponding to @format
</return>
</function>

<function name="gst_video_frame_rate">
<description>
A convenience function to retrieve a GValue holding the framerate
from the caps on a pad.

The pad needs to have negotiated caps containing a framerate property.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pointer to a #GstPad
</parameter_description>
</parameter>
</parameters>
<return> NULL if the pad has no configured caps or the configured caps
do not contain a framerate.

</return>
</function>

<function name="gst_video_get_size">
<description>
Inspect the caps of the provided pad and retrieve the width and height of
the video frames it is configured for.

The pad needs to have negotiated caps containing width and height properties.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pointer to a #GstPad
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> pointer to integer to hold pixel width of the video frames (output)
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> pointer to integer to hold pixel height of the video frames (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the width and height could be retrieved.

</return>
</function>

<function name="gst_video_orientation_get_hcenter">
<description>
Get the horizontal centering offset from the given object.


</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports centering
</return>
</function>

<function name="gst_video_orientation_get_hflip">
<description>
Get the horizontal flipping state (%TRUE for flipped) from the given object.


</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flip">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports flipping
</return>
</function>

<function name="gst_video_orientation_get_vcenter">
<description>
Get the vertical centering offset from the given object.


</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports centering
</return>
</function>

<function name="gst_video_orientation_get_vflip">
<description>
Get the vertical flipping state (%TRUE for flipped) from the given object.


</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flip">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports flipping
</return>
</function>

<function name="gst_video_orientation_set_hcenter">
<description>
Set the horizontal centering offset for the given object.


</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> centering offset
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports centering
</return>
</function>

<function name="gst_video_orientation_set_hflip">
<description>
Set the horizontal flipping state (%TRUE for flipped) for the given object.


</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flip">
<parameter_description> use flipping
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports flipping
</return>
</function>

<function name="gst_video_orientation_set_vcenter">
<description>
Set the vertical centering offset for the given object.


</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> centering offset
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports centering
</return>
</function>

<function name="gst_video_orientation_set_vflip">
<description>
Set the vertical flipping state (%TRUE for flipped) for the given object.


</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flip">
<parameter_description> use flipping
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports flipping
</return>
</function>

<function name="gst_video_parse_caps_chroma_site">
<description>
Extracts the chroma site used by the caps.  Possible values are
&quot;mpeg2&quot; for MPEG-2 style chroma siting (co-sited horizontally,
halfway-sited vertically), &quot;jpeg&quot; for JPEG and Theora style
chroma siting (halfway-sited both horizontally and vertically).
Other chroma site values are possible, but uncommon.

When no chroma site is specified in the caps, it should be assumed
to be &quot;mpeg2&quot;.



</description>
<parameters>
<parameter name="caps">
<parameter_description> the fixed #GstCaps to parse
</parameter_description>
</parameter>
</parameters>
<return> a chroma site string, or NULL if no chroma site could be
determined.
</return>
</function>

<function name="gst_video_parse_caps_color_matrix">
<description>
Extracts the color matrix used by the caps.  Possible values are
&quot;sdtv&quot; for the standard definition color matrix (as specified in
Rec. ITU-R BT.470-6) or &quot;hdtv&quot; for the high definition color
matrix (as specified in Rec. ITU-R BT.709)



</description>
<parameters>
<parameter name="caps">
<parameter_description> the fixed #GstCaps to parse
</parameter_description>
</parameter>
</parameters>
<return> a color matrix string, or NULL if no color matrix could be
determined.
</return>
</function>

<function name="gst_video_parse_caps_framerate">
<description>
Extracts the frame rate from @caps and places the values in the locations
pointed to by @fps_n and @fps_d.  Returns TRUE if the values could be
parsed correctly, FALSE if not.

This function can be used with #GstCaps that have any media type; it
is not limited to formats handled by #GstVideoFormat.



</description>
<parameters>
<parameter name="caps">
<parameter_description> pointer to a #GstCaps instance
</parameter_description>
</parameter>
<parameter name="fps_n">
<parameter_description> pointer to integer to hold numerator of frame rate (output)
</parameter_description>
</parameter>
<parameter name="fps_d">
<parameter_description> pointer to integer to hold denominator of frame rate (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps was parsed correctly.
</return>
</function>

<function name="gst_video_parse_caps_palette">
<description>
Returns the palette data from the caps as a #GstBuffer. For
#GST_VIDEO_FORMAT_RGB8_PALETTED this is containing 256 #guint32
values, each containing ARGB colors in native endianness.


</description>
<parameters>
<parameter name="caps">
<parameter_description> #GstCaps to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstBuffer containing the palette data. Unref after usage.
</return>
</function>

<function name="gst_video_parse_caps_pixel_aspect_ratio">
<description>
Extracts the pixel aspect ratio from @caps and places the values in
the locations pointed to by @par_n and @par_d.  Returns TRUE if the
values could be parsed correctly, FALSE if not.

This function can be used with #GstCaps that have any media type; it
is not limited to formats handled by #GstVideoFormat.



</description>
<parameters>
<parameter name="caps">
<parameter_description> pointer to a #GstCaps instance
</parameter_description>
</parameter>
<parameter name="par_n">
<parameter_description> pointer to numerator of pixel aspect ratio (output)
</parameter_description>
</parameter>
<parameter name="par_d">
<parameter_description> pointer to denominator of pixel aspect ratio (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps was parsed correctly.
</return>
</function>

<function name="gst_video_sink_center_rect">
<description>
Takes @src rectangle and position it at the center of @dst rectangle with or
without @scaling. It handles clipping if the @src rectangle is bigger than
the @dst one and @scaling is set to FALSE.

</description>
<parameters>
<parameter name="src">
<parameter_description> the #GstVideoRectangle describing the source area
</parameter_description>
</parameter>
<parameter name="dst">
<parameter_description> the #GstVideoRectangle describing the destination area
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a pointer to a #GstVideoRectangle which will receive the result area
</parameter_description>
</parameter>
<parameter name="scaling">
<parameter_description> a #gboolean indicating if scaling should be applied or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_vorbis_tag_add">
<description>
Convenience function using gst_tag_from_vorbis_tag(), parsing
a vorbis comment string into the right type and adding it to the
given taglist @list.

Unknown vorbiscomment tags will be added to the tag list in form
of a #GST_TAG_EXTENDED_COMMENT (since 0.10.10 at least).

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a vorbiscomment tag string (key in key=value), must be valid UTF-8
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a vorbiscomment value string (value in key=value), must be valid UTF-8
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_x_overlay_expose">
<description>
Tell an overlay that it has been exposed. This will redraw the current frame
in the drawable even if the pipeline is PAUSED.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay to expose.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_x_overlay_got_window_handle">
<description>
This will post a &quot;have-xwindow-id&quot; element message on the bus.

This function should only be used by video overlay plugin developers.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay which got a window
</parameter_description>
</parameter>
<parameter name="handle">
<parameter_description> a platform-specific handle referencing the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_x_overlay_got_xwindow_id">
<description>
This will post a &quot;have-xwindow-id&quot; element message on the bus.

This function should only be used by video overlay plugin developers.

Deprecated: Use gst_x_overlay_got_window_handle() instead.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay which got a XWindow.
</parameter_description>
</parameter>
<parameter name="xwindow_id">
<parameter_description> a #XID referencing the XWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_x_overlay_handle_events">
<description>
Tell an overlay that it should handle events from the window system. These
events are forwared upstream as navigation events. In some window system,
events are not propagated in the window hierarchy if a client is listening
for them. This method allows you to disable events handling completely
from the XOverlay.


</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay to expose.
</parameter_description>
</parameter>
<parameter name="handle_events">
<parameter_description> a #gboolean indicating if events should be handled or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_x_overlay_prepare_xwindow_id">
<description>
This will post a &quot;prepare-xwindow-id&quot; element message on the bus
to give applications an opportunity to call 
gst_x_overlay_set_xwindow_id() before a plugin creates its own
window.

This function should only be used by video overlay plugin developers.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay which does not yet have an XWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_x_overlay_set_render_rectangle">
<description>
Configure a subregion as a video target within the window set by
gst_x_overlay_set_window_handle(). If this is not used or not supported
the video will fill the area of the window set as the overlay to 100%.
By specifying the rectangle, the video can be overlayed to a specific region
of that window only. After setting the new rectangle one should call
gst_x_overlay_expose() to force a redraw. To unset the region pass -1 for
the @width and @height parameters.

This method is needed for non fullscreen video overlay in UI toolkits that
do not support subwindows.


</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the horizontal offset of the render area inside the window
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the vertical offset of the render area inside the window
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the render area inside the window
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the render area inside the window
</parameter_description>
</parameter>
</parameters>
<return> %FALSE if not supported by the sink.

</return>
</function>

<function name="gst_x_overlay_set_window_handle">
<description>
This will call the video overlay's set_window_handle method. You
should use this method to tell to a XOverlay to display video output to a
specific XWindow. Passing 0 as the xwindow_id will tell the overlay to
stop using that window and create an internal one.


</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay to set the XWindow on.
</parameter_description>
</parameter>
<parameter name="xwindow_id">
<parameter_description> a #XID referencing the XWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_x_overlay_set_xwindow_id">
<description>
This will call the video overlay's set_xwindow_id method. You should
use this method to tell to a XOverlay to display video output to a
specific XWindow. Passing 0 as the xwindow_id will tell the overlay to
stop using that window and create an internal one.

Deprecated: Use gst_x_overlay_set_window_handle() instead.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay to set the XWindow on.
</parameter_description>
</parameter>
<parameter name="xwindow_id">
<parameter_description> a #XID referencing the XWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_xml_get_element">
<description>
This function is used to get a pointer to the GstElement corresponding
to name in the pipeline description. You would use this if you have
to do anything to the element after loading.


</description>
<parameters>
<parameter name="xml">
<parameter_description> The GstXML to get the element from
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> The name of element to retrieve
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a new GstElement, caller owns returned reference.
</return>
</function>

<function name="gst_xml_get_topelements">
<description>
Retrieve a list of toplevel elements.


</description>
<parameters>
<parameter name="xml">
<parameter_description> The GstXML to get the elements from
</parameter_description>
</parameter>
</parameters>
<return> a GList of top-level elements. The caller does not own a copy
of the list and must not free or modify the list. The caller also does not
own a reference to any of the elements in the list and should obtain its own
reference using gst_object_ref() if necessary.
</return>
</function>

<function name="gst_xml_make_element">
<description>
Load the element from the XML description


</description>
<parameters>
<parameter name="cur">
<parameter_description> the xml node
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> the parent of this object when it's loaded
</parameter_description>
</parameter>
</parameters>
<return> the new element
</return>
</function>

<function name="gst_xml_new">
<description>
Create a new GstXML parser object.


</description>
<parameters>
</parameters>
<return> a pointer to a new GstXML object.
</return>
</function>

<function name="gst_xml_parse_doc">
<description>
Fills the GstXML object with the elements from the
xmlDocPtr.


</description>
<parameters>
<parameter name="xml">
<parameter_description> a pointer to a GstXML object
</parameter_description>
</parameter>
<parameter name="doc">
<parameter_description> a pointer to an xml document to parse
</parameter_description>
</parameter>
<parameter name="root">
<parameter_description> The name of the root object to build
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success, FALSE otherwise
</return>
</function>

<function name="gst_xml_parse_file">
<description>
Fills the GstXML object with the corresponding elements from
the XML file fname. Optionally it will only build the element from
the element node root (if it is not NULL). This feature is useful
if you only want to build a specific element from an XML file
but not the pipeline it is embedded in.

Pass &quot;-&quot; as fname to read from stdin. You can also pass a URI
of any format that libxml supports, including http.


</description>
<parameters>
<parameter name="xml">
<parameter_description> a pointer to a GstXML object
</parameter_description>
</parameter>
<parameter name="fname">
<parameter_description> The filename with the xml description
</parameter_description>
</parameter>
<parameter name="root">
<parameter_description> The name of the root object to build
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success, FALSE otherwise
</return>
</function>

<function name="gst_xml_parse_memory">
<description>
Fills the GstXML object with the corresponding elements from
an in memory XML buffer.


</description>
<parameters>
<parameter name="xml">
<parameter_description> a pointer to a GstXML object
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a pointer to the in memory XML buffer
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the buffer
</parameter_description>
</parameter>
<parameter name="root">
<parameter_description> the name of the root objects to build
</parameter_description>
</parameter>
</parameters>
<return> TRUE on success
</return>
</function>

<function name="gst_xml_write">
<description>
Converts the given element into an XML presentation.


</description>
<parameters>
<parameter name="element">
<parameter_description> The element to write out
</parameter_description>
</parameter>
</parameters>
<return> a pointer to an XML document
</return>
</function>

<function name="gst_xml_write_file">
<description>
Converts the given element into XML and writes the formatted XML to an open
file.


</description>
<parameters>
<parameter name="element">
<parameter_description> The element to write out
</parameter_description>
</parameter>
<parameter name="out">
<parameter_description> an open file, like stdout
</parameter_description>
</parameter>
</parameters>
<return> number of bytes written on success, -1 otherwise.
</return>
</function>

<function name="parse_encoding_profile">
<description>

</description>
<parameters>
<parameter name="in">
<parameter_description> a #GKeyFile
</parameter_description>
</parameter>
<parameter name="parentprofilename">
<parameter_description> the parent profile name (including 'profile-' or 'streamprofile-' header)
</parameter_description>
</parameter>
<parameter name="profilename">
<parameter_description> the profile name group to parse
</parameter_description>
</parameter>
<parameter name="nbgroups">
<parameter_description> the number of top-level groups
</parameter_description>
</parameter>
<parameter name="groups">
<parameter_description> the top-level groups
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="read_packet_header">
<description>
Read the packet headers for the packet pointed to by @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a packet
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @packet pointed to a valid header.
</return>
</function>

<function name="str_case_equal">
<description>
Compares @v1 and @v2 in a case-insensitive manner


</description>
<parameters>
<parameter name="v1">
<parameter_description> an ASCII string
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> another ASCII string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if they are equal (modulo case)
</return>
</function>

<function name="str_case_hash">
<description>
Hashes @key in a case-insensitive manner.


</description>
<parameters>
<parameter name="key">
<parameter_description> ASCII string to hash
</parameter_description>
</parameter>
</parameters>
<return> the hash code.
</return>
</function>

<function name="validate_data">
<description>
Checks if @data is a valid RTP packet.


</description>
<parameters>
<parameter name="data">
<parameter_description> the data to validate
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @data to validate
</parameter_description>
</parameter>
<parameter name="payload">
<parameter_description> the payload if @data represents the header only
</parameter_description>
</parameter>
<parameter name="payload_len">
<parameter_description> the len of the payload
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @data is a valid RTP packet
</return>
</function>

</root>
