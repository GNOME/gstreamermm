// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstcaps.h>
#include <gstreamermm/structure.h>

namespace Gst
{

GType Caps::get_type()
{
  return gst_caps_get_type();
}

Glib::RefPtr<Caps> Caps::create_any()
{
  return Glib::wrap(gst_caps_new_any());
}

/*
  This method is implemented because gst_caps_new_simple is a variable argument
  function and cannot be wrapped.  In addition, because gst_caps_new_simple
  creates a GstStructure for the GstCaps and will not be called, we must create
  our own GstStructure here and append it to the GstCaps.
*/
Glib::RefPtr<Caps> Caps::create_simple(const Glib::ustring& media_type)
{
  Glib::RefPtr<Caps> result = Glib::wrap(gst_caps_new_empty());
  GstStructure* gst_struct = gst_structure_empty_new(media_type.c_str());
  gst_caps_append_structure(result->gobj(), gst_struct);
  return result;
}

Glib::RefPtr<Caps> Caps::create(const Structure& structure)
{
  //We take a copy because gst_caps_append_structure() wants to take ownership:
  GstStructure* copy = gst_structure_copy(structure.gobj());
  return Glib::wrap(gst_caps_new_full(copy, NULL));
}

void Caps::append_structure(const Structure& structure)
{
  //We take a copy because gst_caps_append_structure() wants to take ownership:
  GstStructure* copy = gst_structure_copy(structure.gobj());
  gst_caps_append_structure(gobj(), copy);
}

void Caps::merge_structure(const Structure& structure)
{
  //We take a copy because gst_caps_append_structure() wants to take ownership:
  GstStructure* copy = gst_structure_copy(structure.gobj());
  gst_caps_merge_structure(gobj(), copy);
}

Structure Caps::get_structure(guint idx) const
{
  GstStructure* structure = gst_caps_get_structure(gobj(), idx);
  if(structure)
    return Structure(structure, true /* take_copy */);
  else
    return Structure(); //Use operator bool() to detect this.
}

//TODO: Want to return RefPtr to Caps but using RefPtr in expressions such
// as 'caps->set_simple(name1, value1)->set_simple(name2, value2)' a
// causes gstreamer Structure immutability warnings because the Caps is
// referenced more than once in the expression (see bug #510301).
/*
  This method is implemented in place of gst_caps_set_simple which is a
  variable argument function and cannot be wrapped.  We don't call
  gst_caps_set_simple() directly because we are using a Glib::ValueBase as the
  value to be set instead of listing out each field in the value as would be
  done with gst_caps_set_simple()
*/
//Glib::RefPtr<Caps>
void
Caps::set_simple(const Glib::ustring& name, const Glib::ValueBase& value)
{
  g_return_if_fail((gobj()->structs->len == 1)); // Not simple
  g_return_if_fail (g_atomic_int_get(&(gobj())->refcount) == 1); // IS_WRITABLE(caps) fails

  //Use Gst::Structure so gstremermm GTypes like Gst::Value<Gst::IntRange> are
  //converted to GStreamer types when they are stored in structure

  //The result of gst_caps_get_structure() should not be modified, according to its documentation,
  //but we are reimplementing gst_caps_set_simple() which does that:
  GstStructure* structure = gst_caps_get_structure(gobj(), 0);
  if(structure)
    Structure::_set_gstructure_field(structure, name, value);

  //return Glib::wrap(gobj(), true);
}

xmlpp::Node* Caps::save(xmlpp::Node* parent) const
{
  gst_caps_save_thyself(gobj(), parent->cobj());

  // gst_caps_save_thyself() returns the parent node so return parent here also:
  return parent;
}

} //namespace Gst
