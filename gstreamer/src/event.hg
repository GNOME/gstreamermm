// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/miniobject.h>
#include <gstreamermm/structure.h>
#include <gstreamermm/wrap.h>

_DEFS(gstreamermm,gst)
_PINCLUDE(gstreamermm/private/miniobject_p.h)

namespace Gst
{

class Event : public MiniObject
{
protected:
  _CLASS_GSTMINIOBJECT(Event, GstEvent, GST_EVENT, Gst::MiniObject, GstMiniObject)

public:
  const Structure& get_structure();

public:
  /** Wrap a GstEvent* in a C++ instance, creating an instance of a derived
   * Gst::Event. Gst::wrap() would just create a Gst::Event (rather than a
   * derived one) because the derived Gst::Event classes do not correspond
   * to GType types in the GStreamer API.
   */
  static Glib::RefPtr<Event> wrap(GstEvent* event, bool take_copy=false);

  bool is_downstream() const;
  bool is_upstream() const;
  bool is_serialized() const;

  _MEMBER_GET(event_type, type, EventType, GstEventType)
  _MEMBER_GET(timestamp, timestamp, ClockTime, guint64)
  _MEMBER_GET_GOBJECT(source, src, Gst::Object, GstObject*)

protected:
  Structure structure_;
};

class EventBufferSize : public Event
{
public:
  explicit EventBufferSize(GstEvent* event);

  static Glib::RefPtr<Event> create(Format format, gint64 minsize, gint64 maxsize, bool async);
  void parse(Format& format, gint64& minsize, gint64& maxsize, bool& async);
};

class EventCustom : public Event
{
public:
  explicit EventCustom(GstEvent* event);

  static Glib::RefPtr<Event> create(EventType type, Structure& structure);
};

class EventEos : public Event
{
public:
  explicit EventEos(GstEvent* event);

  static Glib::RefPtr<Event> create();
};

class EventFlushStart : public Event
{
public:
  explicit EventFlushStart(GstEvent* event);

  static Glib::RefPtr<Event> create();
};

class EventFlushStop : public Event
{
public:
  explicit EventFlushStop(GstEvent* event);

  static Glib::RefPtr<Event> create();
};

class EventLatency : public Event
{
public:
  explicit EventLatency(GstEvent* event);

  static Glib::RefPtr<Event> create(ClockTime time);
  void parse(ClockTime& latency);
};

class EventNavigation : public Event
{
public:
  explicit EventNavigation(GstEvent* event);

  static Glib::RefPtr<Event> create(Structure& structure);
};

class EventNewSegment : public Event
{
public:
  explicit EventNewSegment(GstEvent* event);

  static Glib::RefPtr<Event> create(bool update, double rate, Format format, gint64 strat, gint64 stop, gint64 position, double applied_rate=1.0);
  void parse(bool& update, double& rate, Format& format, gint64& start, gint64& stop, gint64& position);
  void parse(bool& update, double& rate, Format& format, gint64& start, gint64& stop, gint64& position, double& applied_rate);
};

class EventQos : public Event
{
public:
  explicit EventQos(GstEvent* event);

  static Glib::RefPtr<Event> create(double proportion, ClockTimeDiff diff, ClockTime timestamp);
  void parse(double& proportion, ClockTimeDiff& diff, ClockTime& timestamp);
};

class EventSeek : public Event
{
public:
  explicit EventSeek(GstEvent* event);

  static Glib::RefPtr<Event> create(double rate, Format format, SeekFlags flags, SeekType start_type, gint64 start, SeekType stop_type, gint64 stop);
  void parse(double& rate, Format& format, SeekFlags& flags, SeekType& start_type, gint64& start, SeekType& stop_type, gint64& stop);
};

class EventTag : public Event
{
public:
  explicit EventTag(GstEvent* event);

  //TODO: static Glib::RefPtr<Event> create(TagList& taglist);
  //TODO: void parse(TagList& taglist);
};

} //namespace Gst
