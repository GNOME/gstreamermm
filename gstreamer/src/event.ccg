/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstenumtypes.h>
#include <gstreamermm/structure.h>
#include <gstreamermm/taglist.h>
_PINCLUDE(gstreamermm/private/miniobject_p.h)

namespace Gst
{

namespace Enums
{

Glib::ustring get_name(EventType t)
{
  return gst_event_type_get_name(GstEventType(t));
}

Glib::QueryQuark get_quark(EventType t)
{
  return Glib::QueryQuark(gst_event_type_to_quark(GstEventType(t)));
}

EventTypeFlags get_flags(EventType t)
{
  return (EventTypeFlags) gst_event_type_get_flags((GstEventType)(t));
}

} //namespace Enums

Glib::RefPtr<Gst::Event> Event::copy() const
{
  return Gst::wrap(gst_event_copy(gobj()));
}

Glib::RefPtr<Gst::Event> Event::create_writable()
{
  return
   Gst::wrap(GST_EVENT(gst_mini_object_make_writable(GST_MINI_OBJECT(gobj()))));
}

bool Event::is_downstream() const
{
  return GST_EVENT_IS_DOWNSTREAM(gobj());
}

bool Event::is_upstream() const
{
  return GST_EVENT_IS_UPSTREAM(gobj());
}

bool Event::is_serialized() const
{
  return GST_EVENT_IS_SERIALIZED(gobj());
}

EventFlushStart::EventFlushStart(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventFlushStart::create()
{
  GstEvent* event = gst_event_new_flush_start();
  return Gst::Event::wrap(event, false);
}

EventFlushStop::EventFlushStop(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventFlushStop::create()
{
  GstEvent* event = gst_event_new_flush_stop();
  return Gst::Event::wrap(event, false);
}

EventEos::EventEos(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventEos::create()
{
  GstEvent* event = gst_event_new_eos();
  return Gst::Event::wrap(event, false);
}

EventNewSegment::EventNewSegment(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventNewSegment::create(bool update, double rate, Format format, gint64 start, gint64 stop, gint64 position, double applied_rate)
{
  GstEvent* event = gst_event_new_new_segment_full(update, rate, applied_rate, GstFormat(format), start, stop, position);
  return Gst::Event::wrap(event, false);
}

void EventNewSegment::parse(bool& update, double& rate, Format& format, gint64& start, gint64& stop, gint64& position) const
{
  gboolean result = FALSE;
  gst_event_parse_new_segment(const_cast<GstEvent*>(gobj()), &result, &rate, (GstFormat*)&format, &start, &stop, &position);
  update = result;
}

void EventNewSegment::parse(bool& update, double& rate, Format& format, gint64& start, gint64& stop, gint64& position, double& applied_rate) const
{
  gboolean result = FALSE;
  gst_event_parse_new_segment_full(const_cast<GstEvent*>(gobj()), &result, &rate, &applied_rate, (GstFormat*)&format, &start, &stop, &position);
  update = result;
}

EventTag::EventTag(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventTag::create(const Gst::TagList& taglist)
{
  //We create a copy because gst_event_new_tag() takes ownership:
  GstTagList* c_taglist = gst_tag_list_copy(taglist.gobj());
  GstEvent* event = gst_event_new_tag(c_taglist);
  return Gst::Event::wrap(event, false);
}

Gst::TagList EventTag::parse() const
{
  GstTagList* gst_taglist = gst_tag_list_new();
  gst_event_parse_tag(const_cast<GstEvent*>(gobj()), &gst_taglist);
  return Gst::TagList(gst_taglist);
}

EventBufferSize::EventBufferSize(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventBufferSize::create(Format format, gint64 minsize, gint64 maxsize, bool async)
{
  GstEvent* event = gst_event_new_buffer_size(GstFormat(format), minsize, maxsize, async);
  return Gst::Event::wrap(event, false);
}

void EventBufferSize::parse(Format& format, gint64& minsize, gint64& maxsize, bool& async) const
{
  gboolean result = FALSE;
  gst_event_parse_buffer_size(const_cast<GstEvent*>(gobj()), (GstFormat*)&format, &minsize, &maxsize, &result);
  async = result;
}

EventQos::EventQos(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventQos::create(double proportion, ClockTimeDiff diff, ClockTime timestamp)
{
  GstEvent* event = gst_event_new_qos(proportion, GstClockTimeDiff(diff), GstClockTime(timestamp));
  return Gst::Event::wrap(event, false);
}

void EventQos::parse(double& proportion, ClockTimeDiff& diff, ClockTime& timestamp) const
{
  gst_event_parse_qos(const_cast<GstEvent*>(gobj()), &proportion, &diff, &timestamp);
}

EventSeek::EventSeek(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventSeek::create(double rate, Format format, SeekFlags flags, SeekType start_type, gint64 start, SeekType stop_type, gint64 stop)
{
  GstEvent* event = gst_event_new_seek(rate, GstFormat(format), GstSeekFlags(flags), GstSeekType(start_type), start, GstSeekType(stop_type), stop);
  return Gst::Event::wrap(event, false);
}

void EventSeek::parse(double& rate, Format& format, SeekFlags& flags, SeekType& start_type, gint64& start, SeekType& stop_type, gint64& stop) const
{
  gst_event_parse_seek(const_cast<GstEvent*>(gobj()), &rate, (GstFormat*)&format, (GstSeekFlags*)&flags, (GstSeekType*)&start_type, &start, (GstSeekType*)&stop_type, &stop);
}

EventNavigation::EventNavigation(GstEvent* castitem) :
Event(castitem)
{}

Glib::RefPtr<Gst::Event> EventNavigation::create(Gst::Structure& structure)
{
  // Make copy because event takes ownership of structure:
  GstStructure* copy = gst_structure_copy(structure.gobj());
  GstEvent* event = gst_event_new_navigation(copy);
  return Gst::Event::wrap(event, false);
}

EventLatency::EventLatency(GstEvent* castitem) :
Event(castitem)
{}

void EventLatency::parse(ClockTime& latency) const
{
  gst_event_parse_latency(const_cast<GstEvent*>(gobj()), &latency);
}

Glib::RefPtr<Gst::Event> EventLatency::create(ClockTime time)
{
  GstEvent* event = gst_event_new_latency(GstClockTime(time));
  return Gst::Event::wrap(event, false);
}

Glib::RefPtr<Gst::Event> Event::wrap(GstEvent* event, bool take_copy)
{
  Glib::RefPtr<Gst::Event> result;

  if(!event)
    return result;

  switch(GST_EVENT_TYPE(event))
  {
    case GST_EVENT_FLUSH_START:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventFlushStart(event) );
      break;
    case GST_EVENT_FLUSH_STOP:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventFlushStop(event) );
      break;
    case GST_EVENT_EOS:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventEos(event) );
      break;
    case GST_EVENT_NEWSEGMENT:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventNewSegment(event) );
      break;
    case GST_EVENT_TAG:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventTag(event) );
      break;
    case GST_EVENT_BUFFERSIZE:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventBufferSize(event) );
      break;
    case GST_EVENT_QOS:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventQos(event) );
      break;
    case GST_EVENT_SEEK:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventSeek(event) );
      break;
    case GST_EVENT_NAVIGATION:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventNavigation(event) );
      break;
    case GST_EVENT_LATENCY:
      result = Glib::RefPtr<Gst::Event>( new Gst::EventLatency(event) );
      break;
    default:
      result = Gst::wrap(event, false);
  }

  if(result && take_copy)
    result->reference();

  return result;
}

} //namespace Gst
