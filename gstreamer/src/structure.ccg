// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstvalue.h> //Must be included before gststructure.h
#include <gst/gststructure.h>
#include <gstreamermm/value.h>
#include <gstreamermm/miniobject.h>

static gboolean
Structure_Foreach_gstreamermm_callback(GQuark field_id, const GValue *value, void* data)
{
  Glib::ValueBase val_base;
  val_base.init(value);

  Gst::Structure::SlotForeach* slot = static_cast<Gst::Structure::SlotForeach*>(data);

  bool result = (*slot)(Glib::QueryQuark(field_id), val_base);
  delete slot;
  return result;
}

static gboolean
Structure_Map_gstreamermm_callback(GQuark field_id, GValue *value, void* data)
{
  Glib::ValueBase val_base;
  val_base.init(value);

  Gst::Structure::SlotMap* slot = static_cast<Gst::Structure::SlotMap*>(data);

  bool result = (*slot)(Glib::QueryQuark(field_id), val_base);
  delete slot;
  return result;
}

namespace Gst
{

Structure::Structure(const Glib::ustring& name)
{
  gobject_ = gst_structure_empty_new(name.c_str());
}

Structure::operator bool() const
{
  return gobject_ != 0;
}

void Structure::get_field(const Glib::ustring& name, Glib::ValueBase& value) const
{
  value.init(gst_structure_get_value(gobj(), name.c_str()));
}

void Structure::set_field(const Glib::ustring& fieldname, const Glib::ValueBase& value)
{
  _set_gstructure_field(gobj(), fieldname, value);
}

void Structure::set_field(const Glib::ustring& fieldname, bool value)
{
   Glib::Value<bool> val;
   val.init( Glib::Value<bool>::value_type() );
   val.set(value);

   set_field(fieldname, val);
}

void Structure::set_field(const Glib::ustring& fieldname, int value)
{
  Glib::Value<int> val;
  val.init( Glib::Value<int>::value_type() );
  val.set(value);

  set_field(fieldname, val);
}

void Structure::set_field(const Glib::ustring& fieldname, guint value)
{
  Glib::Value<guint> val;
  val.init( Glib::Value<guint>::value_type() );
  val.set(value);

  set_field(fieldname, val);
}

void Structure::set_field(const Glib::ustring& fieldname, const Fourcc& value)
{
  //Using a Fourcc is fine because _set_gstructure_field() makes appropriate
  //conversion to GStreamer GType
  Glib::Value<Fourcc> val;
  val.init( Glib::Value<Fourcc>::value_type() );
  val.set(value);

  set_field(fieldname, val);
}

void Structure::set_field(const Glib::ustring& fieldname, double value)
{
  Glib::Value<double> val;
  val.init( Glib::Value<double>::value_type() );
  val.set(value);

  set_field(fieldname, val);
};

//We use std::string, because the encoding is unknown. murrayc
void Structure::set_field(const Glib::ustring& fieldname, const std::string& value)
{
  Glib::Value<std::string> val;
  val.init( Glib::Value<std::string>::value_type() );
  val.set(value);

  set_field(fieldname, val);
}

//We use std::string, because the encoding is unknown. murrayc
void Structure::set_field(const Glib::ustring& fieldname, const char* value)
{
  Glib::Value<std::string> val;
  val.init( Glib::Value<std::string>::value_type() );
  val.set(value);

  set_field(fieldname, val);
}
 
void Structure::set_field(const Glib::ustring& fieldname, const Glib::Date& value)
{
  //Using a Glib::Date is fine because _set_gstructure_field() makes
  //appropriate conversion to GStreamer GType
  Glib::Value<Glib::Date> val;
  val.init( Glib::Value<Glib::Date>::value_type() );
  val.set(value);

  set_field(fieldname, val);
}

void Structure::set_field(const Glib::ustring& fieldname, const ClockTime& value)
{
  //Using a ClockTime is fine because a ClockTime is a GstClockTime which is a
  //guint64 which GStreamer will interpret correctly
  Glib::Value<ClockTime> val;
  val.init( Glib::Value<ClockTime>::value_type() );
  val.set(value);

  set_field(fieldname, val);
}

void Structure::set_field(const Glib::ustring& fieldname, GType enumtype, int value)
{
  gst_structure_set(gobj(), fieldname.c_str(), enumtype, value, NULL);
}

void Structure::set_field(const Glib::ustring& fieldname, const Gst::Fraction& value)
{
  //Using a Gst::Fraction is fine because _set_gstructure_field() makes
  //appropriate conversion to GStreamer GType
  Glib::Value<Gst::Fraction> val;
  val.init( Glib::Value<Gst::Fraction>::value_type() );
  val.set(value);

   set_field(fieldname, val);
}

void Structure::set_field(const Glib::ustring& fieldname, const Gst::FractionRange& value)
{
  //Using a Gst::FractionRange is fine because _set_gstructure_field() makes
  //appropriate conversion to GStreamer GType
  Glib::Value<Gst::FractionRange> val;
  val.init( Glib::Value<Gst::FractionRange>::value_type() );
  val.set(value);

  set_field(fieldname, val);
}



void Structure::_set_gstructure_field(GstStructure* cstructure, const Glib::ustring& fieldname, const Glib::ValueBase& value)
{
  const GType type = G_VALUE_TYPE(value.gobj());

  if (type == Glib::Value<Fourcc>::value_type())
  {
     const Glib::Value<Fourcc>* fourcc =
        static_cast< const Glib::Value<Fourcc>* >(&value);

     gst_structure_set(cstructure, fieldname.c_str(), GST_TYPE_FOURCC,
        fourcc->get().get_fourcc(), NULL);
  }
  else if (type == Glib::Value<IntRange>::value_type())
  {
     const Glib::Value<IntRange>* range =
        static_cast< const Glib::Value<IntRange>* >(&value);

     gst_structure_set(cstructure, fieldname.c_str(), GST_TYPE_INT_RANGE,
        range->get().min, range->get().max, NULL);
  }
  else if (type == Glib::Value<DoubleRange>::value_type())
  {
     const Glib::Value<DoubleRange>* range =
        static_cast< const Glib::Value<DoubleRange>* >(&value);

     gst_structure_set(cstructure, fieldname.c_str(), GST_TYPE_DOUBLE_RANGE,
        range->get().min, range->get().max, NULL);
  }
  else if (type == Glib::Value<Fraction>::value_type())
  {
     const Glib::Value<Fraction>* fract =
        static_cast< const Glib::Value<Fraction>* >(&value);

     gst_structure_set(cstructure, fieldname.c_str(), GST_TYPE_FRACTION,
        fract->get().num, fract->get().denom, NULL);
  }
  else if (type == Glib::Value<FractionRange>::value_type())
  {
     const Glib::Value<FractionRange>* range =
        static_cast< const Glib::Value<FractionRange>* >(&value);

     gst_structure_set(cstructure, fieldname.c_str(), GST_TYPE_FRACTION_RANGE,
         range->get().min.num, range->get().min.denom, range->get().max.num,
             range->get().max.denom, NULL);
  }
  else if (type == Glib::Value<Glib::Date>::value_type())
  {
     const Glib::Value<Glib::Date>* date =
        static_cast< const Glib::Value<Glib::Date>* >(&value);

     gst_structure_set(cstructure, fieldname.c_str(), GST_TYPE_DATE,
         date->get().gobj(), NULL);
  }
  else if (type == Glib::Value<Structure>::value_type())
  {
     const Glib::Value<Structure>* obj =
        static_cast< const Glib::Value<Structure>* >(&value);

     gst_structure_set(cstructure, fieldname.c_str(), GST_TYPE_STRUCTURE,
        obj->get().gobj(), NULL);
  }
  else if (type == Glib::Value<MiniObject>::value_type())
  {
     const Glib::Value<MiniObject>* obj =
        static_cast< const Glib::Value<MiniObject>* >(&value);

     gst_structure_set(cstructure, fieldname.c_str(), GST_TYPE_MINI_OBJECT,
        obj->get().gobj(), NULL);
  }
  else
  {
    //TODO: Why not just use this instead of all the if/else stuff above? murrayc
    gst_structure_set_value(cstructure, fieldname.c_str(), value.gobj());
  }
}

Structure&
Structure::remove_field(const Glib::ustring& fieldname)
{
  gst_structure_remove_field(gobj(), fieldname.c_str());
  return *this;
}

bool
Structure::get_field(const Glib::ustring& name, bool& value) const
{
  gboolean cvalue = FALSE;
  const bool result = gst_structure_get_boolean(gobj(), name.c_str(), &cvalue);
  value = cvalue;
  return result;
}

bool
Structure::get_field(const Glib::ustring& name, int& value) const
{
  return gst_structure_get_int(gobj(), name.c_str(), &value);
}

bool
Structure::get_field(const Glib::ustring& name, guint& value) const
{
  return gst_structure_get_uint(gobj(), name.c_str(), &value);
}

bool
Structure::get_field(const Glib::ustring& name, Fourcc& value) const
{
  guint32 cvalue = 0;
  const bool result = gst_structure_get_fourcc(gobj(), name.c_str(), &cvalue);
  if(result)
    value = Fourcc(cvalue);

  return result;
}


bool
Structure::get_field(const Glib::ustring& name, double& value) const
{
  return gst_structure_get_double(gobj(), name.c_str(), &value);
}

bool
Structure::get_field(const Glib::ustring& name, Glib::ustring& value) const
{
  const gchar* cvalue = gst_structure_get_string(gobj(), name.c_str());
  if(cvalue)
  {
    value = Glib::convert_const_gchar_ptr_to_stdstring(cvalue);
    return true;
  }
  else
    return false;
}

bool
Structure::get_field(const Glib::ustring& name, std::string& value) const
{
  const gchar* cvalue = gst_structure_get_string(gobj(), name.c_str());
  if(cvalue)
  {
    value = Glib::convert_const_gchar_ptr_to_stdstring(cvalue);
    return true;
  }
  else
    return false;
}

bool
Structure::get_field(const Glib::ustring& name, Glib::Date& date) const
{
  GDate *gdate = 0;
  const bool has = gst_structure_get_date(gobj(), name.c_str(), &gdate);
  if(has)
    date.set_julian(g_date_get_julian(gdate)); //TODO: Don't we have a wrap()/constructor for this? If not, we should.

  return has;
}


bool
Structure::get_field(const Glib::ustring& name, ClockTime& value) const
{
  GstClockTime cvalue = 0;
  const bool result = gst_structure_get_clock_time(gobj(), name.c_str(), &cvalue);
  value = cvalue;
  return result;
}


bool
Structure::get_field(const Glib::ustring& name, GType enum_type, int& value) const
{
  return gst_structure_get_enum(gobj(), name.c_str(), enum_type, &value);
}


bool
Structure::get_field(const Glib::ustring& name, Gst::Fraction& f) const
{
  int value_numerator = 0;
  int value_denominator = 0;
  const bool result = gst_structure_get_fraction(gobj(), name.c_str(), &value_numerator, &value_denominator);
  if(result)
    f = Gst::Fraction(value_numerator, value_denominator);
  
  return result;
}

bool
Structure::get_field(const Glib::ustring& name, Gst::FractionRange& range) const
{
  const GValue* gst_fraction_range_val = gst_structure_get_value(gobj(), name.c_str());

  if (gst_structure_get_field_type(gobj(), name.c_str()) == GST_TYPE_FRACTION_RANGE)
  {
    Glib::ValueBase fraction_range_val;
    fraction_range_val.init(gst_fraction_range_val);
    range = Gst::FractionRange(fraction_range_val);
    return true;
  }

  return false;
}

bool
Structure::foreach(const SlotForeach& slot)
{
  SlotForeach* slot_copy = new SlotForeach(slot);
  return gst_structure_foreach(gobj(), &Structure_Foreach_gstreamermm_callback, slot_copy);
}

bool
Structure::map_in_place(const SlotMap& slot)
{
  SlotMap* slot_copy = new SlotMap(slot);
  return gst_structure_map_in_place(gobj(), &Structure_Map_gstreamermm_callback, slot_copy);
}

Structure
Structure::create_from_string(const Glib::ustring& the_string)
{
  return Structure(gst_structure_from_string(the_string.c_str(), NULL)); 
}

} //namespace GstG
