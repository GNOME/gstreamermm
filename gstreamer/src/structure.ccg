// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstvalue.h> //Must be included before gststructure.h
#include <gst/gststructure.h>
#include <gstreamermm/value.h>

static gboolean
Structure_Foreach_gstreamermm_callback(GQuark field_id, const GValue *value, void* data)
{
  Glib::ValueBase val_base;
  val_base.init(value);

  Gst::Structure::SlotForeach* slot = static_cast<Gst::Structure::SlotForeach*>(data);

  bool result = (*slot)(Glib::QueryQuark(field_id), val_base);
  delete slot;
  return result;
}

static gboolean
Structure_Map_gstreamermm_callback(GQuark field_id, GValue *value, void* data)
{
  Glib::ValueBase val_base;
  val_base.init(value);

  Gst::Structure::SlotMap* slot = static_cast<Gst::Structure::SlotMap*>(data);

  bool result = (*slot)(Glib::QueryQuark(field_id), val_base);
  delete slot;
  return result;
}

namespace Gst
{

Structure::Structure(const Glib::ustring& name)
{
  gobject_ = gst_structure_empty_new(name.c_str());
}

void
Structure::get_field(const Glib::ustring& name, Glib::ValueBase& value) const
{
  const GValue* v = gst_structure_get_value(gobj(), name.c_str());

  GType type = G_VALUE_TYPE(v);

  if (type == GST_TYPE_FRACTION)
  {
    value.init(Glib::Value<Fraction>::value_type());

    Glib::Value<Fraction>* fract =
        static_cast< Glib::Value<Fraction>* >(&value);

    fract->set(Fraction(gst_value_get_fraction_numerator(v),
        gst_value_get_fraction_denominator(v)));
  }
  else if (type == GST_TYPE_INT_RANGE)
  {
    value.init(Glib::Value<IntRange>::value_type());

    Glib::Value<IntRange>* range =
        static_cast< Glib::Value<IntRange>* >(&value);

    range->set(IntRange(gst_value_get_int_range_min(v),
        gst_value_get_int_range_max(v)));
  }
  else if (type == GST_TYPE_DOUBLE_RANGE)
  {
    value.init(Glib::Value<DoubleRange>::value_type());

    Glib::Value<DoubleRange>* range =
        static_cast< Glib::Value<DoubleRange>* >(&value);

    range->set(DoubleRange(gst_value_get_double_range_min(v),
        gst_value_get_double_range_max(v)));
  }
  else if (type == GST_TYPE_FRACTION_RANGE)
  {
    const GValue* min = gst_value_get_fraction_range_min(v);
    const GValue* max = gst_value_get_fraction_range_max(v);

    value.init(Glib::Value<FractionRange>::value_type());

    Glib::Value<FractionRange>* range =
        static_cast< Glib::Value<FractionRange>* >(&value);

    range->set(FractionRange(Fraction(gst_value_get_fraction_numerator(min),
        gst_value_get_fraction_denominator(min)),
            Fraction(gst_value_get_fraction_numerator(max),
                gst_value_get_fraction_denominator(max))));
  }
  else
    value.init(v);
}

Structure&
Structure::set_field(const Glib::ustring& fieldname, const Glib::ValueBase& value)
{
  GType type = G_VALUE_TYPE(value.gobj());

  if (type == Glib::Value<Fraction>::value_type())
  {
     const Glib::Value<Fraction>* fract =
        static_cast< const Glib::Value<Fraction>* >(&value);

     gst_structure_set(gobj(), fieldname.c_str(), GST_TYPE_FRACTION,
        fract->get().num, fract->get().denom, NULL);
  }
  else if (type == Glib::Value<IntRange>::value_type())
  {
     const Glib::Value<IntRange>* range =
        static_cast< const Glib::Value<IntRange>* >(&value);

     gst_structure_set(gobj(), fieldname.c_str(), GST_TYPE_INT_RANGE,
        range->get().min, range->get().max, NULL);
  }
  else if (type == Glib::Value<DoubleRange>::value_type())
  {
     const Glib::Value<DoubleRange>* range =
        static_cast< const Glib::Value<DoubleRange>* >(&value);

     gst_structure_set(gobj(), fieldname.c_str(), GST_TYPE_DOUBLE_RANGE,
        range->get().min, range->get().max, NULL);
  }
  else if (type == Glib::Value<FractionRange>::value_type())
  {
     const Glib::Value<FractionRange>* range =
        static_cast< const Glib::Value<FractionRange>* >(&value);

     gst_structure_set(gobj(), fieldname.c_str(), GST_TYPE_FRACTION_RANGE,
         range->get().min.num, range->get().min.denom, range->get().max.num,
             range->get().max.denom, NULL);
  }
  else 
    gst_structure_set_value(gobj(), fieldname.c_str(), value.gobj());

  return *this;
}

Structure&
Structure::remove_field(const Glib::ustring& fieldname)
{
  gst_structure_remove_field(gobj(), fieldname.c_str());
  return *this;
}

bool
Structure::get_boolean(const Glib::ustring& name, Glib::ValueBase& value) const
{
  bool result = gst_structure_has_field_typed(gobj(), name.c_str(), G_TYPE_BOOLEAN);

  if (result)
    value.init(gst_structure_get_value(gobj(), name.c_str()));

  return result;
}

bool
Structure::get_int(const Glib::ustring& name, Glib::ValueBase& value) const
{
  bool result = gst_structure_has_field_typed(gobj(), name.c_str(), G_TYPE_INT);

  if (result)
    value.init(gst_structure_get_value(gobj(), name.c_str()));

  return result;
}

bool
Structure::get_uint(const Glib::ustring& name, Glib::ValueBase& value) const
{
  bool result = gst_structure_has_field_typed(gobj(), name.c_str(), G_TYPE_UINT);

  if (result)
    value.init(gst_structure_get_value(gobj(), name.c_str()));

  return result;
}

bool
Structure::get_fourcc(const Glib::ustring& name, Glib::ValueBase& value) const
{
  bool result = gst_structure_has_field_typed(gobj(), name.c_str(), G_TYPE_UINT);

  if (result)
    value.init(gst_structure_get_value(gobj(), name.c_str()));

  return result;
}


bool
Structure::get_double(const Glib::ustring& name, Glib::ValueBase& value) const
{
  bool result = gst_structure_has_field_typed(gobj(), name.c_str(), G_TYPE_DOUBLE);

  if (result)
    value.init(gst_structure_get_value(gobj(), name.c_str()));

  return result;
}

bool
Structure::get_string(const Glib::ustring& name, Glib::ValueBase& value) const
{
  bool result = gst_structure_has_field_typed(gobj(), name.c_str(), G_TYPE_STRING);

  if (result)
    value.init(gst_structure_get_value(gobj(), name.c_str()));

  return result;
}

bool
Structure::get_date (const Glib::ustring& name, Glib::Date& value) const
{
  GDate *date = 0;
  const bool has = gst_structure_get_date(gobj(), name.c_str(), &date);
  value.set_julian(g_date_get_julian(date));
  return has;
}


bool
Structure::get_clock_time(const Glib::ustring& name, Glib::ValueBase& value) const
{
  bool result = gst_structure_has_field_typed(gobj(), name.c_str(), G_TYPE_UINT64);

  if (result)
    value.init(gst_structure_get_value(gobj(), name.c_str()));

  return result;
}


bool
Structure::get_enum(const Glib::ustring& name, GType enum_type, Glib::ValueBase& value) const
{
  bool result = gst_structure_has_field_typed(gobj(), name.c_str(), enum_type);

  if (result)
    value.init(gst_structure_get_value(gobj(), name.c_str()));

  return result;
}


bool
Structure::get_fraction(const Glib::ustring& name, int& value_numerator, int& value_denominator) const
{
  return gst_structure_get_fraction(gobj(), name.c_str(), &value_numerator, &value_denominator);
}

bool
Structure::foreach(const SlotForeach& slot)
{
  SlotForeach* slot_copy = new SlotForeach(slot);
  return gst_structure_foreach(gobj(), &Structure_Foreach_gstreamermm_callback, slot_copy);
}

bool
Structure::map_in_place(const SlotMap& slot)
{
  SlotMap* slot_copy = new SlotMap(slot);
  return gst_structure_map_in_place(gobj(), &Structure_Map_gstreamermm_callback, slot_copy);
}

Structure
Structure::create_from_string(const Glib::ustring& the_string)
{
  return Structure(gst_structure_from_string(the_string.c_str(), NULL)); 
}

} //namespace Gst
