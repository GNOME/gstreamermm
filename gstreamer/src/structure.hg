// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/clock.h>
#include <gstreamermm/enums.h>

_DEFS(gstreamermm,gst)

namespace Gst
{

/** Structure â€” Generic structure containing fields of names and values.
 * A Structure is a collection of key/value pairs. The keys are expressed as
 * GQuarks and the values can be of any GType.
 *
 * In addition to the key/value pairs, a Structure also has a name. The name
 * starts with a letter and can be folled by letters, numbers and any of
 * "/-_.:".
 *
 * Structure is used by various GStreamer subsystems to store information in a
 * flexible and extensible way. A Structure does not have a refcount because it
 * usually is part of a higher level object such as Caps. It provides a means
 * to enforce mutability using the refcount of the parent.
 *
 * Last reviewed on 2007-10-16 (0.10.15)
 */
class Structure
{
  _CLASS_BOXEDTYPE(Structure, GstStructure, NONE, gst_structure_copy, gst_structure_free)

public:
  typedef sigc::slot<bool, GQuark, const GValue*> ForeachSlot;
  typedef sigc::slot<bool, GQuark, GValue*> MapSlot;

public:
  Structure(const Glib::ustring& name);

  _WRAP_METHOD(int get_size() const, gst_structure_n_fields)
  _WRAP_METHOD(void remove_all_fields(), gst_structure_remove_all_fields)

  _WRAP_METHOD(void set_field(const Glib::ustring& fieldname, const Glib::ValueBase& value), gst_structure_set_value)

  void get_field(const Glib::ustring& fieldname, Glib::ValueBase& value) const;

  _WRAP_METHOD(void remove_field(const Glib::ustring& fieldname), gst_structure_remove_field)
  _WRAP_METHOD(GType get_field_type(const Glib::ustring& fieldname) const, gst_structure_get_field_type)

  bool foreach(const ForeachSlot& slot);

  _WRAP_METHOD(bool has_field(const Glib::ustring& fieldname) const, gst_structure_has_field)
  _WRAP_METHOD(bool has_field(const Glib::ustring& fieldname, GType type) const, gst_structure_has_field_typed)

  /**
   */
  bool get_boolean(const Glib::ustring& fieldname, Glib::ValueBase& value) const;

  bool get_int(const Glib::ustring& fieldname, Glib::ValueBase& value) const;

  bool get_uint(const Glib::ustring& fieldname, Glib::ValueBase& value) const;

  bool get_fourcc(const Glib::ustring& fieldname, Glib::ValueBase& value) const;

  bool get_double(const Glib::ustring& fieldname, Glib::ValueBase& value) const;

  bool get_string(const Glib::ustring& fieldname, Glib::ValueBase& value) const;

  bool get_date(const Glib::ustring& fieldname, Glib::Date& value) const;

  bool get_clock_time(const Glib::ustring& fieldname, Glib::ValueBase& value) const;

  bool get_enum(const Glib::ustring& fieldname, GType enumtype, Glib::ValueBase& value) const;

  bool get_fraction(const Glib::ustring& fieldname, int& value_numerator, int& value_denominator) const;

  bool map_in_place(const MapSlot& slot);

  static Structure create_from_string(const Glib::ustring& the_string);

  _WRAP_METHOD(Glib::QueryQuark get_name_id() const, gst_structure_get_name_id)
  _WRAP_METHOD(Glib::ustring get_name() const, gst_structure_get_name)
  _WRAP_METHOD(bool has_name(const Glib::ustring& name) const, gst_structure_has_name)
  _WRAP_METHOD(void set_name(const Glib::ustring& name), gst_structure_set_name)
  _WRAP_METHOD(Glib::ustring to_string() const, gst_structure_to_string)
  _WRAP_METHOD(Glib::ustring nth_field_name(guint index) const, gst_structure_nth_field_name)
  _IGNORE(
      gst_structure_get_date,
      gst_structure_id_set,
      gst_structure_id_get_value,
      gst_structure_remove_fields_valist,
      gst_structure_fixate_field_boolean,
      gst_structure_id_set_value,
      gst_structure_get_enum,
      gst_structure_get_clock_time,
      gst_structure_remove_all_fields,
      gst_structure_get_fraction,
      gst_structure_remove_field,
      gst_structure_has_field_typed,
      gst_structure_get_string,
      gst_structure_fixate_field_nearest_int,
      gst_structure_fixate_field_nearest_double,
      gst_structure_remove_fields,
      gst_structure_copy,
      gst_structure_id_set_valist,
      gst_structure_get_field_type,
      gst_structure_map_in_place,
      gst_structure_get_value,
      gst_structure_free,
      gst_structure_n_fields,
      gst_structure_get_double,
      gst_structure_get_boolean,
      gst_structure_has_field,
      gst_structure_set,
      gst_structure_get_fourcc,
      gst_structure_set_value,
      gst_structure_foreach,
      gst_structure_fixate_field_nearest_fraction,
      gst_structure_set_valist,
      gst_structure_set_parent_refcount,
      gst_structure_get_int,
      gst_structure_get_uint)

};

} //namespace Gst
