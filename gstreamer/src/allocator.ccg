/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2014-2015 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/memory.h>

_PINCLUDE(gstreamermm/private/object_p.h)

namespace Gst
{
AllocationParams::AllocationParams()
{
  GstAllocationParams params;
  gst_allocation_params_init(&params);
  gobject_ = gst_allocation_params_copy(&params);
}

Glib::RefPtr<Gst::Allocator> Allocator::get_default_allocator()
{
  return Glib::wrap(gst_allocator_find(nullptr), false);
}

void Allocator::set_default()
{
  reference();
  gst_allocator_set_default(gobj());
}

void Allocator_Class::free_vfunc_callback(GstAllocator* self, GstMemory* memory)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
      #endif //GLIBMM_EXCEPTIONS_ENABLED
        // Call the virtual member method, which derived classes might override.
    	Glib::RefPtr<Gst::Memory> mem = Glib::wrap(memory);
        obj->free_vfunc(std::move(mem));
        return;
      #ifdef GLIBMM_EXCEPTIONS_ENABLED
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
      #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
  );

  // Call the original underlying C function:
  if(base && base->free)
  {
    (*base->free)(self, memory);
  }

}

void Gst::Allocator::free_vfunc(Glib::RefPtr<Gst::Memory>&& memory)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_))
  );

  if(base && base->free)
  {
    GstMemory* mem_gobj = memory.release()->gobj();
    (*base->free)(gobj(), mem_gobj);
  }
}

}
