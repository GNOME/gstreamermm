// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstghostpad.h>
#include <gstreamermm/padtemplate.h>

_PINCLUDE(gstreamermm/private/pad_p.h)

namespace Gst
{

GhostPad::GhostPad(const Glib::ustring& name, const Glib::RefPtr<Pad>& target)
  : _CONSTRUCT("name", name.c_str(),
      "direction", (GstPadDirection) target->get_direction())
{
  if (!gst_ghost_pad_construct(gobj(), name.c_str(), target->gobj()))
    g_warning("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<Pad>&): Unsuccessful construction of ghost pad.");
}

GhostPad::GhostPad(const Glib::ustring& name, PadDirection direction)
  : _CONSTRUCT("name", name.c_str(), "direction", (GstPadDirection) direction)
{
  if (!gst_ghost_pad_construct_no_target(gobj(), name.c_str(), (GstPadDirection) direction))
  {
    g_warning("Gst::GhostPad::GhostPad(const Glib::ustring&, PadDirection):"
    " Unsuccessful construction of ghost pad.");
  }
}

GhostPad::GhostPad(const Glib::ustring& name, const Glib::RefPtr<Pad>& target,
  const Glib::RefPtr<PadTemplate>& templ)
    : _CONSTRUCT("name", name.c_str(), "direction",
        (GstPadDirection) target->get_direction(), "template", templ->gobj())
{
  if (!gst_ghost_pad_construct_from_template(gobj(), name.c_str(), target->gobj(), templ->gobj()))
  {
    g_warning("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<Pad>&, const Glib::RefPtr<PadTemplate>&):"
        " Unsuccessful construction of ghost pad.");
  }
}

GhostPad::GhostPad(const Glib::ustring& name, const Glib::RefPtr<PadTemplate>& templ)
    : _CONSTRUCT("name", name.c_str(), "direction", 
        (GstPadDirection) templ->get_direction(), "template", templ->gobj())
{
  if (!gst_ghost_pad_construct_no_target_from_template(gobj(), name.c_str(), templ->gobj()))
  {
    g_warning("Gst::GhostPad::GhostPad(const Glib::ustring&,"
      " const Glib::RefPtr<PadTemplate>&): Unsuccessful construction of ghost"
        " pad.");
  }
}

} //namespace Gst
