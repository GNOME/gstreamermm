// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <stdexcept>
#include <gst/gstelement.h>
#include <gst/gstinterface.h>
#include <gst/gstutils.h>
#include <gstreamermm/bus.h>
#include <gstreamermm/caps.h>
#include <gstreamermm/elementfactory.h>
#include <gstreamermm/event.h>
#include <gstreamermm/index.h>
#include <gstreamermm/message.h>
#include <gstreamermm/pad.h>
#include <gstreamermm/padtemplate.h>
#include <gstreamermm/query.h>

namespace Gst
{

Glib::RefPtr<Element>
Element::create(const Glib::ustring& factoryname, const Glib::ustring& name)
{
  GstElement* element = gst_element_factory_make(factoryname.c_str(), name.c_str());
  return Glib::wrap(element);
}

Glib::RefPtr<Element>
Element::link(const Glib::RefPtr<Element>& other_element)
{
  bool result = gst_element_link(gobj(), other_element->gobj());

  if(result)
    return other_element;
  else
    throw std::runtime_error("failed to link: " + get_name() + "->" + other_element->get_name() + "!\n");
}

Glib::RefPtr<Pad> Element::get_compatible_pad(const Glib::RefPtr<Pad>& pad, const Glib::RefPtr<Caps>& caps)
{
  GstPad* c_pad = gst_element_get_compatible_pad(gobj(), pad->gobj(), caps->gobj());
  if(c_pad)
    return Glib::wrap(c_pad); //gst_element_get_compatible_pad gives us a reference.
  else
    throw std::runtime_error("no unlinked Pad in Element '" + get_name() + "' found!");
}

Glib::RefPtr<PadTemplate> Element::get_compatible_pad_template(const Glib::RefPtr<PadTemplate>& padtemplate)
{
  GstPadTemplate* c_padtemplate = gst_element_get_compatible_pad_template(gobj(), padtemplate->gobj());
  if(c_padtemplate)
  {
    return Glib::wrap(c_padtemplate, true /* take reference */); //gst_element_get_compatible_pad_template() does not give us a reference.
  }
  else
    throw std::runtime_error("no compatible PadTemplate with '" + padtemplate->get_name() + "' in Element '" + get_name() + "' found!");
}

bool Element::query_position(Format& format) const
{
  return gst_element_query_position(const_cast<GstElement*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

bool Element::query_duration(Format& format) const
{
  return gst_element_query_duration(const_cast<GstElement*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

// This method is written manually because an extra ref is necessary. See
// gst_element_send_event() docs
bool Element::send_event(const Glib::RefPtr<Event>& event)
{
  event->reference();
  return gst_element_send_event(gobj(), event->gobj());
}

} //namespace Gst
