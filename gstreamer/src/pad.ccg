// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/caps.h>
#include <gstreamermm/element.h>
#include <gst/gstpad.h>
#include <gst/gstutils.h>

namespace Gst
{

// The C API has gst_pad_new, we just use the very common ::create() here
Glib::RefPtr<Pad>
Pad::create(const Glib::ustring& name, PadDirection direction)
{
  GstPad * pad = gst_pad_new(name.c_str(), GstPadDirection(direction));
  return Glib::wrap(pad, false);
}

static void SignalProxy_SlotPadBlockCallback_gst_callback(GstPad* pad, gboolean blocked, gpointer data) 
{
  Pad::SlotPadBlockCallback * the_slot = static_cast<Pad::SlotPadBlockCallback*>(data);
 (*the_slot)(blocked);
  delete the_slot;
}

bool Pad::set_blocked_async(bool blocked, const SlotPadBlockCallback& slot)
{
  SlotPadBlockCallback* slot_copy = new SlotPadBlockCallback(slot);
  return bool(gst_pad_set_blocked_async(GST_PAD(gobj()), gboolean(blocked), &SignalProxy_SlotPadBlockCallback_gst_callback, slot_copy));
}

bool Pad::query_position(Format& format) const
{
  return gst_pad_query_position(const_cast<GstPad*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

bool Pad::query_duration(Format& format) const
{
  return gst_pad_query_duration(const_cast<GstPad*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

bool Pad::query_peer_position(Format& format) const
{
  return gst_pad_query_peer_position(const_cast<GstPad*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

bool Pad::query_peer_duration(Format& format) const
{
  return gst_pad_query_peer_duration(const_cast<GstPad*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

} //namespace Gst
