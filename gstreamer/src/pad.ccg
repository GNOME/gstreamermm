// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstutils.h>
#include <gst/gstenumtypes.h>
#include <gstreamermm/buffer.h>
#include <gstreamermm/caps.h>
#include <gstreamermm/element.h>
#include <gstreamermm/event.h>
#include <gstreamermm/padtemplate.h>

_PINCLUDE(glibmm/private/object_p.h)
_PINCLUDE(gstreamermm/private/object_p.h)

static void Pad_Block_gstreamermm_callback(GstPad* pad, gboolean blocked, void* data)
{
  Gst::Pad::SlotBlock * the_slot = static_cast<Gst::Pad::SlotBlock*>(data);

  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  try
  {
  #endif //GLIBMM_EXCEPTIONS_ENABLED
    (*the_slot)(Glib::wrap(pad), blocked);
    delete the_slot;
  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  #endif //GLIBMM_EXCEPTIONS_ENABLED

  //Delete once excuting slot
  delete the_slot;
}

static bool Pad_Data_gstreamermm_callback(GstPad* pad, GstMiniObject* mini_obj, void* data)
{
  Gst::Pad::SlotData* the_slot = static_cast<Gst::Pad::SlotData*>(data);

  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  try
  {
  #endif //GLIBMM_EXCEPTIONS_ENABLED
    return (*the_slot)(Glib::wrap(pad, true), Gst::wrap(mini_obj, true));
  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  return TRUE; // Keep data
  #endif //GLIBMM_EXCEPTIONS_ENABLED
}

static void Pad_Data_gstreamermm_callback_disconnect(void* data)
{
  Gst::Pad::SlotData* the_slot = static_cast<Gst::Pad::SlotData*>(data);

  if (the_slot)
    delete the_slot;
}

namespace Gst
{

Glib::RefPtr<Caps> Pad::get_pad_template_caps()
{
  const GstCaps* caps = gst_pad_get_pad_template_caps(gobj());
  GstCaps* copy_caps = gst_caps_copy(caps);
  return Glib::wrap(copy_caps, false);
}

FlowReturn Pad::alloc_buffer(guint64 offset, int size, const Glib::RefPtr<Caps>& caps, Glib::RefPtr<Buffer>& buffer)
{
  GstBuffer* c_buffer = 0;
  GstFlowReturn result = gst_pad_alloc_buffer(gobj(), offset, size, caps->gobj(), &c_buffer);
  buffer = wrap(c_buffer, false);
  return FlowReturn(result);
}

FlowReturn Pad::alloc_buffer_and_set_caps(guint64 offset, int size, const Glib::RefPtr<Caps>& caps, Glib::RefPtr<Buffer>& buffer)
{
  GstBuffer* c_buffer = 0;
  GstFlowReturn result = gst_pad_alloc_buffer_and_set_caps(gobj(), offset, size, caps->gobj(), &c_buffer);
  buffer = wrap(c_buffer, false);
  return FlowReturn(result);
}

FlowReturn Pad::get_range(guint64 offset, guint size, Glib::RefPtr<Buffer>& buffer)
{
  GstBuffer* c_buffer = 0;
  GstFlowReturn result = gst_pad_get_range(gobj(), offset, size, &c_buffer);
  buffer = wrap(c_buffer, false);
  return FlowReturn(result);
}

FlowReturn Pad::push(const Glib::RefPtr<Buffer>& buffer)
{
  buffer->reference();
  return FlowReturn(gst_pad_push(gobj(), buffer->gobj()));
}

bool Pad::push_event(const Glib::RefPtr<Event>& event)
{
  event->reference();
  return gst_pad_push_event(gobj(), event->gobj());
}

FlowReturn Pad::pull_range(guint64 offset, guint size, Glib::RefPtr<Buffer>& buffer)
{
  GstBuffer* c_buffer = 0;
  GstFlowReturn result = gst_pad_pull_range(gobj(), offset, size, &c_buffer);
  buffer = wrap(c_buffer, false);
  return FlowReturn(result);
}

bool Pad::send_event(const Glib::RefPtr<Event>& event)
{
  event->reference();
  return gst_pad_send_event(gobj(), event->gobj());
}

bool Pad::query_position(Format& format) const
{
  return gst_pad_query_position(const_cast<GstPad*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

bool Pad::query_duration(Format& format) const
{
  return gst_pad_query_duration(const_cast<GstPad*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

bool Pad::query_peer_position(Format& format) const
{
  return gst_pad_query_peer_position(const_cast<GstPad*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

bool Pad::query_peer_duration(Format& format) const
{
  return gst_pad_query_peer_duration(const_cast<GstPad*>(gobj()), reinterpret_cast<GstFormat*>(&format), NULL);
}

FlowReturn Pad::chain(const Glib::RefPtr<Buffer>& buffer)
{
  buffer->reference();
  return FlowReturn(gst_pad_chain(gobj(), buffer->gobj()));
}

bool Pad::set_blocked_async(const SlotBlock& slot, bool blocked)
{
  SlotBlock* slot_copy = new SlotBlock(slot);
  return bool(gst_pad_set_blocked_async(GST_PAD(gobj()), gboolean(blocked), &Pad_Block_gstreamermm_callback, slot_copy));
}

gulong Pad::add_data_probe(const SlotData& slot)
{
  SlotData* slot_copy = new SlotData(slot);

  return gst_pad_add_data_probe_full(gobj(), G_CALLBACK (Pad_Data_gstreamermm_callback), slot_copy, &Pad_Data_gstreamermm_callback_disconnect);
}

gulong Pad::add_buffer_probe(const SlotData& slot)
{
  SlotData* slot_copy = new SlotData(slot);

  return gst_pad_add_buffer_probe_full(gobj(), G_CALLBACK (Pad_Data_gstreamermm_callback), slot_copy, &Pad_Data_gstreamermm_callback_disconnect);
}

gulong Pad::add_event_probe(const SlotData& slot)
{
  SlotData* slot_copy = new SlotData(slot);

  return gst_pad_add_event_probe_full(gobj(), G_CALLBACK (Pad_Data_gstreamermm_callback), slot_copy, &Pad_Data_gstreamermm_callback_disconnect);
}

} //namespace Gst
