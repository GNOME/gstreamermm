/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <stdexcept>
#include <gst/gstutils.h>
#include <gst/gstenumtypes.h>

_PINCLUDE(gstreamermm/private/miniobject_p.h)

namespace
{

extern "C"
{

static void Buffer_gstreamermm_callback_destroy(void* data,
  GstMiniObject* /* where_the_object_was */)
{
  delete static_cast<Gst::Buffer*>(data);
}

}

}

namespace Gst
{

Glib::RefPtr<Gst::Buffer> Buffer::copy() const
{
  return Gst::wrap(gst_buffer_copy(gobj()));
}

Glib::RefPtr<Gst::Buffer> Buffer::create_writable()
{
  return Gst::wrap(gst_buffer_make_writable(gobj()));
}

Gst::MiniObject* Buffer_Class::wrap_new(GstMiniObject* object)
{
  // Use this wrap_new() method to ensure that the wrapper is destroyed
  // when the miniobject loses its last reference.

  Gst::Buffer* wrapper = new Gst::Buffer((GstBuffer*)(object));
  gst_mini_object_weak_ref(object, &Buffer_gstreamermm_callback_destroy, wrapper);
  return wrapper;
}

} // namespace Gst
