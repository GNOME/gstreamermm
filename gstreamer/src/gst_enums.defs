;; Apply gst_enums.defs.patch after regenerating.

;; From gstbin.h

;; Original typedef:
;; typedef enum {
;;   /* padding */
;;   GST_BIN_FLAG_LAST		= (GST_ELEMENT_FLAG_LAST << 5)
;; } GstBinFlags;

(define-flags-extended BinFlags
  (in-module "Gst")
  (c-name "GstBinFlags")
  (values
    '("last" "GST_BIN_FLAG_LAST" "(GST_ELEMENT_FLAG_LAST << 5)")
  )
)

;; From gstbuffer.h

;; Original typedef:
;; typedef enum {
;;   GST_BUFFER_FLAG_READONLY   = GST_MINI_OBJECT_FLAG_READONLY,
;;   GST_BUFFER_FLAG_PREROLL    = (GST_MINI_OBJECT_FLAG_LAST << 0),
;;   GST_BUFFER_FLAG_DISCONT    = (GST_MINI_OBJECT_FLAG_LAST << 1),
;;   GST_BUFFER_FLAG_IN_CAPS    = (GST_MINI_OBJECT_FLAG_LAST << 2),
;;   GST_BUFFER_FLAG_GAP        = (GST_MINI_OBJECT_FLAG_LAST << 3),
;;   GST_BUFFER_FLAG_DELTA_UNIT = (GST_MINI_OBJECT_FLAG_LAST << 4),
;;   GST_BUFFER_FLAG_MEDIA1     = (GST_MINI_OBJECT_FLAG_LAST << 5),
;;   GST_BUFFER_FLAG_MEDIA2     = (GST_MINI_OBJECT_FLAG_LAST << 6),
;;   GST_BUFFER_FLAG_MEDIA3     = (GST_MINI_OBJECT_FLAG_LAST << 7),
;;   GST_BUFFER_FLAG_LAST       = (GST_MINI_OBJECT_FLAG_LAST << 8)
;; } GstBufferFlag;

(define-flags-extended BufferFlag
  (in-module "Gst")
  (c-name "GstBufferFlag")
  (values
    '("readonly" "GST_BUFFER_FLAG_READONLY" "GST_MINI_OBJECT_FLAG_READONLY")
    '("preroll" "GST_BUFFER_FLAG_PREROLL" "(GST_MINI_OBJECT_FLAG_LAST << 0)")
    '("discont" "GST_BUFFER_FLAG_DISCONT" "(GST_MINI_OBJECT_FLAG_LAST << 1)")
    '("in-caps" "GST_BUFFER_FLAG_IN_CAPS" "(GST_MINI_OBJECT_FLAG_LAST << 2)")
    '("gap" "GST_BUFFER_FLAG_GAP" "(GST_MINI_OBJECT_FLAG_LAST << 3)")
    '("delta-unit" "GST_BUFFER_FLAG_DELTA_UNIT" "(GST_MINI_OBJECT_FLAG_LAST << 4)")
    '("media1" "GST_BUFFER_FLAG_MEDIA1" "(GST_MINI_OBJECT_FLAG_LAST << 5)")
    '("media2" "GST_BUFFER_FLAG_MEDIA2" "(GST_MINI_OBJECT_FLAG_LAST << 6)")
    '("media3" "GST_BUFFER_FLAG_MEDIA3" "(GST_MINI_OBJECT_FLAG_LAST << 7)")
    '("last" "GST_BUFFER_FLAG_LAST" "(GST_MINI_OBJECT_FLAG_LAST << 8)")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_BUFFER_COPY_FLAGS      = (1 << 0),
;;   GST_BUFFER_COPY_TIMESTAMPS = (1 << 1),
;;   GST_BUFFER_COPY_CAPS       = (1 << 2)
;; } GstBufferCopyFlags;

(define-flags-extended BufferCopyFlags
  (in-module "Gst")
  (c-name "GstBufferCopyFlags")
  (values
    '("flags" "GST_BUFFER_COPY_FLAGS" "(1 << 0)")
    '("timestamps" "GST_BUFFER_COPY_TIMESTAMPS" "(1 << 1)")
    '("caps" "GST_BUFFER_COPY_CAPS" "(1 << 2)")
  )
)

;; From gstbufferlist.h

;; Original typedef:
;; typedef enum {
;;   GST_BUFFER_LIST_CONTINUE,
;;   GST_BUFFER_LIST_SKIP_GROUP,
;;   GST_BUFFER_LIST_END
;; } GstBufferListItem;

(define-enum-extended BufferListItem
  (in-module "Gst")
  (c-name "GstBufferListItem")
  (values
    '("continue" "GST_BUFFER_LIST_CONTINUE" "0")
    '("skip-group" "GST_BUFFER_LIST_SKIP_GROUP" "1")
    '("end" "GST_BUFFER_LIST_END" "2")
  )
)

;; From gstbus.h

;; Original typedef:
;; typedef enum {
;;   GST_BUS_FLUSHING      = (GST_OBJECT_FLAG_LAST << 0),
;;   /* padding */
;;   GST_BUS_FLAG_LAST     = (GST_OBJECT_FLAG_LAST << 1)
;; } GstBusFlags;

(define-flags-extended BusFlags
  (in-module "Gst")
  (c-name "GstBusFlags")
  (values
    '("flushing" "GST_BUS_FLUSHING" "(GST_OBJECT_FLAG_LAST << 0)")
    '("flag-last" "GST_BUS_FLAG_LAST" "(GST_OBJECT_FLAG_LAST << 1)")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_BUS_DROP = 0,
;;   GST_BUS_PASS = 1,
;;   GST_BUS_ASYNC = 2
;; } GstBusSyncReply;

(define-enum-extended BusSyncReply
  (in-module "Gst")
  (c-name "GstBusSyncReply")
  (values
    '("drop" "GST_BUS_DROP" "0")
    '("pass" "GST_BUS_PASS" "1")
    '("async" "GST_BUS_ASYNC" "2")
  )
)

;; From gstcaps.h

;; Original typedef:
;; typedef enum {
;;   GST_CAPS_FLAGS_ANY	= (1 << 0)
;; } GstCapsFlags;

(define-flags-extended CapsFlags
  (in-module "Gst")
  (c-name "GstCapsFlags")
  (values
    '("any" "GST_CAPS_FLAGS_ANY" "(1 << 0)")
  )
)

;; From gstclock.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_CLOCK_OK		=  0,
;;   GST_CLOCK_EARLY	=  1,
;;   GST_CLOCK_UNSCHEDULED	=  2,
;;   GST_CLOCK_BUSY	=  3,
;;   GST_CLOCK_BADTIME	=  4,
;;   GST_CLOCK_ERROR	=  5,
;;   GST_CLOCK_UNSUPPORTED	=  6,
;;   GST_CLOCK_DONE	=  7
;; } GstClockReturn;

(define-enum-extended ClockReturn
  (in-module "Gst")
  (c-name "GstClockReturn")
  (values
    '("ok" "GST_CLOCK_OK" "0")
    '("early" "GST_CLOCK_EARLY" "1")
    '("unscheduled" "GST_CLOCK_UNSCHEDULED" "2")
    '("busy" "GST_CLOCK_BUSY" "3")
    '("badtime" "GST_CLOCK_BADTIME" "4")
    '("error" "GST_CLOCK_ERROR" "5")
    '("unsupported" "GST_CLOCK_UNSUPPORTED" "6")
    '("done" "GST_CLOCK_DONE" "7")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_CLOCK_ENTRY_SINGLE,
;;   GST_CLOCK_ENTRY_PERIODIC
;; } GstClockEntryType;

(define-enum-extended ClockEntryType
  (in-module "Gst")
  (c-name "GstClockEntryType")
  (values
    '("single" "GST_CLOCK_ENTRY_SINGLE" "0")
    '("periodic" "GST_CLOCK_ENTRY_PERIODIC" "1")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC     = (GST_OBJECT_FLAG_LAST << 0),
;;   GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC    = (GST_OBJECT_FLAG_LAST << 1),
;;   GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC   = (GST_OBJECT_FLAG_LAST << 2),
;;   GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC  = (GST_OBJECT_FLAG_LAST << 3),
;;   GST_CLOCK_FLAG_CAN_SET_RESOLUTION     = (GST_OBJECT_FLAG_LAST << 4),
;;   GST_CLOCK_FLAG_CAN_SET_MASTER         = (GST_OBJECT_FLAG_LAST << 5),
;;   /* padding */
;;   GST_CLOCK_FLAG_LAST		        = (GST_OBJECT_FLAG_LAST << 8)
;; } GstClockFlags;

(define-flags-extended ClockFlags
  (in-module "Gst")
  (c-name "GstClockFlags")
  (values
    '("can-do-single-sync" "GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC" "(GST_OBJECT_FLAG_LAST << 0)")
    '("can-do-single-async" "GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC" "(GST_OBJECT_FLAG_LAST << 1)")
    '("can-do-periodic-sync" "GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC" "(GST_OBJECT_FLAG_LAST << 2)")
    '("can-do-periodic-async" "GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC" "(GST_OBJECT_FLAG_LAST << 3)")
    '("can-set-resolution" "GST_CLOCK_FLAG_CAN_SET_RESOLUTION" "(GST_OBJECT_FLAG_LAST << 4)")
    '("can-set-master" "GST_CLOCK_FLAG_CAN_SET_MASTER" "(GST_OBJECT_FLAG_LAST << 5)")
    '("last" "GST_CLOCK_FLAG_LAST" "(GST_OBJECT_FLAG_LAST << 8)")
  )
)

;; From gstdebugutils.h

;; Original typedef:
;; typedef enum {
;;   GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE         = (1<<0),
;;   GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS       = (1<<1),
;;   GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS = (1<<2),
;;   GST_DEBUG_GRAPH_SHOW_STATES             = (1<<3),
;;   GST_DEBUG_GRAPH_SHOW_ALL                = ((1<<4)-1)
;; } GstDebugGraphDetails;

(define-flags-extended DebugGraphDetails
  (in-module "Gst")
  (c-name "GstDebugGraphDetails")
  (values
    '("media-type" "GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE" "(1<<0)")
    '("caps-details" "GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS" "(1<<1)")
    '("non-default-params" "GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS" "(1<<2)")
    '("states" "GST_DEBUG_GRAPH_SHOW_STATES" "(1<<3)")
  )
)

;; From gstelement.h

;; Original typedef:
;; typedef enum {
;;   GST_STATE_VOID_PENDING        = 0,
;;   GST_STATE_NULL                = 1,
;;   GST_STATE_READY               = 2,
;;   GST_STATE_PAUSED              = 3,
;;   GST_STATE_PLAYING             = 4
;; } GstState;

(define-enum-extended State
  (in-module "Gst")
  (c-name "GstState")
  (values
    '("void-pending" "GST_STATE_VOID_PENDING" "0")
    '("null" "GST_STATE_NULL" "1")
    '("ready" "GST_STATE_READY" "2")
    '("paused" "GST_STATE_PAUSED" "3")
    '("playing" "GST_STATE_PLAYING" "4")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_STATE_CHANGE_FAILURE             = 0,
;;   GST_STATE_CHANGE_SUCCESS             = 1,
;;   GST_STATE_CHANGE_ASYNC               = 2,
;;   GST_STATE_CHANGE_NO_PREROLL          = 3
;; } GstStateChangeReturn;

(define-enum-extended StateChangeReturn
  (in-module "Gst")
  (c-name "GstStateChangeReturn")
  (values
    '("failure" "GST_STATE_CHANGE_FAILURE" "0")
    '("success" "GST_STATE_CHANGE_SUCCESS" "1")
    '("async" "GST_STATE_CHANGE_ASYNC" "2")
    '("no-preroll" "GST_STATE_CHANGE_NO_PREROLL" "3")
  )
)

;; Original typedef:
;; typedef enum /*< flags=0 >*/
;; {
;;   GST_STATE_CHANGE_NULL_TO_READY        = (GST_STATE_NULL<<3) | GST_STATE_READY,
;;   GST_STATE_CHANGE_READY_TO_PAUSED      = (GST_STATE_READY<<3) | GST_STATE_PAUSED,
;;   GST_STATE_CHANGE_PAUSED_TO_PLAYING    = (GST_STATE_PAUSED<<3) | GST_STATE_PLAYING,
;;   GST_STATE_CHANGE_PLAYING_TO_PAUSED    = (GST_STATE_PLAYING<<3) | GST_STATE_PAUSED,
;;   GST_STATE_CHANGE_PAUSED_TO_READY      = (GST_STATE_PAUSED<<3) | GST_STATE_READY,
;;   GST_STATE_CHANGE_READY_TO_NULL        = (GST_STATE_READY<<3) | GST_STATE_NULL
;; } GstStateChange;

(define-flags-extended StateChange
  (in-module "Gst")
  (c-name "GstStateChange")
  (values
    '("null-to-ready" "GST_STATE_CHANGE_NULL_TO_READY" "0xA")
    '("ready-to-paused" "GST_STATE_CHANGE_READY_TO_PAUSED" "0x13")
    '("paused-to-playing" "GST_STATE_CHANGE_PAUSED_TO_PLAYING" "0x1C")
    '("playing-to-paused" "GST_STATE_CHANGE_PLAYING_TO_PAUSED" "0x23")
    '("paused-to-ready" "GST_STATE_CHANGE_PAUSED_TO_READY" "0x1A")
    '("ready-to-null" "GST_STATE_CHANGE_READY_TO_NULL" "0x11")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_ELEMENT_LOCKED_STATE      = (GST_OBJECT_FLAG_LAST << 0),
;;   GST_ELEMENT_IS_SINK           = (GST_OBJECT_FLAG_LAST << 1),
;;   GST_ELEMENT_UNPARENTING       = (GST_OBJECT_FLAG_LAST << 2),
;;   GST_ELEMENT_IS_SOURCE         = (GST_OBJECT_FLAG_LAST << 3),
;;   /* padding */
;;   GST_ELEMENT_FLAG_LAST         = (GST_OBJECT_FLAG_LAST << 16)
;; } GstElementFlags;

(define-flags-extended ElementFlags
  (in-module "Gst")
  (c-name "GstElementFlags")
  (values
    '("locked-state" "GST_ELEMENT_LOCKED_STATE" "(GST_OBJECT_FLAG_LAST << 0)")
    '("is-sink" "GST_ELEMENT_IS_SINK" "(GST_OBJECT_FLAG_LAST << 1)")
    '("unparenting" "GST_ELEMENT_UNPARENTING" "(GST_OBJECT_FLAG_LAST << 2)")
    '("is-source" "GST_ELEMENT_IS_SOURCE" "(GST_OBJECT_FLAG_LAST << 3)")
    '("flag-last" "GST_ELEMENT_FLAG_LAST" "(GST_OBJECT_FLAG_LAST << 16)")
  )
)

;; From gsterror.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_CORE_ERROR_FAILED = 1,
;;   GST_CORE_ERROR_TOO_LAZY,
;;   GST_CORE_ERROR_NOT_IMPLEMENTED,
;;   GST_CORE_ERROR_STATE_CHANGE,
;;   GST_CORE_ERROR_PAD,
;;   GST_CORE_ERROR_THREAD,
;;   GST_CORE_ERROR_NEGOTIATION,
;;   GST_CORE_ERROR_EVENT,
;;   GST_CORE_ERROR_SEEK,
;;   GST_CORE_ERROR_CAPS,
;;   GST_CORE_ERROR_TAG,
;;   GST_CORE_ERROR_MISSING_PLUGIN,
;;   GST_CORE_ERROR_CLOCK,
;;   GST_CORE_ERROR_DISABLED,
;;   GST_CORE_ERROR_NUM_ERRORS
;; } GstCoreError;

(define-enum-extended CoreError
  (in-module "Gst")
  (c-name "GstCoreError")
  (values
    '("failed" "GST_CORE_ERROR_FAILED" "1")
    '("too-lazy" "GST_CORE_ERROR_TOO_LAZY" "2")
    '("not-implemented" "GST_CORE_ERROR_NOT_IMPLEMENTED" "3")
    '("state-change" "GST_CORE_ERROR_STATE_CHANGE" "4")
    '("pad" "GST_CORE_ERROR_PAD" "5")
    '("thread" "GST_CORE_ERROR_THREAD" "6")
    '("negotiation" "GST_CORE_ERROR_NEGOTIATION" "7")
    '("event" "GST_CORE_ERROR_EVENT" "8")
    '("seek" "GST_CORE_ERROR_SEEK" "9")
    '("caps" "GST_CORE_ERROR_CAPS" "10")
    '("tag" "GST_CORE_ERROR_TAG" "11")
    '("missing-plugin" "GST_CORE_ERROR_MISSING_PLUGIN" "12")
    '("clock" "GST_CORE_ERROR_CLOCK" "13")
    '("disabled" "GST_CORE_ERROR_DISABLED" "14")
    '("num-errors" "GST_CORE_ERROR_NUM_ERRORS" "15")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_LIBRARY_ERROR_FAILED = 1,
;;   GST_LIBRARY_ERROR_TOO_LAZY,
;;   GST_LIBRARY_ERROR_INIT,
;;   GST_LIBRARY_ERROR_SHUTDOWN,
;;   GST_LIBRARY_ERROR_SETTINGS,
;;   GST_LIBRARY_ERROR_ENCODE,
;;   GST_LIBRARY_ERROR_NUM_ERRORS
;; } GstLibraryError;

(define-enum-extended LibraryError
  (in-module "Gst")
  (c-name "GstLibraryError")
  (values
    '("failed" "GST_LIBRARY_ERROR_FAILED" "1")
    '("too-lazy" "GST_LIBRARY_ERROR_TOO_LAZY" "2")
    '("init" "GST_LIBRARY_ERROR_INIT" "3")
    '("shutdown" "GST_LIBRARY_ERROR_SHUTDOWN" "4")
    '("settings" "GST_LIBRARY_ERROR_SETTINGS" "5")
    '("encode" "GST_LIBRARY_ERROR_ENCODE" "6")
    '("num-errors" "GST_LIBRARY_ERROR_NUM_ERRORS" "7")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_RESOURCE_ERROR_FAILED = 1,
;;   GST_RESOURCE_ERROR_TOO_LAZY,
;;   GST_RESOURCE_ERROR_NOT_FOUND,
;;   GST_RESOURCE_ERROR_BUSY,
;;   GST_RESOURCE_ERROR_OPEN_READ,
;;   GST_RESOURCE_ERROR_OPEN_WRITE,
;;   GST_RESOURCE_ERROR_OPEN_READ_WRITE,
;;   GST_RESOURCE_ERROR_CLOSE,
;;   GST_RESOURCE_ERROR_READ,
;;   GST_RESOURCE_ERROR_WRITE,
;;   GST_RESOURCE_ERROR_SEEK,
;;   GST_RESOURCE_ERROR_SYNC,
;;   GST_RESOURCE_ERROR_SETTINGS,
;;   GST_RESOURCE_ERROR_NO_SPACE_LEFT,
;;   GST_RESOURCE_ERROR_NUM_ERRORS
;; } GstResourceError;

(define-enum-extended ResourceError
  (in-module "Gst")
  (c-name "GstResourceError")
  (values
    '("failed" "GST_RESOURCE_ERROR_FAILED" "1")
    '("too-lazy" "GST_RESOURCE_ERROR_TOO_LAZY" "2")
    '("not-found" "GST_RESOURCE_ERROR_NOT_FOUND" "3")
    '("busy" "GST_RESOURCE_ERROR_BUSY" "4")
    '("open-read" "GST_RESOURCE_ERROR_OPEN_READ" "5")
    '("open-write" "GST_RESOURCE_ERROR_OPEN_WRITE" "6")
    '("open-read-write" "GST_RESOURCE_ERROR_OPEN_READ_WRITE" "7")
    '("close" "GST_RESOURCE_ERROR_CLOSE" "8")
    '("read" "GST_RESOURCE_ERROR_READ" "9")
    '("write" "GST_RESOURCE_ERROR_WRITE" "10")
    '("seek" "GST_RESOURCE_ERROR_SEEK" "11")
    '("sync" "GST_RESOURCE_ERROR_SYNC" "12")
    '("settings" "GST_RESOURCE_ERROR_SETTINGS" "13")
    '("no-space-left" "GST_RESOURCE_ERROR_NO_SPACE_LEFT" "14")
    '("num-errors" "GST_RESOURCE_ERROR_NUM_ERRORS" "15")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_STREAM_ERROR_FAILED = 1,
;;   GST_STREAM_ERROR_TOO_LAZY,
;;   GST_STREAM_ERROR_NOT_IMPLEMENTED,
;;   GST_STREAM_ERROR_TYPE_NOT_FOUND,
;;   GST_STREAM_ERROR_WRONG_TYPE,
;;   GST_STREAM_ERROR_CODEC_NOT_FOUND,
;;   GST_STREAM_ERROR_DECODE,
;;   GST_STREAM_ERROR_ENCODE,
;;   GST_STREAM_ERROR_DEMUX,
;;   GST_STREAM_ERROR_MUX,
;;   GST_STREAM_ERROR_FORMAT,
;;   GST_STREAM_ERROR_DECRYPT,
;;   GST_STREAM_ERROR_DECRYPT_NOKEY,
;;   GST_STREAM_ERROR_NUM_ERRORS
;; } GstStreamError;

(define-enum-extended StreamError
  (in-module "Gst")
  (c-name "GstStreamError")
  (values
    '("failed" "GST_STREAM_ERROR_FAILED" "1")
    '("too-lazy" "GST_STREAM_ERROR_TOO_LAZY" "2")
    '("not-implemented" "GST_STREAM_ERROR_NOT_IMPLEMENTED" "3")
    '("type-not-found" "GST_STREAM_ERROR_TYPE_NOT_FOUND" "4")
    '("wrong-type" "GST_STREAM_ERROR_WRONG_TYPE" "5")
    '("codec-not-found" "GST_STREAM_ERROR_CODEC_NOT_FOUND" "6")
    '("decode" "GST_STREAM_ERROR_DECODE" "7")
    '("encode" "GST_STREAM_ERROR_ENCODE" "8")
    '("demux" "GST_STREAM_ERROR_DEMUX" "9")
    '("mux" "GST_STREAM_ERROR_MUX" "10")
    '("format" "GST_STREAM_ERROR_FORMAT" "11")
    '("decrypt" "GST_STREAM_ERROR_DECRYPT" "12")
    '("decrypt-nokey" "GST_STREAM_ERROR_DECRYPT_NOKEY" "13")
    '("num-errors" "GST_STREAM_ERROR_NUM_ERRORS" "14")
  )
)

;; From gstevent.h

;; Original typedef:
;; typedef enum {
;;   GST_EVENT_TYPE_UPSTREAM       = 1 << 0,
;;   GST_EVENT_TYPE_DOWNSTREAM     = 1 << 1,
;;   GST_EVENT_TYPE_SERIALIZED     = 1 << 2
;; } GstEventTypeFlags;

(define-flags-extended EventTypeFlags
  (in-module "Gst")
  (c-name "GstEventTypeFlags")
  (values
    '("upstream" "GST_EVENT_TYPE_UPSTREAM" "1 << 0")
    '("downstream" "GST_EVENT_TYPE_DOWNSTREAM" "1 << 1")
    '("serialized" "GST_EVENT_TYPE_SERIALIZED" "1 << 2")
  )
)

;; Original typedef:
;; typedef enum {
;;   /* one of these */
;;   GST_SEEK_TYPE_NONE            = 0,
;;   GST_SEEK_TYPE_CUR             = 1,
;;   GST_SEEK_TYPE_SET             = 2,
;;   GST_SEEK_TYPE_END             = 3
;; } GstSeekType;

(define-enum-extended SeekType
  (in-module "Gst")
  (c-name "GstSeekType")
  (values
    '("none" "GST_SEEK_TYPE_NONE" "0")
    '("cur" "GST_SEEK_TYPE_CUR" "1")
    '("set" "GST_SEEK_TYPE_SET" "2")
    '("end" "GST_SEEK_TYPE_END" "3")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_SEEK_FLAG_NONE            = 0,
;;   GST_SEEK_FLAG_FLUSH           = (1 << 0),
;;   GST_SEEK_FLAG_ACCURATE        = (1 << 1),
;;   GST_SEEK_FLAG_KEY_UNIT        = (1 << 2),
;;   GST_SEEK_FLAG_SEGMENT         = (1 << 3),
;;   GST_SEEK_FLAG_SKIP            = (1 << 4)
;; } GstSeekFlags;

(define-flags-extended SeekFlags
  (in-module "Gst")
  (c-name "GstSeekFlags")
  (values
    '("none" "GST_SEEK_FLAG_NONE" "0x0")
    '("flush" "GST_SEEK_FLAG_FLUSH" "(1 << 0)")
    '("accurate" "GST_SEEK_FLAG_ACCURATE" "(1 << 1)")
    '("key-unit" "GST_SEEK_FLAG_KEY_UNIT" "(1 << 2)")
    '("segment" "GST_SEEK_FLAG_SEGMENT" "(1 << 3)")
    '("skip" "GST_SEEK_FLAG_SKIP" "(1 << 4)")
  )
)

;; From gstformat.h

;; Original typedef:
;; typedef enum {
;;   GST_FORMAT_UNDEFINED 	=  0, /* must be first in list */
;;   GST_FORMAT_DEFAULT   	=  1,
;;   GST_FORMAT_BYTES   	=  2,
;;   GST_FORMAT_TIME 	=  3,
;;   GST_FORMAT_BUFFERS	=  4,
;;   GST_FORMAT_PERCENT	=  5
;; } GstFormat;

(define-enum-extended Format
  (in-module "Gst")
  (c-name "GstFormat")
  (values
    '("undefined" "GST_FORMAT_UNDEFINED" "0")
    '("default" "GST_FORMAT_DEFAULT" "1")
    '("bytes" "GST_FORMAT_BYTES" "2")
    '("time" "GST_FORMAT_TIME" "3")
    '("buffers" "GST_FORMAT_BUFFERS" "4")
    '("percent" "GST_FORMAT_PERCENT" "5")
  )
)

;; From gstindex.h

;; Original typedef:
;; typedef enum {
;;   GST_INDEX_UNKNOWN,
;;   GST_INDEX_CERTAIN,
;;   GST_INDEX_FUZZY
;; } GstIndexCertainty;

(define-enum-extended IndexCertainty
  (in-module "Gst")
  (c-name "GstIndexCertainty")
  (values
    '("unknown" "GST_INDEX_UNKNOWN" "0")
    '("certain" "GST_INDEX_CERTAIN" "1")
    '("fuzzy" "GST_INDEX_FUZZY" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_INDEX_ENTRY_ID,
;;   GST_INDEX_ENTRY_ASSOCIATION,
;;   GST_INDEX_ENTRY_OBJECT,
;;   GST_INDEX_ENTRY_FORMAT
;; } GstIndexEntryType;

(define-enum-extended IndexEntryType
  (in-module "Gst")
  (c-name "GstIndexEntryType")
  (values
    '("id" "GST_INDEX_ENTRY_ID" "0")
    '("association" "GST_INDEX_ENTRY_ASSOCIATION" "1")
    '("object" "GST_INDEX_ENTRY_OBJECT" "2")
    '("format" "GST_INDEX_ENTRY_FORMAT" "3")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_INDEX_LOOKUP_EXACT,
;;   GST_INDEX_LOOKUP_BEFORE,
;;   GST_INDEX_LOOKUP_AFTER
;; } GstIndexLookupMethod;

(define-enum-extended IndexLookupMethod
  (in-module "Gst")
  (c-name "GstIndexLookupMethod")
  (values
    '("exact" "GST_INDEX_LOOKUP_EXACT" "0")
    '("before" "GST_INDEX_LOOKUP_BEFORE" "1")
    '("after" "GST_INDEX_LOOKUP_AFTER" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_ASSOCIATION_FLAG_NONE       = 0,
;;   GST_ASSOCIATION_FLAG_KEY_UNIT   = (1 << 0),
;;   GST_ASSOCIATION_FLAG_DELTA_UNIT = (1 << 1),
;; 
;;   /* new flags should start here */
;;   GST_ASSOCIATION_FLAG_LAST     = (1 << 8)
;; } GstAssocFlags;

(define-flags-extended AssocFlags
  (in-module "Gst")
  (c-name "GstAssocFlags")
  (values
    '("none" "GST_ASSOCIATION_FLAG_NONE" "0x0")
    '("key-unit" "GST_ASSOCIATION_FLAG_KEY_UNIT" "(1 << 0)")
    '("delta-unit" "GST_ASSOCIATION_FLAG_DELTA_UNIT" "(1 << 1)")
    '("last" "GST_ASSOCIATION_FLAG_LAST" "(1 << 8)")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_INDEX_RESOLVER_CUSTOM,
;;   GST_INDEX_RESOLVER_GTYPE,
;;   GST_INDEX_RESOLVER_PATH
;; } GstIndexResolverMethod;

(define-enum-extended IndexResolverMethod
  (in-module "Gst")
  (c-name "GstIndexResolverMethod")
  (values
    '("custom" "GST_INDEX_RESOLVER_CUSTOM" "0")
    '("gtype" "GST_INDEX_RESOLVER_GTYPE" "1")
    '("path" "GST_INDEX_RESOLVER_PATH" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_INDEX_WRITABLE    = (GST_OBJECT_FLAG_LAST << 0),
;;   GST_INDEX_READABLE    = (GST_OBJECT_FLAG_LAST << 1),
;; 
;;   GST_INDEX_FLAG_LAST   = (GST_OBJECT_FLAG_LAST << 8)
;; } GstIndexFlags;

(define-flags-extended IndexFlags
  (in-module "Gst")
  (c-name "GstIndexFlags")
  (values
    '("writable" "GST_INDEX_WRITABLE" "(GST_OBJECT_FLAG_LAST << 0)")
    '("readable" "GST_INDEX_READABLE" "(GST_OBJECT_FLAG_LAST << 1)")
    '("flag-last" "GST_INDEX_FLAG_LAST" "(GST_OBJECT_FLAG_LAST << 8)")
  )
)

;; From gstinfo.h

;; Original typedef:
;; typedef enum {
;;   GST_LEVEL_NONE = 0,
;;   GST_LEVEL_ERROR,
;;   GST_LEVEL_WARNING,
;;   GST_LEVEL_INFO,
;;   GST_LEVEL_DEBUG,
;;   GST_LEVEL_LOG,
;;   GST_LEVEL_FIXME = 6,
;;   GST_LEVEL_TRACE = 7,
;;   /* add more */
;;   GST_LEVEL_MEMDUMP = 9,
;;   /* add more */
;;   GST_LEVEL_COUNT
;; } GstDebugLevel;

(define-enum-extended DebugLevel
  (in-module "Gst")
  (c-name "GstDebugLevel")
  (values
    '("none" "GST_LEVEL_NONE" "0")
    '("error" "GST_LEVEL_ERROR" "1")
    '("warning" "GST_LEVEL_WARNING" "2")
    '("info" "GST_LEVEL_INFO" "3")
    '("debug" "GST_LEVEL_DEBUG" "4")
    '("log" "GST_LEVEL_LOG" "5")
    '("fixme" "GST_LEVEL_FIXME" "6")
    '("trace" "GST_LEVEL_TRACE" "7")
    '("memdump" "GST_LEVEL_MEMDUMP" "9")
    '("count" "GST_LEVEL_COUNT" "10")
  )
)

;; Original typedef:
;; typedef enum {
;;   /* colors */
;;   GST_DEBUG_FG_BLACK		= 0x0000,
;;   GST_DEBUG_FG_RED		= 0x0001,
;;   GST_DEBUG_FG_GREEN		= 0x0002,
;;   GST_DEBUG_FG_YELLOW		= 0x0003,
;;   GST_DEBUG_FG_BLUE		= 0x0004,
;;   GST_DEBUG_FG_MAGENTA		= 0x0005,
;;   GST_DEBUG_FG_CYAN		= 0x0006,
;;   GST_DEBUG_FG_WHITE		= 0x0007,
;;   /* background colors */
;;   GST_DEBUG_BG_BLACK		= 0x0000,
;;   GST_DEBUG_BG_RED		= 0x0010,
;;   GST_DEBUG_BG_GREEN		= 0x0020,
;;   GST_DEBUG_BG_YELLOW		= 0x0030,
;;   GST_DEBUG_BG_BLUE		= 0x0040,
;;   GST_DEBUG_BG_MAGENTA		= 0x0050,
;;   GST_DEBUG_BG_CYAN		= 0x0060,
;;   GST_DEBUG_BG_WHITE		= 0x0070,
;;   /* other formats */
;;   GST_DEBUG_BOLD		= 0x0100,
;;   GST_DEBUG_UNDERLINE		= 0x0200
;; } GstDebugColorFlags;

(define-flags-extended DebugColorFlags
  (in-module "Gst")
  (c-name "GstDebugColorFlags")
  (values
    '("fg-black" "GST_DEBUG_FG_BLACK" "0x0000")
    '("fg-red" "GST_DEBUG_FG_RED" "0x0001")
    '("fg-green" "GST_DEBUG_FG_GREEN" "0x0002")
    '("fg-yellow" "GST_DEBUG_FG_YELLOW" "0x0003")
    '("fg-blue" "GST_DEBUG_FG_BLUE" "0x0004")
    '("fg-magenta" "GST_DEBUG_FG_MAGENTA" "0x0005")
    '("fg-cyan" "GST_DEBUG_FG_CYAN" "0x0006")
    '("fg-white" "GST_DEBUG_FG_WHITE" "0x0007")
    '("bg-black" "GST_DEBUG_BG_BLACK" "0x0000")
    '("bg-red" "GST_DEBUG_BG_RED" "0x0010")
    '("bg-green" "GST_DEBUG_BG_GREEN" "0x0020")
    '("bg-yellow" "GST_DEBUG_BG_YELLOW" "0x0030")
    '("bg-blue" "GST_DEBUG_BG_BLUE" "0x0040")
    '("bg-magenta" "GST_DEBUG_BG_MAGENTA" "0x0050")
    '("bg-cyan" "GST_DEBUG_BG_CYAN" "0x0060")
    '("bg-white" "GST_DEBUG_BG_WHITE" "0x0070")
    '("bold" "GST_DEBUG_BOLD" "0x0100")
    '("underline" "GST_DEBUG_UNDERLINE" "0x0200")
  )
)

;; From gstiterator.h

;; Original typedef:
;; typedef enum {
;;   GST_ITERATOR_DONE	= 0,
;;   GST_ITERATOR_OK	= 1,
;;   GST_ITERATOR_RESYNC	= 2,
;;   GST_ITERATOR_ERROR	= 3
;; } GstIteratorResult;

(define-enum-extended IteratorResult
  (in-module "Gst")
  (c-name "GstIteratorResult")
  (values
    '("done" "GST_ITERATOR_DONE" "0")
    '("ok" "GST_ITERATOR_OK" "1")
    '("resync" "GST_ITERATOR_RESYNC" "2")
    '("error" "GST_ITERATOR_ERROR" "3")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_ITERATOR_ITEM_SKIP	= 0,
;;   GST_ITERATOR_ITEM_PASS	= 1,
;;   GST_ITERATOR_ITEM_END		= 2
;; } GstIteratorItem;

(define-enum-extended IteratorItem
  (in-module "Gst")
  (c-name "GstIteratorItem")
  (values
    '("skip" "GST_ITERATOR_ITEM_SKIP" "0")
    '("pass" "GST_ITERATOR_ITEM_PASS" "1")
    '("end" "GST_ITERATOR_ITEM_END" "2")
  )
)

;; From gstmessage.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_MESSAGE_UNKNOWN           = 0,
;;   GST_MESSAGE_EOS               = (1 << 0),
;;   GST_MESSAGE_ERROR             = (1 << 1),
;;   GST_MESSAGE_WARNING           = (1 << 2),
;;   GST_MESSAGE_INFO              = (1 << 3),
;;   GST_MESSAGE_TAG               = (1 << 4),
;;   GST_MESSAGE_BUFFERING         = (1 << 5),
;;   GST_MESSAGE_STATE_CHANGED     = (1 << 6),
;;   GST_MESSAGE_STATE_DIRTY       = (1 << 7),
;;   GST_MESSAGE_STEP_DONE         = (1 << 8),
;;   GST_MESSAGE_CLOCK_PROVIDE     = (1 << 9),
;;   GST_MESSAGE_CLOCK_LOST        = (1 << 10),
;;   GST_MESSAGE_NEW_CLOCK         = (1 << 11),
;;   GST_MESSAGE_STRUCTURE_CHANGE  = (1 << 12),
;;   GST_MESSAGE_STREAM_STATUS     = (1 << 13),
;;   GST_MESSAGE_APPLICATION       = (1 << 14),
;;   GST_MESSAGE_ELEMENT           = (1 << 15),
;;   GST_MESSAGE_SEGMENT_START     = (1 << 16),
;;   GST_MESSAGE_SEGMENT_DONE      = (1 << 17),
;;   GST_MESSAGE_DURATION          = (1 << 18),
;;   GST_MESSAGE_LATENCY           = (1 << 19),
;;   GST_MESSAGE_ASYNC_START       = (1 << 20),
;;   GST_MESSAGE_ASYNC_DONE        = (1 << 21),
;;   GST_MESSAGE_REQUEST_STATE     = (1 << 22),
;;   GST_MESSAGE_STEP_START        = (1 << 23),
;;   GST_MESSAGE_QOS               = (1 << 24),
;;   GST_MESSAGE_ANY               = ~0
;; } GstMessageType;

(define-flags-extended MessageType
  (in-module "Gst")
  (c-name "GstMessageType")
  (values
    '("unknown" "GST_MESSAGE_UNKNOWN" "0x0")
    '("eos" "GST_MESSAGE_EOS" "(1 << 0)")
    '("error" "GST_MESSAGE_ERROR" "(1 << 1)")
    '("warning" "GST_MESSAGE_WARNING" "(1 << 2)")
    '("info" "GST_MESSAGE_INFO" "(1 << 3)")
    '("tag" "GST_MESSAGE_TAG" "(1 << 4)")
    '("buffering" "GST_MESSAGE_BUFFERING" "(1 << 5)")
    '("state-changed" "GST_MESSAGE_STATE_CHANGED" "(1 << 6)")
    '("state-dirty" "GST_MESSAGE_STATE_DIRTY" "(1 << 7)")
    '("step-done" "GST_MESSAGE_STEP_DONE" "(1 << 8)")
    '("clock-provide" "GST_MESSAGE_CLOCK_PROVIDE" "(1 << 9)")
    '("clock-lost" "GST_MESSAGE_CLOCK_LOST" "(1 << 10)")
    '("new-clock" "GST_MESSAGE_NEW_CLOCK" "(1 << 11)")
    '("structure-change" "GST_MESSAGE_STRUCTURE_CHANGE" "(1 << 12)")
    '("stream-status" "GST_MESSAGE_STREAM_STATUS" "(1 << 13)")
    '("application" "GST_MESSAGE_APPLICATION" "(1 << 14)")
    '("element" "GST_MESSAGE_ELEMENT" "(1 << 15)")
    '("segment-start" "GST_MESSAGE_SEGMENT_START" "(1 << 16)")
    '("segment-done" "GST_MESSAGE_SEGMENT_DONE" "(1 << 17)")
    '("duration" "GST_MESSAGE_DURATION" "(1 << 18)")
    '("latency" "GST_MESSAGE_LATENCY" "(1 << 19)")
    '("async-start" "GST_MESSAGE_ASYNC_START" "(1 << 20)")
    '("async-done" "GST_MESSAGE_ASYNC_DONE" "(1 << 21)")
    '("request-state" "GST_MESSAGE_REQUEST_STATE" "(1 << 22)")
    '("step-start" "GST_MESSAGE_STEP_START" "(1 << 23)")
    '("qos" "GST_MESSAGE_QOS" "(1 << 24)")
    '("any" "GST_MESSAGE_ANY" "0x0")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_STRUCTURE_CHANGE_TYPE_PAD_LINK   = 0,
;;   GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK = 1
;; } GstStructureChangeType;

(define-enum-extended StructureChangeType
  (in-module "Gst")
  (c-name "GstStructureChangeType")
  (values
    '("link" "GST_STRUCTURE_CHANGE_TYPE_PAD_LINK" "0")
    '("unlink" "GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK" "1")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_STREAM_STATUS_TYPE_CREATE   = 0,
;;   GST_STREAM_STATUS_TYPE_ENTER    = 1,
;;   GST_STREAM_STATUS_TYPE_LEAVE    = 2,
;;   GST_STREAM_STATUS_TYPE_DESTROY  = 3,
;; 
;;   GST_STREAM_STATUS_TYPE_START    = 8,
;;   GST_STREAM_STATUS_TYPE_PAUSE    = 9,
;;   GST_STREAM_STATUS_TYPE_STOP     = 10
;; } GstStreamStatusType;

(define-enum-extended StreamStatusType
  (in-module "Gst")
  (c-name "GstStreamStatusType")
  (values
    '("create" "GST_STREAM_STATUS_TYPE_CREATE" "0")
    '("enter" "GST_STREAM_STATUS_TYPE_ENTER" "1")
    '("leave" "GST_STREAM_STATUS_TYPE_LEAVE" "2")
    '("destroy" "GST_STREAM_STATUS_TYPE_DESTROY" "3")
    '("start" "GST_STREAM_STATUS_TYPE_START" "8")
    '("pause" "GST_STREAM_STATUS_TYPE_PAUSE" "9")
    '("stop" "GST_STREAM_STATUS_TYPE_STOP" "10")
  )
)

;; From gstminiobject.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_MINI_OBJECT_FLAG_READONLY = (1<<0),
;;   /* padding */
;;   GST_MINI_OBJECT_FLAG_LAST = (1<<4)
;; } GstMiniObjectFlags;

(define-flags-extended MiniObjectFlags
  (in-module "Gst")
  (c-name "GstMiniObjectFlags")
  (values
    '("readonly" "GST_MINI_OBJECT_FLAG_READONLY" "(1<<0)")
    '("last" "GST_MINI_OBJECT_FLAG_LAST" "(1<<4)")
  )
)

;; From gstobject.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_OBJECT_DISPOSING = (1<<0),
;;   GST_OBJECT_FLOATING = (1<<1),
;;   /* padding */
;;   GST_OBJECT_FLAG_LAST = (1<<4)
;; } GstObjectFlags;

(define-flags-extended ObjectFlags
  (in-module "Gst")
  (c-name "GstObjectFlags")
  (values
    '("disposing" "GST_OBJECT_DISPOSING" "(1<<0)")
    '("floating" "GST_OBJECT_FLOATING" "(1<<1)")
    '("flag-last" "GST_OBJECT_FLAG_LAST" "(1<<4)")
  )
)

;; From gstpad.h

;; Original typedef:
;; typedef enum {
;;   GST_PAD_LINK_OK               =  0,
;;   GST_PAD_LINK_WRONG_HIERARCHY  = -1,
;;   GST_PAD_LINK_WAS_LINKED       = -2,
;;   GST_PAD_LINK_WRONG_DIRECTION  = -3,
;;   GST_PAD_LINK_NOFORMAT         = -4,
;;   GST_PAD_LINK_NOSCHED          = -5,
;;   GST_PAD_LINK_REFUSED          = -6
;; } GstPadLinkReturn;

(define-enum-extended PadLinkReturn
  (in-module "Gst")
  (c-name "GstPadLinkReturn")
  (values
    '("ok" "GST_PAD_LINK_OK" "0")
    '("wrong-hierarchy" "GST_PAD_LINK_WRONG_HIERARCHY" "-1")
    '("was-linked" "GST_PAD_LINK_WAS_LINKED" "-2")
    '("wrong-direction" "GST_PAD_LINK_WRONG_DIRECTION" "-3")
    '("noformat" "GST_PAD_LINK_NOFORMAT" "-4")
    '("nosched" "GST_PAD_LINK_NOSCHED" "-5")
    '("refused" "GST_PAD_LINK_REFUSED" "-6")
  )
)

;; Original typedef:
;; typedef enum {
;;   /* custom success starts here */
;;   GST_FLOW_CUSTOM_SUCCESS_2 = 102,
;;   GST_FLOW_CUSTOM_SUCCESS_1 = 101,
;;   GST_FLOW_CUSTOM_SUCCESS = 100,
;; 
;;   /* core predefined */
;;   GST_FLOW_RESEND	  =  1,
;;   GST_FLOW_OK		  =  0,
;;   /* expected failures */
;;   GST_FLOW_NOT_LINKED     = -1,
;;   GST_FLOW_WRONG_STATE    = -2,
;;   /* error cases */
;;   GST_FLOW_UNEXPECTED     = -3,
;;   GST_FLOW_NOT_NEGOTIATED = -4,
;;   GST_FLOW_ERROR	  = -5,
;;   GST_FLOW_NOT_SUPPORTED  = -6,
;; 
;;   /* custom error starts here */
;;   GST_FLOW_CUSTOM_ERROR   = -100,
;;   GST_FLOW_CUSTOM_ERROR_1 = -101,
;;   GST_FLOW_CUSTOM_ERROR_2 = -102
;; } GstFlowReturn;

(define-enum-extended FlowReturn
  (in-module "Gst")
  (c-name "GstFlowReturn")
  (values
    '("custom-success-2" "GST_FLOW_CUSTOM_SUCCESS_2" "102")
    '("custom-success-1" "GST_FLOW_CUSTOM_SUCCESS_1" "101")
    '("custom-success" "GST_FLOW_CUSTOM_SUCCESS" "100")
    '("resend" "GST_FLOW_RESEND" "1")
    '("ok" "GST_FLOW_OK" "0")
    '("not-linked" "GST_FLOW_NOT_LINKED" "-1")
    '("wrong-state" "GST_FLOW_WRONG_STATE" "-2")
    '("unexpected" "GST_FLOW_UNEXPECTED" "-3")
    '("not-negotiated" "GST_FLOW_NOT_NEGOTIATED" "-4")
    '("error" "GST_FLOW_ERROR" "-5")
    '("not-supported" "GST_FLOW_NOT_SUPPORTED" "-6")
    '("custom-error" "GST_FLOW_CUSTOM_ERROR" "-100")
    '("custom-error-1" "GST_FLOW_CUSTOM_ERROR_1" "-101")
    '("custom-error-2" "GST_FLOW_CUSTOM_ERROR_2" "-102")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_PAD_LINK_CHECK_NOTHING       = 0,
;;   GST_PAD_LINK_CHECK_HIERARCHY     = 1 << 0,
;;   GST_PAD_LINK_CHECK_TEMPLATE_CAPS = 1 << 1,
;;   GST_PAD_LINK_CHECK_CAPS          = 1 << 2
;; } GstPadLinkCheck;

(define-flags-extended PadLinkCheck
  (in-module "Gst")
  (c-name "GstPadLinkCheck")
  (values
    '("nothing" "GST_PAD_LINK_CHECK_NOTHING" "0x0")
    '("hierarchy" "GST_PAD_LINK_CHECK_HIERARCHY" "1 << 0")
    '("template-caps" "GST_PAD_LINK_CHECK_TEMPLATE_CAPS" "1 << 1")
    '("caps" "GST_PAD_LINK_CHECK_CAPS" "1 << 2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_ACTIVATE_NONE,
;;   GST_ACTIVATE_PUSH,
;;   GST_ACTIVATE_PULL
;; } GstActivateMode;

(define-enum-extended ActivateMode
  (in-module "Gst")
  (c-name "GstActivateMode")
  (values
    '("none" "GST_ACTIVATE_NONE" "0")
    '("push" "GST_ACTIVATE_PUSH" "1")
    '("pull" "GST_ACTIVATE_PULL" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_PAD_UNKNOWN,
;;   GST_PAD_SRC,
;;   GST_PAD_SINK
;; } GstPadDirection;

(define-enum-extended PadDirection
  (in-module "Gst")
  (c-name "GstPadDirection")
  (values
    '("unknown" "GST_PAD_UNKNOWN" "0")
    '("src" "GST_PAD_SRC" "1")
    '("sink" "GST_PAD_SINK" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_PAD_BLOCKED       = (GST_OBJECT_FLAG_LAST << 0),
;;   GST_PAD_FLUSHING      = (GST_OBJECT_FLAG_LAST << 1),
;;   GST_PAD_IN_GETCAPS    = (GST_OBJECT_FLAG_LAST << 2),
;;   GST_PAD_IN_SETCAPS    = (GST_OBJECT_FLAG_LAST << 3),
;;   GST_PAD_BLOCKING	= (GST_OBJECT_FLAG_LAST << 4),
;;   /* padding */
;;   GST_PAD_FLAG_LAST     = (GST_OBJECT_FLAG_LAST << 8)
;; } GstPadFlags;

(define-flags-extended PadFlags
  (in-module "Gst")
  (c-name "GstPadFlags")
  (values
    '("blocked" "GST_PAD_BLOCKED" "0x10")
    '("flushing" "GST_PAD_FLUSHING" "0x20")
    '("in-getcaps" "GST_PAD_IN_GETCAPS" "0x40")
    '("in-setcaps" "GST_PAD_IN_SETCAPS" "0x80")
    '("blocking" "GST_PAD_BLOCKING" "0x100")
    '("flag-last" "GST_PAD_FLAG_LAST" "0x1000")
  )
)

;; From gstpadtemplate.h

;; Original typedef:
;; typedef enum {
;;   GST_PAD_ALWAYS,
;;   GST_PAD_SOMETIMES,
;;   GST_PAD_REQUEST
;; } GstPadPresence;

(define-enum-extended PadPresence
  (in-module "Gst")
  (c-name "GstPadPresence")
  (values
    '("always" "GST_PAD_ALWAYS" "0")
    '("sometimes" "GST_PAD_SOMETIMES" "1")
    '("request" "GST_PAD_REQUEST" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   /* FIXME0.11: this is not used and the purpose is unclear */
;;   GST_PAD_TEMPLATE_FIXED        = (GST_OBJECT_FLAG_LAST << 0),
;;   /* padding */
;;   GST_PAD_TEMPLATE_FLAG_LAST    = (GST_OBJECT_FLAG_LAST << 4)
;; } GstPadTemplateFlags;

(define-flags-extended PadTemplateFlags
  (in-module "Gst")
  (c-name "GstPadTemplateFlags")
  (values
    '("fixed" "GST_PAD_TEMPLATE_FIXED" "0x10")
    '("flag-last" "GST_PAD_TEMPLATE_FLAG_LAST" "0x100")
  )
)

;; From gstparse.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_PARSE_ERROR_SYNTAX,
;;   GST_PARSE_ERROR_NO_SUCH_ELEMENT,
;;   GST_PARSE_ERROR_NO_SUCH_PROPERTY,
;;   GST_PARSE_ERROR_LINK,
;;   GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY,
;;   GST_PARSE_ERROR_EMPTY_BIN,
;;   GST_PARSE_ERROR_EMPTY
;; } GstParseError;

(define-enum-extended ParseError
  (in-module "Gst")
  (c-name "GstParseError")
  (values
    '("syntax" "GST_PARSE_ERROR_SYNTAX" "0")
    '("no-such-element" "GST_PARSE_ERROR_NO_SUCH_ELEMENT" "1")
    '("no-such-property" "GST_PARSE_ERROR_NO_SUCH_PROPERTY" "2")
    '("link" "GST_PARSE_ERROR_LINK" "3")
    '("could-not-set-property" "GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY" "4")
    '("empty-bin" "GST_PARSE_ERROR_EMPTY_BIN" "5")
    '("empty" "GST_PARSE_ERROR_EMPTY" "6")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_PARSE_FLAG_NONE = 0,
;;   GST_PARSE_FLAG_FATAL_ERRORS = (1 << 0)
;; } GstParseFlags;

(define-flags-extended ParseFlags
  (in-module "Gst")
  (c-name "GstParseFlags")
  (values
    '("none" "GST_PARSE_FLAG_NONE" "0x0")
    '("fatal-errors" "GST_PARSE_FLAG_FATAL_ERRORS" "(1 << 0)")
  )
)

;; From gstpipeline.h

;; Original typedef:
;; typedef enum {
;;   GST_PIPELINE_FLAG_FIXED_CLOCK        = (GST_BIN_FLAG_LAST << 0),
;;   /* padding */
;;   GST_PIPELINE_FLAG_LAST               = (GST_BIN_FLAG_LAST << 4)
;; } GstPipelineFlags;

(define-flags-extended PipelineFlags
  (in-module "Gst")
  (c-name "GstPipelineFlags")
  (values
    '("fixed-clock" "GST_PIPELINE_FLAG_FIXED_CLOCK" "(((GST_ELEMENT_FLAG_LAST << 5)) << 0)")
    '("last" "GST_PIPELINE_FLAG_LAST" "(((GST_ELEMENT_FLAG_LAST << 5)) << 4)")
  )
)

;; From gstpluginfeature.h

;; Original typedef:
;; typedef enum {
;;   GST_RANK_NONE                 = 0,
;;   GST_RANK_MARGINAL             = 64,
;;   GST_RANK_SECONDARY            = 128,
;;   GST_RANK_PRIMARY              = 256
;; } GstRank;

(define-enum-extended Rank
  (in-module "Gst")
  (c-name "GstRank")
  (values
    '("none" "GST_RANK_NONE" "0")
    '("marginal" "GST_RANK_MARGINAL" "64")
    '("secondary" "GST_RANK_SECONDARY" "128")
    '("primary" "GST_RANK_PRIMARY" "256")
  )
)

;; From gstplugin.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_PLUGIN_ERROR_MODULE,
;;   GST_PLUGIN_ERROR_DEPENDENCIES,
;;   GST_PLUGIN_ERROR_NAME_MISMATCH
;; } GstPluginError;

(define-enum-extended PluginError
  (in-module "Gst")
  (c-name "GstPluginError")
  (values
    '("module" "GST_PLUGIN_ERROR_MODULE" "0")
    '("dependencies" "GST_PLUGIN_ERROR_DEPENDENCIES" "1")
    '("name-mismatch" "GST_PLUGIN_ERROR_NAME_MISMATCH" "2")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_PLUGIN_FLAG_CACHED = (1<<0),
;;   GST_PLUGIN_FLAG_BLACKLISTED = (1<<1)
;; } GstPluginFlags;

(define-flags-extended PluginFlags
  (in-module "Gst")
  (c-name "GstPluginFlags")
  (values
    '("cached" "GST_PLUGIN_FLAG_CACHED" "(1<<0)")
    '("blacklisted" "GST_PLUGIN_FLAG_BLACKLISTED" "(1<<1)")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_PLUGIN_DEPENDENCY_FLAG_NONE = 0,
;;   GST_PLUGIN_DEPENDENCY_FLAG_RECURSE = (1 << 0),
;;   GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY = (1 << 1),
;;   GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX = (1 << 2)
;; } GstPluginDependencyFlags;

(define-flags-extended PluginDependencyFlags
  (in-module "Gst")
  (c-name "GstPluginDependencyFlags")
  (values
    '("none" "GST_PLUGIN_DEPENDENCY_FLAG_NONE" "0x0")
    '("recurse" "GST_PLUGIN_DEPENDENCY_FLAG_RECURSE" "(1 << 0)")
    '("paths-are-default-only" "GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY" "(1 << 1)")
    '("file-name-is-suffix" "GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX" "(1 << 2)")
  )
)

;; From gstquark.h

;; Original typedef:
;; typedef enum _GstQuarkId
;; {
;;   GST_QUARK_FORMAT = 0,
;;   GST_QUARK_CURRENT = 1,
;;   GST_QUARK_DURATION = 2,
;;   GST_QUARK_RATE = 3,
;;   GST_QUARK_SEEKABLE = 4,
;;   GST_QUARK_SEGMENT_START = 5,
;;   GST_QUARK_SEGMENT_END = 6,
;;   GST_QUARK_SRC_FORMAT = 7,
;;   GST_QUARK_SRC_VALUE = 8,
;;   GST_QUARK_DEST_FORMAT = 9,
;;   GST_QUARK_DEST_VALUE = 10,
;;   GST_QUARK_START_FORMAT = 11,
;;   GST_QUARK_START_VALUE = 12,
;;   GST_QUARK_STOP_FORMAT = 13,
;;   GST_QUARK_STOP_VALUE = 14,
;;   GST_QUARK_GERROR = 15,
;;   GST_QUARK_DEBUG = 16,
;;   GST_QUARK_BUFFER_PERCENT = 17,
;;   GST_QUARK_BUFFERING_MODE = 18,
;;   GST_QUARK_AVG_IN_RATE = 19,
;;   GST_QUARK_AVG_OUT_RATE = 20,
;;   GST_QUARK_BUFFERING_LEFT = 21,
;;   GST_QUARK_ESTIMATED_TOTAL = 22,
;;   GST_QUARK_OLD_STATE = 23,
;;   GST_QUARK_NEW_STATE = 24,
;;   GST_QUARK_PENDING_STATE = 25,
;;   GST_QUARK_CLOCK = 26,
;;   GST_QUARK_READY = 27,
;;   GST_QUARK_POSITION = 28,
;;   GST_QUARK_NEW_BASE_TIME = 29,
;;   GST_QUARK_LIVE = 30,
;;   GST_QUARK_MIN_LATENCY = 31,
;;   GST_QUARK_MAX_LATENCY = 32,
;;   GST_QUARK_BUSY = 33,
;;   GST_QUARK_TYPE = 34,
;;   GST_QUARK_OWNER = 35,
;;   GST_QUARK_UPDATE = 36,
;;   GST_QUARK_APPLIED_RATE = 37,
;;   GST_QUARK_START = 38,
;;   GST_QUARK_STOP = 39,
;;   GST_QUARK_MINSIZE = 40,
;;   GST_QUARK_MAXSIZE = 41,
;;   GST_QUARK_ASYNC = 42,
;;   GST_QUARK_PROPORTION = 43,
;;   GST_QUARK_DIFF = 44,
;;   GST_QUARK_TIMESTAMP = 45,
;;   GST_QUARK_FLAGS = 46,
;;   GST_QUARK_CUR_TYPE = 47,
;;   GST_QUARK_CUR = 48,
;;   GST_QUARK_STOP_TYPE = 49,
;;   GST_QUARK_LATENCY = 50,
;;   GST_QUARK_URI = 51,
;;   GST_QUARK_OBJECT = 52,
;;   GST_QUARK_TAGLIST = 53,
;;   GST_QUARK_EVENT_NEWSEGMENT = 54,
;;   GST_QUARK_EVENT_BUFFER_SIZE = 55,
;;   GST_QUARK_EVENT_QOS = 56,
;;   GST_QUARK_EVENT_SEEK = 57,
;;   GST_QUARK_EVENT_LATENCY = 58,
;;   GST_QUARK_MESSAGE_ERROR = 59,
;;   GST_QUARK_MESSAGE_WARNING = 60,
;;   GST_QUARK_MESSAGE_INFO = 61,
;;   GST_QUARK_MESSAGE_BUFFERING = 62,
;;   GST_QUARK_MESSAGE_STATE = 63,
;;   GST_QUARK_MESSAGE_CLOCK_PROVIDE = 64,
;;   GST_QUARK_MESSAGE_CLOCK_LOST = 65,
;;   GST_QUARK_MESSAGE_NEW_CLOCK = 66,
;;   GST_QUARK_MESSAGE_STRUCTURE_CHANGE = 67,
;;   GST_QUARK_MESSAGE_SEGMENT_START = 68,
;;   GST_QUARK_MESSAGE_SEGMENT_DONE = 69,
;;   GST_QUARK_MESSAGE_DURATION = 70,
;;   GST_QUARK_MESSAGE_ASYNC_START = 71,
;;   GST_QUARK_MESSAGE_REQUEST_STATE = 72,
;;   GST_QUARK_MESSAGE_STREAM_STATUS = 73,
;;   GST_QUARK_QUERY_POSITION = 74,
;;   GST_QUARK_QUERY_DURATION = 75,
;;   GST_QUARK_QUERY_LATENCY = 76,
;;   GST_QUARK_QUERY_CONVERT = 77,
;;   GST_QUARK_QUERY_SEGMENT = 78,
;;   GST_QUARK_QUERY_SEEKING = 79,
;;   GST_QUARK_QUERY_FORMATS = 80,
;;   GST_QUARK_QUERY_BUFFERING = 81,
;;   GST_QUARK_QUERY_URI = 82,
;;   GST_QUARK_EVENT_STEP = 83,
;;   GST_QUARK_MESSAGE_STEP_DONE = 84,
;;   GST_QUARK_AMOUNT = 85,
;;   GST_QUARK_FLUSH = 86,
;;   GST_QUARK_INTERMEDIATE = 87,
;;   GST_QUARK_MESSAGE_STEP_START = 88,
;;   GST_QUARK_ACTIVE = 89,
;;   GST_QUARK_EOS = 90,
;;   GST_QUARK_EVENT_SINK_MESSAGE = 91,
;;   GST_QUARK_MESSAGE = 92,
;;   GST_QUARK_MESSAGE_QOS = 93,
;;   GST_QUARK_RUNNING_TIME = 94,
;;   GST_QUARK_STREAM_TIME = 95,
;;   GST_QUARK_JITTER = 96,
;;   GST_QUARK_QUALITY = 97,
;;   GST_QUARK_PROCESSED = 98,
;;   GST_QUARK_DROPPED = 99,
;;   GST_QUARK_BUFFERING_RANGES = 100,
;; 
;;   GST_QUARK_MAX = 101
;; } GstQuarkId;

(define-enum-extended QuarkId
  (in-module "Gst")
  (c-name "GstQuarkId")
  (values
    '("format" "GST_QUARK_FORMAT" "0")
    '("current" "GST_QUARK_CURRENT" "1")
    '("duration" "GST_QUARK_DURATION" "2")
    '("rate" "GST_QUARK_RATE" "3")
    '("seekable" "GST_QUARK_SEEKABLE" "4")
    '("segment-start" "GST_QUARK_SEGMENT_START" "5")
    '("segment-end" "GST_QUARK_SEGMENT_END" "6")
    '("src-format" "GST_QUARK_SRC_FORMAT" "7")
    '("src-value" "GST_QUARK_SRC_VALUE" "8")
    '("dest-format" "GST_QUARK_DEST_FORMAT" "9")
    '("dest-value" "GST_QUARK_DEST_VALUE" "10")
    '("start-format" "GST_QUARK_START_FORMAT" "11")
    '("start-value" "GST_QUARK_START_VALUE" "12")
    '("stop-format" "GST_QUARK_STOP_FORMAT" "13")
    '("stop-value" "GST_QUARK_STOP_VALUE" "14")
    '("gerror" "GST_QUARK_GERROR" "15")
    '("debug" "GST_QUARK_DEBUG" "16")
    '("buffer-percent" "GST_QUARK_BUFFER_PERCENT" "17")
    '("buffering-mode" "GST_QUARK_BUFFERING_MODE" "18")
    '("avg-in-rate" "GST_QUARK_AVG_IN_RATE" "19")
    '("avg-out-rate" "GST_QUARK_AVG_OUT_RATE" "20")
    '("buffering-left" "GST_QUARK_BUFFERING_LEFT" "21")
    '("estimated-total" "GST_QUARK_ESTIMATED_TOTAL" "22")
    '("old-state" "GST_QUARK_OLD_STATE" "23")
    '("new-state" "GST_QUARK_NEW_STATE" "24")
    '("pending-state" "GST_QUARK_PENDING_STATE" "25")
    '("clock" "GST_QUARK_CLOCK" "26")
    '("ready" "GST_QUARK_READY" "27")
    '("position" "GST_QUARK_POSITION" "28")
    '("new-base-time" "GST_QUARK_NEW_BASE_TIME" "29")
    '("live" "GST_QUARK_LIVE" "30")
    '("min-latency" "GST_QUARK_MIN_LATENCY" "31")
    '("max-latency" "GST_QUARK_MAX_LATENCY" "32")
    '("busy" "GST_QUARK_BUSY" "33")
    '("type" "GST_QUARK_TYPE" "34")
    '("owner" "GST_QUARK_OWNER" "35")
    '("update" "GST_QUARK_UPDATE" "36")
    '("applied-rate" "GST_QUARK_APPLIED_RATE" "37")
    '("start" "GST_QUARK_START" "38")
    '("stop" "GST_QUARK_STOP" "39")
    '("minsize" "GST_QUARK_MINSIZE" "40")
    '("maxsize" "GST_QUARK_MAXSIZE" "41")
    '("async" "GST_QUARK_ASYNC" "42")
    '("proportion" "GST_QUARK_PROPORTION" "43")
    '("diff" "GST_QUARK_DIFF" "44")
    '("timestamp" "GST_QUARK_TIMESTAMP" "45")
    '("flags" "GST_QUARK_FLAGS" "46")
    '("cur-type" "GST_QUARK_CUR_TYPE" "47")
    '("cur" "GST_QUARK_CUR" "48")
    '("stop-type" "GST_QUARK_STOP_TYPE" "49")
    '("latency" "GST_QUARK_LATENCY" "50")
    '("uri" "GST_QUARK_URI" "51")
    '("object" "GST_QUARK_OBJECT" "52")
    '("taglist" "GST_QUARK_TAGLIST" "53")
    '("event-newsegment" "GST_QUARK_EVENT_NEWSEGMENT" "54")
    '("event-buffer-size" "GST_QUARK_EVENT_BUFFER_SIZE" "55")
    '("event-qos" "GST_QUARK_EVENT_QOS" "56")
    '("event-seek" "GST_QUARK_EVENT_SEEK" "57")
    '("event-latency" "GST_QUARK_EVENT_LATENCY" "58")
    '("message-error" "GST_QUARK_MESSAGE_ERROR" "59")
    '("message-warning" "GST_QUARK_MESSAGE_WARNING" "60")
    '("message-info" "GST_QUARK_MESSAGE_INFO" "61")
    '("message-buffering" "GST_QUARK_MESSAGE_BUFFERING" "62")
    '("message-state" "GST_QUARK_MESSAGE_STATE" "63")
    '("message-clock-provide" "GST_QUARK_MESSAGE_CLOCK_PROVIDE" "64")
    '("message-clock-lost" "GST_QUARK_MESSAGE_CLOCK_LOST" "65")
    '("message-new-clock" "GST_QUARK_MESSAGE_NEW_CLOCK" "66")
    '("message-structure-change" "GST_QUARK_MESSAGE_STRUCTURE_CHANGE" "67")
    '("message-segment-start" "GST_QUARK_MESSAGE_SEGMENT_START" "68")
    '("message-segment-done" "GST_QUARK_MESSAGE_SEGMENT_DONE" "69")
    '("message-duration" "GST_QUARK_MESSAGE_DURATION" "70")
    '("message-async-start" "GST_QUARK_MESSAGE_ASYNC_START" "71")
    '("message-request-state" "GST_QUARK_MESSAGE_REQUEST_STATE" "72")
    '("message-stream-status" "GST_QUARK_MESSAGE_STREAM_STATUS" "73")
    '("query-position" "GST_QUARK_QUERY_POSITION" "74")
    '("query-duration" "GST_QUARK_QUERY_DURATION" "75")
    '("query-latency" "GST_QUARK_QUERY_LATENCY" "76")
    '("query-convert" "GST_QUARK_QUERY_CONVERT" "77")
    '("query-segment" "GST_QUARK_QUERY_SEGMENT" "78")
    '("query-seeking" "GST_QUARK_QUERY_SEEKING" "79")
    '("query-formats" "GST_QUARK_QUERY_FORMATS" "80")
    '("query-buffering" "GST_QUARK_QUERY_BUFFERING" "81")
    '("query-uri" "GST_QUARK_QUERY_URI" "82")
    '("event-step" "GST_QUARK_EVENT_STEP" "83")
    '("message-step-done" "GST_QUARK_MESSAGE_STEP_DONE" "84")
    '("amount" "GST_QUARK_AMOUNT" "85")
    '("flush" "GST_QUARK_FLUSH" "86")
    '("intermediate" "GST_QUARK_INTERMEDIATE" "87")
    '("message-step-start" "GST_QUARK_MESSAGE_STEP_START" "88")
    '("active" "GST_QUARK_ACTIVE" "89")
    '("eos" "GST_QUARK_EOS" "90")
    '("event-sink-message" "GST_QUARK_EVENT_SINK_MESSAGE" "91")
    '("message" "GST_QUARK_MESSAGE" "92")
    '("message-qos" "GST_QUARK_MESSAGE_QOS" "93")
    '("running-time" "GST_QUARK_RUNNING_TIME" "94")
    '("stream-time" "GST_QUARK_STREAM_TIME" "95")
    '("jitter" "GST_QUARK_JITTER" "96")
    '("quality" "GST_QUARK_QUALITY" "97")
    '("processed" "GST_QUARK_PROCESSED" "98")
    '("dropped" "GST_QUARK_DROPPED" "99")
    '("buffering-ranges" "GST_QUARK_BUFFERING_RANGES" "100")
    '("max" "GST_QUARK_MAX" "101")
  )
)

;; From gstquery.h

;; Original typedef:
;; typedef enum {
;;   GST_QUERY_NONE = 0,
;;   GST_QUERY_POSITION,
;;   GST_QUERY_DURATION,
;;   GST_QUERY_LATENCY,
;;   GST_QUERY_JITTER,     /* not in draft-query, necessary? */
;;   GST_QUERY_RATE,
;;   GST_QUERY_SEEKING,
;;   GST_QUERY_SEGMENT,
;;   GST_QUERY_CONVERT,
;;   GST_QUERY_FORMATS,
;;   GST_QUERY_BUFFERING,
;;   GST_QUERY_CUSTOM,
;;   GST_QUERY_URI
;; } GstQueryType;

(define-enum-extended QueryType
  (in-module "Gst")
  (c-name "GstQueryType")
  (values
    '("none" "GST_QUERY_NONE" "0")
    '("position" "GST_QUERY_POSITION" "1")
    '("duration" "GST_QUERY_DURATION" "2")
    '("latency" "GST_QUERY_LATENCY" "3")
    '("jitter" "GST_QUERY_JITTER" "4")
    '("rate" "GST_QUERY_RATE" "5")
    '("seeking" "GST_QUERY_SEEKING" "6")
    '("segment" "GST_QUERY_SEGMENT" "7")
    '("convert" "GST_QUERY_CONVERT" "8")
    '("formats" "GST_QUERY_FORMATS" "9")
    '("buffering" "GST_QUERY_BUFFERING" "10")
    '("custom" "GST_QUERY_CUSTOM" "11")
    '("uri" "GST_QUERY_URI" "12")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_BUFFERING_STREAM,
;;   GST_BUFFERING_DOWNLOAD,
;;   GST_BUFFERING_TIMESHIFT,
;;   GST_BUFFERING_LIVE
;; } GstBufferingMode;

(define-enum-extended BufferingMode
  (in-module "Gst")
  (c-name "GstBufferingMode")
  (values
    '("stream" "GST_BUFFERING_STREAM" "0")
    '("download" "GST_BUFFERING_DOWNLOAD" "1")
    '("timeshift" "GST_BUFFERING_TIMESHIFT" "2")
    '("live" "GST_BUFFERING_LIVE" "3")
  )
)

;; From gstsystemclock.h

;; Original typedef:
;; typedef enum {
;;   GST_CLOCK_TYPE_REALTIME       = 0,
;;   GST_CLOCK_TYPE_MONOTONIC      = 1
;; } GstClockType;

(define-enum-extended ClockType
  (in-module "Gst")
  (c-name "GstClockType")
  (values
    '("realtime" "GST_CLOCK_TYPE_REALTIME" "0")
    '("monotonic" "GST_CLOCK_TYPE_MONOTONIC" "1")
  )
)

;; From gsttaglist.h

;; Original typedef:
;; typedef enum {
;;   GST_TAG_MERGE_UNDEFINED,
;;   GST_TAG_MERGE_REPLACE_ALL,
;;   GST_TAG_MERGE_REPLACE,
;;   GST_TAG_MERGE_APPEND,
;;   GST_TAG_MERGE_PREPEND,
;;   GST_TAG_MERGE_KEEP,
;;   GST_TAG_MERGE_KEEP_ALL,
;;   /* add more */
;;   GST_TAG_MERGE_COUNT
;; } GstTagMergeMode;

(define-enum-extended TagMergeMode
  (in-module "Gst")
  (c-name "GstTagMergeMode")
  (values
    '("undefined" "GST_TAG_MERGE_UNDEFINED" "0")
    '("replace-all" "GST_TAG_MERGE_REPLACE_ALL" "1")
    '("replace" "GST_TAG_MERGE_REPLACE" "2")
    '("append" "GST_TAG_MERGE_APPEND" "3")
    '("prepend" "GST_TAG_MERGE_PREPEND" "4")
    '("keep" "GST_TAG_MERGE_KEEP" "5")
    '("keep-all" "GST_TAG_MERGE_KEEP_ALL" "6")
    '("count" "GST_TAG_MERGE_COUNT" "7")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_TAG_FLAG_UNDEFINED,
;;   GST_TAG_FLAG_META,
;;   GST_TAG_FLAG_ENCODED,
;;   GST_TAG_FLAG_DECODED,
;;   GST_TAG_FLAG_COUNT
;; } GstTagFlag;

(define-enum-extended TagFlag
  (in-module "Gst")
  (c-name "GstTagFlag")
  (values
    '("undefined" "GST_TAG_FLAG_UNDEFINED" "0")
    '("meta" "GST_TAG_FLAG_META" "1")
    '("encoded" "GST_TAG_FLAG_ENCODED" "2")
    '("decoded" "GST_TAG_FLAG_DECODED" "3")
    '("count" "GST_TAG_FLAG_COUNT" "4")
  )
)

;; From gsttask.h

;; Original typedef:
;; typedef enum {
;;   GST_TASK_STARTED,
;;   GST_TASK_STOPPED,
;;   GST_TASK_PAUSED
;; } GstTaskState;

(define-enum-extended TaskState
  (in-module "Gst")
  (c-name "GstTaskState")
  (values
    '("started" "GST_TASK_STARTED" "0")
    '("stopped" "GST_TASK_STOPPED" "1")
    '("paused" "GST_TASK_PAUSED" "2")
  )
)

;; From gsttrace.h

;; Original typedef:
;; typedef enum {
;;   GST_ALLOC_TRACE_LIVE		= (1 << 0),
;;   GST_ALLOC_TRACE_MEM_LIVE	= (1 << 1)
;; } GstAllocTraceFlags;

(define-flags-extended AllocTraceFlags
  (in-module "Gst")
  (c-name "GstAllocTraceFlags")
  (values
    '("live" "GST_ALLOC_TRACE_LIVE" "(1 << 0)")
    '("mem-live" "GST_ALLOC_TRACE_MEM_LIVE" "(1 << 1)")
  )
)

;; From gsttypefind.h

;; Original typedef:
;; typedef enum {
;;   GST_TYPE_FIND_MINIMUM = 1,
;;   GST_TYPE_FIND_POSSIBLE = 50,
;;   GST_TYPE_FIND_LIKELY = 80,
;;   GST_TYPE_FIND_NEARLY_CERTAIN = 99,
;;   GST_TYPE_FIND_MAXIMUM = 100
;; } GstTypeFindProbability;

(define-enum-extended TypeFindProbability
  (in-module "Gst")
  (c-name "GstTypeFindProbability")
  (values
    '("minimum" "GST_TYPE_FIND_MINIMUM" "1")
    '("possible" "GST_TYPE_FIND_POSSIBLE" "50")
    '("likely" "GST_TYPE_FIND_LIKELY" "80")
    '("nearly-certain" "GST_TYPE_FIND_NEARLY_CERTAIN" "99")
    '("maximum" "GST_TYPE_FIND_MAXIMUM" "100")
  )
)

;; From gsturi.h

;; Original typedef:
;; typedef enum {
;;   GST_URI_UNKNOWN,
;;   GST_URI_SINK,
;;   GST_URI_SRC
;; } GstURIType;

(define-enum-extended URIType
  (in-module "Gst")
  (c-name "GstURIType")
  (values
    '("unknown" "GST_URI_UNKNOWN" "0")
    '("sink" "GST_URI_SINK" "1")
    '("src" "GST_URI_SRC" "2")
  )
)

;; From gstutils.h

;; Original typedef:
;; typedef enum {
;;   GST_SEARCH_MODE_EXACT = 0,
;;   GST_SEARCH_MODE_BEFORE,
;;   GST_SEARCH_MODE_AFTER
;; } GstSearchMode;

(define-enum-extended SearchMode
  (in-module "Gst")
  (c-name "GstSearchMode")
  (values
    '("exact" "GST_SEARCH_MODE_EXACT" "0")
    '("before" "GST_SEARCH_MODE_BEFORE" "1")
    '("after" "GST_SEARCH_MODE_AFTER" "2")
  )
)

;; From gstbasesrc.h

;; Original typedef:
;; typedef enum {
;;   GST_BASE_SRC_STARTED           = (GST_ELEMENT_FLAG_LAST << 0),
;;   /* padding */
;;   GST_BASE_SRC_FLAG_LAST         = (GST_ELEMENT_FLAG_LAST << 2)
;; } GstBaseSrcFlags;

(define-flags-extended BaseSrcFlags
  (in-module "Gst")
  (c-name "GstBaseSrcFlags")
  (values
    '("started" "GST_BASE_SRC_STARTED" "(((GST_OBJECT_FLAG_LAST << 16)) << 0)")
    '("flag-last" "GST_BASE_SRC_FLAG_LAST" "(((GST_OBJECT_FLAG_LAST << 16)) << 2)")
  )
)

;; From gstinterpolationcontrolsource.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_INTERPOLATE_NONE,
;;   GST_INTERPOLATE_TRIGGER,
;;   GST_INTERPOLATE_LINEAR,
;;   GST_INTERPOLATE_QUADRATIC,
;;   GST_INTERPOLATE_CUBIC,
;;   GST_INTERPOLATE_USER
;; } GstInterpolateMode;

(define-enum-extended InterpolateMode
  (in-module "Gst")
  (c-name "GstInterpolateMode")
  (values
    '("none" "GST_INTERPOLATE_NONE" "0")
    '("trigger" "GST_INTERPOLATE_TRIGGER" "1")
    '("linear" "GST_INTERPOLATE_LINEAR" "2")
    '("quadratic" "GST_INTERPOLATE_QUADRATIC" "3")
    '("cubic" "GST_INTERPOLATE_CUBIC" "4")
    '("user" "GST_INTERPOLATE_USER" "5")
  )
)

;; From gstlfocontrolsource.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_LFO_WAVEFORM_SINE,
;;   GST_LFO_WAVEFORM_SQUARE,
;;   GST_LFO_WAVEFORM_SAW,
;;   GST_LFO_WAVEFORM_REVERSE_SAW,
;;   GST_LFO_WAVEFORM_TRIANGLE
;; } GstLFOWaveform;

(define-enum-extended LFOWaveform
  (in-module "Gst")
  (c-name "GstLFOWaveform")
  (values
    '("sine" "GST_LFO_WAVEFORM_SINE" "0")
    '("square" "GST_LFO_WAVEFORM_SQUARE" "1")
    '("saw" "GST_LFO_WAVEFORM_SAW" "2")
    '("reverse-saw" "GST_LFO_WAVEFORM_REVERSE_SAW" "3")
    '("triangle" "GST_LFO_WAVEFORM_TRIANGLE" "4")
  )
)

;; From dataprotocol.h

;; Original typedef:
;; typedef enum {
;;   GST_DP_VERSION_0_2 = 1,
;;   GST_DP_VERSION_1_0,
;; } GstDPVersion;

(define-enum-extended DPVersion
  (in-module "Gst")
  (c-name "GstDPVersion")
  (values
    '("0-2" "GST_DP_VERSION_0_2" "1")
    '("1-0" "GST_DP_VERSION_1_0" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_DP_HEADER_FLAG_NONE        = 0,
;;   GST_DP_HEADER_FLAG_CRC_HEADER  = (1 << 0),
;;   GST_DP_HEADER_FLAG_CRC_PAYLOAD = (1 << 1),
;;   GST_DP_HEADER_FLAG_CRC         = (1 << 1) | (1 << 0),
;; } GstDPHeaderFlag;

(define-flags-extended DPHeaderFlag
  (in-module "Gst")
  (c-name "GstDPHeaderFlag")
  (values
    '("none" "GST_DP_HEADER_FLAG_NONE" "0x0")
    '("crc-header" "GST_DP_HEADER_FLAG_CRC_HEADER" "(1 << 0)")
    '("crc-payload" "GST_DP_HEADER_FLAG_CRC_PAYLOAD" "(1 << 1)")
    '("crc" "GST_DP_HEADER_FLAG_CRC" "(1 << 1) | (1 << 0)")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_DP_PAYLOAD_NONE            = 0,
;;   GST_DP_PAYLOAD_BUFFER,
;;   GST_DP_PAYLOAD_CAPS,
;;   GST_DP_PAYLOAD_EVENT_NONE      = 64,
;; } GstDPPayloadType;

(define-enum-extended DPPayloadType
  (in-module "Gst")
  (c-name "GstDPPayloadType")
  (values
    '("none" "GST_DP_PAYLOAD_NONE" "0")
    '("buffer" "GST_DP_PAYLOAD_BUFFER" "1")
    '("caps" "GST_DP_PAYLOAD_CAPS" "2")
    '("event-none" "GST_DP_PAYLOAD_EVENT_NONE" "64")
  )
)

;; From gstfakesink.h

;; Original typedef:
;; typedef enum {
;;   FAKE_SINK_STATE_ERROR_NONE = 0,
;;   FAKE_SINK_STATE_ERROR_NULL_READY,
;;   FAKE_SINK_STATE_ERROR_READY_PAUSED,
;;   FAKE_SINK_STATE_ERROR_PAUSED_PLAYING,
;;   FAKE_SINK_STATE_ERROR_PLAYING_PAUSED,
;;   FAKE_SINK_STATE_ERROR_PAUSED_READY,
;;   FAKE_SINK_STATE_ERROR_READY_NULL
;; } GstFakeSinkStateError;

(define-enum-extended FakeSinkStateError
  (in-module "Gst")
  (c-name "GstFakeSinkStateError")
  (values
    '("none" "GST_FAKE_SINK_STATE_ERROR_NONE" "0")
    '("null-ready" "GST_FAKE_SINK_STATE_ERROR_NULL_READY" "1")
    '("ready-paused" "GST_FAKE_SINK_STATE_ERROR_READY_PAUSED" "2")
    '("paused-playing" "GST_FAKE_SINK_STATE_ERROR_PAUSED_PLAYING" "3")
    '("playing-paused" "GST_FAKE_SINK_STATE_ERROR_PLAYING_PAUSED" "4")
    '("paused-ready" "GST_FAKE_SINK_STATE_ERROR_PAUSED_READY" "5")
    '("ready-null" "GST_FAKE_SINK_STATE_ERROR_READY_NULL" "6")
  )
)

;; From gstfakesrc.h

;; Original typedef:
;; typedef enum {
;;   FAKE_SRC_FIRST_LAST_LOOP = 1,
;;   FAKE_SRC_LAST_FIRST_LOOP,
;;   FAKE_SRC_PING_PONG,
;;   FAKE_SRC_ORDERED_RANDOM,
;;   FAKE_SRC_RANDOM,
;;   FAKE_SRC_PATTERN_LOOP,
;;   FAKE_SRC_PING_PONG_PATTERN,
;;   FAKE_SRC_GET_ALWAYS_SUCEEDS
;; } GstFakeSrcOutputType;

(define-enum-extended FakeSrcOutputType
  (in-module "Gst")
  (c-name "GstFakeSrcOutputType")
  (values
    '("first-last-loop" "GST_FAKE_SRC_FIRST_LAST_LOOP" "1")
    '("last-first-loop" "GST_FAKE_SRC_LAST_FIRST_LOOP" "2")
    '("ping-pong" "GST_FAKE_SRC_PING_PONG" "3")
    '("ordered-random" "GST_FAKE_SRC_ORDERED_RANDOM" "4")
    '("random" "GST_FAKE_SRC_RANDOM" "5")
    '("pattern-loop" "GST_FAKE_SRC_PATTERN_LOOP" "6")
    '("ping-pong-pattern" "GST_FAKE_SRC_PING_PONG_PATTERN" "7")
    '("get-always-suceeds" "GST_FAKE_SRC_GET_ALWAYS_SUCEEDS" "8")
  )
)

;; Original typedef:
;; typedef enum {
;;   FAKE_SRC_DATA_ALLOCATE = 1,
;;   FAKE_SRC_DATA_SUBBUFFER
;; } GstFakeSrcDataType;

(define-enum-extended FakeSrcDataType
  (in-module "Gst")
  (c-name "GstFakeSrcDataType")
  (values
    '("allocate" "GST_FAKE_SRC_DATA_ALLOCATE" "1")
    '("subbuffer" "GST_FAKE_SRC_DATA_SUBBUFFER" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   FAKE_SRC_SIZETYPE_EMPTY = 1,
;;   FAKE_SRC_SIZETYPE_FIXED,
;;   FAKE_SRC_SIZETYPE_RANDOM
;; } GstFakeSrcSizeType;

(define-enum-extended FakeSrcSizeType
  (in-module "Gst")
  (c-name "GstFakeSrcSizeType")
  (values
    '("empty" "GST_FAKE_SRC_SIZETYPE_EMPTY" "1")
    '("fixed" "GST_FAKE_SRC_SIZETYPE_FIXED" "2")
    '("random" "GST_FAKE_SRC_SIZETYPE_RANDOM" "3")
  )
)

;; Original typedef:
;; typedef enum {
;;   FAKE_SRC_FILLTYPE_NOTHING = 1,
;;   FAKE_SRC_FILLTYPE_ZERO,
;;   FAKE_SRC_FILLTYPE_RANDOM,
;;   FAKE_SRC_FILLTYPE_PATTERN,
;;   FAKE_SRC_FILLTYPE_PATTERN_CONT
;; } GstFakeSrcFillType;

(define-enum-extended FakeSrcFillType
  (in-module "Gst")
  (c-name "GstFakeSrcFillType")
  (values
    '("nothing" "GST_FAKE_SRC_FILLTYPE_NOTHING" "1")
    '("zero" "GST_FAKE_SRC_FILLTYPE_ZERO" "2")
    '("random" "GST_FAKE_SRC_FILLTYPE_RANDOM" "3")
    '("pattern" "GST_FAKE_SRC_FILLTYPE_PATTERN" "4")
    '("pattern-cont" "GST_FAKE_SRC_FILLTYPE_PATTERN_CONT" "5")
  )
)

;; Handwritten for the filesink plug-in (Gst::FileSink).
(define-enum-extended FileSinkBufferMode
  (in-module "Gst")
  (c-name "GstFileSinkBufferMode")
  (values
    '("default" "GST_FILE_SINK_BUFFER_MODE_DEFAULT" "-1")
    '("full" "GST_FILE_SINK_BUFFER_MODE_FULL" "0")
    '("line" "GST_FILE_SINK_BUFFER_MODE_LINE" "1")
    '("unbuffered" "GST_FILE_SINK_BUFFER_MODE_UNBUFFERED" "2")
  )
)

;; From gsttee.h

;; Original typedef:
;; typedef enum {
;;   GST_TEE_PULL_MODE_NEVER,
;;   GST_TEE_PULL_MODE_SINGLE,
;; } GstTeePullMode;

(define-enum-extended TeePullMode
  (in-module "Gst")
  (c-name "GstTeePullMode")
  (values
    '("never" "GST_TEE_PULL_MODE_NEVER" "0")
    '("single" "GST_TEE_PULL_MODE_SINGLE" "1")
  )
)

;; From gstappsrc.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_APP_STREAM_TYPE_STREAM,
;;   GST_APP_STREAM_TYPE_SEEKABLE,
;;   GST_APP_STREAM_TYPE_RANDOM_ACCESS
;; } GstAppStreamType;

(define-enum-extended AppStreamType
  (in-module "Gst")
  (c-name "GstAppStreamType")
  (values
    '("stream" "GST_APP_STREAM_TYPE_STREAM" "0")
    '("seekable" "GST_APP_STREAM_TYPE_SEEKABLE" "1")
    '("random-access" "GST_APP_STREAM_TYPE_RANDOM_ACCESS" "2")
  )
)

;; From audio.h

;; Original typedef:
;; typedef enum {
;;   GST_AUDIO_FIELD_RATE          = (1 << 0),
;;   GST_AUDIO_FIELD_CHANNELS      = (1 << 1),
;;   GST_AUDIO_FIELD_ENDIANNESS    = (1 << 2),
;;   GST_AUDIO_FIELD_WIDTH         = (1 << 3),
;;   GST_AUDIO_FIELD_DEPTH         = (1 << 4),
;;   GST_AUDIO_FIELD_SIGNED        = (1 << 5)
;; } GstAudioFieldFlag;

(define-flags-extended AudioFieldFlag
  (in-module "Gst")
  (c-name "GstAudioFieldFlag")
  (values
    '("rate" "GST_AUDIO_FIELD_RATE" "(1 << 0)")
    '("channels" "GST_AUDIO_FIELD_CHANNELS" "(1 << 1)")
    '("endianness" "GST_AUDIO_FIELD_ENDIANNESS" "(1 << 2)")
    '("width" "GST_AUDIO_FIELD_WIDTH" "(1 << 3)")
    '("depth" "GST_AUDIO_FIELD_DEPTH" "(1 << 4)")
    '("signed" "GST_AUDIO_FIELD_SIGNED" "(1 << 5)")
  )
)

;; Handwritten for the queue plug-in (Gst::Queue).
(define-enum-extended QueueLeaky
  (in-module "Gst")
  (c-name "GstQueueLeaky")
  (values
    '("no" "GST_QUEUE_LEAKY_NONE" "0")
    '("upstream" "GST_QUEUE_LEAKY_UPSTREAM" "1")
    '("downstream" "GST_QUEUE_LEAKY_DOWNSTREAM" "2")
  )
)

;; From gstbaseaudiosink.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_BASE_AUDIO_SINK_SLAVE_RESAMPLE,
;;   GST_BASE_AUDIO_SINK_SLAVE_SKEW,
;;   GST_BASE_AUDIO_SINK_SLAVE_NONE
;; } GstBaseAudioSinkSlaveMethod;

(define-enum-extended BaseAudioSinkSlaveMethod
  (in-module "Gst")
  (c-name "GstBaseAudioSinkSlaveMethod")
  (values
    '("resample" "GST_BASE_AUDIO_SINK_SLAVE_RESAMPLE" "0")
    '("skew" "GST_BASE_AUDIO_SINK_SLAVE_SKEW" "1")
    '("none" "GST_BASE_AUDIO_SINK_SLAVE_NONE" "2")
  )
)

;; From gstbaseaudiosrc.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_BASE_AUDIO_SRC_SLAVE_RESAMPLE,
;;   GST_BASE_AUDIO_SRC_SLAVE_RETIMESTAMP,
;;   GST_BASE_AUDIO_SRC_SLAVE_SKEW,
;;   GST_BASE_AUDIO_SRC_SLAVE_NONE
;; } GstBaseAudioSrcSlaveMethod;

(define-enum-extended BaseAudioSrcSlaveMethod
  (in-module "Gst")
  (c-name "GstBaseAudioSrcSlaveMethod")
  (values
    '("resample" "GST_BASE_AUDIO_SRC_SLAVE_RESAMPLE" "0")
    '("retimestamp" "GST_BASE_AUDIO_SRC_SLAVE_RETIMESTAMP" "1")
    '("skew" "GST_BASE_AUDIO_SRC_SLAVE_SKEW" "2")
    '("none" "GST_BASE_AUDIO_SRC_SLAVE_NONE" "3")
  )
)

;; From gstringbuffer.h

;; Original typedef:
;; typedef enum {
;;   GST_RING_BUFFER_STATE_STOPPED,
;;   GST_RING_BUFFER_STATE_PAUSED,
;;   GST_RING_BUFFER_STATE_STARTED
;; } GstRingBufferState;

(define-enum-extended RingBufferState
  (in-module "Gst")
  (c-name "GstRingBufferState")
  (values
    '("stopped" "GST_RING_BUFFER_STATE_STOPPED" "0")
    '("paused" "GST_RING_BUFFER_STATE_PAUSED" "1")
    '("started" "GST_RING_BUFFER_STATE_STARTED" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_SEGSTATE_INVALID,
;;   GST_SEGSTATE_EMPTY,
;;   GST_SEGSTATE_FILLED,
;;   GST_SEGSTATE_PARTIAL
;; } GstRingBufferSegState;

(define-enum-extended RingBufferSegState
  (in-module "Gst")
  (c-name "GstRingBufferSegState")
  (values
    '("invalid" "GST_SEGSTATE_INVALID" "0")
    '("empty" "GST_SEGSTATE_EMPTY" "1")
    '("filled" "GST_SEGSTATE_FILLED" "2")
    '("partial" "GST_SEGSTATE_PARTIAL" "3")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_BUFTYPE_LINEAR,
;;   GST_BUFTYPE_FLOAT,
;;   GST_BUFTYPE_MU_LAW,
;;   GST_BUFTYPE_A_LAW,
;;   GST_BUFTYPE_IMA_ADPCM,
;;   GST_BUFTYPE_MPEG,
;;   GST_BUFTYPE_GSM,
;;   GST_BUFTYPE_IEC958,
;;   GST_BUFTYPE_AC3,
;;   GST_BUFTYPE_EAC3,
;;   GST_BUFTYPE_DTS
;; } GstBufferFormatType;

(define-enum-extended BufferFormatType
  (in-module "Gst")
  (c-name "GstBufferFormatType")
  (values
    '("linear" "GST_BUFTYPE_LINEAR" "0")
    '("float" "GST_BUFTYPE_FLOAT" "1")
    '("mu-law" "GST_BUFTYPE_MU_LAW" "2")
    '("a-law" "GST_BUFTYPE_A_LAW" "3")
    '("ima-adpcm" "GST_BUFTYPE_IMA_ADPCM" "4")
    '("mpeg" "GST_BUFTYPE_MPEG" "5")
    '("gsm" "GST_BUFTYPE_GSM" "6")
    '("iec958" "GST_BUFTYPE_IEC958" "7")
    '("ac3" "GST_BUFTYPE_AC3" "8")
    '("eac3" "GST_BUFTYPE_EAC3" "9")
    '("dts" "GST_BUFTYPE_DTS" "10")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_UNKNOWN,
;; 
;;   GST_S8,
;;   GST_U8,
;; 
;;   GST_S16_LE,
;;   GST_S16_BE,
;;   GST_U16_LE,
;;   GST_U16_BE,
;; 
;;   GST_S24_LE,
;;   GST_S24_BE,
;;   GST_U24_LE,
;;   GST_U24_BE,
;; 
;;   GST_S32_LE,
;;   GST_S32_BE,
;;   GST_U32_LE,
;;   GST_U32_BE,
;; 
;;   GST_S24_3LE,
;;   GST_S24_3BE,
;;   GST_U24_3LE,
;;   GST_U24_3BE,
;;   GST_S20_3LE,
;;   GST_S20_3BE,
;;   GST_U20_3LE,
;;   GST_U20_3BE,
;;   GST_S18_3LE,
;;   GST_S18_3BE,
;;   GST_U18_3LE,
;;   GST_U18_3BE,
;; 
;;   GST_FLOAT32_LE,
;;   GST_FLOAT32_BE,
;; 
;;   GST_FLOAT64_LE,
;;   GST_FLOAT64_BE,
;; 
;;   GST_MU_LAW,
;;   GST_A_LAW,
;;   GST_IMA_ADPCM,
;;   GST_MPEG,
;;   GST_GSM,
;;   GST_IEC958,
;;   GST_AC3,
;;   GST_EAC3,
;;   GST_DTS
;; } GstBufferFormat;

(define-enum-extended BufferFormat
  (in-module "Gst")
  (c-name "GstBufferFormat")
  (values
    '("unknown" "GST_UNKNOWN" "0")
    '("s8" "GST_S8" "1")
    '("u8" "GST_U8" "2")
    '("s16-le" "GST_S16_LE" "3")
    '("s16-be" "GST_S16_BE" "4")
    '("u16-le" "GST_U16_LE" "5")
    '("u16-be" "GST_U16_BE" "6")
    '("s24-le" "GST_S24_LE" "7")
    '("s24-be" "GST_S24_BE" "8")
    '("u24-le" "GST_U24_LE" "9")
    '("u24-be" "GST_U24_BE" "10")
    '("s32-le" "GST_S32_LE" "11")
    '("s32-be" "GST_S32_BE" "12")
    '("u32-le" "GST_U32_LE" "13")
    '("u32-be" "GST_U32_BE" "14")
    '("s24-3le" "GST_S24_3LE" "15")
    '("s24-3be" "GST_S24_3BE" "16")
    '("u24-3le" "GST_U24_3LE" "17")
    '("u24-3be" "GST_U24_3BE" "18")
    '("s20-3le" "GST_S20_3LE" "19")
    '("s20-3be" "GST_S20_3BE" "20")
    '("u20-3le" "GST_U20_3LE" "21")
    '("u20-3be" "GST_U20_3BE" "22")
    '("s18-3le" "GST_S18_3LE" "23")
    '("s18-3be" "GST_S18_3BE" "24")
    '("u18-3le" "GST_U18_3LE" "25")
    '("u18-3be" "GST_U18_3BE" "26")
    '("float32-le" "GST_FLOAT32_LE" "27")
    '("float32-be" "GST_FLOAT32_BE" "28")
    '("float64-le" "GST_FLOAT64_LE" "29")
    '("float64-be" "GST_FLOAT64_BE" "30")
    '("mu-law" "GST_MU_LAW" "31")
    '("a-law" "GST_A_LAW" "32")
    '("ima-adpcm" "GST_IMA_ADPCM" "33")
    '("mpeg" "GST_MPEG" "34")
    '("gsm" "GST_GSM" "35")
    '("iec958" "GST_IEC958" "36")
    '("ac3" "GST_AC3" "37")
    '("eac3" "GST_EAC3" "38")
    '("dts" "GST_DTS" "39")
  )
)

;; From multichannel.h

;; Original typedef:
;; typedef enum {
;;   GST_AUDIO_CHANNEL_POSITION_INVALID = -1,
;; 
;;   /* Main front speakers. Mono and left/right are mututally exclusive! */
;;   GST_AUDIO_CHANNEL_POSITION_FRONT_MONO,
;;   GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT,
;;   GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT,
;; 
;;   /* rear. Left/right and center are mututally exclusive! */
;;   GST_AUDIO_CHANNEL_POSITION_REAR_CENTER,
;;   GST_AUDIO_CHANNEL_POSITION_REAR_LEFT,
;;   GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT,
;; 
;;   /* subwoofer/low-frequency */
;;   GST_AUDIO_CHANNEL_POSITION_LFE,
;; 
;;   /* Center front speakers. Center and left/right_of_center cannot be
;;    * used together! */
;;   GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER,
;;   GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER,
;;   GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER,
;; 
;;   /* sides */
;;   GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT,
;;   GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT,
;; 
;;   /* for multi-channel input and output with more than 8 channels,
;;    * incompatible with all other positions, either all positions
;;    * are defined or all positions are undefined, but can't mix'n'match  */
;;   GST_AUDIO_CHANNEL_POSITION_NONE,
;; 
;;   /* don't use - counter */
;;   GST_AUDIO_CHANNEL_POSITION_NUM
;; } GstAudioChannelPosition;

(define-enum-extended AudioChannelPosition
  (in-module "Gst")
  (c-name "GstAudioChannelPosition")
  (values
    '("invalid" "GST_AUDIO_CHANNEL_POSITION_INVALID" "-1")
    '("front-mono" "GST_AUDIO_CHANNEL_POSITION_FRONT_MONO" "0")
    '("front-left" "GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT" "1")
    '("front-right" "GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT" "2")
    '("rear-center" "GST_AUDIO_CHANNEL_POSITION_REAR_CENTER" "3")
    '("rear-left" "GST_AUDIO_CHANNEL_POSITION_REAR_LEFT" "4")
    '("rear-right" "GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT" "5")
    '("lfe" "GST_AUDIO_CHANNEL_POSITION_LFE" "6")
    '("front-center" "GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER" "7")
    '("front-left-of-center" "GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER" "8")
    '("front-right-of-center" "GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER" "9")
    '("side-left" "GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT" "10")
    '("side-right" "GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT" "11")
    '("none" "GST_AUDIO_CHANNEL_POSITION_NONE" "12")
    '("num" "GST_AUDIO_CHANNEL_POSITION_NUM" "13")
  )
)

;; From gstcddabasesrc.h

;; Original typedef:
;; typedef enum {
;;   GST_CDDA_BASE_SRC_MODE_NORMAL,          /* stream = one track  */
;;   GST_CDDA_BASE_SRC_MODE_CONTINUOUS       /* stream = whole disc */
;; } GstCddaBaseSrcMode;

(define-enum-extended CddaBaseSrcMode
  (in-module "Gst")
  (c-name "GstCddaBaseSrcMode")
  (values
    '("normal" "GST_CDDA_BASE_SRC_MODE_NORMAL" "0")
    '("continuous" "GST_CDDA_BASE_SRC_MODE_CONTINUOUS" "1")
  )
)

;; From gstfft.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_FFT_WINDOW_RECTANGULAR,
;;   GST_FFT_WINDOW_HAMMING,
;;   GST_FFT_WINDOW_HANN,
;;   GST_FFT_WINDOW_BARTLETT,
;;   GST_FFT_WINDOW_BLACKMAN
;; } GstFFTWindow;

(define-enum-extended FFTWindow
  (in-module "Gst")
  (c-name "GstFFTWindow")
  (values
    '("rectangular" "GST_FFT_WINDOW_RECTANGULAR" "0")
    '("hamming" "GST_FFT_WINDOW_HAMMING" "1")
    '("hann" "GST_FFT_WINDOW_HANN" "2")
    '("bartlett" "GST_FFT_WINDOW_BARTLETT" "3")
    '("blackman" "GST_FFT_WINDOW_BLACKMAN" "4")
  )
)

;; From colorbalance.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_COLOR_BALANCE_HARDWARE,
;;   GST_COLOR_BALANCE_SOFTWARE
;; } GstColorBalanceType;

(define-enum-extended ColorBalanceType
  (in-module "Gst")
  (c-name "GstColorBalanceType")
  (values
    '("hardware" "GST_COLOR_BALANCE_HARDWARE" "0")
    '("software" "GST_COLOR_BALANCE_SOFTWARE" "1")
  )
)

;; From mixer.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_MIXER_HARDWARE,
;;   GST_MIXER_SOFTWARE
;; } GstMixerType;

(define-enum-extended MixerType
  (in-module "Gst")
  (c-name "GstMixerType")
  (values
    '("hardware" "GST_MIXER_HARDWARE" "0")
    '("software" "GST_MIXER_SOFTWARE" "1")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_MIXER_MESSAGE_INVALID,
;;   GST_MIXER_MESSAGE_MUTE_TOGGLED,
;;   GST_MIXER_MESSAGE_RECORD_TOGGLED,
;;   GST_MIXER_MESSAGE_VOLUME_CHANGED,
;;   GST_MIXER_MESSAGE_OPTION_CHANGED,
;;   GST_MIXER_MESSAGE_OPTIONS_LIST_CHANGED,
;;   GST_MIXER_MESSAGE_MIXER_CHANGED
;; } GstMixerMessageType;

(define-enum-extended MixerMessageType
  (in-module "Gst")
  (c-name "GstMixerMessageType")
  (values
    '("invalid" "GST_MIXER_MESSAGE_INVALID" "0")
    '("mute-toggled" "GST_MIXER_MESSAGE_MUTE_TOGGLED" "1")
    '("record-toggled" "GST_MIXER_MESSAGE_RECORD_TOGGLED" "2")
    '("volume-changed" "GST_MIXER_MESSAGE_VOLUME_CHANGED" "3")
    '("option-changed" "GST_MIXER_MESSAGE_OPTION_CHANGED" "4")
    '("options-list-changed" "GST_MIXER_MESSAGE_OPTIONS_LIST_CHANGED" "5")
    '("mixer-changed" "GST_MIXER_MESSAGE_MIXER_CHANGED" "6")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_MIXER_FLAG_NONE                = 0,
;;   GST_MIXER_FLAG_AUTO_NOTIFICATIONS  = (1<<0),
;;   GST_MIXER_FLAG_HAS_WHITELIST       = (1<<1),
;;   GST_MIXER_FLAG_GROUPING            = (1<<2),
;; } GstMixerFlags;

(define-flags-extended MixerFlags
  (in-module "Gst")
  (c-name "GstMixerFlags")
  (values
    '("none" "GST_MIXER_FLAG_NONE" "0x0")
    '("auto-notifications" "GST_MIXER_FLAG_AUTO_NOTIFICATIONS" "(1<<0)")
    '("has-whitelist" "GST_MIXER_FLAG_HAS_WHITELIST" "(1<<1)")
    '("grouping" "GST_MIXER_FLAG_GROUPING" "(1<<2)")
  )
)

;; From mixertrack.h

;; Original typedef:
;; typedef enum {
;;   GST_MIXER_TRACK_INPUT  = (1<<0),
;;   GST_MIXER_TRACK_OUTPUT = (1<<1),
;;   GST_MIXER_TRACK_MUTE   = (1<<2),
;;   GST_MIXER_TRACK_RECORD = (1<<3),
;;   GST_MIXER_TRACK_MASTER = (1<<4),
;;   GST_MIXER_TRACK_SOFTWARE = (1<<5),
;;   GST_MIXER_TRACK_NO_RECORD = (1<<6),
;;   GST_MIXER_TRACK_NO_MUTE = (1<<7),
;;   GST_MIXER_TRACK_WHITELIST = (1<<8),
;;   GST_MIXER_TRACK_READONLY = (1<<9),
;;   GST_MIXER_TRACK_WRITEONLY = (1<<10)
;; } GstMixerTrackFlags;

(define-flags-extended MixerTrackFlags
  (in-module "Gst")
  (c-name "GstMixerTrackFlags")
  (values
    '("input" "GST_MIXER_TRACK_INPUT" "(1<<0)")
    '("output" "GST_MIXER_TRACK_OUTPUT" "(1<<1)")
    '("mute" "GST_MIXER_TRACK_MUTE" "(1<<2)")
    '("record" "GST_MIXER_TRACK_RECORD" "(1<<3)")
    '("master" "GST_MIXER_TRACK_MASTER" "(1<<4)")
    '("software" "GST_MIXER_TRACK_SOFTWARE" "(1<<5)")
    '("no-record" "GST_MIXER_TRACK_NO_RECORD" "(1<<6)")
    '("no-mute" "GST_MIXER_TRACK_NO_MUTE" "(1<<7)")
    '("whitelist" "GST_MIXER_TRACK_WHITELIST" "(1<<8)")
    '("readonly" "GST_MIXER_TRACK_READONLY" "(1<<9)")
    '("writeonly" "GST_MIXER_TRACK_WRITEONLY" "(1<<10)")
  )
)

;; From navigation.h

;; Original typedef:
;; typedef enum {
;;   GST_NAVIGATION_COMMAND_INVALID  = 0,
;; 
;;   GST_NAVIGATION_COMMAND_MENU1    = 1,
;;   GST_NAVIGATION_COMMAND_MENU2    = 2,
;;   GST_NAVIGATION_COMMAND_MENU3    = 3,
;;   GST_NAVIGATION_COMMAND_MENU4    = 4,
;;   GST_NAVIGATION_COMMAND_MENU5    = 5,
;;   GST_NAVIGATION_COMMAND_MENU6    = 6,
;;   GST_NAVIGATION_COMMAND_MENU7    = 7,
;;   
;;   GST_NAVIGATION_COMMAND_LEFT     = 20,
;;   GST_NAVIGATION_COMMAND_RIGHT    = 21,
;;   GST_NAVIGATION_COMMAND_UP       = 22,
;;   GST_NAVIGATION_COMMAND_DOWN     = 23,
;;   GST_NAVIGATION_COMMAND_ACTIVATE = 24,
;; 
;;   GST_NAVIGATION_COMMAND_PREV_ANGLE = 30,
;;   GST_NAVIGATION_COMMAND_NEXT_ANGLE = 31
;; } GstNavigationCommand;

(define-enum-extended NavigationCommand
  (in-module "Gst")
  (c-name "GstNavigationCommand")
  (values
    '("invalid" "GST_NAVIGATION_COMMAND_INVALID" "0")
    '("menu1" "GST_NAVIGATION_COMMAND_MENU1" "1")
    '("menu2" "GST_NAVIGATION_COMMAND_MENU2" "2")
    '("menu3" "GST_NAVIGATION_COMMAND_MENU3" "3")
    '("menu4" "GST_NAVIGATION_COMMAND_MENU4" "4")
    '("menu5" "GST_NAVIGATION_COMMAND_MENU5" "5")
    '("menu6" "GST_NAVIGATION_COMMAND_MENU6" "6")
    '("menu7" "GST_NAVIGATION_COMMAND_MENU7" "7")
    '("left" "GST_NAVIGATION_COMMAND_LEFT" "20")
    '("right" "GST_NAVIGATION_COMMAND_RIGHT" "21")
    '("up" "GST_NAVIGATION_COMMAND_UP" "22")
    '("down" "GST_NAVIGATION_COMMAND_DOWN" "23")
    '("activate" "GST_NAVIGATION_COMMAND_ACTIVATE" "24")
    '("prev-angle" "GST_NAVIGATION_COMMAND_PREV_ANGLE" "30")
    '("next-angle" "GST_NAVIGATION_COMMAND_NEXT_ANGLE" "31")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_NAVIGATION_QUERY_INVALID     = 0,
;;   GST_NAVIGATION_QUERY_COMMANDS    = 1,
;;   GST_NAVIGATION_QUERY_ANGLES      = 2
;; } GstNavigationQueryType;

(define-enum-extended NavigationQueryType
  (in-module "Gst")
  (c-name "GstNavigationQueryType")
  (values
    '("invalid" "GST_NAVIGATION_QUERY_INVALID" "0")
    '("commands" "GST_NAVIGATION_QUERY_COMMANDS" "1")
    '("angles" "GST_NAVIGATION_QUERY_ANGLES" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_NAVIGATION_MESSAGE_INVALID,
;;   GST_NAVIGATION_MESSAGE_MOUSE_OVER,
;;   GST_NAVIGATION_MESSAGE_COMMANDS_CHANGED,
;;   GST_NAVIGATION_MESSAGE_ANGLES_CHANGED
;; } GstNavigationMessageType;

(define-enum-extended NavigationMessageType
  (in-module "Gst")
  (c-name "GstNavigationMessageType")
  (values
    '("invalid" "GST_NAVIGATION_MESSAGE_INVALID" "0")
    '("mouse-over" "GST_NAVIGATION_MESSAGE_MOUSE_OVER" "1")
    '("commands-changed" "GST_NAVIGATION_MESSAGE_COMMANDS_CHANGED" "2")
    '("angles-changed" "GST_NAVIGATION_MESSAGE_ANGLES_CHANGED" "3")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_NAVIGATION_EVENT_INVALID                    = 0,
;;   GST_NAVIGATION_EVENT_KEY_PRESS                  = 1,
;;   GST_NAVIGATION_EVENT_KEY_RELEASE                = 2,
;;   GST_NAVIGATION_EVENT_MOUSE_BUTTON_PRESS         = 3,
;;   GST_NAVIGATION_EVENT_MOUSE_BUTTON_RELEASE       = 4,
;;   GST_NAVIGATION_EVENT_MOUSE_MOVE                 = 5,
;;   GST_NAVIGATION_EVENT_COMMAND                    = 6
;; } GstNavigationEventType;

(define-enum-extended NavigationEventType
  (in-module "Gst")
  (c-name "GstNavigationEventType")
  (values
    '("invalid" "GST_NAVIGATION_EVENT_INVALID" "0")
    '("key-press" "GST_NAVIGATION_EVENT_KEY_PRESS" "1")
    '("key-release" "GST_NAVIGATION_EVENT_KEY_RELEASE" "2")
    '("mouse-button-press" "GST_NAVIGATION_EVENT_MOUSE_BUTTON_PRESS" "3")
    '("mouse-button-release" "GST_NAVIGATION_EVENT_MOUSE_BUTTON_RELEASE" "4")
    '("mouse-move" "GST_NAVIGATION_EVENT_MOUSE_MOVE" "5")
    '("command" "GST_NAVIGATION_EVENT_COMMAND" "6")
  )
)

;; From streamvolume.h

;; Original typedef:
;; typedef enum {
;;   GST_STREAM_VOLUME_FORMAT_LINEAR = 0,
;;   GST_STREAM_VOLUME_FORMAT_CUBIC,
;;   GST_STREAM_VOLUME_FORMAT_DB
;; } GstStreamVolumeFormat;

(define-enum-extended StreamVolumeFormat
  (in-module "Gst")
  (c-name "GstStreamVolumeFormat")
  (values
    '("linear" "GST_STREAM_VOLUME_FORMAT_LINEAR" "0")
    '("cubic" "GST_STREAM_VOLUME_FORMAT_CUBIC" "1")
    '("db" "GST_STREAM_VOLUME_FORMAT_DB" "2")
  )
)

;; From tunerchannel.h

;; Original typedef:
;; typedef enum {
;;   GST_TUNER_CHANNEL_INPUT     = (1<<0),
;;   GST_TUNER_CHANNEL_OUTPUT    = (1<<1),
;;   GST_TUNER_CHANNEL_FREQUENCY = (1<<2),
;;   GST_TUNER_CHANNEL_AUDIO     = (1<<3)
;; } GstTunerChannelFlags;

(define-flags-extended TunerChannelFlags
  (in-module "Gst")
  (c-name "GstTunerChannelFlags")
  (values
    '("input" "GST_TUNER_CHANNEL_INPUT" "(1<<0)")
    '("output" "GST_TUNER_CHANNEL_OUTPUT" "(1<<1)")
    '("frequency" "GST_TUNER_CHANNEL_FREQUENCY" "(1<<2)")
    '("audio" "GST_TUNER_CHANNEL_AUDIO" "(1<<3)")
  )
)

;; From gstnetbuffer.h

;; Original typedef:
;; typedef enum {
;;   GST_NET_TYPE_UNKNOWN,
;;   GST_NET_TYPE_IP4,
;;   GST_NET_TYPE_IP6,
;; } GstNetType;

(define-enum-extended NetType
  (in-module "Gst")
  (c-name "GstNetType")
  (values
    '("unknown" "GST_NET_TYPE_UNKNOWN" "0")
    '("ip4" "GST_NET_TYPE_IP4" "1")
    '("ip6" "GST_NET_TYPE_IP6" "2")
  )
)

;; From gstrtcpbuffer.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_RTCP_TYPE_INVALID = 0,
;;   GST_RTCP_TYPE_SR      = 200,
;;   GST_RTCP_TYPE_RR      = 201,
;;   GST_RTCP_TYPE_SDES    = 202,
;;   GST_RTCP_TYPE_BYE     = 203,
;;   GST_RTCP_TYPE_APP     = 204,
;;   GST_RTCP_TYPE_RTPFB   = 205,
;;   GST_RTCP_TYPE_PSFB    = 206
;; } GstRTCPType;

(define-enum-extended RTCPType
  (in-module "Gst")
  (c-name "GstRTCPType")
  (values
    '("invalid" "GST_RTCP_TYPE_INVALID" "0")
    '("sr" "GST_RTCP_TYPE_SR" "200")
    '("rr" "GST_RTCP_TYPE_RR" "201")
    '("sdes" "GST_RTCP_TYPE_SDES" "202")
    '("bye" "GST_RTCP_TYPE_BYE" "203")
    '("app" "GST_RTCP_TYPE_APP" "204")
    '("rtpfb" "GST_RTCP_TYPE_RTPFB" "205")
    '("psfb" "GST_RTCP_TYPE_PSFB" "206")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   /* generic */
;;   GST_RTCP_FB_TYPE_INVALID    = 0,
;;   /* RTPFB types */
;;   GST_RTCP_RTPFB_TYPE_NACK    = 1,
;;   /* PSFB types */
;;   GST_RTCP_PSFB_TYPE_PLI      = 1,
;;   GST_RTCP_PSFB_TYPE_SLI      = 2,
;;   GST_RTCP_PSFB_TYPE_RPSI     = 3,
;;   GST_RTCP_PSFB_TYPE_AFB      = 15
;; } GstRTCPFBType;

(define-enum-extended RTCPFBType
  (in-module "Gst")
  (c-name "GstRTCPFBType")
  (values
    '("fb-type-invalid" "GST_RTCP_FB_TYPE_INVALID" "0")
    '("rtpfb-type-nack" "GST_RTCP_RTPFB_TYPE_NACK" "1")
    '("psfb-type-pli" "GST_RTCP_PSFB_TYPE_PLI" "1")
    '("psfb-type-sli" "GST_RTCP_PSFB_TYPE_SLI" "2")
    '("psfb-type-rpsi" "GST_RTCP_PSFB_TYPE_RPSI" "3")
    '("psfb-type-afb" "GST_RTCP_PSFB_TYPE_AFB" "15")
  )
)

;; Original typedef:
;; typedef enum 
;; {
;;   GST_RTCP_SDES_INVALID  = -1,
;;   GST_RTCP_SDES_END      = 0,
;;   GST_RTCP_SDES_CNAME    = 1,
;;   GST_RTCP_SDES_NAME     = 2,
;;   GST_RTCP_SDES_EMAIL    = 3,
;;   GST_RTCP_SDES_PHONE    = 4,
;;   GST_RTCP_SDES_LOC      = 5,
;;   GST_RTCP_SDES_TOOL     = 6,
;;   GST_RTCP_SDES_NOTE     = 7,
;;   GST_RTCP_SDES_PRIV     = 8
;; } GstRTCPSDESType;

(define-enum-extended RTCPSDESType
  (in-module "Gst")
  (c-name "GstRTCPSDESType")
  (values
    '("invalid" "GST_RTCP_SDES_INVALID" "-1")
    '("end" "GST_RTCP_SDES_END" "0")
    '("cname" "GST_RTCP_SDES_CNAME" "1")
    '("name" "GST_RTCP_SDES_NAME" "2")
    '("email" "GST_RTCP_SDES_EMAIL" "3")
    '("phone" "GST_RTCP_SDES_PHONE" "4")
    '("loc" "GST_RTCP_SDES_LOC" "5")
    '("tool" "GST_RTCP_SDES_TOOL" "6")
    '("note" "GST_RTCP_SDES_NOTE" "7")
    '("priv" "GST_RTCP_SDES_PRIV" "8")
  )
)

;; From gstrtppayloads.h

;; Original typedef:
;; typedef enum
;; {
;;   /* Audio: */
;;   GST_RTP_PAYLOAD_PCMU = 0,
;;   GST_RTP_PAYLOAD_1016 = 1, /* RFC 3551 says reserved */
;;   GST_RTP_PAYLOAD_G721 = 2, /* RFC 3551 says reserved */
;;   GST_RTP_PAYLOAD_GSM = 3,
;;   GST_RTP_PAYLOAD_G723 = 4,
;;   GST_RTP_PAYLOAD_DVI4_8000 = 5,
;;   GST_RTP_PAYLOAD_DVI4_16000 = 6,
;;   GST_RTP_PAYLOAD_LPC = 7,
;;   GST_RTP_PAYLOAD_PCMA = 8,
;;   GST_RTP_PAYLOAD_G722 = 9,
;;   GST_RTP_PAYLOAD_L16_STEREO = 10,
;;   GST_RTP_PAYLOAD_L16_MONO = 11,
;;   GST_RTP_PAYLOAD_QCELP = 12,
;;   GST_RTP_PAYLOAD_CN = 13,
;;   GST_RTP_PAYLOAD_MPA = 14,
;;   GST_RTP_PAYLOAD_G728 = 15,
;;   GST_RTP_PAYLOAD_DVI4_11025 = 16,
;;   GST_RTP_PAYLOAD_DVI4_22050 = 17,
;;   GST_RTP_PAYLOAD_G729 = 18,   
;; 
;;   /* Video: */
;; 
;;   GST_RTP_PAYLOAD_CELLB = 25,
;;   GST_RTP_PAYLOAD_JPEG = 26,
;;   GST_RTP_PAYLOAD_NV = 28,
;;   GST_RTP_PAYLOAD_H261 = 31,
;;   GST_RTP_PAYLOAD_MPV = 32,
;;   GST_RTP_PAYLOAD_MP2T = 33,
;;   GST_RTP_PAYLOAD_H263 = 34,
;; 
;;   /* BOTH */
;; } GstRTPPayload;

(define-enum-extended RTPPayload
  (in-module "Gst")
  (c-name "GstRTPPayload")
  (values
    '("pcmu" "GST_RTP_PAYLOAD_PCMU" "0")
    '("1016" "GST_RTP_PAYLOAD_1016" "1")
    '("g721" "GST_RTP_PAYLOAD_G721" "2")
    '("gsm" "GST_RTP_PAYLOAD_GSM" "3")
    '("g723" "GST_RTP_PAYLOAD_G723" "4")
    '("dvi4-8000" "GST_RTP_PAYLOAD_DVI4_8000" "5")
    '("dvi4-16000" "GST_RTP_PAYLOAD_DVI4_16000" "6")
    '("lpc" "GST_RTP_PAYLOAD_LPC" "7")
    '("pcma" "GST_RTP_PAYLOAD_PCMA" "8")
    '("g722" "GST_RTP_PAYLOAD_G722" "9")
    '("l16-stereo" "GST_RTP_PAYLOAD_L16_STEREO" "10")
    '("l16-mono" "GST_RTP_PAYLOAD_L16_MONO" "11")
    '("qcelp" "GST_RTP_PAYLOAD_QCELP" "12")
    '("cn" "GST_RTP_PAYLOAD_CN" "13")
    '("mpa" "GST_RTP_PAYLOAD_MPA" "14")
    '("g728" "GST_RTP_PAYLOAD_G728" "15")
    '("dvi4-11025" "GST_RTP_PAYLOAD_DVI4_11025" "16")
    '("dvi4-22050" "GST_RTP_PAYLOAD_DVI4_22050" "17")
    '("g729" "GST_RTP_PAYLOAD_G729" "18")
    '("cellb" "GST_RTP_PAYLOAD_CELLB" "25")
    '("jpeg" "GST_RTP_PAYLOAD_JPEG" "26")
    '("nv" "GST_RTP_PAYLOAD_NV" "28")
    '("h261" "GST_RTP_PAYLOAD_H261" "31")
    '("mpv" "GST_RTP_PAYLOAD_MPV" "32")
    '("mp2t" "GST_RTP_PAYLOAD_MP2T" "33")
    '("h263" "GST_RTP_PAYLOAD_H263" "34")
  )
)

;; From gstrtspdefs.h

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_OK          =  0,
;;   /* errors */
;;   GST_RTSP_ERROR       = -1,
;;   GST_RTSP_EINVAL      = -2,
;;   GST_RTSP_EINTR       = -3,
;;   GST_RTSP_ENOMEM      = -4,
;;   GST_RTSP_ERESOLV     = -5,
;;   GST_RTSP_ENOTIMPL    = -6,
;;   GST_RTSP_ESYS        = -7,
;;   GST_RTSP_EPARSE      = -8,
;;   GST_RTSP_EWSASTART   = -9,
;;   GST_RTSP_EWSAVERSION = -10,
;;   GST_RTSP_EEOF        = -11,
;;   GST_RTSP_ENET        = -12,
;;   GST_RTSP_ENOTIP      = -13,
;;   GST_RTSP_ETIMEOUT    = -14,
;;   GST_RTSP_ETGET       = -15,
;;   GST_RTSP_ETPOST      = -16,
;; 
;;   GST_RTSP_ELAST       = -17
;; } GstRTSPResult;

(define-enum-extended RTSPResult
  (in-module "Gst")
  (c-name "GstRTSPResult")
  (values
    '("ok" "GST_RTSP_OK" "0")
    '("error" "GST_RTSP_ERROR" "-1")
    '("einval" "GST_RTSP_EINVAL" "-2")
    '("eintr" "GST_RTSP_EINTR" "-3")
    '("enomem" "GST_RTSP_ENOMEM" "-4")
    '("eresolv" "GST_RTSP_ERESOLV" "-5")
    '("enotimpl" "GST_RTSP_ENOTIMPL" "-6")
    '("esys" "GST_RTSP_ESYS" "-7")
    '("eparse" "GST_RTSP_EPARSE" "-8")
    '("ewsastart" "GST_RTSP_EWSASTART" "-9")
    '("ewsaversion" "GST_RTSP_EWSAVERSION" "-10")
    '("eeof" "GST_RTSP_EEOF" "-11")
    '("enet" "GST_RTSP_ENET" "-12")
    '("enotip" "GST_RTSP_ENOTIP" "-13")
    '("etimeout" "GST_RTSP_ETIMEOUT" "-14")
    '("etget" "GST_RTSP_ETGET" "-15")
    '("etpost" "GST_RTSP_ETPOST" "-16")
    '("elast" "GST_RTSP_ELAST" "-17")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_EV_READ  = (1 << 0),
;;   GST_RTSP_EV_WRITE = (1 << 1)
;; } GstRTSPEvent;

(define-flags-extended RTSPEvent
  (in-module "Gst")
  (c-name "GstRTSPEvent")
  (values
    '("read" "GST_RTSP_EV_READ" "(1 << 0)")
    '("write" "GST_RTSP_EV_WRITE" "(1 << 1)")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_FAM_NONE,
;;   GST_RTSP_FAM_INET,
;;   GST_RTSP_FAM_INET6
;; } GstRTSPFamily;

(define-enum-extended RTSPFamily
  (in-module "Gst")
  (c-name "GstRTSPFamily")
  (values
    '("none" "GST_RTSP_FAM_NONE" "0")
    '("inet" "GST_RTSP_FAM_INET" "1")
    '("inet6" "GST_RTSP_FAM_INET6" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_STATE_INVALID,
;;   GST_RTSP_STATE_INIT,
;;   GST_RTSP_STATE_READY,
;;   GST_RTSP_STATE_SEEKING,
;;   GST_RTSP_STATE_PLAYING,
;;   GST_RTSP_STATE_RECORDING
;; } GstRTSPState;

(define-enum-extended RTSPState
  (in-module "Gst")
  (c-name "GstRTSPState")
  (values
    '("invalid" "GST_RTSP_STATE_INVALID" "0")
    '("init" "GST_RTSP_STATE_INIT" "1")
    '("ready" "GST_RTSP_STATE_READY" "2")
    '("seeking" "GST_RTSP_STATE_SEEKING" "3")
    '("playing" "GST_RTSP_STATE_PLAYING" "4")
    '("recording" "GST_RTSP_STATE_RECORDING" "5")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_VERSION_INVALID = 0x00,
;;   GST_RTSP_VERSION_1_0     = 0x10,
;;   GST_RTSP_VERSION_1_1     = 0x11
;; } GstRTSPVersion;

(define-flags-extended RTSPVersion
  (in-module "Gst")
  (c-name "GstRTSPVersion")
  (values
    '("invalid" "GST_RTSP_VERSION_INVALID" "0x00")
    '("1-0" "GST_RTSP_VERSION_1_0" "0x10")
    '("1-1" "GST_RTSP_VERSION_1_1" "0x11")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_INVALID          = 0,
;;   GST_RTSP_DESCRIBE         = (1 <<  0),
;;   GST_RTSP_ANNOUNCE         = (1 <<  1),
;;   GST_RTSP_GET_PARAMETER    = (1 <<  2),
;;   GST_RTSP_OPTIONS          = (1 <<  3),
;;   GST_RTSP_PAUSE            = (1 <<  4),
;;   GST_RTSP_PLAY             = (1 <<  5),
;;   GST_RTSP_RECORD           = (1 <<  6),
;;   GST_RTSP_REDIRECT         = (1 <<  7),
;;   GST_RTSP_SETUP            = (1 <<  8),
;;   GST_RTSP_SET_PARAMETER    = (1 <<  9),
;;   GST_RTSP_TEARDOWN         = (1 << 10),
;;   GST_RTSP_GET              = (1 << 11),
;;   GST_RTSP_POST             = (1 << 12)
;; } GstRTSPMethod;

(define-flags-extended RTSPMethod
  (in-module "Gst")
  (c-name "GstRTSPMethod")
  (values
    '("invalid" "GST_RTSP_INVALID" "0x0")
    '("describe" "GST_RTSP_DESCRIBE" "(1 << 0)")
    '("announce" "GST_RTSP_ANNOUNCE" "(1 << 1)")
    '("get-parameter" "GST_RTSP_GET_PARAMETER" "(1 << 2)")
    '("options" "GST_RTSP_OPTIONS" "(1 << 3)")
    '("pause" "GST_RTSP_PAUSE" "(1 << 4)")
    '("play" "GST_RTSP_PLAY" "(1 << 5)")
    '("record" "GST_RTSP_RECORD" "(1 << 6)")
    '("redirect" "GST_RTSP_REDIRECT" "(1 << 7)")
    '("setup" "GST_RTSP_SETUP" "(1 << 8)")
    '("set-parameter" "GST_RTSP_SET_PARAMETER" "(1 << 9)")
    '("teardown" "GST_RTSP_TEARDOWN" "(1 << 10)")
    '("get" "GST_RTSP_GET" "(1 << 11)")
    '("post" "GST_RTSP_POST" "(1 << 12)")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_AUTH_NONE    = 0x00,
;;   GST_RTSP_AUTH_BASIC   = 0x01,
;;   GST_RTSP_AUTH_DIGEST  = 0x02
;; } GstRTSPAuthMethod;

(define-flags-extended RTSPAuthMethod
  (in-module "Gst")
  (c-name "GstRTSPAuthMethod")
  (values
    '("none" "GST_RTSP_AUTH_NONE" "0x00")
    '("basic" "GST_RTSP_AUTH_BASIC" "0x01")
    '("digest" "GST_RTSP_AUTH_DIGEST" "0x02")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_HDR_INVALID,
;; 
;;   /*
;;    * R = Request
;;    * r = response
;;    * g = general
;;    * e = entity
;;    */
;;   GST_RTSP_HDR_ACCEPT,              /* Accept               R      opt.      entity */
;;   GST_RTSP_HDR_ACCEPT_ENCODING,     /* Accept-Encoding      R      opt.      entity */
;;   GST_RTSP_HDR_ACCEPT_LANGUAGE,     /* Accept-Language      R      opt.      all */
;;   GST_RTSP_HDR_ALLOW,               /* Allow                r      opt.      all */
;;   GST_RTSP_HDR_AUTHORIZATION,       /* Authorization        R      opt.      all */
;;   GST_RTSP_HDR_BANDWIDTH,           /* Bandwidth            R      opt.      all */
;;   GST_RTSP_HDR_BLOCKSIZE,           /* Blocksize            R      opt.      all but OPTIONS, TEARDOWN */
;;   GST_RTSP_HDR_CACHE_CONTROL,       /* Cache-Control        g      opt.      SETUP */
;;   GST_RTSP_HDR_CONFERENCE,          /* Conference           R      opt.      SETUP */
;;   GST_RTSP_HDR_CONNECTION,          /* Connection           g      req.      all */
;;   GST_RTSP_HDR_CONTENT_BASE,        /* Content-Base         e      opt.      entity */
;;   GST_RTSP_HDR_CONTENT_ENCODING,    /* Content-Encoding     e      req.      SET_PARAMETER, DESCRIBE, ANNOUNCE */
;;   GST_RTSP_HDR_CONTENT_LANGUAGE,    /* Content-Language     e      req.      DESCRIBE, ANNOUNCE */
;;   GST_RTSP_HDR_CONTENT_LENGTH,      /* Content-Length       e      req.      SET_PARAMETER, ANNOUNCE, entity */
;;   GST_RTSP_HDR_CONTENT_LOCATION,    /* Content-Location     e      opt.      entity */
;;   GST_RTSP_HDR_CONTENT_TYPE,        /* Content-Type         e      req.      SET_PARAMETER, ANNOUNCE, entity */
;;   GST_RTSP_HDR_CSEQ,                /* CSeq                 g      req.      all */
;;   GST_RTSP_HDR_DATE,                /* Date                 g      opt.      all */
;;   GST_RTSP_HDR_EXPIRES,             /* Expires              e      opt.      DESCRIBE, ANNOUNCE */
;;   GST_RTSP_HDR_FROM,                /* From                 R      opt.      all */
;;   GST_RTSP_HDR_IF_MODIFIED_SINCE,   /* If-Modified-Since    R      opt.      DESCRIBE, SETUP */
;;   GST_RTSP_HDR_LAST_MODIFIED,       /* Last-Modified        e      opt.      entity */
;;   GST_RTSP_HDR_PROXY_AUTHENTICATE,  /* Proxy-Authenticate */
;;   GST_RTSP_HDR_PROXY_REQUIRE,       /* Proxy-Require        R      req.      all */
;;   GST_RTSP_HDR_PUBLIC,              /* Public               r      opt.      all */
;;   GST_RTSP_HDR_RANGE,               /* Range                Rr     opt.      PLAY, PAUSE, RECORD */
;;   GST_RTSP_HDR_REFERER,             /* Referer              R      opt.      all */
;;   GST_RTSP_HDR_REQUIRE,             /* Require              R      req.      all */
;;   GST_RTSP_HDR_RETRY_AFTER,         /* Retry-After          r      opt.      all */
;;   GST_RTSP_HDR_RTP_INFO,            /* RTP-Info             r      req.      PLAY */
;;   GST_RTSP_HDR_SCALE,               /* Scale                Rr     opt.      PLAY, RECORD */
;;   GST_RTSP_HDR_SESSION,             /* Session              Rr     req.      all but SETUP, OPTIONS */
;;   GST_RTSP_HDR_SERVER,              /* Server               r      opt.      all */
;;   GST_RTSP_HDR_SPEED,               /* Speed                Rr     opt.      PLAY */
;;   GST_RTSP_HDR_TRANSPORT,           /* Transport            Rr     req.      SETUP */
;;   GST_RTSP_HDR_UNSUPPORTED,         /* Unsupported          r      req.      all */
;;   GST_RTSP_HDR_USER_AGENT,          /* User-Agent           R      opt.      all */
;;   GST_RTSP_HDR_VIA,                 /* Via                  g      opt.      all */
;;   GST_RTSP_HDR_WWW_AUTHENTICATE,    /* WWW-Authenticate     r      opt.      all */
;; 
;;   /* Real extensions */
;;   GST_RTSP_HDR_CLIENT_CHALLENGE,    /* ClientChallenge */
;;   GST_RTSP_HDR_REAL_CHALLENGE1,     /* RealChallenge1 */
;;   GST_RTSP_HDR_REAL_CHALLENGE2,     /* RealChallenge2 */
;;   GST_RTSP_HDR_REAL_CHALLENGE3,     /* RealChallenge3 */
;;   GST_RTSP_HDR_SUBSCRIBE,           /* Subscribe */
;;   GST_RTSP_HDR_ALERT,               /* Alert */
;;   GST_RTSP_HDR_CLIENT_ID,           /* ClientID */
;;   GST_RTSP_HDR_COMPANY_ID,          /* CompanyID */
;;   GST_RTSP_HDR_GUID,                /* GUID */
;;   GST_RTSP_HDR_REGION_DATA,         /* RegionData */
;;   GST_RTSP_HDR_MAX_ASM_WIDTH,       /* SupportsMaximumASMBandwidth */
;;   GST_RTSP_HDR_LANGUAGE,            /* Language */
;;   GST_RTSP_HDR_PLAYER_START_TIME,   /* PlayerStarttime */
;; 
;;   /* Since 0.10.16 */
;;   GST_RTSP_HDR_LOCATION,            /* Location */
;; 
;;   /* Since 0.10.23 */
;;   GST_RTSP_HDR_ETAG,                /* ETag */
;;   GST_RTSP_HDR_IF_MATCH,            /* If-Match */
;; 
;;   /* WM extensions [MS-RTSP] Since 0.10.23 */
;;   GST_RTSP_HDR_ACCEPT_CHARSET,      /* Accept-Charset */
;;   GST_RTSP_HDR_SUPPORTED,           /* Supported */
;;   GST_RTSP_HDR_VARY,                /* Vary */
;;   GST_RTSP_HDR_X_ACCELERATE_STREAMING,    /* X-Accelerate-Streaming */
;;   GST_RTSP_HDR_X_ACCEPT_AUTHENT,    /* X-Accept-Authentication */
;;   GST_RTSP_HDR_X_ACCEPT_PROXY_AUTHENT,    /* X-Accept-Proxy-Authentication */
;;   GST_RTSP_HDR_X_BROADCAST_ID,      /* X-Broadcast-Id */
;;   GST_RTSP_HDR_X_BURST_STREAMING,   /* X-Burst-Streaming */
;;   GST_RTSP_HDR_X_NOTICE,            /* X-Notice */
;;   GST_RTSP_HDR_X_PLAYER_LAG_TIME,   /* X-Player-Lag-Time */
;;   GST_RTSP_HDR_X_PLAYLIST,          /* X-Playlist */
;;   GST_RTSP_HDR_X_PLAYLIST_CHANGE_NOTICE,  /* X-Playlist-Change-Notice */
;;   GST_RTSP_HDR_X_PLAYLIST_GEN_ID,   /* X-Playlist-Gen-Id */
;;   GST_RTSP_HDR_X_PLAYLIST_SEEK_ID,  /* X-Playlist-Seek-Id */
;;   GST_RTSP_HDR_X_PROXY_CLIENT_AGENT,      /* X-Proxy-Client-Agent */
;;   GST_RTSP_HDR_X_PROXY_CLIENT_VERB, /* X-Proxy-Client-Verb */
;;   GST_RTSP_HDR_X_RECEDING_PLAYLISTCHANGE, /* X-Receding-PlaylistChange */
;;   GST_RTSP_HDR_X_RTP_INFO,          /* X-RTP-Info */
;;   GST_RTSP_HDR_X_STARTUPPROFILE,    /* X-StartupProfile */
;; 
;;   /* Since 0.10.24 */
;;   GST_RTSP_HDR_TIMESTAMP,           /* Timestamp */
;; 
;;   /* Since 0.10.25 */
;;   GST_RTSP_HDR_AUTHENTICATION_INFO, /* Authentication-Info */
;;   GST_RTSP_HDR_HOST,                /* Host */
;;   GST_RTSP_HDR_PRAGMA,              /* Pragma */
;;   GST_RTSP_HDR_X_SERVER_IP_ADDRESS, /* X-Server-IP-Address */
;;   GST_RTSP_HDR_X_SESSIONCOOKIE,     /* X-Sessioncookie */
;; 
;;   GST_RTSP_HDR_LAST
;; } GstRTSPHeaderField;

(define-enum-extended RTSPHeaderField
  (in-module "Gst")
  (c-name "GstRTSPHeaderField")
  (values
    '("invalid" "GST_RTSP_HDR_INVALID" "0")
    '("accept" "GST_RTSP_HDR_ACCEPT" "1")
    '("accept-encoding" "GST_RTSP_HDR_ACCEPT_ENCODING" "2")
    '("accept-language" "GST_RTSP_HDR_ACCEPT_LANGUAGE" "3")
    '("allow" "GST_RTSP_HDR_ALLOW" "4")
    '("authorization" "GST_RTSP_HDR_AUTHORIZATION" "5")
    '("bandwidth" "GST_RTSP_HDR_BANDWIDTH" "6")
    '("blocksize" "GST_RTSP_HDR_BLOCKSIZE" "7")
    '("cache-control" "GST_RTSP_HDR_CACHE_CONTROL" "8")
    '("conference" "GST_RTSP_HDR_CONFERENCE" "9")
    '("connection" "GST_RTSP_HDR_CONNECTION" "10")
    '("content-base" "GST_RTSP_HDR_CONTENT_BASE" "11")
    '("content-encoding" "GST_RTSP_HDR_CONTENT_ENCODING" "12")
    '("content-language" "GST_RTSP_HDR_CONTENT_LANGUAGE" "13")
    '("content-length" "GST_RTSP_HDR_CONTENT_LENGTH" "14")
    '("content-location" "GST_RTSP_HDR_CONTENT_LOCATION" "15")
    '("content-type" "GST_RTSP_HDR_CONTENT_TYPE" "16")
    '("cseq" "GST_RTSP_HDR_CSEQ" "17")
    '("date" "GST_RTSP_HDR_DATE" "18")
    '("expires" "GST_RTSP_HDR_EXPIRES" "19")
    '("from" "GST_RTSP_HDR_FROM" "20")
    '("if-modified-since" "GST_RTSP_HDR_IF_MODIFIED_SINCE" "21")
    '("last-modified" "GST_RTSP_HDR_LAST_MODIFIED" "22")
    '("proxy-authenticate" "GST_RTSP_HDR_PROXY_AUTHENTICATE" "23")
    '("proxy-require" "GST_RTSP_HDR_PROXY_REQUIRE" "24")
    '("public" "GST_RTSP_HDR_PUBLIC" "25")
    '("range" "GST_RTSP_HDR_RANGE" "26")
    '("referer" "GST_RTSP_HDR_REFERER" "27")
    '("require" "GST_RTSP_HDR_REQUIRE" "28")
    '("retry-after" "GST_RTSP_HDR_RETRY_AFTER" "29")
    '("rtp-info" "GST_RTSP_HDR_RTP_INFO" "30")
    '("scale" "GST_RTSP_HDR_SCALE" "31")
    '("session" "GST_RTSP_HDR_SESSION" "32")
    '("server" "GST_RTSP_HDR_SERVER" "33")
    '("speed" "GST_RTSP_HDR_SPEED" "34")
    '("transport" "GST_RTSP_HDR_TRANSPORT" "35")
    '("unsupported" "GST_RTSP_HDR_UNSUPPORTED" "36")
    '("user-agent" "GST_RTSP_HDR_USER_AGENT" "37")
    '("via" "GST_RTSP_HDR_VIA" "38")
    '("www-authenticate" "GST_RTSP_HDR_WWW_AUTHENTICATE" "39")
    '("client-challenge" "GST_RTSP_HDR_CLIENT_CHALLENGE" "40")
    '("real-challenge1" "GST_RTSP_HDR_REAL_CHALLENGE1" "41")
    '("real-challenge2" "GST_RTSP_HDR_REAL_CHALLENGE2" "42")
    '("real-challenge3" "GST_RTSP_HDR_REAL_CHALLENGE3" "43")
    '("subscribe" "GST_RTSP_HDR_SUBSCRIBE" "44")
    '("alert" "GST_RTSP_HDR_ALERT" "45")
    '("client-id" "GST_RTSP_HDR_CLIENT_ID" "46")
    '("company-id" "GST_RTSP_HDR_COMPANY_ID" "47")
    '("guid" "GST_RTSP_HDR_GUID" "48")
    '("region-data" "GST_RTSP_HDR_REGION_DATA" "49")
    '("max-asm-width" "GST_RTSP_HDR_MAX_ASM_WIDTH" "50")
    '("language" "GST_RTSP_HDR_LANGUAGE" "51")
    '("player-start-time" "GST_RTSP_HDR_PLAYER_START_TIME" "52")
    '("location" "GST_RTSP_HDR_LOCATION" "53")
    '("etag" "GST_RTSP_HDR_ETAG" "54")
    '("if-match" "GST_RTSP_HDR_IF_MATCH" "55")
    '("accept-charset" "GST_RTSP_HDR_ACCEPT_CHARSET" "56")
    '("supported" "GST_RTSP_HDR_SUPPORTED" "57")
    '("vary" "GST_RTSP_HDR_VARY" "58")
    '("x-accelerate-streaming" "GST_RTSP_HDR_X_ACCELERATE_STREAMING" "59")
    '("x-accept-authent" "GST_RTSP_HDR_X_ACCEPT_AUTHENT" "60")
    '("x-accept-proxy-authent" "GST_RTSP_HDR_X_ACCEPT_PROXY_AUTHENT" "61")
    '("x-broadcast-id" "GST_RTSP_HDR_X_BROADCAST_ID" "62")
    '("x-burst-streaming" "GST_RTSP_HDR_X_BURST_STREAMING" "63")
    '("x-notice" "GST_RTSP_HDR_X_NOTICE" "64")
    '("x-player-lag-time" "GST_RTSP_HDR_X_PLAYER_LAG_TIME" "65")
    '("x-playlist" "GST_RTSP_HDR_X_PLAYLIST" "66")
    '("x-playlist-change-notice" "GST_RTSP_HDR_X_PLAYLIST_CHANGE_NOTICE" "67")
    '("x-playlist-gen-id" "GST_RTSP_HDR_X_PLAYLIST_GEN_ID" "68")
    '("x-playlist-seek-id" "GST_RTSP_HDR_X_PLAYLIST_SEEK_ID" "69")
    '("x-proxy-client-agent" "GST_RTSP_HDR_X_PROXY_CLIENT_AGENT" "70")
    '("x-proxy-client-verb" "GST_RTSP_HDR_X_PROXY_CLIENT_VERB" "71")
    '("x-receding-playlistchange" "GST_RTSP_HDR_X_RECEDING_PLAYLISTCHANGE" "72")
    '("x-rtp-info" "GST_RTSP_HDR_X_RTP_INFO" "73")
    '("x-startupprofile" "GST_RTSP_HDR_X_STARTUPPROFILE" "74")
    '("timestamp" "GST_RTSP_HDR_TIMESTAMP" "75")
    '("authentication-info" "GST_RTSP_HDR_AUTHENTICATION_INFO" "76")
    '("host" "GST_RTSP_HDR_HOST" "77")
    '("pragma" "GST_RTSP_HDR_PRAGMA" "78")
    '("x-server-ip-address" "GST_RTSP_HDR_X_SERVER_IP_ADDRESS" "79")
    '("x-sessioncookie" "GST_RTSP_HDR_X_SESSIONCOOKIE" "80")
    '("last" "GST_RTSP_HDR_LAST" "81")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_STS_INVALID                              = 0, 
;;   GST_RTSP_STS_CONTINUE                             = 100, 
;;   GST_RTSP_STS_OK                                   = 200, 
;;   GST_RTSP_STS_CREATED                              = 201, 
;;   GST_RTSP_STS_LOW_ON_STORAGE                       = 250, 
;;   GST_RTSP_STS_MULTIPLE_CHOICES                     = 300, 
;;   GST_RTSP_STS_MOVED_PERMANENTLY                    = 301, 
;;   GST_RTSP_STS_MOVE_TEMPORARILY                     = 302, 
;;   GST_RTSP_STS_SEE_OTHER                            = 303, 
;;   GST_RTSP_STS_NOT_MODIFIED                         = 304, 
;;   GST_RTSP_STS_USE_PROXY                            = 305, 
;;   GST_RTSP_STS_BAD_REQUEST                          = 400, 
;;   GST_RTSP_STS_UNAUTHORIZED                         = 401, 
;;   GST_RTSP_STS_PAYMENT_REQUIRED                     = 402, 
;;   GST_RTSP_STS_FORBIDDEN                            = 403, 
;;   GST_RTSP_STS_NOT_FOUND                            = 404, 
;;   GST_RTSP_STS_METHOD_NOT_ALLOWED                   = 405, 
;;   GST_RTSP_STS_NOT_ACCEPTABLE                       = 406, 
;;   GST_RTSP_STS_PROXY_AUTH_REQUIRED                  = 407, 
;;   GST_RTSP_STS_REQUEST_TIMEOUT                      = 408, 
;;   GST_RTSP_STS_GONE                                 = 410, 
;;   GST_RTSP_STS_LENGTH_REQUIRED                      = 411, 
;;   GST_RTSP_STS_PRECONDITION_FAILED                  = 412, 
;;   GST_RTSP_STS_REQUEST_ENTITY_TOO_LARGE             = 413, 
;;   GST_RTSP_STS_REQUEST_URI_TOO_LARGE                = 414, 
;;   GST_RTSP_STS_UNSUPPORTED_MEDIA_TYPE               = 415, 
;;   GST_RTSP_STS_PARAMETER_NOT_UNDERSTOOD             = 451, 
;;   GST_RTSP_STS_CONFERENCE_NOT_FOUND                 = 452, 
;;   GST_RTSP_STS_NOT_ENOUGH_BANDWIDTH                 = 453, 
;;   GST_RTSP_STS_SESSION_NOT_FOUND                    = 454, 
;;   GST_RTSP_STS_METHOD_NOT_VALID_IN_THIS_STATE       = 455, 
;;   GST_RTSP_STS_HEADER_FIELD_NOT_VALID_FOR_RESOURCE  = 456, 
;;   GST_RTSP_STS_INVALID_RANGE                        = 457, 
;;   GST_RTSP_STS_PARAMETER_IS_READONLY                = 458, 
;;   GST_RTSP_STS_AGGREGATE_OPERATION_NOT_ALLOWED      = 459, 
;;   GST_RTSP_STS_ONLY_AGGREGATE_OPERATION_ALLOWED     = 460, 
;;   GST_RTSP_STS_UNSUPPORTED_TRANSPORT                = 461, 
;;   GST_RTSP_STS_DESTINATION_UNREACHABLE              = 462, 
;;   GST_RTSP_STS_INTERNAL_SERVER_ERROR                = 500, 
;;   GST_RTSP_STS_NOT_IMPLEMENTED                      = 501, 
;;   GST_RTSP_STS_BAD_GATEWAY                          = 502, 
;;   GST_RTSP_STS_SERVICE_UNAVAILABLE                  = 503, 
;;   GST_RTSP_STS_GATEWAY_TIMEOUT                      = 504, 
;;   GST_RTSP_STS_RTSP_VERSION_NOT_SUPPORTED           = 505, 
;;   GST_RTSP_STS_OPTION_NOT_SUPPORTED                 = 551
;; } GstRTSPStatusCode;

(define-enum-extended RTSPStatusCode
  (in-module "Gst")
  (c-name "GstRTSPStatusCode")
  (values
    '("invalid" "GST_RTSP_STS_INVALID" "0")
    '("continue" "GST_RTSP_STS_CONTINUE" "100")
    '("ok" "GST_RTSP_STS_OK" "200")
    '("created" "GST_RTSP_STS_CREATED" "201")
    '("low-on-storage" "GST_RTSP_STS_LOW_ON_STORAGE" "250")
    '("multiple-choices" "GST_RTSP_STS_MULTIPLE_CHOICES" "300")
    '("moved-permanently" "GST_RTSP_STS_MOVED_PERMANENTLY" "301")
    '("move-temporarily" "GST_RTSP_STS_MOVE_TEMPORARILY" "302")
    '("see-other" "GST_RTSP_STS_SEE_OTHER" "303")
    '("not-modified" "GST_RTSP_STS_NOT_MODIFIED" "304")
    '("use-proxy" "GST_RTSP_STS_USE_PROXY" "305")
    '("bad-request" "GST_RTSP_STS_BAD_REQUEST" "400")
    '("unauthorized" "GST_RTSP_STS_UNAUTHORIZED" "401")
    '("payment-required" "GST_RTSP_STS_PAYMENT_REQUIRED" "402")
    '("forbidden" "GST_RTSP_STS_FORBIDDEN" "403")
    '("not-found" "GST_RTSP_STS_NOT_FOUND" "404")
    '("method-not-allowed" "GST_RTSP_STS_METHOD_NOT_ALLOWED" "405")
    '("not-acceptable" "GST_RTSP_STS_NOT_ACCEPTABLE" "406")
    '("proxy-auth-required" "GST_RTSP_STS_PROXY_AUTH_REQUIRED" "407")
    '("request-timeout" "GST_RTSP_STS_REQUEST_TIMEOUT" "408")
    '("gone" "GST_RTSP_STS_GONE" "410")
    '("length-required" "GST_RTSP_STS_LENGTH_REQUIRED" "411")
    '("precondition-failed" "GST_RTSP_STS_PRECONDITION_FAILED" "412")
    '("request-entity-too-large" "GST_RTSP_STS_REQUEST_ENTITY_TOO_LARGE" "413")
    '("request-uri-too-large" "GST_RTSP_STS_REQUEST_URI_TOO_LARGE" "414")
    '("unsupported-media-type" "GST_RTSP_STS_UNSUPPORTED_MEDIA_TYPE" "415")
    '("parameter-not-understood" "GST_RTSP_STS_PARAMETER_NOT_UNDERSTOOD" "451")
    '("conference-not-found" "GST_RTSP_STS_CONFERENCE_NOT_FOUND" "452")
    '("not-enough-bandwidth" "GST_RTSP_STS_NOT_ENOUGH_BANDWIDTH" "453")
    '("session-not-found" "GST_RTSP_STS_SESSION_NOT_FOUND" "454")
    '("method-not-valid-in-this-state" "GST_RTSP_STS_METHOD_NOT_VALID_IN_THIS_STATE" "455")
    '("header-field-not-valid-for-resource" "GST_RTSP_STS_HEADER_FIELD_NOT_VALID_FOR_RESOURCE" "456")
    '("invalid-range" "GST_RTSP_STS_INVALID_RANGE" "457")
    '("parameter-is-readonly" "GST_RTSP_STS_PARAMETER_IS_READONLY" "458")
    '("aggregate-operation-not-allowed" "GST_RTSP_STS_AGGREGATE_OPERATION_NOT_ALLOWED" "459")
    '("only-aggregate-operation-allowed" "GST_RTSP_STS_ONLY_AGGREGATE_OPERATION_ALLOWED" "460")
    '("unsupported-transport" "GST_RTSP_STS_UNSUPPORTED_TRANSPORT" "461")
    '("destination-unreachable" "GST_RTSP_STS_DESTINATION_UNREACHABLE" "462")
    '("internal-server-error" "GST_RTSP_STS_INTERNAL_SERVER_ERROR" "500")
    '("not-implemented" "GST_RTSP_STS_NOT_IMPLEMENTED" "501")
    '("bad-gateway" "GST_RTSP_STS_BAD_GATEWAY" "502")
    '("service-unavailable" "GST_RTSP_STS_SERVICE_UNAVAILABLE" "503")
    '("gateway-timeout" "GST_RTSP_STS_GATEWAY_TIMEOUT" "504")
    '("rtsp-version-not-supported" "GST_RTSP_STS_RTSP_VERSION_NOT_SUPPORTED" "505")
    '("option-not-supported" "GST_RTSP_STS_OPTION_NOT_SUPPORTED" "551")
  )
)

;; From gstrtspmessage.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_RTSP_MESSAGE_INVALID,
;;   GST_RTSP_MESSAGE_REQUEST,
;;   GST_RTSP_MESSAGE_RESPONSE,
;;   GST_RTSP_MESSAGE_HTTP_REQUEST,
;;   GST_RTSP_MESSAGE_HTTP_RESPONSE,
;;   GST_RTSP_MESSAGE_DATA
;; } GstRTSPMsgType;

(define-enum-extended RTSPMsgType
  (in-module "Gst")
  (c-name "GstRTSPMsgType")
  (values
    '("invalid" "GST_RTSP_MESSAGE_INVALID" "0")
    '("request" "GST_RTSP_MESSAGE_REQUEST" "1")
    '("response" "GST_RTSP_MESSAGE_RESPONSE" "2")
    '("http-request" "GST_RTSP_MESSAGE_HTTP_REQUEST" "3")
    '("http-response" "GST_RTSP_MESSAGE_HTTP_RESPONSE" "4")
    '("data" "GST_RTSP_MESSAGE_DATA" "5")
  )
)

;; From gstrtsprange.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_RTSP_RANGE_SMPTE,
;;   GST_RTSP_RANGE_SMPTE_30_DROP,
;;   GST_RTSP_RANGE_SMPTE_25,
;;   GST_RTSP_RANGE_NPT,
;;   GST_RTSP_RANGE_CLOCK
;; } GstRTSPRangeUnit;

(define-enum-extended RTSPRangeUnit
  (in-module "Gst")
  (c-name "GstRTSPRangeUnit")
  (values
    '("smpte" "GST_RTSP_RANGE_SMPTE" "0")
    '("smpte-30-drop" "GST_RTSP_RANGE_SMPTE_30_DROP" "1")
    '("smpte-25" "GST_RTSP_RANGE_SMPTE_25" "2")
    '("npt" "GST_RTSP_RANGE_NPT" "3")
    '("clock" "GST_RTSP_RANGE_CLOCK" "4")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_TIME_SECONDS,
;;   GST_RTSP_TIME_NOW,
;;   GST_RTSP_TIME_END
;; } GstRTSPTimeType;

(define-enum-extended RTSPTimeType
  (in-module "Gst")
  (c-name "GstRTSPTimeType")
  (values
    '("seconds" "GST_RTSP_TIME_SECONDS" "0")
    '("now" "GST_RTSP_TIME_NOW" "1")
    '("end" "GST_RTSP_TIME_END" "2")
  )
)

;; From gstrtsptransport.h

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_TRANS_UNKNOWN =  0,
;;   GST_RTSP_TRANS_RTP     = (1 << 0),
;;   GST_RTSP_TRANS_RDT     = (1 << 1)
;; } GstRTSPTransMode;

(define-flags-extended RTSPTransMode
  (in-module "Gst")
  (c-name "GstRTSPTransMode")
  (values
    '("unknown" "GST_RTSP_TRANS_UNKNOWN" "0x0")
    '("rtp" "GST_RTSP_TRANS_RTP" "(1 << 0)")
    '("rdt" "GST_RTSP_TRANS_RDT" "(1 << 1)")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_PROFILE_UNKNOWN =  0,
;;   GST_RTSP_PROFILE_AVP     = (1 << 0),
;;   GST_RTSP_PROFILE_SAVP    = (1 << 1)
;; } GstRTSPProfile;

(define-flags-extended RTSPProfile
  (in-module "Gst")
  (c-name "GstRTSPProfile")
  (values
    '("unknown" "GST_RTSP_PROFILE_UNKNOWN" "0x0")
    '("avp" "GST_RTSP_PROFILE_AVP" "(1 << 0)")
    '("savp" "GST_RTSP_PROFILE_SAVP" "(1 << 1)")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_RTSP_LOWER_TRANS_UNKNOWN   = 0,
;;   GST_RTSP_LOWER_TRANS_UDP       = (1 << 0),
;;   GST_RTSP_LOWER_TRANS_UDP_MCAST = (1 << 1),
;;   GST_RTSP_LOWER_TRANS_TCP       = (1 << 2),
;;   GST_RTSP_LOWER_TRANS_HTTP      = (1 << 4)
;; } GstRTSPLowerTrans;

(define-flags-extended RTSPLowerTrans
  (in-module "Gst")
  (c-name "GstRTSPLowerTrans")
  (values
    '("unknown" "GST_RTSP_LOWER_TRANS_UNKNOWN" "0x0")
    '("udp" "GST_RTSP_LOWER_TRANS_UDP" "(1 << 0)")
    '("udp-mcast" "GST_RTSP_LOWER_TRANS_UDP_MCAST" "(1 << 1)")
    '("tcp" "GST_RTSP_LOWER_TRANS_TCP" "(1 << 2)")
    '("http" "GST_RTSP_LOWER_TRANS_HTTP" "(1 << 4)")
  )
)

;; From gstsdp.h

;; Original typedef:
;; typedef enum {
;;   GST_SDP_OK     = 0,
;;   GST_SDP_EINVAL = -1
;; } GstSDPResult;

(define-enum-extended SDPResult
  (in-module "Gst")
  (c-name "GstSDPResult")
  (values
    '("ok" "GST_SDP_OK" "0")
    '("einval" "GST_SDP_EINVAL" "-1")
  )
)

;; From gsttagdemux.h

;; Original typedef:
;; typedef enum {
;;   GST_TAG_DEMUX_RESULT_BROKEN_TAG,
;;   GST_TAG_DEMUX_RESULT_AGAIN,
;;   GST_TAG_DEMUX_RESULT_OK
;; } GstTagDemuxResult;

(define-enum-extended TagDemuxResult
  (in-module "Gst")
  (c-name "GstTagDemuxResult")
  (values
    '("broken-tag" "GST_TAG_DEMUX_RESULT_BROKEN_TAG" "0")
    '("again" "GST_TAG_DEMUX_RESULT_AGAIN" "1")
    '("ok" "GST_TAG_DEMUX_RESULT_OK" "2")
  )
)

;; From tag.h

;; Original typedef:
;; typedef enum {
;;   GST_TAG_IMAGE_TYPE_NONE = -1,
;;   GST_TAG_IMAGE_TYPE_UNDEFINED = 0,
;;   GST_TAG_IMAGE_TYPE_FRONT_COVER,
;;   GST_TAG_IMAGE_TYPE_BACK_COVER,
;;   GST_TAG_IMAGE_TYPE_LEAFLET_PAGE,
;;   GST_TAG_IMAGE_TYPE_MEDIUM,
;;   GST_TAG_IMAGE_TYPE_LEAD_ARTIST,
;;   GST_TAG_IMAGE_TYPE_ARTIST,
;;   GST_TAG_IMAGE_TYPE_CONDUCTOR,
;;   GST_TAG_IMAGE_TYPE_BAND_ORCHESTRA,
;;   GST_TAG_IMAGE_TYPE_COMPOSER,
;;   GST_TAG_IMAGE_TYPE_LYRICIST,
;;   GST_TAG_IMAGE_TYPE_RECORDING_LOCATION,
;;   GST_TAG_IMAGE_TYPE_DURING_RECORDING,
;;   GST_TAG_IMAGE_TYPE_DURING_PERFORMANCE,
;;   GST_TAG_IMAGE_TYPE_VIDEO_CAPTURE,
;;   GST_TAG_IMAGE_TYPE_FISH,
;;   GST_TAG_IMAGE_TYPE_ILLUSTRATION,
;;   GST_TAG_IMAGE_TYPE_BAND_ARTIST_LOGO,
;;   GST_TAG_IMAGE_TYPE_PUBLISHER_STUDIO_LOGO
;; } GstTagImageType;

(define-enum-extended TagImageType
  (in-module "Gst")
  (c-name "GstTagImageType")
  (values
    '("none" "GST_TAG_IMAGE_TYPE_NONE" "-1")
    '("undefined" "GST_TAG_IMAGE_TYPE_UNDEFINED" "0")
    '("front-cover" "GST_TAG_IMAGE_TYPE_FRONT_COVER" "1")
    '("back-cover" "GST_TAG_IMAGE_TYPE_BACK_COVER" "2")
    '("leaflet-page" "GST_TAG_IMAGE_TYPE_LEAFLET_PAGE" "3")
    '("medium" "GST_TAG_IMAGE_TYPE_MEDIUM" "4")
    '("lead-artist" "GST_TAG_IMAGE_TYPE_LEAD_ARTIST" "5")
    '("artist" "GST_TAG_IMAGE_TYPE_ARTIST" "6")
    '("conductor" "GST_TAG_IMAGE_TYPE_CONDUCTOR" "7")
    '("band-orchestra" "GST_TAG_IMAGE_TYPE_BAND_ORCHESTRA" "8")
    '("composer" "GST_TAG_IMAGE_TYPE_COMPOSER" "9")
    '("lyricist" "GST_TAG_IMAGE_TYPE_LYRICIST" "10")
    '("recording-location" "GST_TAG_IMAGE_TYPE_RECORDING_LOCATION" "11")
    '("during-recording" "GST_TAG_IMAGE_TYPE_DURING_RECORDING" "12")
    '("during-performance" "GST_TAG_IMAGE_TYPE_DURING_PERFORMANCE" "13")
    '("video-capture" "GST_TAG_IMAGE_TYPE_VIDEO_CAPTURE" "14")
    '("fish" "GST_TAG_IMAGE_TYPE_FISH" "15")
    '("illustration" "GST_TAG_IMAGE_TYPE_ILLUSTRATION" "16")
    '("band-artist-logo" "GST_TAG_IMAGE_TYPE_BAND_ARTIST_LOGO" "17")
    '("publisher-studio-logo" "GST_TAG_IMAGE_TYPE_PUBLISHER_STUDIO_LOGO" "18")
  )
)

;; From gstdiscoverer.h

;; Original typedef:
;; typedef enum {
;;   GST_DISCOVERER_OK               = 0,
;;   GST_DISCOVERER_URI_INVALID      = 1,
;;   GST_DISCOVERER_ERROR            = 2,
;;   GST_DISCOVERER_TIMEOUT          = 3,
;;   GST_DISCOVERER_BUSY             = 4,
;;   GST_DISCOVERER_MISSING_PLUGINS  = 5
;; } GstDiscovererResult;

(define-enum-extended DiscovererResult
  (in-module "Gst")
  (c-name "GstDiscovererResult")
  (values
    '("ok" "GST_DISCOVERER_OK" "0")
    '("uri-invalid" "GST_DISCOVERER_URI_INVALID" "1")
    '("error" "GST_DISCOVERER_ERROR" "2")
    '("timeout" "GST_DISCOVERER_TIMEOUT" "3")
    '("busy" "GST_DISCOVERER_BUSY" "4")
    '("missing-plugins" "GST_DISCOVERER_MISSING_PLUGINS" "5")
  )
)

;; From install-plugins.h

;; Original typedef:
;; typedef enum {
;;   /* Return codes from the installer. Returned by gst_install_plugins_sync(),
;;    * or passed as result code to your #GstInstallPluginsResultFunc */
;;   GST_INSTALL_PLUGINS_SUCCESS = 0,
;;   GST_INSTALL_PLUGINS_NOT_FOUND = 1,
;;   GST_INSTALL_PLUGINS_ERROR = 2,
;;   GST_INSTALL_PLUGINS_PARTIAL_SUCCESS = 3,
;;   GST_INSTALL_PLUGINS_USER_ABORT = 4,
;; 
;;   /* Returned by gst_install_plugins_sync(), or passed as result code to your
;;    * #GstInstallPluginsResultFunc */
;;   GST_INSTALL_PLUGINS_CRASHED = 100,
;;   GST_INSTALL_PLUGINS_INVALID,
;; 
;;   /* Return codes from starting the external helper, may be returned by both
;;    * gst_install_plugins_sync() and gst_install_plugins_async(), but should
;;    * never be seen by a #GstInstallPluginsResultFunc */
;;   GST_INSTALL_PLUGINS_STARTED_OK = 200,
;;   GST_INSTALL_PLUGINS_INTERNAL_FAILURE,
;;   GST_INSTALL_PLUGINS_HELPER_MISSING,
;;   GST_INSTALL_PLUGINS_INSTALL_IN_PROGRESS
;; } GstInstallPluginsReturn;

(define-enum-extended InstallPluginsReturn
  (in-module "Gst")
  (c-name "GstInstallPluginsReturn")
  (values
    '("success" "GST_INSTALL_PLUGINS_SUCCESS" "0")
    '("not-found" "GST_INSTALL_PLUGINS_NOT_FOUND" "1")
    '("error" "GST_INSTALL_PLUGINS_ERROR" "2")
    '("partial-success" "GST_INSTALL_PLUGINS_PARTIAL_SUCCESS" "3")
    '("user-abort" "GST_INSTALL_PLUGINS_USER_ABORT" "4")
    '("crashed" "GST_INSTALL_PLUGINS_CRASHED" "100")
    '("invalid" "GST_INSTALL_PLUGINS_INVALID" "101")
    '("started-ok" "GST_INSTALL_PLUGINS_STARTED_OK" "200")
    '("internal-failure" "GST_INSTALL_PLUGINS_INTERNAL_FAILURE" "201")
    '("helper-missing" "GST_INSTALL_PLUGINS_HELPER_MISSING" "202")
    '("install-in-progress" "GST_INSTALL_PLUGINS_INSTALL_IN_PROGRESS" "203")
  )
)

;; From video.h

;; Original typedef:
;; typedef enum {
;;   GST_VIDEO_FORMAT_UNKNOWN,
;;   GST_VIDEO_FORMAT_I420,
;;   GST_VIDEO_FORMAT_YV12,
;;   GST_VIDEO_FORMAT_YUY2,
;;   GST_VIDEO_FORMAT_UYVY,
;;   GST_VIDEO_FORMAT_AYUV,
;;   GST_VIDEO_FORMAT_RGBx,
;;   GST_VIDEO_FORMAT_BGRx,
;;   GST_VIDEO_FORMAT_xRGB,
;;   GST_VIDEO_FORMAT_xBGR,
;;   GST_VIDEO_FORMAT_RGBA,
;;   GST_VIDEO_FORMAT_BGRA,
;;   GST_VIDEO_FORMAT_ARGB,
;;   GST_VIDEO_FORMAT_ABGR,
;;   GST_VIDEO_FORMAT_RGB,
;;   GST_VIDEO_FORMAT_BGR,
;;   GST_VIDEO_FORMAT_Y41B,
;;   GST_VIDEO_FORMAT_Y42B,
;;   GST_VIDEO_FORMAT_YVYU,
;;   GST_VIDEO_FORMAT_Y444,
;;   GST_VIDEO_FORMAT_v210,
;;   GST_VIDEO_FORMAT_v216,
;;   GST_VIDEO_FORMAT_NV12,
;;   GST_VIDEO_FORMAT_NV21,
;;   GST_VIDEO_FORMAT_GRAY8,
;;   GST_VIDEO_FORMAT_GRAY16_BE,
;;   GST_VIDEO_FORMAT_GRAY16_LE,
;;   GST_VIDEO_FORMAT_v308,
;;   GST_VIDEO_FORMAT_Y800,
;;   GST_VIDEO_FORMAT_Y16,
;;   GST_VIDEO_FORMAT_RGB16,
;;   GST_VIDEO_FORMAT_BGR16,
;;   GST_VIDEO_FORMAT_RGB15,
;;   GST_VIDEO_FORMAT_BGR15,
;;   GST_VIDEO_FORMAT_UYVP,
;;   GST_VIDEO_FORMAT_A420,
;;   GST_VIDEO_FORMAT_RGB8_PALETTED,
;;   GST_VIDEO_FORMAT_YUV9,
;;   GST_VIDEO_FORMAT_YVU9,
;;   GST_VIDEO_FORMAT_IYU1
;; } GstVideoFormat;

(define-enum-extended VideoFormat
  (in-module "Gst")
  (c-name "GstVideoFormat")
  (values
    '("unknown" "GST_VIDEO_FORMAT_UNKNOWN" "0")
    '("i420" "GST_VIDEO_FORMAT_I420" "1")
    '("yv12" "GST_VIDEO_FORMAT_YV12" "2")
    '("yuy2" "GST_VIDEO_FORMAT_YUY2" "3")
    '("uyvy" "GST_VIDEO_FORMAT_UYVY" "4")
    '("ayuv" "GST_VIDEO_FORMAT_AYUV" "5")
    '("rgbx" "GST_VIDEO_FORMAT_RGBx" "6")
    '("bgrx" "GST_VIDEO_FORMAT_BGRx" "7")
    '("xrgb" "GST_VIDEO_FORMAT_xRGB" "8")
    '("xbgr" "GST_VIDEO_FORMAT_xBGR" "9")
    '("rgba" "GST_VIDEO_FORMAT_RGBA" "10")
    '("bgra" "GST_VIDEO_FORMAT_BGRA" "11")
    '("argb" "GST_VIDEO_FORMAT_ARGB" "12")
    '("abgr" "GST_VIDEO_FORMAT_ABGR" "13")
    '("rgb" "GST_VIDEO_FORMAT_RGB" "14")
    '("bgr" "GST_VIDEO_FORMAT_BGR" "15")
    '("y41b" "GST_VIDEO_FORMAT_Y41B" "16")
    '("y42b" "GST_VIDEO_FORMAT_Y42B" "17")
    '("yvyu" "GST_VIDEO_FORMAT_YVYU" "18")
    '("y444" "GST_VIDEO_FORMAT_Y444" "19")
    '("v210" "GST_VIDEO_FORMAT_v210" "20")
    '("v216" "GST_VIDEO_FORMAT_v216" "21")
    '("nv12" "GST_VIDEO_FORMAT_NV12" "22")
    '("nv21" "GST_VIDEO_FORMAT_NV21" "23")
    '("gray8" "GST_VIDEO_FORMAT_GRAY8" "24")
    '("gray16-be" "GST_VIDEO_FORMAT_GRAY16_BE" "25")
    '("gray16-le" "GST_VIDEO_FORMAT_GRAY16_LE" "26")
    '("v308" "GST_VIDEO_FORMAT_v308" "27")
    '("y800" "GST_VIDEO_FORMAT_Y800" "28")
    '("y16" "GST_VIDEO_FORMAT_Y16" "29")
    '("rgb16" "GST_VIDEO_FORMAT_RGB16" "30")
    '("bgr16" "GST_VIDEO_FORMAT_BGR16" "31")
    '("rgb15" "GST_VIDEO_FORMAT_RGB15" "32")
    '("bgr15" "GST_VIDEO_FORMAT_BGR15" "33")
    '("uyvp" "GST_VIDEO_FORMAT_UYVP" "34")
    '("a420" "GST_VIDEO_FORMAT_A420" "35")
    '("rgb8-paletted" "GST_VIDEO_FORMAT_RGB8_PALETTED" "36")
    '("yuv9" "GST_VIDEO_FORMAT_YUV9" "37")
    '("yvu9" "GST_VIDEO_FORMAT_YVU9" "38")
    '("iyu1" "GST_VIDEO_FORMAT_IYU1" "39")
  )
)

;; From gstadder.h

;; Original typedef:
;; typedef enum {
;;   GST_ADDER_FORMAT_UNSET,
;;   GST_ADDER_FORMAT_INT,
;;   GST_ADDER_FORMAT_FLOAT
;; } GstAdderFormat;

(define-enum-extended AdderFormat
  (in-module "Gst")
  (c-name "GstAdderFormat")
  (values
    '("unset" "GST_ADDER_FORMAT_UNSET" "0")
    '("int" "GST_ADDER_FORMAT_INT" "1")
    '("float" "GST_ADDER_FORMAT_FLOAT" "2")
  )
)

;; From audioconvert.h

;; Original typedef:
;; typedef enum
;; {
;;   DITHER_NONE = 0,
;;   DITHER_RPDF,
;;   DITHER_TPDF,
;;   DITHER_TPDF_HF
;; } GstAudioConvertDithering;

(define-enum-extended AudioConvertDithering
  (in-module "Gst")
  (c-name "GstAudioConvertDithering")
  (values
    '("none" "GST_AUDIO_CONVERT_DITHER_NONE" "0")
    '("rpdf" "GST_AUDIO_CONVERT_DITHER_RPDF" "1")
    '("tpdf" "GST_AUDIO_CONVERT_DITHER_TPDF" "2")
    '("tpdf-hf" "GST_AUDIO_CONVERT_DITHER_TPDF_HF" "3")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   NOISE_SHAPING_NONE = 0,
;;   NOISE_SHAPING_ERROR_FEEDBACK,
;;   NOISE_SHAPING_SIMPLE,
;;   NOISE_SHAPING_MEDIUM,
;;   NOISE_SHAPING_HIGH
;; } GstAudioConvertNoiseShaping;

(define-enum-extended AudioConvertNoiseShaping
  (in-module "Gst")
  (c-name "GstAudioConvertNoiseShaping")
  (values
    '("none" "GST_AUDIO_CONVERT_NOISE_SHAPING_NONE" "0")
    '("error-feedback" "GST_AUDIO_CONVERT_NOISE_SHAPING_ERROR_FEEDBACK" "1")
    '("simple" "GST_AUDIO_CONVERT_NOISE_SHAPING_SIMPLE" "2")
    '("medium" "GST_AUDIO_CONVERT_NOISE_SHAPING_MEDIUM" "3")
    '("high" "GST_AUDIO_CONVERT_NOISE_SHAPING_HIGH" "4")
  )
)

;; From gstaudiotestsrc.h

;; Original typedef:
;; typedef enum {
;;   GST_AUDIO_TEST_SRC_WAVE_SINE,
;;   GST_AUDIO_TEST_SRC_WAVE_SQUARE,
;;   GST_AUDIO_TEST_SRC_WAVE_SAW,
;;   GST_AUDIO_TEST_SRC_WAVE_TRIANGLE,
;;   GST_AUDIO_TEST_SRC_WAVE_SILENCE,
;;   GST_AUDIO_TEST_SRC_WAVE_WHITE_NOISE,
;;   GST_AUDIO_TEST_SRC_WAVE_PINK_NOISE,
;;   GST_AUDIO_TEST_SRC_WAVE_SINE_TAB,
;;   GST_AUDIO_TEST_SRC_WAVE_TICKS,
;;   GST_AUDIO_TEST_SRC_WAVE_GAUSSIAN_WHITE_NOISE
;; } GstAudioTestSrcWave; 

(define-enum-extended AudioTestSrcWave
  (in-module "Gst")
  (c-name "GstAudioTestSrcWave")
  (values
    '("sine" "GST_AUDIO_TEST_SRC_WAVE_SINE" "0")
    '("square" "GST_AUDIO_TEST_SRC_WAVE_SQUARE" "1")
    '("saw" "GST_AUDIO_TEST_SRC_WAVE_SAW" "2")
    '("triangle" "GST_AUDIO_TEST_SRC_WAVE_TRIANGLE" "3")
    '("silence" "GST_AUDIO_TEST_SRC_WAVE_SILENCE" "4")
    '("white-noise" "GST_AUDIO_TEST_SRC_WAVE_WHITE_NOISE" "5")
    '("pink-noise" "GST_AUDIO_TEST_SRC_WAVE_PINK_NOISE" "6")
    '("sine-tab" "GST_AUDIO_TEST_SRC_WAVE_SINE_TAB" "7")
    '("ticks" "GST_AUDIO_TEST_SRC_WAVE_TICKS" "8")
    '("gaussian-white-noise" "GST_AUDIO_TEST_SRC_WAVE_GAUSSIAN_WHITE_NOISE" "9")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_AUDIO_TEST_SRC_FORMAT_NONE = -1,
;;   GST_AUDIO_TEST_SRC_FORMAT_S16 = 0,
;;   GST_AUDIO_TEST_SRC_FORMAT_S32,
;;   GST_AUDIO_TEST_SRC_FORMAT_F32,
;;   GST_AUDIO_TEST_SRC_FORMAT_F64
;; } GstAudioTestSrcFormat;

(define-enum-extended AudioTestSrcFormat
  (in-module "Gst")
  (c-name "GstAudioTestSrcFormat")
  (values
    '("none" "GST_AUDIO_TEST_SRC_FORMAT_NONE" "-1")
    '("s16" "GST_AUDIO_TEST_SRC_FORMAT_S16" "0")
    '("s32" "GST_AUDIO_TEST_SRC_FORMAT_S32" "1")
    '("f32" "GST_AUDIO_TEST_SRC_FORMAT_F32" "2")
    '("f64" "GST_AUDIO_TEST_SRC_FORMAT_F64" "3")
  )
)

;; From gstgdpdepay.h

;; Original typedef:
;; typedef enum {
;;   GST_GDP_DEPAY_STATE_HEADER = 0,
;;   GST_GDP_DEPAY_STATE_PAYLOAD,
;;   GST_GDP_DEPAY_STATE_BUFFER,
;;   GST_GDP_DEPAY_STATE_CAPS,
;;   GST_GDP_DEPAY_STATE_EVENT,
;; } GstGDPDepayState;

(define-enum-extended GDPDepayState
  (in-module "Gst")
  (c-name "GstGDPDepayState")
  (values
    '("header" "GST_GDP_DEPAY_STATE_HEADER" "0")
    '("payload" "GST_GDP_DEPAY_STATE_PAYLOAD" "1")
    '("buffer" "GST_GDP_DEPAY_STATE_BUFFER" "2")
    '("caps" "GST_GDP_DEPAY_STATE_CAPS" "3")
    '("event" "GST_GDP_DEPAY_STATE_EVENT" "4")
  )
)

;; From gstplay-enum.h

;; Original typedef:
;; typedef enum {
;;   GST_AUTOPLUG_SELECT_TRY,
;;   GST_AUTOPLUG_SELECT_EXPOSE,
;;   GST_AUTOPLUG_SELECT_SKIP
;; } GstAutoplugSelectResult;

(define-enum-extended AutoplugSelectResult
  (in-module "Gst")
  (c-name "GstAutoplugSelectResult")
  (values
    '("try" "GST_AUTOPLUG_SELECT_TRY" "0")
    '("expose" "GST_AUTOPLUG_SELECT_EXPOSE" "1")
    '("skip" "GST_AUTOPLUG_SELECT_SKIP" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_PLAY_FLAG_VIDEO         = (1 << 0),
;;   GST_PLAY_FLAG_AUDIO         = (1 << 1),
;;   GST_PLAY_FLAG_TEXT          = (1 << 2),
;;   GST_PLAY_FLAG_VIS           = (1 << 3),
;;   GST_PLAY_FLAG_SOFT_VOLUME   = (1 << 4),
;;   GST_PLAY_FLAG_NATIVE_AUDIO  = (1 << 5),
;;   GST_PLAY_FLAG_NATIVE_VIDEO  = (1 << 6),
;;   GST_PLAY_FLAG_DOWNLOAD      = (1 << 7),
;;   GST_PLAY_FLAG_BUFFERING     = (1 << 8),
;;   GST_PLAY_FLAG_DEINTERLACE   = (1 << 9)
;; } GstPlayFlags;

(define-flags-extended PlayFlags
  (in-module "Gst")
  (c-name "GstPlayFlags")
  (values
    '("video" "GST_PLAY_FLAG_VIDEO" "(1 << 0)")
    '("audio" "GST_PLAY_FLAG_AUDIO" "(1 << 1)")
    '("text" "GST_PLAY_FLAG_TEXT" "(1 << 2)")
    '("vis" "GST_PLAY_FLAG_VIS" "(1 << 3)")
    '("soft-volume" "GST_PLAY_FLAG_SOFT_VOLUME" "(1 << 4)")
    '("native-audio" "GST_PLAY_FLAG_NATIVE_AUDIO" "(1 << 5)")
    '("native-video" "GST_PLAY_FLAG_NATIVE_VIDEO" "(1 << 6)")
    '("download" "GST_PLAY_FLAG_DOWNLOAD" "(1 << 7)")
    '("buffering" "GST_PLAY_FLAG_BUFFERING" "(1 << 8)")
    '("deinterlace" "GST_PLAY_FLAG_DEINTERLACE" "(1 << 9)")
  )
)

;; From gstplaysink.h

;; Original typedef:
;; typedef enum {
;;   GST_PLAY_SINK_TYPE_AUDIO     = 0,
;;   GST_PLAY_SINK_TYPE_AUDIO_RAW = 1,
;;   GST_PLAY_SINK_TYPE_VIDEO     = 2,
;;   GST_PLAY_SINK_TYPE_VIDEO_RAW = 3,
;;   GST_PLAY_SINK_TYPE_TEXT      = 4,
;;   GST_PLAY_SINK_TYPE_LAST      = 5,
;; 
;;   /* this is a dummy pad */
;;   GST_PLAY_SINK_TYPE_FLUSHING  = 6
;; } GstPlaySinkType;

(define-enum-extended PlaySinkType
  (in-module "Gst")
  (c-name "GstPlaySinkType")
  (values
    '("audio" "GST_PLAY_SINK_TYPE_AUDIO" "0")
    '("audio-raw" "GST_PLAY_SINK_TYPE_AUDIO_RAW" "1")
    '("video" "GST_PLAY_SINK_TYPE_VIDEO" "2")
    '("video-raw" "GST_PLAY_SINK_TYPE_VIDEO_RAW" "3")
    '("text" "GST_PLAY_SINK_TYPE_TEXT" "4")
    '("last" "GST_PLAY_SINK_TYPE_LAST" "5")
    '("flushing" "GST_PLAY_SINK_TYPE_FLUSHING" "6")
  )
)

;; From gststreaminfo.h

;; Original typedef:
;; typedef enum {
;;   GST_STREAM_TYPE_UNKNOWN = 0,
;;   GST_STREAM_TYPE_AUDIO   = 1,    /* an audio stream */
;;   GST_STREAM_TYPE_VIDEO   = 2,    /* a video stream */
;;   GST_STREAM_TYPE_TEXT    = 3,    /* a subtitle/text stream */
;;   GST_STREAM_TYPE_SUBPICTURE = 4, /* a subtitle in picture-form */
;;   GST_STREAM_TYPE_ELEMENT = 5    /* stream handled by an element */
;; } GstStreamType;

(define-enum-extended StreamType
  (in-module "Gst")
  (c-name "GstStreamType")
  (values
    '("unknown" "GST_STREAM_TYPE_UNKNOWN" "0")
    '("audio" "GST_STREAM_TYPE_AUDIO" "1")
    '("video" "GST_STREAM_TYPE_VIDEO" "2")
    '("text" "GST_STREAM_TYPE_TEXT" "3")
    '("subpicture" "GST_STREAM_TYPE_SUBPICTURE" "4")
    '("element" "GST_STREAM_TYPE_ELEMENT" "5")
  )
)

;; From gstsubparse.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_SUB_PARSE_FORMAT_UNKNOWN = 0,
;;   GST_SUB_PARSE_FORMAT_MDVDSUB = 1,
;;   GST_SUB_PARSE_FORMAT_SUBRIP = 2,
;;   GST_SUB_PARSE_FORMAT_MPSUB = 3,
;;   GST_SUB_PARSE_FORMAT_SAMI = 4,
;;   GST_SUB_PARSE_FORMAT_TMPLAYER = 5,
;;   GST_SUB_PARSE_FORMAT_MPL2 = 6,
;;   GST_SUB_PARSE_FORMAT_SUBVIEWER = 7,
;;   GST_SUB_PARSE_FORMAT_DKS = 8,
;;   GST_SUB_PARSE_FORMAT_QTTEXT = 9
;; } GstSubParseFormat;

(define-enum-extended SubParseFormat
  (in-module "Gst")
  (c-name "GstSubParseFormat")
  (values
    '("unknown" "GST_SUB_PARSE_FORMAT_UNKNOWN" "0")
    '("mdvdsub" "GST_SUB_PARSE_FORMAT_MDVDSUB" "1")
    '("subrip" "GST_SUB_PARSE_FORMAT_SUBRIP" "2")
    '("mpsub" "GST_SUB_PARSE_FORMAT_MPSUB" "3")
    '("sami" "GST_SUB_PARSE_FORMAT_SAMI" "4")
    '("tmplayer" "GST_SUB_PARSE_FORMAT_TMPLAYER" "5")
    '("mpl2" "GST_SUB_PARSE_FORMAT_MPL2" "6")
    '("subviewer" "GST_SUB_PARSE_FORMAT_SUBVIEWER" "7")
    '("dks" "GST_SUB_PARSE_FORMAT_DKS" "8")
    '("qttext" "GST_SUB_PARSE_FORMAT_QTTEXT" "9")
  )
)

;; From gstmultifdsink.h

;; Original typedef:
;; typedef enum {
;;   GST_MULTI_FD_SINK_OPEN             = (GST_ELEMENT_FLAG_LAST << 0),
;; 
;;   GST_MULTI_FD_SINK_FLAG_LAST        = (GST_ELEMENT_FLAG_LAST << 2)
;; } GstMultiFdSinkFlags;

(define-flags-extended MultiFdSinkFlags
  (in-module "Gst")
  (c-name "GstMultiFdSinkFlags")
  (values
    '("open" "GST_MULTI_FD_SINK_OPEN" "(GST_ELEMENT_FLAG_LAST << 0)")
    '("flag-last" "GST_MULTI_FD_SINK_FLAG_LAST" "(GST_ELEMENT_FLAG_LAST << 2)")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_RECOVER_POLICY_NONE,
;;   GST_RECOVER_POLICY_RESYNC_LATEST,
;;   GST_RECOVER_POLICY_RESYNC_SOFT_LIMIT,
;;   GST_RECOVER_POLICY_RESYNC_KEYFRAME
;; } GstRecoverPolicy;

(define-enum-extended RecoverPolicy
  (in-module "Gst")
  (c-name "GstRecoverPolicy")
  (values
    '("none" "GST_RECOVER_POLICY_NONE" "0")
    '("resync-latest" "GST_RECOVER_POLICY_RESYNC_LATEST" "1")
    '("resync-soft-limit" "GST_RECOVER_POLICY_RESYNC_SOFT_LIMIT" "2")
    '("resync-keyframe" "GST_RECOVER_POLICY_RESYNC_KEYFRAME" "3")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_SYNC_METHOD_LATEST,
;;   GST_SYNC_METHOD_NEXT_KEYFRAME,
;;   GST_SYNC_METHOD_LATEST_KEYFRAME,
;;   GST_SYNC_METHOD_BURST,
;;   GST_SYNC_METHOD_BURST_KEYFRAME,
;;   GST_SYNC_METHOD_BURST_WITH_KEYFRAME
;; } GstSyncMethod;

(define-enum-extended SyncMethod
  (in-module "Gst")
  (c-name "GstSyncMethod")
  (values
    '("latest" "GST_SYNC_METHOD_LATEST" "0")
    '("next-keyframe" "GST_SYNC_METHOD_NEXT_KEYFRAME" "1")
    '("latest-keyframe" "GST_SYNC_METHOD_LATEST_KEYFRAME" "2")
    '("burst" "GST_SYNC_METHOD_BURST" "3")
    '("burst-keyframe" "GST_SYNC_METHOD_BURST_KEYFRAME" "4")
    '("burst-with-keyframe" "GST_SYNC_METHOD_BURST_WITH_KEYFRAME" "5")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_TCP_UNIT_TYPE_UNDEFINED,
;;   GST_TCP_UNIT_TYPE_BUFFERS,
;;   GST_TCP_UNIT_TYPE_TIME,
;;   GST_TCP_UNIT_TYPE_BYTES
;; } GstTCPUnitType;

(define-enum-extended TCPUnitType
  (in-module "Gst")
  (c-name "GstTCPUnitType")
  (values
    '("undefined" "GST_TCP_UNIT_TYPE_UNDEFINED" "0")
    '("buffers" "GST_TCP_UNIT_TYPE_BUFFERS" "1")
    '("time" "GST_TCP_UNIT_TYPE_TIME" "2")
    '("bytes" "GST_TCP_UNIT_TYPE_BYTES" "3")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   GST_CLIENT_STATUS_OK          = 0,
;;   GST_CLIENT_STATUS_CLOSED      = 1,
;;   GST_CLIENT_STATUS_REMOVED     = 2,
;;   GST_CLIENT_STATUS_SLOW        = 3,
;;   GST_CLIENT_STATUS_ERROR       = 4,
;;   GST_CLIENT_STATUS_DUPLICATE   = 5,
;;   GST_CLIENT_STATUS_FLUSHING    = 6
;; } GstClientStatus;

(define-enum-extended ClientStatus
  (in-module "Gst")
  (c-name "GstClientStatus")
  (values
    '("ok" "GST_CLIENT_STATUS_OK" "0")
    '("closed" "GST_CLIENT_STATUS_CLOSED" "1")
    '("removed" "GST_CLIENT_STATUS_REMOVED" "2")
    '("slow" "GST_CLIENT_STATUS_SLOW" "3")
    '("error" "GST_CLIENT_STATUS_ERROR" "4")
    '("duplicate" "GST_CLIENT_STATUS_DUPLICATE" "5")
    '("flushing" "GST_CLIENT_STATUS_FLUSHING" "6")
  )
)

;; From gsttcpclientsink.h

;; Original typedef:
;; typedef enum {
;;   GST_TCP_CLIENT_SINK_OPEN             = (GST_ELEMENT_FLAG_LAST << 0),
;; 
;;   GST_TCP_CLIENT_SINK_FLAG_LAST        = (GST_ELEMENT_FLAG_LAST << 2),
;; } GstTCPClientSinkFlags;

(define-flags-extended TCPClientSinkFlags
  (in-module "Gst")
  (c-name "GstTCPClientSinkFlags")
  (values
    '("open" "GST_TCP_CLIENT_SINK_OPEN" "(GST_ELEMENT_FLAG_LAST << 0)")
    '("flag-last" "GST_TCP_CLIENT_SINK_FLAG_LAST" "(GST_ELEMENT_FLAG_LAST << 2)")
  )
)

;; From gsttcpclientsrc.h

;; Original typedef:
;; typedef enum {
;;   GST_TCP_CLIENT_SRC_OPEN       = (GST_ELEMENT_FLAG_LAST << 0),
;; 
;;   GST_TCP_CLIENT_SRC_FLAG_LAST  = (GST_ELEMENT_FLAG_LAST << 2)
;; } GstTCPClientSrcFlags;

(define-flags-extended TCPClientSrcFlags
  (in-module "Gst")
  (c-name "GstTCPClientSrcFlags")
  (values
    '("open" "GST_TCP_CLIENT_SRC_OPEN" "(GST_ELEMENT_FLAG_LAST << 0)")
    '("flag-last" "GST_TCP_CLIENT_SRC_FLAG_LAST" "(GST_ELEMENT_FLAG_LAST << 2)")
  )
)

;; From gsttcp.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_TCP_PROTOCOL_NONE,
;;   GST_TCP_PROTOCOL_GDP
;; } GstTCPProtocol;

(define-enum-extended TCPProtocol
  (in-module "Gst")
  (c-name "GstTCPProtocol")
  (values
    '("none" "GST_TCP_PROTOCOL_NONE" "0")
    '("gdp" "GST_TCP_PROTOCOL_GDP" "1")
  )
)

;; From gsttcpplugin.h

;; Original typedef:
;;   typedef enum
;;   {
;;     CONTROL_ZERO,
;;     CONTROL_NONE,
;;     CONTROL_TCP
;;   } Gst_TCP_Control;

(define-enum-extended _TCP_Control
  (in-module "Gst")
  (c-name "Gst_TCP_Control")
  (values
    '("zero" "CONTROL_ZERO" "0")
    '("none" "CONTROL_NONE" "1")
    '("tcp" "CONTROL_TCP" "2")
  )
)

;; From gsttcpserversink.h

;; Original typedef:
;; typedef enum {
;;   GST_TCP_SERVER_SINK_OPEN             = (GST_ELEMENT_FLAG_LAST << 0),
;; 
;;   GST_TCP_SERVER_SINK_FLAG_LAST        = (GST_ELEMENT_FLAG_LAST << 2)
;; } GstTCPServerSinkFlags;

(define-flags-extended TCPServerSinkFlags
  (in-module "Gst")
  (c-name "GstTCPServerSinkFlags")
  (values
    '("open" "GST_TCP_SERVER_SINK_OPEN" "(GST_ELEMENT_FLAG_LAST << 0)")
    '("flag-last" "GST_TCP_SERVER_SINK_FLAG_LAST" "(GST_ELEMENT_FLAG_LAST << 2)")
  )
)

;; From gsttcpserversrc.h

;; Original typedef:
;; typedef enum {
;;   GST_TCP_SERVER_SRC_OPEN       = (GST_ELEMENT_FLAG_LAST << 0),
;; 
;;   GST_TCP_SERVER_SRC_FLAG_LAST  = (GST_ELEMENT_FLAG_LAST << 2)
;; } GstTCPServerSrcFlags;

(define-flags-extended TCPServerSrcFlags
  (in-module "Gst")
  (c-name "GstTCPServerSrcFlags")
  (values
    '("open" "GST_TCP_SERVER_SRC_OPEN" "(GST_ELEMENT_FLAG_LAST << 0)")
    '("flag-last" "GST_TCP_SERVER_SRC_FLAG_LAST" "(GST_ELEMENT_FLAG_LAST << 2)")
  )
)

;; From gstvideoscale.h

;; Original typedef:
;; typedef enum {
;;   GST_VIDEO_SCALE_NEAREST,
;;   GST_VIDEO_SCALE_BILINEAR,
;;   GST_VIDEO_SCALE_4TAP
;; } GstVideoScaleMethod;

(define-enum-extended VideoScaleMethod
  (in-module "Gst")
  (c-name "GstVideoScaleMethod")
  (values
    '("nearest" "GST_VIDEO_SCALE_NEAREST" "0")
    '("bilinear" "GST_VIDEO_SCALE_BILINEAR" "1")
    '("4tap" "GST_VIDEO_SCALE_4TAP" "2")
  )
)

;; From gstvideotestsrc.h

;; Original typedef:
;; typedef enum {
;;   GST_VIDEO_TEST_SRC_SMPTE,
;;   GST_VIDEO_TEST_SRC_SNOW,
;;   GST_VIDEO_TEST_SRC_BLACK,
;;   GST_VIDEO_TEST_SRC_WHITE,
;;   GST_VIDEO_TEST_SRC_RED,
;;   GST_VIDEO_TEST_SRC_GREEN,
;;   GST_VIDEO_TEST_SRC_BLUE,
;;   GST_VIDEO_TEST_SRC_CHECKERS1,
;;   GST_VIDEO_TEST_SRC_CHECKERS2,
;;   GST_VIDEO_TEST_SRC_CHECKERS4,
;;   GST_VIDEO_TEST_SRC_CHECKERS8,
;;   GST_VIDEO_TEST_SRC_CIRCULAR,
;;   GST_VIDEO_TEST_SRC_BLINK,
;;   GST_VIDEO_TEST_SRC_SMPTE75,
;;   GST_VIDEO_TEST_SRC_ZONE_PLATE,
;;   GST_VIDEO_TEST_SRC_GAMUT,
;;   GST_VIDEO_TEST_SRC_CHROMA_ZONE_PLATE,
;;   GST_VIDEO_TEST_SRC_SOLID,
;;   GST_VIDEO_TEST_SRC_BALL,
;;   GST_VIDEO_TEST_SRC_SMPTE100,
;;   GST_VIDEO_TEST_SRC_BAR
;; } GstVideoTestSrcPattern;

(define-enum-extended VideoTestSrcPattern
  (in-module "Gst")
  (c-name "GstVideoTestSrcPattern")
  (values
    '("smpte" "GST_VIDEO_TEST_SRC_SMPTE" "0")
    '("snow" "GST_VIDEO_TEST_SRC_SNOW" "1")
    '("black" "GST_VIDEO_TEST_SRC_BLACK" "2")
    '("white" "GST_VIDEO_TEST_SRC_WHITE" "3")
    '("red" "GST_VIDEO_TEST_SRC_RED" "4")
    '("green" "GST_VIDEO_TEST_SRC_GREEN" "5")
    '("blue" "GST_VIDEO_TEST_SRC_BLUE" "6")
    '("checkers1" "GST_VIDEO_TEST_SRC_CHECKERS1" "7")
    '("checkers2" "GST_VIDEO_TEST_SRC_CHECKERS2" "8")
    '("checkers4" "GST_VIDEO_TEST_SRC_CHECKERS4" "9")
    '("checkers8" "GST_VIDEO_TEST_SRC_CHECKERS8" "10")
    '("circular" "GST_VIDEO_TEST_SRC_CIRCULAR" "11")
    '("blink" "GST_VIDEO_TEST_SRC_BLINK" "12")
    '("smpte75" "GST_VIDEO_TEST_SRC_SMPTE75" "13")
    '("zone-plate" "GST_VIDEO_TEST_SRC_ZONE_PLATE" "14")
    '("gamut" "GST_VIDEO_TEST_SRC_GAMUT" "15")
    '("chroma-zone-plate" "GST_VIDEO_TEST_SRC_CHROMA_ZONE_PLATE" "16")
    '("solid" "GST_VIDEO_TEST_SRC_SOLID" "17")
    '("ball" "GST_VIDEO_TEST_SRC_BALL" "18")
    '("smpte100" "GST_VIDEO_TEST_SRC_SMPTE100" "19")
    '("bar" "GST_VIDEO_TEST_SRC_BAR" "20")
  )
)

;; Original typedef:
;; typedef enum {
;;   GST_VIDEO_TEST_SRC_BT601,
;;   GST_VIDEO_TEST_SRC_BT709
;; } GstVideoTestSrcColorSpec;

(define-enum-extended VideoTestSrcColorSpec
  (in-module "Gst")
  (c-name "GstVideoTestSrcColorSpec")
  (values
    '("bt601" "GST_VIDEO_TEST_SRC_BT601" "0")
    '("bt709" "GST_VIDEO_TEST_SRC_BT709" "1")
  )
)

;; From gstalsamixer.h

;; Original typedef:
;; typedef enum {
;;   GST_ALSA_MIXER_CAPTURE = 1<<0,
;;   GST_ALSA_MIXER_PLAYBACK = 1<<1,
;;   GST_ALSA_MIXER_ALL = GST_ALSA_MIXER_CAPTURE | GST_ALSA_MIXER_PLAYBACK
;; } GstAlsaMixerDirection;

(define-flags-extended AlsaMixerDirection
  (in-module "Gst")
  (c-name "GstAlsaMixerDirection")
  (values
    '("capture" "GST_ALSA_MIXER_CAPTURE" "1<<0")
    '("playback" "GST_ALSA_MIXER_PLAYBACK" "1<<1")
    '("all" "GST_ALSA_MIXER_ALL" "0x3")
  )
)

;; From dirac_parse.h

;; Original typedef:
;; typedef enum _SchroParseCode {
;;   SCHRO_PARSE_CODE_SEQUENCE_HEADER = 0x00,
;;   SCHRO_PARSE_CODE_END_OF_SEQUENCE = 0x10,
;;   SCHRO_PARSE_CODE_AUXILIARY_DATA = 0x20,
;;   SCHRO_PARSE_CODE_PADDING = 0x30,
;; 
;;   SCHRO_PARSE_CODE_INTRA_REF = 0x0c,
;;   SCHRO_PARSE_CODE_INTRA_NON_REF = 0x08,
;;   SCHRO_PARSE_CODE_INTRA_REF_NOARITH = 0x4c,
;;   SCHRO_PARSE_CODE_INTRA_NON_REF_NOARITH = 0x48,
;; 
;;   SCHRO_PARSE_CODE_INTER_REF_1 = 0x0d,
;;   SCHRO_PARSE_CODE_INTER_REF_1_NOARITH = 0x4d,
;;   SCHRO_PARSE_CODE_INTER_REF_2 = 0x0e,
;;   SCHRO_PARSE_CODE_INTER_REF_2_NOARITH = 0x4e,
;; 
;;   SCHRO_PARSE_CODE_INTER_NON_REF_1 = 0x09,
;;   SCHRO_PARSE_CODE_INTER_NON_REF_1_NOARITH = 0x49,
;;   SCHRO_PARSE_CODE_INTER_NON_REF_2 = 0x0a,
;;   SCHRO_PARSE_CODE_INTER_NON_REF_2_NOARITH = 0x4a,
;; 
;;   SCHRO_PARSE_CODE_LD_INTRA_REF = 0xcc,
;;   SCHRO_PARSE_CODE_LD_INTRA_NON_REF = 0xc8
;; } SchroParseCode;

(define-flags-extended SchroParseCode
  (in-module "Gst")
  (c-name "SchroParseCode")
  (values
    '("sequence-header" "SCHRO_PARSE_CODE_SEQUENCE_HEADER" "0x00")
    '("end-of-sequence" "SCHRO_PARSE_CODE_END_OF_SEQUENCE" "0x10")
    '("auxiliary-data" "SCHRO_PARSE_CODE_AUXILIARY_DATA" "0x20")
    '("padding" "SCHRO_PARSE_CODE_PADDING" "0x30")
    '("intra-ref" "SCHRO_PARSE_CODE_INTRA_REF" "0x0c")
    '("intra-non-ref" "SCHRO_PARSE_CODE_INTRA_NON_REF" "0x08")
    '("intra-ref-noarith" "SCHRO_PARSE_CODE_INTRA_REF_NOARITH" "0x4c")
    '("intra-non-ref-noarith" "SCHRO_PARSE_CODE_INTRA_NON_REF_NOARITH" "0x48")
    '("inter-ref-1" "SCHRO_PARSE_CODE_INTER_REF_1" "0x0d")
    '("inter-ref-1-noarith" "SCHRO_PARSE_CODE_INTER_REF_1_NOARITH" "0x4d")
    '("inter-ref-2" "SCHRO_PARSE_CODE_INTER_REF_2" "0x0e")
    '("inter-ref-2-noarith" "SCHRO_PARSE_CODE_INTER_REF_2_NOARITH" "0x4e")
    '("inter-non-ref-1" "SCHRO_PARSE_CODE_INTER_NON_REF_1" "0x09")
    '("inter-non-ref-1-noarith" "SCHRO_PARSE_CODE_INTER_NON_REF_1_NOARITH" "0x49")
    '("inter-non-ref-2" "SCHRO_PARSE_CODE_INTER_NON_REF_2" "0x0a")
    '("inter-non-ref-2-noarith" "SCHRO_PARSE_CODE_INTER_NON_REF_2_NOARITH" "0x4a")
    '("ld-intra-ref" "SCHRO_PARSE_CODE_LD_INTRA_REF" "0xcc")
    '("ld-intra-non-ref" "SCHRO_PARSE_CODE_LD_INTRA_NON_REF" "0xc8")
  )
)

;; Original typedef:
;; typedef enum _SchroVideoFormatEnum {
;;   SCHRO_VIDEO_FORMAT_CUSTOM = 0,
;;   SCHRO_VIDEO_FORMAT_QSIF,
;;   SCHRO_VIDEO_FORMAT_QCIF,
;;   SCHRO_VIDEO_FORMAT_SIF,
;;   SCHRO_VIDEO_FORMAT_CIF,
;;   SCHRO_VIDEO_FORMAT_4SIF,
;;   SCHRO_VIDEO_FORMAT_4CIF,
;;   SCHRO_VIDEO_FORMAT_SD480I_60,
;;   SCHRO_VIDEO_FORMAT_SD576I_50,
;;   SCHRO_VIDEO_FORMAT_HD720P_60,
;;   SCHRO_VIDEO_FORMAT_HD720P_50,
;;   SCHRO_VIDEO_FORMAT_HD1080I_60,
;;   SCHRO_VIDEO_FORMAT_HD1080I_50,
;;   SCHRO_VIDEO_FORMAT_HD1080P_60,
;;   SCHRO_VIDEO_FORMAT_HD1080P_50,
;;   SCHRO_VIDEO_FORMAT_DC2K_24,
;;   SCHRO_VIDEO_FORMAT_DC4K_24
;; } SchroVideoFormatEnum;

(define-enum-extended SchroVideoFormatEnum
  (in-module "Gst")
  (c-name "SchroVideoFormatEnum")
  (values
    '("custom" "SCHRO_VIDEO_FORMAT_CUSTOM" "0")
    '("qsif" "SCHRO_VIDEO_FORMAT_QSIF" "1")
    '("qcif" "SCHRO_VIDEO_FORMAT_QCIF" "2")
    '("sif" "SCHRO_VIDEO_FORMAT_SIF" "3")
    '("cif" "SCHRO_VIDEO_FORMAT_CIF" "4")
    '("4sif" "SCHRO_VIDEO_FORMAT_4SIF" "5")
    '("4cif" "SCHRO_VIDEO_FORMAT_4CIF" "6")
    '("sd480i-60" "SCHRO_VIDEO_FORMAT_SD480I_60" "7")
    '("sd576i-50" "SCHRO_VIDEO_FORMAT_SD576I_50" "8")
    '("hd720p-60" "SCHRO_VIDEO_FORMAT_HD720P_60" "9")
    '("hd720p-50" "SCHRO_VIDEO_FORMAT_HD720P_50" "10")
    '("hd1080i-60" "SCHRO_VIDEO_FORMAT_HD1080I_60" "11")
    '("hd1080i-50" "SCHRO_VIDEO_FORMAT_HD1080I_50" "12")
    '("hd1080p-60" "SCHRO_VIDEO_FORMAT_HD1080P_60" "13")
    '("hd1080p-50" "SCHRO_VIDEO_FORMAT_HD1080P_50" "14")
    '("dc2k-24" "SCHRO_VIDEO_FORMAT_DC2K_24" "15")
    '("dc4k-24" "SCHRO_VIDEO_FORMAT_DC4K_24" "16")
  )
)

;; Original typedef:
;; typedef enum _SchroChromaFormat {
;;   SCHRO_CHROMA_444 = 0,
;;   SCHRO_CHROMA_422,
;;   SCHRO_CHROMA_420
;; } SchroChromaFormat;

(define-enum-extended SchroChromaFormat
  (in-module "Gst")
  (c-name "SchroChromaFormat")
  (values
    '("444" "SCHRO_CHROMA_444" "0")
    '("422" "SCHRO_CHROMA_422" "1")
    '("420" "SCHRO_CHROMA_420" "2")
  )
)

;; Original typedef:
;; typedef enum _SchroSignalRange {
;;   SCHRO_SIGNAL_RANGE_CUSTOM = 0,
;;   SCHRO_SIGNAL_RANGE_8BIT_FULL = 1,
;;   SCHRO_SIGNAL_RANGE_8BIT_VIDEO = 2,
;;   SCHRO_SIGNAL_RANGE_10BIT_VIDEO = 3,
;;   SCHRO_SIGNAL_RANGE_12BIT_VIDEO = 4
;; } SchroSignalRange;

(define-enum-extended SchroSignalRange
  (in-module "Gst")
  (c-name "SchroSignalRange")
  (values
    '("custom" "SCHRO_SIGNAL_RANGE_CUSTOM" "0")
    '("8bit-full" "SCHRO_SIGNAL_RANGE_8BIT_FULL" "1")
    '("8bit-video" "SCHRO_SIGNAL_RANGE_8BIT_VIDEO" "2")
    '("10bit-video" "SCHRO_SIGNAL_RANGE_10BIT_VIDEO" "3")
    '("12bit-video" "SCHRO_SIGNAL_RANGE_12BIT_VIDEO" "4")
  )
)

;; Original typedef:
;; typedef enum _SchroColourSpec {
;;   SCHRO_COLOUR_SPEC_CUSTOM = 0,
;;   SCHRO_COLOUR_SPEC_SDTV_525 = 1,
;;   SCHRO_COLOUR_SPEC_SDTV_625 = 2,
;;   SCHRO_COLOUR_SPEC_HDTV = 3,
;;   SCHRO_COLOUR_SPEC_CINEMA = 4
;; } SchroColourSpec;

(define-enum-extended SchroColourSpec
  (in-module "Gst")
  (c-name "SchroColourSpec")
  (values
    '("custom" "SCHRO_COLOUR_SPEC_CUSTOM" "0")
    '("sdtv-525" "SCHRO_COLOUR_SPEC_SDTV_525" "1")
    '("sdtv-625" "SCHRO_COLOUR_SPEC_SDTV_625" "2")
    '("hdtv" "SCHRO_COLOUR_SPEC_HDTV" "3")
    '("cinema" "SCHRO_COLOUR_SPEC_CINEMA" "4")
  )
)

;; Original typedef:
;; typedef enum _SchroColourPrimaries {
;;   SCHRO_COLOUR_PRIMARY_HDTV = 0,
;;   SCHRO_COLOUR_PRIMARY_SDTV_525 = 1,
;;   SCHRO_COLOUR_PRIMARY_SDTV_625 = 2,
;;   SCHRO_COLOUR_PRIMARY_CINEMA = 3
;; } SchroColourPrimaries;

(define-enum-extended SchroColourPrimaries
  (in-module "Gst")
  (c-name "SchroColourPrimaries")
  (values
    '("hdtv" "SCHRO_COLOUR_PRIMARY_HDTV" "0")
    '("sdtv-525" "SCHRO_COLOUR_PRIMARY_SDTV_525" "1")
    '("sdtv-625" "SCHRO_COLOUR_PRIMARY_SDTV_625" "2")
    '("cinema" "SCHRO_COLOUR_PRIMARY_CINEMA" "3")
  )
)

;; Original typedef:
;; typedef enum _SchroColourMatrix {
;;   SCHRO_COLOUR_MATRIX_HDTV = 0,
;;   SCHRO_COLOUR_MATRIX_SDTV = 1,
;;   SCHRO_COLOUR_MATRIX_REVERSIBLE = 2
;; }SchroColourMatrix;

(define-enum-extended SchroColourMatrix
  (in-module "Gst")
  (c-name "SchroColourMatrix")
  (values
    '("hdtv" "SCHRO_COLOUR_MATRIX_HDTV" "0")
    '("sdtv" "SCHRO_COLOUR_MATRIX_SDTV" "1")
    '("reversible" "SCHRO_COLOUR_MATRIX_REVERSIBLE" "2")
  )
)

;; Original typedef:
;; typedef enum _SchroTransferFunction {
;;   SCHRO_TRANSFER_CHAR_TV_GAMMA = 0,
;;   SCHRO_TRANSFER_CHAR_EXTENDED_GAMUT = 1,
;;   SCHRO_TRANSFER_CHAR_LINEAR = 2,
;;   SCHRO_TRANSFER_CHAR_DCI_GAMMA = 3
;; } SchroTransferFunction;

(define-enum-extended SchroTransferFunction
  (in-module "Gst")
  (c-name "SchroTransferFunction")
  (values
    '("tv-gamma" "SCHRO_TRANSFER_CHAR_TV_GAMMA" "0")
    '("extended-gamut" "SCHRO_TRANSFER_CHAR_EXTENDED_GAMUT" "1")
    '("linear" "SCHRO_TRANSFER_CHAR_LINEAR" "2")
    '("dci-gamma" "SCHRO_TRANSFER_CHAR_DCI_GAMMA" "3")
  )
)

;; From gstoggdemux.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_OGG_PAD_MODE_INIT,        /* we are feeding our internal decoder to get info */
;;   GST_OGG_PAD_MODE_STREAMING,   /* we are streaming buffers to the outside */
;; } GstOggPadMode;

(define-enum-extended OggPadMode
  (in-module "Gst")
  (c-name "GstOggPadMode")
  (values
    '("init" "GST_OGG_PAD_MODE_INIT" "0")
    '("streaming" "GST_OGG_PAD_MODE_STREAMING" "1")
  )
)

;; From gstoggmux.h

;; Original typedef:
;; typedef enum
;; {
;;   GST_OGG_PAD_STATE_CONTROL = 0,
;;   GST_OGG_PAD_STATE_DATA = 1
;; }
;; GstOggPadState;

(define-enum-extended OggPadState
  (in-module "Gst")
  (c-name "GstOggPadState")
  (values
    '("control" "GST_OGG_PAD_STATE_CONTROL" "0")
    '("data" "GST_OGG_PAD_STATE_DATA" "1")
  )
)

;; From gstoggstream.h

;; Original typedef:
;; typedef enum {
;;   GST_OGG_SKELETON_FISBONE,
;;   GST_OGG_SKELETON_INDEX,
;; } GstOggSkeleton;

(define-enum-extended OggSkeleton
  (in-module "Gst")
  (c-name "GstOggSkeleton")
  (values
    '("fisbone" "GST_OGG_SKELETON_FISBONE" "0")
    '("index" "GST_OGG_SKELETON_INDEX" "1")
  )
)

;; From gsttextoverlay.h

;; Original typedef:
;; typedef enum {
;;     GST_TEXT_OVERLAY_VALIGN_BASELINE,
;;     GST_TEXT_OVERLAY_VALIGN_BOTTOM,
;;     GST_TEXT_OVERLAY_VALIGN_TOP,
;;     GST_TEXT_OVERLAY_VALIGN_POS
;; } GstTextOverlayVAlign;

(define-enum-extended TextOverlayVAlign
  (in-module "Gst")
  (c-name "GstTextOverlayVAlign")
  (values
    '("baseline" "GST_TEXT_OVERLAY_VALIGN_BASELINE" "0")
    '("bottom" "GST_TEXT_OVERLAY_VALIGN_BOTTOM" "1")
    '("top" "GST_TEXT_OVERLAY_VALIGN_TOP" "2")
    '("pos" "GST_TEXT_OVERLAY_VALIGN_POS" "3")
  )
)

;; Original typedef:
;; typedef enum {
;;     GST_TEXT_OVERLAY_HALIGN_LEFT,
;;     GST_TEXT_OVERLAY_HALIGN_CENTER,
;;     GST_TEXT_OVERLAY_HALIGN_RIGHT,
;;     GST_TEXT_OVERLAY_HALIGN_TOP,
;;     GST_TEXT_OVERLAY_HALIGN_POS
;; } GstTextOverlayHAlign;

(define-enum-extended TextOverlayHAlign
  (in-module "Gst")
  (c-name "GstTextOverlayHAlign")
  (values
    '("left" "GST_TEXT_OVERLAY_HALIGN_LEFT" "0")
    '("center" "GST_TEXT_OVERLAY_HALIGN_CENTER" "1")
    '("right" "GST_TEXT_OVERLAY_HALIGN_RIGHT" "2")
    '("top" "GST_TEXT_OVERLAY_HALIGN_TOP" "3")
    '("pos" "GST_TEXT_OVERLAY_HALIGN_POS" "4")
  )
)

;; Original typedef:
;; typedef enum {
;;     GST_TEXT_OVERLAY_WRAP_MODE_NONE = -1,
;;     GST_TEXT_OVERLAY_WRAP_MODE_WORD = PANGO_WRAP_WORD,
;;     GST_TEXT_OVERLAY_WRAP_MODE_CHAR = PANGO_WRAP_CHAR,
;;     GST_TEXT_OVERLAY_WRAP_MODE_WORD_CHAR = PANGO_WRAP_WORD_CHAR
;; } GstTextOverlayWrapMode;

(define-enum-extended TextOverlayWrapMode
  (in-module "Gst")
  (c-name "GstTextOverlayWrapMode")
  (values
    '("none" "GST_TEXT_OVERLAY_WRAP_MODE_NONE" "-1")
    '("word" "GST_TEXT_OVERLAY_WRAP_MODE_WORD" "0")
    '("char" "GST_TEXT_OVERLAY_WRAP_MODE_CHAR" "1")
    '("word-char" "GST_TEXT_OVERLAY_WRAP_MODE_WORD_CHAR" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;     GST_TEXT_OVERLAY_LINE_ALIGN_LEFT = PANGO_ALIGN_LEFT,
;;     GST_TEXT_OVERLAY_LINE_ALIGN_CENTER = PANGO_ALIGN_CENTER,
;;     GST_TEXT_OVERLAY_LINE_ALIGN_RIGHT = PANGO_ALIGN_RIGHT
;; } GstTextOverlayLineAlign;

(define-flags-extended TextOverlayLineAlign
  (in-module "Gst")
  (c-name "GstTextOverlayLineAlign")
  (values
    '("left" "GST_TEXT_OVERLAY_LINE_ALIGN_LEFT" "0")
    '("center" "GST_TEXT_OVERLAY_LINE_ALIGN_CENTER" "1")
    '("right" "GST_TEXT_OVERLAY_LINE_ALIGN_RIGHT" "2")
  )
)

;; From gsttextrender.h

;; Original typedef:
;; typedef enum {
;;     GST_TEXT_RENDER_VALIGN_BASELINE,
;;     GST_TEXT_RENDER_VALIGN_BOTTOM,
;;     GST_TEXT_RENDER_VALIGN_TOP
;; } GstTextRenderVAlign;

(define-enum-extended TextRenderVAlign
  (in-module "Gst")
  (c-name "GstTextRenderVAlign")
  (values
    '("baseline" "GST_TEXT_RENDER_VALIGN_BASELINE" "0")
    '("bottom" "GST_TEXT_RENDER_VALIGN_BOTTOM" "1")
    '("top" "GST_TEXT_RENDER_VALIGN_TOP" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;     GST_TEXT_RENDER_HALIGN_LEFT,
;;     GST_TEXT_RENDER_HALIGN_CENTER,
;;     GST_TEXT_RENDER_HALIGN_RIGHT
;; } GstTextRenderHAlign;

(define-enum-extended TextRenderHAlign
  (in-module "Gst")
  (c-name "GstTextRenderHAlign")
  (values
    '("left" "GST_TEXT_RENDER_HALIGN_LEFT" "0")
    '("center" "GST_TEXT_RENDER_HALIGN_CENTER" "1")
    '("right" "GST_TEXT_RENDER_HALIGN_RIGHT" "2")
  )
)

;; Original typedef:
;; typedef enum {
;;     GST_TEXT_RENDER_LINE_ALIGN_LEFT = PANGO_ALIGN_LEFT,
;;     GST_TEXT_RENDER_LINE_ALIGN_CENTER = PANGO_ALIGN_CENTER,
;;     GST_TEXT_RENDER_LINE_ALIGN_RIGHT = PANGO_ALIGN_RIGHT
;; } GstTextRenderLineAlign;

(define-flags-extended TextRenderLineAlign
  (in-module "Gst")
  (c-name "GstTextRenderLineAlign")
  (values
    '("left" "GST_TEXT_RENDER_LINE_ALIGN_LEFT" "0")
    '("center" "GST_TEXT_RENDER_LINE_ALIGN_CENTER" "1")
    '("right" "GST_TEXT_RENDER_LINE_ALIGN_RIGHT" "2")
  )
)

;; From gsttheoraenc.h

;; Original typedef:
;; typedef enum
;; {
;;   BORDER_NONE,
;;   BORDER_BLACK,
;;   BORDER_MIRROR
;; }
;; GstTheoraEncBorderMode;

(define-enum-extended TheoraEncBorderMode
  (in-module "Gst")
  (c-name "GstTheoraEncBorderMode")
  (values
    '("none" "GST_THEORA_ENC_BORDER_NONE" "0")
    '("black" "GST_THEORA_ENC_BORDER_BLACK" "1")
    '("mirror" "GST_THEORA_ENC_BORDER_MIRROR" "2")
  )
)

;; Original typedef:
;; typedef enum
;; {
;;   MULTIPASS_MODE_SINGLE_PASS,
;;   MULTIPASS_MODE_FIRST_PASS,
;;   MULTIPASS_MODE_SECOND_PASS
;; } GstTheoraEncMultipassMode;

(define-enum-extended TheoraEncMultipassMode
  (in-module "Gst")
  (c-name "GstTheoraEncMultipassMode")
  (values
    '("single-pass" "GST_THEORA_ENC_MULTIPASS_MODE_SINGLE_PASS" "0")
    '("first-pass" "GST_THEORA_ENC_MULTIPASS_MODE_FIRST_PASS" "1")
    '("second-pass" "GST_THEORA_ENC_MULTIPASS_MODE_SECOND_PASS" "2")
  )
)

;; Handwritten for CdParanoiaSrc plugin (values taken from output of
;; `gst-inspect cdparanoiasrc' -- "paranoia-mode" property information)
(define-enum-extended CdParanoiaMode
  (in-module "Gst")
  (c-name "GstCdParanoiaMode")
  (values
    '("disable" "GST_PARANOIA_MODE_DISABLE" "1<<0")
    '("fragment" "GST_PARANOIA_MODE_FRAGMENT" "1<<1")
    '("overlap" "GST_PARANOIA_MODE_OVERLAP" "1<<2")
    '("scratch" "GST_PARANOIA_MODE_SCRATCH" "1<<3")
    '("repair" "GST_PARANOIA_MODE_REPAIR" "1<<4")
    '("full" "GST_PARANOIA_MODE_FULL" "0xff")
  )
)

;; Handwritten for MultiFdSink plugin (taken from gstmultifdsink.c):
(define-enum-extended FDSetMode
  (in-module "Gst")
  (c-name "GstFDSetMode")
  (values
    '("select" "GST_FD_SET_MODE_SELECT" "0")
    '("poll" "GST_FD_SET_MODE_POLL" "1")
    '("epoll" "GST_FD_SET_MODE_EPOLL" "2")
  )
)
;; Handwritten for OutputSelector plugin (taken from gstoutputselector.c):
(define-enum-extended OutputSelectorPadNegotiationMode
  (in-module "Gst")
  (c-name "GstOutputSelectorPadNegotiationMode")
  (values
    '("none" "GST_OUTPUT_SELECTOR_PAD_NEGOTIATION_MODE_NONE" "0")
    '("all" "GST_OUTPUT_SELECTOR_PAD_NEGOTIATION_MODE_ALL" "1")
    '("active" "GST_OUTPUT_SELECTOR_PAD_NEGOTIATION_MODE_ACTIVE" "2")
  )
)
