#include <gstreamermm/object.h>
#include <gstreamermm/enums.h>
_DEFS(gstreamermm,gst)
_PINCLUDE(glibmm/private/object_p.h)
_PINCLUDE(gstreamermm/private/object_p.h)

namespace Gst
{

class Element;

class XML : public Object
{
  _CLASS_GOBJECT(XML, GstXML, GST_XML, Object, GstObject)

protected:
  _CTOR_DEFAULT

public:
  _WRAP_CREATE()

  _WRAP_METHOD(bool parse_doc(xmlDocPtr doc, const std::string& root), gst_xml_parse_doc)
  _WRAP_METHOD(bool parse_file(const std::string& filename, const std::string& root), gst_xml_parse_file)
  bool parse_memory(const std::string& buffer, const std::string& root);
  _WRAP_METHOD(Glib::RefPtr<Element> get_element(const std::string& name), gst_xml_get_element)
  _WRAP_METHOD(Glib::RefPtr<const Element> get_element(const std::string& name) const, gst_xml_get_element)

  _IGNORE(gst_xml_parse_memory)

  //TODO: Is this useful? _WRAP_SIGNAL(void object_loaded(Glib::RefPtr<Object> object, xmlNode* xml_node), "object-loaded")
};

xmlDocPtr write_xml(const Glib::RefPtr<Element>& element);
int write_xml_file(const Glib::RefPtr<Element>& element, const std::string& filename);
Glib::RefPtr<Element> make_element(const xmlNodePtr& xml_node, const Glib::RefPtr<Object>& parent);

} //namespace Gst
