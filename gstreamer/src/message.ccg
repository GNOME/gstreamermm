// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/gstenumtypes.h>
#include <gstreamermm/structure.h>
#include <gstreamermm/taglist.h>
_PINCLUDE(gstreamermm/private/miniobject_p.h)

namespace Gst
{

namespace Enums
{

Glib::ustring get_name(MessageType t)
{
  return gst_message_type_get_name(GstMessageType(t));
}

Glib::QueryQuark get_quark(MessageType t)
{
  return Glib::QueryQuark(gst_message_type_to_quark(GstMessageType(t)));
}

} //namespace Enums

Glib::RefPtr<Message> Message::copy() const
{
  return Gst::wrap(gst_message_copy(gobj()));
}

Glib::RefPtr<Message> Message::create_writable()
{
  return Gst::wrap(gst_message_make_writable(gobj()));
}

MessageEos::MessageEos(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageEos::create(const Glib::RefPtr<Object>& src)
{
  GstMessage* message = gst_message_new_eos(src->gobj());
  return Gst::Message::wrap(message, false);
}

MessageError::MessageError(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageError::create(const Glib::RefPtr<Object>& src, Glib::Error& error, const std::string& debug)
{
  GstMessage* message = gst_message_new_error(src->gobj(), error.gobj(),(gchar*)(debug.c_str()));
  return Gst::Message::wrap(message, false);
}

void MessageError::parse(Glib::Error& error, std::string& debug)
{
  GError* c_error = 0;
  gchar* c_debug = 0;
  gst_message_parse_error(gobj(), &c_error, &c_debug);

  debug = c_debug;
  if(c_debug)
    g_free(c_debug);

  error = Glib::Error(c_error);
}

Glib::Error MessageError::parse()
{
  GError* c_error = 0;
  gst_message_parse_error(gobj(), &c_error, NULL);

  return Glib::Error(c_error);
}

std::string MessageError::parse_debug()
{
  gchar* c_debug = 0;
  gst_message_parse_error(gobj(), NULL, &c_debug);

  std::string result = c_debug;
  if (c_debug)
    g_free(c_debug);

  return result;
}

MessageWarning::MessageWarning(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageWarning::create(const Glib::RefPtr<Object>& src, Glib::Error& error, const std::string& debug)
{
  GstMessage* message = gst_message_new_warning(src->gobj(), error.gobj(),(gchar*)(debug.c_str()));
  return Gst::Message::wrap(message, false);
}

void MessageWarning::parse(Glib::Error& error, std::string& debug)
{
  GError* c_error = 0;
  gchar* c_debug = 0;
  gst_message_parse_warning(gobj(), &c_error, &c_debug);

  debug = c_debug;
  if(c_debug)
    g_free(c_debug);

  error = Glib::Error(c_error);
}

Glib::Error MessageWarning::parse()
{
  GError* c_error = 0;
  gst_message_parse_warning(gobj(), &c_error, NULL);

  return Glib::Error(c_error);
}

std::string MessageWarning::parse_debug()
{
  gchar* c_debug = 0;
  gst_message_parse_warning(gobj(), NULL, &c_debug);

  std::string result = c_debug;
  if (c_debug)
    g_free(c_debug);

  return result;
}

MessageInfo::MessageInfo(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageInfo::create(const Glib::RefPtr<Object>& src, Glib::Error& error, const std::string& debug)
{
  GstMessage* message = gst_message_new_info(src->gobj(), error.gobj(),(gchar*)(debug.c_str()));
  return Gst::Message::wrap(message, false);
}


void MessageInfo::parse(Glib::Error& error, std::string& debug)
{
  GError* c_error = 0;
  gchar* c_debug = 0;
  gst_message_parse_info(gobj(), &c_error, &c_debug);

  debug = c_debug;
  if(c_debug)
    g_free(c_debug);

  error = Glib::Error(c_error);
}

Glib::Error MessageInfo::parse()
{
  GError* c_error = 0;
  gst_message_parse_info(gobj(), &c_error, NULL);

  return Glib::Error(c_error);
}

std::string MessageInfo::parse_debug()
{
  gchar* c_debug = 0;
  gst_message_parse_info(gobj(), NULL, &c_debug);

  std::string result = c_debug;
  if (c_debug)
    g_free(c_debug);

  return result;
}

MessageTag::MessageTag(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageTag::create(const Glib::RefPtr<Object>& src, const TagList& taglist)
{
  //We create a copy because gst_message_new_tag() takes ownership:
  GstTagList* c_taglist = gst_tag_list_copy(taglist.gobj());
  GstMessage* message = gst_message_new_tag(src->gobj(), c_taglist);
  return Gst::Message::wrap(message, false);
}

TagList MessageTag::parse()
{
  GstTagList* gst_tag_list = gst_tag_list_new();
  gst_message_parse_tag(gobj(), &gst_tag_list);
  return TagList(gst_tag_list);
}

MessageBuffering::MessageBuffering(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageBuffering::create(const Glib::RefPtr<Object>& src, int percent)
{
  GstMessage* message = gst_message_new_buffering(src->gobj(), percent);
  return Gst::Message::wrap(message, false);
}

int MessageBuffering::parse()
{
  int percent;
  gst_message_parse_buffering(gobj(), &percent);
  return percent;
}

void MessageBuffering::set_stats(BufferingMode mode, int avg_in, int avg_out,
gint64 buffering_left)
{
  gst_message_set_buffering_stats(gobj(), (GstBufferingMode) mode, avg_in,
    avg_out, buffering_left);
}

void MessageBuffering::parse_stats(BufferingMode& mode, int& avg_in,
int& avg_out, gint64& buffering_left)
{
  gst_message_parse_buffering_stats(gobj(), (GstBufferingMode*)(&mode),
    &avg_in, &avg_out, &buffering_left);
}

BufferingMode MessageBuffering::parse_stats_buffering_mode()
{
  GstBufferingMode mode;

  gst_message_parse_buffering_stats(gobj(), (GstBufferingMode*)(&mode),
    NULL, NULL, NULL);
  return (BufferingMode)(mode);
}

int MessageBuffering::parse_stats_avg_in()
{
  int avg_in;

  gst_message_parse_buffering_stats(gobj(), NULL, &avg_in, NULL, NULL);
  return avg_in;
}

int MessageBuffering::parse_stats_avg_out()
{
  int avg_out;

  gst_message_parse_buffering_stats(gobj(), NULL, NULL, &avg_out, NULL);
  return avg_out;
}

gint64 MessageBuffering::parse_stats_buffering_left()
{
  gint64 buffering_left;

  gst_message_parse_buffering_stats(gobj(), NULL, NULL, NULL, &buffering_left);
  return buffering_left;
}

MessageStateChanged::MessageStateChanged(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageStateChanged::create(const Glib::RefPtr<Object>& src, State oldstate, State newstate, State pending)
{
  GstMessage* message = gst_message_new_state_changed(src->gobj(), GstState(oldstate), GstState(newstate), GstState(pending));
  return Gst::Message::wrap(message, false);
}

void MessageStateChanged::parse(State& oldstate, State& newstate,
State& pending)
{
  gst_message_parse_state_changed(gobj(), (GstState*)(&oldstate),
    (GstState*)(&newstate), (GstState*)(&pending));
}

State MessageStateChanged::parse()
{
  GstState* new_state;
  gst_message_parse_state_changed(gobj(), NULL, new_state, NULL);
  return (State)(*new_state);
}

State MessageStateChanged::parse_old()
{
  GstState* old_state;
  gst_message_parse_state_changed(gobj(), old_state, NULL, NULL);
  return (State)(*old_state);
}

State MessageStateChanged::parse_pending()
{
  GstState* pending_state;
  gst_message_parse_state_changed(gobj(), NULL, NULL, pending_state);
  return (State)(*pending_state);
}

MessageStateDirty::MessageStateDirty(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageStateDirty::create(const Glib::RefPtr<Object>& src)
{
  GstMessage* message = gst_message_new_state_dirty(src->gobj());
  return Gst::Message::wrap(message, false);
}

MessageClockProvide::MessageClockProvide(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageClockProvide::create(const Glib::RefPtr<Object>& src, const Glib::RefPtr<Clock>& clock, bool ready)
{
  GstMessage* message = gst_message_new_clock_provide(src->gobj(), clock->gobj(), ready);
  return Gst::Message::wrap(message, false);
}

void MessageClockProvide::parse(Glib::RefPtr<Clock>& clock, bool& ready)
{
  GstClock* cclock = 0;
  gboolean ready_ = false;
  gst_message_parse_clock_provide(gobj(), &cclock, &ready_);
  clock = Glib::wrap(cclock);
  ready = ready_;
}

Glib::RefPtr<Clock> MessageClockProvide::parse()
{
  GstClock* cclock = 0;
  gst_message_parse_clock_provide(gobj(), &cclock, NULL);
  return Glib::wrap(cclock);
}

bool MessageClockProvide::parse_ready()
{
  gboolean ready = false;
  gst_message_parse_clock_provide(gobj(), NULL, &ready);
  return ready;
}

MessageClockLost::MessageClockLost(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageClockLost::create(const Glib::RefPtr<Object>& src, const Glib::RefPtr<Clock>& clock)
{
  GstMessage* message = gst_message_new_clock_lost(src->gobj(), clock->gobj());
  return Gst::Message::wrap(message, false);
}

Glib::RefPtr<Clock> MessageClockLost::parse()
{
  GstClock* cclock = 0;
  gst_message_parse_clock_lost(gobj(), &cclock);
  return Glib::wrap(cclock, false);
}

MessageNewClock::MessageNewClock(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageNewClock::create(const Glib::RefPtr<Object>& src, const Glib::RefPtr<Clock>& clock)
{
  GstMessage* message = gst_message_new_new_clock(src->gobj(), clock->gobj());
  return Gst::Message::wrap(message, false);
}

Glib::RefPtr<Clock> MessageNewClock::parse()
{
  GstClock* cclock = 0;
  gst_message_parse_new_clock(gobj(), &cclock);
  return Glib::wrap(cclock, false);
}

MessageApplication::MessageApplication(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageApplication::create(const Glib::RefPtr<Object>& src, Structure& structure)
{
  GstStructure* copy_struct = gst_structure_copy(structure.gobj());
  GstMessage* message = gst_message_new_application(src->gobj(), copy_struct);
  return Gst::Message::wrap(message, false);
}

Glib::RefPtr<Message> MessageApplication::create(const Glib::RefPtr<Object>& src)
{
  GstMessage* message = gst_message_new_application(src->gobj(), NULL);
  return Gst::Message::wrap(message, false);
}

MessageElement::MessageElement(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageElement::create(const Glib::RefPtr<Object>& src, Structure& structure)
{
  GstStructure* copy_struct = gst_structure_copy(structure.gobj());
  GstMessage* message = gst_message_new_element(src->gobj(), copy_struct);
  return Gst::Message::wrap(message, false);
}

Glib::RefPtr<Message> MessageElement::create(const Glib::RefPtr<Object>& src)
{
  GstMessage* message = gst_message_new_element(src->gobj(), NULL);
  return Gst::Message::wrap(message, false);
}

MessageCustom::MessageCustom(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageCustom::create(MessageType type, const Glib::RefPtr<Object>& src, Structure& structure)
{
  GstStructure* copy_struct = gst_structure_copy(structure.gobj());
  GstMessage* message = gst_message_new_custom(GstMessageType(type),
    src->gobj(), copy_struct);
  return Gst::Message::wrap(message, false);
}

Glib::RefPtr<Message> MessageCustom::create(MessageType type, const Glib::RefPtr<Object>& src)
{
  GstMessage* message = gst_message_new_custom(GstMessageType(type),
    src->gobj(), NULL);
  return Gst::Message::wrap(message, false);
}

MessageSegmentStart::MessageSegmentStart(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageSegmentStart::create(const Glib::RefPtr<Object>& src, Format format, gint64 position)
{
  GstMessage* message = gst_message_new_segment_start(src->gobj(), GstFormat(format), position);
  return Gst::Message::wrap(message, false);
}

void MessageSegmentStart::parse(Format& format, gint64& position)
{
  gst_message_parse_segment_start(gobj(), (GstFormat*)(&format), &position);
}

gint64 MessageSegmentStart::parse()
{
  gint64 position;
  gst_message_parse_segment_start(gobj(), NULL, &position);
  return position;
}

Format MessageSegmentStart::parse_format()
{
  Format format;
  gst_message_parse_segment_start(gobj(), (GstFormat*)(&format), NULL);
  return format;
}

MessageSegmentDone::MessageSegmentDone(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageSegmentDone::create(const Glib::RefPtr<Object>& src, Format format, gint64 position)
{
  GstMessage* message = gst_message_new_segment_done(src->gobj(), GstFormat(format), position);
  return Gst::Message::wrap(message, false);
}

void MessageSegmentDone::parse(Format& format, gint64& position)
{
  gst_message_parse_segment_done(gobj(), (GstFormat*)(&format), &position);
}

gint64 MessageSegmentDone::parse()
{
  gint64 position;
  gst_message_parse_segment_done(gobj(), NULL, &position);
  return position;
}

Format MessageSegmentDone::parse_format()
{
  Format format;
  gst_message_parse_segment_done(gobj(), (GstFormat*)(&format), NULL);
  return format;
}

MessageDuration::MessageDuration(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageDuration::create(const Glib::RefPtr<Object>& src, Format format, gint64 position)
{
  GstMessage* message = gst_message_new_duration(src->gobj(), GstFormat(format), position);
  return Gst::Message::wrap(message, false);
}

void MessageDuration::parse(Format& format, gint64& position)
{
  gst_message_parse_duration(gobj(), (GstFormat*)(&format), &position);
}

gint64 MessageDuration::parse()
{
  gint64 position;
  gst_message_parse_duration(gobj(), NULL, &position);
  return position;
}

Format MessageDuration::parse_format()
{
  Format format;
  gst_message_parse_duration(gobj(), (GstFormat*)(&format), NULL);
  return format;
}

MessageLatency::MessageLatency(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageLatency::create(const Glib::RefPtr<Object>& src)
{
  GstMessage* message = gst_message_new_latency(src->gobj());
  return Gst::Message::wrap(message, false);
}

MessageAsyncStart::MessageAsyncStart(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageAsyncStart::create(const Glib::RefPtr<Object>& src, bool new_base_time)
{
  GstMessage* message = gst_message_new_async_start(src->gobj(), new_base_time);
  return Gst::Message::wrap(message, false);
}

bool MessageAsyncStart::parse()
{
  gboolean new_base_time;
  gst_message_parse_async_start(gobj(), &new_base_time);
  return new_base_time;
}

MessageAsyncDone::MessageAsyncDone(GstMessage* castitem)
: Message(castitem)
{
}

Glib::RefPtr<Message> MessageAsyncDone::create(const Glib::RefPtr<Object>& src)
{
  GstMessage* message = gst_message_new_async_done(src->gobj());
  return Gst::Message::wrap(message, false);
}

Glib::RefPtr<Message> Message::wrap(GstMessage* message, bool take_copy)
{
  Glib::RefPtr<Message> result;

  if(!message)
    return result;

  switch (GST_MESSAGE_TYPE(message)) {
    case GST_MESSAGE_EOS:
      result = Glib::RefPtr<Message>( new Gst::MessageEos(message) );
      break;
    case GST_MESSAGE_ERROR:
      result = Glib::RefPtr<Message>( new Gst::MessageError(message) );
      break;
    case GST_MESSAGE_WARNING:
      result = Glib::RefPtr<Message>( new Gst::MessageWarning(message) );
      break;
    case GST_MESSAGE_INFO:
      result = Glib::RefPtr<Message>( new Gst::MessageInfo(message) );
      break;
    case GST_MESSAGE_TAG:
      result = Glib::RefPtr<Message>( new Gst::MessageTag(message) );
      break;
    case GST_MESSAGE_BUFFERING:
      result = Glib::RefPtr<MessageBuffering>( new Gst::MessageBuffering(message) );
      break;
    case GST_MESSAGE_STATE_CHANGED:
      result = Glib::RefPtr<Message>( new Gst::MessageStateChanged(message) );
      break;
    case GST_MESSAGE_STATE_DIRTY:
      result = Glib::RefPtr<Message>( new Gst::MessageStateDirty(message) );
      break;
    case GST_MESSAGE_CLOCK_PROVIDE:
      result = Glib::RefPtr<Message>( new Gst::MessageClockProvide(message) );
      break;
    case GST_MESSAGE_CLOCK_LOST:
      result = Glib::RefPtr<Message>( new Gst::MessageClockLost(message) );
      break;
    case GST_MESSAGE_NEW_CLOCK:
      result = Glib::RefPtr<Message>( new Gst::MessageNewClock(message) );
      break;
    case GST_MESSAGE_APPLICATION:
      result = Glib::RefPtr<Message>( new Gst::MessageApplication(message) );
      break;
    case GST_MESSAGE_ELEMENT:
      result = Glib::RefPtr<Message>( new Gst::MessageElement(message) );
      break;
    case GST_MESSAGE_SEGMENT_START:
      result = Glib::RefPtr<Message>( new Gst::MessageSegmentStart(message) );
      break;
    case GST_MESSAGE_SEGMENT_DONE:
      result = Glib::RefPtr<Message>( new Gst::MessageSegmentDone(message) );
      break;
    case GST_MESSAGE_DURATION:
      result = Glib::RefPtr<MessageDuration>( new Gst::MessageDuration(message) );
      break;
    case GST_MESSAGE_LATENCY:
      result = Glib::RefPtr<Message>( new Gst::MessageLatency(message) );
      break;
    case GST_MESSAGE_ASYNC_START:
      result = Glib::RefPtr<Message>( new Gst::MessageAsyncStart(message) );
      break;
    case GST_MESSAGE_ASYNC_DONE:
      result = Glib::RefPtr<Message>( new Gst::MessageAsyncDone(message) );
      break;
    case GST_MESSAGE_UNKNOWN:
    case GST_MESSAGE_ANY:
      result = Gst::wrap(message, false);
      break;
      /* The rest of the message types are custom ones */
    default:
      result = Glib::RefPtr<Message>( new Gst::MessageCustom(message) );
  }

  if(result && take_copy)
    result->reference();

  return result;
}

} //namespace Gst
