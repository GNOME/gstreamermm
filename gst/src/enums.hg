_DEFS(gstmm,gst)

namespace Gst
{

_WRAP_ENUM(BusSyncReply, GstBusSyncReply)
_WRAP_ENUM(ClockEntryType, GstClockEntryType)
_WRAP_ENUM(ClockReturn, GstClockReturn)
_WRAP_ENUM(State, GstState)
_WRAP_ENUM(StateChangeReturn, GstStateChangeReturn)
_WRAP_ENUM(Format, GstFormat)
_WRAP_ENUM(IteratorResult, GstIteratorResult)
_WRAP_ENUM(IteratorItem, GstIteratorItem)
_WRAP_ENUM(PadDirection, GstPadDirection)
_WRAP_ENUM(PadLinkReturn, GstPadLinkReturn)
_WRAP_ENUM(PadPresence, GstPadPresence)

enum MessageType
{
  MESSAGE_UNKNOWN   = 0,
  MESSAGE_EOS   = (1 << 0),
  MESSAGE_ERROR = (1 << 1),
  MESSAGE_WARNING   = (1 << 2),
  MESSAGE_INFO  = (1 << 3),
  MESSAGE_TAG   = (1 << 4),
  MESSAGE_BUFFERING = (1 << 5),
  MESSAGE_STATE_CHANGED = (1 << 6),
  MESSAGE_STATE_DIRTY   = (1 << 7),
  MESSAGE_STEP_DONE = (1 << 8),
  MESSAGE_CLOCK_PROVIDE = (1 << 9),
  MESSAGE_CLOCK_LOST= (1 << 10),
  MESSAGE_NEW_CLOCK = (1 << 11),
  MESSAGE_STRUCTURE_CHANGE  = (1 << 12),
  MESSAGE_STREAM_STATUS = (1 << 13),
  MESSAGE_APPLICATION   = (1 << 14),
  MESSAGE_ELEMENT   = (1 << 15),
  MESSAGE_SEGMENT_START = (1 << 16),
  MESSAGE_SEGMENT_DONE  = (1 << 17),
  MESSAGE_DURATION  = (1 << 18),
  MESSAGE_LATENCY   = (1 << 19),
  MESSAGE_ASYNC_START   = (1 << 20),
  MESSAGE_ASYNC_DONE= (1 << 21),
  MESSAGE_ANY   = ~0
};

enum MessageTypeApplication
{
  DUMMY_MESSAGE_APPLICATION   = (1 << 14)
};

enum MessageTypeAsyncDone
{
  DUMMY_MESSAGE_ASYNC_DONE= (1 << 21)
};

enum MessageTypeAsyncStart
{
  DUMMY_MESSAGE_ASYNC_START   = (1 << 20)
};

enum MessageTypeBuffering
{
  DUMMY_MESSAGE_BUFFERING = (1 << 5)
};

enum MessageTypeClockLost
{
  DUMMY_MESSAGE_CLOCK_LOST= (1 << 10)
};

enum MessageTypeClockProvide
{
  DUMMY_MESSAGE_CLOCK_PROVIDE = (1 << 9)
};

enum MessageTypeDuration
{
  DUMMY_MESSAGE_DURATION  = (1 << 18)
};

enum MessageTypeElement
{
  DUMMY_MESSAGE_ELEMENT   = (1 << 15)
};

enum MessageTypeEos
{
  DUMMY_MESSAGE_EOS   = (1 << 0)
};

enum MessageTypeError
{
  DUMMY_MESSAGE_ERROR = (1 << 1)
};

enum MessageTypeInfo
{
  DUMMY_MESSAGE_INFO  = (1 << 3)
};

enum MessageTypeLatency
{
  DUMMY_MESSAGE_LATENCY   = (1 << 19)
};

enum MessageTypeNewClock
{
  DUMMY_MESSAGE_NEW_CLOCK = (1 << 11)
};

enum MessageTypeTag
{
  DUMMY_MESSAGE_TAG   = (1 << 4)
};

enum MessageTypeStateChanged
{
  DUMMY_MESSAGE_STATE_CHANGED = (1 << 6)
};

enum MessageTypeStateDirty
{
  DUMMY_MESSAGE_STATE_DIRTY   = (1 << 7)
};

enum MessageTypeSegmentDone
{
  DUMMY_MESSAGE_SEGMENT_DONE  = (1 << 17)
};

enum MessageTypeSegmentStart
{
  DUMMY_MESSAGE_SEGMENT_START = (1 << 16)
};

enum MessageTypeWarning
{
   DUMMY_MESSAGE_WARNING   = (1 << 2)
};

_WRAP_ENUM(SeekType, GstSeekType)

enum SeekFlags
{
   SEEK_FLAG_NONE     = 0,
   SEEK_FLAG_FLUSH    = (1 << 0),
   SEEK_FLAG_ACCURATE = (1 << 1),
   SEEK_FLAG_KEY_UNIT = (1 << 2),
   SEEK_FLAG_SEGMENT  = (1 << 3)
};

} //namespace Gst
