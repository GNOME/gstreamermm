<root>
<function name="gst_rtsp_find_header_field">
<description>
Convert @header to a #GstRTSPHeaderField.


</description>
<parameters>
<parameter name="header">
<parameter_description> a header string
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPHeaderField for @header or #GST_RTSP_HDR_INVALID if the
header field is unknown.
</return>
</function>

<function name="gst_ring_buffer_set_sample">
<description>
Make sure that the next sample written to the device is
accounted for as being the @sample sample written to the
device. This value will be used in reporting the current
sample position of the ringbuffer.

This function will also clear the buffer with silence.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to use
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample number to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_default_registry_mixer_filter">
<description>
Utility function to find audio mixer elements.

Will traverse the default plugin registry in order of plugin rank and
find usable audio mixer elements. The caller may optionally fine-tune
the selection by specifying a filter function.


</description>
<parameters>
<parameter name="filter_func">
<parameter_description> filter function, or #NULL
</parameter_description>
</parameter>
<parameter name="first">
<parameter_description> set to #TRUE if you only want the first suitable mixer element
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to the filter function
</parameter_description>
</parameter>
</parameters>
<return> a #GList of audio mixer #GstElement&amp;lt;!-- --&amp;gt;s. You must free each
element in the list by setting it to NULL state and calling
gst_object_unref(). After that the list itself should be freed
using g_list_free().

Since: 0.10.2
</return>
</function>

<function name="gst_tuner_list_channels">
<description>
Retrieve a #GList of #GstTunerChannels available
(e.g. &apos;composite&apos;, &apos;s-video&apos;, ...) from the given tuner object.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) to get the channels from.
</parameter_description>
</parameter>
</parameters>
<return> A list of channels available on this tuner. The list is
owned by the GstTuner and must not be freed.
</return>
</function>

<function name="gst_sdp_message_add_attribute">
<description>
Add the attribute with @key and @value to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value
</parameter_description>
</parameter>
</parameters>
<return> @GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_media_set_information">
<description>
Set the media information of @media to @information.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="information">
<parameter_description> the media information
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_mixer_option_changed">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the given options
object has changed state. 

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the options 
</parameter_description>
</parameter>
<parameter name="opts">
<parameter_description> the GstMixerOptions that has changed value.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value of the GstMixerOptions.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_new_allocate_len">
<description>
Create a new #GstBuffer that can hold an RTP packet that is exactly
@packet_len long. The length of the payload depends on @pad_len and
@csrc_count and can be calculated with gst_rtp_buffer_calc_payload_len().
All RTP header fields will be set to 0/FALSE.


</description>
<parameters>
<parameter name="packet_len">
<parameter_description> the total length of the packet
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer that can hold an RTP packet of @packet_len.
</return>
</function>

<function name="gst_missing_uri_source_installer_detail_new">
<description>
Returns: a newly-allocated detail string, or NULL on error. Free string

</description>
<parameters>
<parameter name="protocol">
<parameter_description> the URI protocol the missing source needs to implement,
e.g. &quot;http&quot; or &quot;mms&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

Since: 0.10.15
</return>
</function>

<function name="gst_rtp_buffer_set_seq">
<description>
Set the sequence number of the RTP packet in @buffer to @seq.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="seq">
<parameter_description> the new sequence number
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_message_get_header">
<description>
Get the @indx header value with key @field from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> pointer to hold the result
</parameter_description>
</parameter>
<parameter name="indx">
<parameter_description> the index of the header
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK when @field was found, #GST_RTSP_ENOTIMPL if the key
was not found.
</return>
</function>

<function name="gst_sdp_media_init">
<description>
Initialize @media so that its contents are as if it was freshly allocated
with gst_sdp_media_new(). This function is mostly used to initialize a media
allocated on the stack. gst_sdp_media_uninit() undoes this operation.

When this function is invoked on newly allocated data (with malloc or on the
stack), its contents should be set to 0 before calling this function.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_ring_buffer_debug_spec_buff">
<description>
Print debug info about the buffer sized in @spec to the debug log.

</description>
<parameters>
<parameter name="spec">
<parameter_description> the spec to debug
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s16_fft">
<description>
This performs the FFT on @timedata and puts the result in @freqdata.

@timedata must have as many samples as specified with the @len parameter while
allocating the #GstFFTS16 instance with gst_fft_s16_new().

@freqdata must be large enough to hold @len/2 + 1 #GstFFTS16Complex frequency
domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS16 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Buffer of the samples in the time domain
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Target buffer for the samples in the frequency domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_netaddress_get_net_type">
<description>
Get the type of address stored in @naddr.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
</parameters>
<return> the network type stored in @naddr.
</return>
</function>

<function name="gst_video_orientation_get_hcenter">
<description>
Get the horizontal centering offset from the given object.

Since: 0.10.11

</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports centering
</return>
</function>

<function name="gst_fft_f64_inverse_fft">
<description>
This performs the inverse FFT on @freqdata and puts the result in @timedata.

@freqdata must have @len/2 + 1 samples, where @len is the parameter specified
while allocating the #GstFFTF64 instance with gst_fft_f64_new().

@timedata must be large enough to hold @len time domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF64 instance for this call
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Buffer of the samples in the frequency domain
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Target buffer for the samples in the time domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_add_rb">
<description>
Add a new report block to @packet with the given values.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR or RR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> data source being reported
</parameter_description>
</parameter>
<parameter name="fractionlost">
<parameter_description> fraction lost since last SR/RR
</parameter_description>
</parameter>
<parameter name="packetslost">
<parameter_description> the cumululative number of packets lost
</parameter_description>
</parameter>
<parameter name="exthighestseq">
<parameter_description> the extended last sequence number received
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> the interarrival jitter
</parameter_description>
</parameter>
<parameter name="lsr">
<parameter_description> the last SR packet from this source
</parameter_description>
</parameter>
<parameter name="dlsr">
<parameter_description> the delay since last SR packet
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet was created. This function can return %FALSE if
the max MTU is exceeded or the number of report blocks is greater than
#GST_RTCP_MAX_RB_COUNT.
</return>
</function>

<function name="gst_rtcp_packet_sdes_next_entry">
<description>
Move to the next SDES entry in the current item.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a next entry.
</return>
</function>

<function name="gst_rtsp_transport_as_text">
<description>
Convert @transport into a string that can be used to signal the transport in
an RTSP SETUP response.


</description>
<parameters>
<parameter name="transport">
<parameter_description> a #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> a string describing the RTSP transport or #NULL when the transport
is invalid.
</return>
</function>

<function name="gst_rtsp_connection_get_ip">
<description>
Retrieve the IP address of the other end of @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> The IP address as a string.

Since: 0.10.20
</return>
</function>

<function name="gst_tuner_get_channel">
<description>
Retrieve the current channel from the tuner.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) to get the current channel from.
</parameter_description>
</parameter>
</parameters>
<return> the current channel of the tuner object.
</return>
</function>

<function name="gst_missing_decoder_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that a decoder element for a particular set of (fixed) caps is missing.
This function is mainly for use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="decode_caps">
<parameter_description> the (fixed) caps for which a decoder element is needed
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_mixer_set_mute">
<description>
Mutes or unmutes the given channel. To find out whether a
track is currently muted, use GST_MIXER_TRACK_HAS_FLAG ().

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the #GstMixerTrack to operate on.
</parameter_description>
</parameter>
<parameter name="mute">
<parameter_description> a boolean value indicating whether to turn on or off
muting.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_acquire">
<description>
Allocate the resources for the ringbuffer. This function fills
in the data pointer of the ring buffer with a valid #GstBuffer
to which samples can be written.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to acquire
</parameter_description>
</parameter>
<parameter name="spec">
<parameter_description> the specs of the buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be acquired, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_mixer_options_get_values">
<description>
Get the values for the mixer option.


</description>
<parameters>
<parameter name="mixer_options">
<parameter_description> The #GstMixerOptions item that owns the values.
</parameter_description>
</parameter>
</parameters>
<return> A list of strings with all the possible values for the mixer
option. You must not free or modify the list or its contents, it belongs
to the @mixer_options object.
</return>
</function>

<function name="gst_basertppayload_is_filled">
<description>
Check if the packet with @size and @duration would exceed the configure
maximum size.


</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the packet
</parameter_description>
</parameter>
<parameter name="duration">
<parameter_description> the duration of the packet
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet of @size and @duration would exceed the
configured MTU or max_ptime.
</return>
</function>

<function name="gst_mixer_set_record">
<description>
Enables or disables recording on the given track. Note that
this is only possible on input tracks, not on output tracks
(see GST_MIXER_TRACK_HAS_FLAG () and the GST_MIXER_TRACK_INPUT
flag).

</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer (a #GstElement) that owns the track.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the #GstMixerTrack to operate on.
</parameter_description>
</parameter>
<parameter name="record">
<parameter_description> a boolean value that indicates whether to turn on
or off recording.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_to_vorbis_comments">
<description>
Creates a new tag list that contains the information parsed out of a
vorbiscomment packet.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a GStreamer tag identifier, such as #GST_TAG_ARTIST
</parameter_description>
</parameter>
</parameters>
<return> A #GList of newly-allowcated key=value strings. Free with
g_list_foreach (list, (GFunc) g_free, NULL) plus g_list_free (list)
</return>
</function>

<function name="gst_property_probe_needs_probe">
<description>
Checks whether a property needs a probe. This might be because
the property wasn&apos;t initialized before, or because host setup
changed. This might be, for example, because a new device was
added, and thus device probing needs to be refreshed to display
the new device.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object to which the given property belongs.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> a #GParamSpec that identifies the property to check.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the property needs a new probe, FALSE if not.
</return>
</function>

<function name="gst_rtsp_connection_set_auth">
<description>
Configure @conn for authentication mode @method with @user and @pass as the
user and password respectively.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> authentication method
</parameter_description>
</parameter>
<parameter name="user">
<parameter_description> the user
</parameter_description>
</parameter>
<parameter name="pass">
<parameter_description> the password
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtcp_buffer_new_take_data">
<description>
Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.


</description>
<parameters>
<parameter name="data">
<parameter_description> data for the new buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of data
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer with @data and of size @len.
</return>
</function>

<function name="gst_x_overlay_prepare_xwindow_id">
<description>
This will post a &quot;prepare-xwindow-id&quot; element message on the bus
to give applications an opportunity to call 
gst_x_overlay_set_xwindow_id() before a plugin creates its own
window.

This function should only be used by video overlay plugin developers.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay which does not yet have an XWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_media_add_attribute">
<description>
Add the attribute with @key and @value to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a value
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_tuner_set_frequency">
<description>
Sets a tuning frequency on the given tuner/channel. Note that this
requires the given channel to be a &quot;tuning&quot; channel, which can be
checked using GST_TUNER_CHANNEL_HAS_FLAG (), with the proper flag
being GST_TUNER_CHANNEL_FREQUENCY.

The frequency is in Hz, with minimum steps indicated by the 
frequency_multiplicator provided in the #GstTunerChannel. The
valid range is provided in the min_frequency and max_frequency properties
of the #GstTunerChannel.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> The #Gsttuner (a #GstElement) that owns the given channel.
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The #GstTunerChannel to set the frequency on.
</parameter_description>
</parameter>
<parameter name="frequency">
<parameter_description> The frequency to tune in to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_calc_packet_len">
<description>
Calculate the total length of an RTP packet with a payload size of @payload_len,
a padding of @pad_len and a @csrc_count CSRC entries.


</description>
<parameters>
<parameter name="payload_len">
<parameter_description> the length of the payload
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> The total length of an RTP header with given parameters.
</return>
</function>

<function name="gst_rtsp_message_get_type">
<description>
Get the message type of @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> the message type.
</return>
</function>

<function name="gst_rtcp_buffer_validate_data">
<description>
Check if the @data and @size point to the data of a valid RTCP (compound)
packet. 
Use this function to validate a packet before using the other functions in
this module.


</description>
<parameters>
<parameter name="data">
<parameter_description> the data to validate
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @data to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the data points to a valid RTCP packet.
</return>
</function>

<function name="gst_ring_buffer_clear_all">
<description>
Fill the ringbuffer with silence.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_format_is_rgb">
<description>
Determine whether the video format is an RGB format.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @format represents RGB video
</return>
</function>

<function name="gst_rtsp_message_init">
<description>
Initialize @msg. This function is mostly used when @msg is allocated on the
stack. The reverse operation of this is gst_rtsp_message_unset().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_mixer_options_list_changed">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the list of possible
options of a given options object has changed.

The new options are not contained in the message on purpose. Applications
should call gst_mixer_option_get_values() on @opts to make @opts update
its internal state and obtain the new list of values.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus
for this to work.

Since: 0.10.18

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the options 
</parameter_description>
</parameter>
<parameter name="opts">
<parameter_description> the GstMixerOptions whose list of values has changed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_payload_type">
<description>
Set the payload type of the RTP packet in @buffer to @payload_type.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="payload_type">
<parameter_description> the new type
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_clock_new">
<description>
Create a new #GstAudioClock instance. Whenever the clock time should be
calculated it will call @func with @user_data. When @func returns
#GST_CLOCK_TIME_NONE, the clock will return the last reported time.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the clock
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a function
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
</parameters>
<return> a new #GstAudioClock casted to a #GstClock.
</return>
</function>

<function name="gst_rtcp_packet_sr_get_sender_info">
<description>
Parse the SR sender info and store the values.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> result SSRC
</parameter_description>
</parameter>
<parameter name="ntptime">
<parameter_description> result NTP time
</parameter_description>
</parameter>
<parameter name="rtptime">
<parameter_description> result RTP time
</parameter_description>
</parameter>
<parameter name="packet_count">
<parameter_description> result packet count
</parameter_description>
</parameter>
<parameter name="octet_count">
<parameter_description> result octect count
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_buffer_get_first_packet">
<description>
Initialize a new #GstRTCPPacket pointer that points to the first packet in
@buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a valid RTCP buffer
</parameter_description>
</parameter>
<parameter name="packet">
<parameter_description> a #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the packet existed in @buffer.
</return>
</function>

<function name="gst_sdp_message_get_key">
<description>
Get the encryption information from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPKey.
</return>
</function>

<function name="gst_sdp_media_free">
<description>
Free all resources allocated by @media. @media should not be used anymore after
this function. This function should be used when @media was dynamically
allocated with gst_sdp_media_new().


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_set_proto">
<description>
Set the media transport protocol of @media to @proto.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="proto">
<parameter_description> the media transport protocol
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_message_add_time">
<description>
Add time information @start and @stop to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> the start time
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> the stop time
</parameter_description>
</parameter>
<parameter name="repeat">
<parameter_description> the repeat times
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtp_buffer_get_csrc">
<description>
Get the CSRC at index @idx in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the index of the CSRC to get
</parameter_description>
</parameter>
</parameters>
<return> the CSRC at index @idx in host order.
</return>
</function>

<function name="gst_video_format_get_pixel_stride">
<description>
Calculates the pixel stride (number of bytes from one pixel to the
pixel to its immediate left) for the video component with an index
of @component.  See @gst_video_format_get_row_stride for a description
of the component index.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
</parameters>
<return> pixel stride of component @component
</return>
</function>

<function name="gst_color_balance_set_value">
<description>
Sets the current value of the channel to the passed value, which must
be between min_value and max_value.

See Also: The #GstColorBalanceChannel::min_value and
#GstColorBalanceChannel::max_value members of the
#GstColorBalanceChannel object.

</description>
<parameters>
<parameter name="balance">
<parameter_description> A #GstColorBalance instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A #GstColorBalanceChannel instance
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The new value for the channel.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_new_take_data">
<description>
Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.


</description>
<parameters>
<parameter name="data">
<parameter_description> data for the new buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of data
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer with @data and of size @len.
</return>
</function>

<function name="gst_rtsp_message_add_header">
<description>
Add a header with key @field and @value to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the value of the header
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_ring_buffer_samples_done">
<description>
Get the number of samples that were processed by the ringbuffer
since it was last started. This does not include the number of samples not
yet processed (see gst_ring_buffer_delay()).


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to query
</parameter_description>
</parameter>
</parameters>
<return> The number of samples processed by the ringbuffer.

MT safe.
</return>
</function>

<function name="gst_property_probe_get_values_name">
<description>
Same as gst_property_probe_get_values ().


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property to get values for.
</parameter_description>
</parameter>
</parameters>
<return> A list of valid values for the given property.
</return>
</function>

<function name="gst_sdp_media_get_key">
<description>
Get the encryption information from @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPKey.
</return>
</function>

<function name="gst_ring_buffer_is_acquired">
<description>
Check if the ringbuffer is acquired and ready to use.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to check
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the ringbuffer is acquired, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_tuner_get_frequency">
<description>
Retrieve the current frequency from the given channel. As for
gst_tuner_set_frequency(), the #GstTunerChannel must support frequency
operations, as indicated by the GST_TUNER_CHANNEL_FREQUENCY flag.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> The #GstTuner (a #GstElement) that owns the given channel.
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The #GstTunerChannel to retrieve the frequency from.
</parameter_description>
</parameter>
</parameters>
<return> The current frequency, or 0 on error.
</return>
</function>

<function name="gst_sdp_message_dump">
<description>
Dump the parsed contents of @msg to stdout.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_pb_utils_get_element_description">
<description>
Returns: a newly-allocated description string, or NULL on error. Free

</description>
<parameters>
<parameter name="factory_name">
<parameter_description> the name of the element, e.g. &quot;gnomevfssrc&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_tag_id3_genre_count">
<description>
Gets the number of ID3v1 genres that can be identified. Winamp genres are 
included.


</description>
<parameters>
</parameters>
<return> the number of ID3v1 genres that can be identified
</return>
</function>

<function name="gst_tag_to_vorbis_tag">
<description>
Looks up the vorbiscomment tag for a GStreamer tag.


</description>
<parameters>
<parameter name="gst_tag">
<parameter_description> GStreamer tag to convert to vorbiscomment tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding vorbiscomment tag or NULL if none exists.
</return>
</function>

<function name="gst_rtsp_find_method">
<description>
Convert @method to a #GstRTSPMethod.


</description>
<parameters>
<parameter name="method">
<parameter_description> a method
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPMethod for @method or #GST_RTSP_INVALID if the
method is unknown.
</return>
</function>

<function name="gst_rtsp_connection_set_auth_param">
<description>
Setup @conn with authentication directives. This is not necesary for
methods #GST_RTSP_AUTH_NONE and #GST_RTSP_AUTH_BASIC. For
#GST_RTSP_AUTH_DIGEST, directives should be taken from the digest challenge
in the WWW-Authenticate response header and can include realm, domain,
nonce, opaque, stale, algorithm, qop as per RFC2617.

Since: 0.10.20

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="param">
<parameter_description> authentication directive
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_sink_set_slave_method">
<description>
Controls how clock slaving will be performed in @sink. 

Since: 0.10.16

</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> the new slave method
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_s16_window">
<description>
This calls the window function @window on the @timedata sample buffer.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS16 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Time domain samples
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> Window function to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_set_session_name">
<description>
Set the session name in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="session_name">
<parameter_description> the session name
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtp_buffer_calc_header_len">
<description>
Calculate the header length of an RTP packet with @csrc_count CSRC entries.
An RTP packet can have at most 15 CSRC entries.


</description>
<parameters>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> The length of an RTP header with @csrc_count CSRC entries.
</return>
</function>

<function name="gst_rtcp_packet_sdes_copy_entry">
<description>
This function is like gst_rtcp_packet_sdes_get_entry() but it returns a
null-terminated copy of the data instead. use g_free() after usage.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> result of the entry type
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> result length of the entry data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> result entry data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was valid data.
</return>
</function>

<function name="gst_tuner_channel_changed">
<description>
Called by elements implementing the #GstTuner interface when the
current channel changes. Fires the #GstTuner::channel-changed signal.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A #GstTunerChannel instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_add_email">
<description>
Add @email to the list of emails in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="email">
<parameter_description> an email
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtsp_range_free">
<description>
Free the memory alocated by @range.

</description>
<parameters>
<parameter name="range">
<parameter_description> a #GstRTSPTimeRange
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_free">
<description>
Free all resources allocated by @msg. @msg should not be used anymore after
this function. This function should be used when @msg was dynamically
allocated with gst_sdp_message_new().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_base_rtp_audio_payload_set_samplebits_options">
<description>
Sets the options for sample based audio codecs.

Since: 0.10.18

</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
<parameter name="sample_size">
<parameter_description> Size per sample in bits.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_list_to_vorbiscomment_buffer">
<description>
Creates a new vorbiscomment buffer from a tag list.


</description>
<parameters>
<parameter name="list">
<parameter_description> tag list to convert
</parameter_description>
</parameter>
<parameter name="id_data">
<parameter_description> identification data at start of stream
</parameter_description>
</parameter>
<parameter name="id_data_length">
<parameter_description> length of identification data, may be 0 if @id_data is NULL
</parameter_description>
</parameter>
<parameter name="vendor_string">
<parameter_description> string that describes the vendor string or NULL
</parameter_description>
</parameter>
</parameters>
<return> A new #GstBuffer containing a vorbiscomment buffer with all tags
that could be converted from the given tag list.
</return>
</function>

<function name="gst_tag_list_new_from_id3v1">
<description>
Parses the data containing an ID3v1 tag and returns a #GstTagList from the
parsed data.


</description>
<parameters>
<parameter name="data">
<parameter_description> 128 bytes of data containing the ID3v1 tag
</parameter_description>
</parameter>
</parameters>
<return> A new tag list or NULL if the data was not an ID3v1 tag.
</return>
</function>

<function name="gst_sdp_message_get_connection">
<description>
Get the connection of @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPConnection. The result remains valid as long as @msg is valid.
</return>
</function>

<function name="gst_rtcp_packet_bye_get_reason">
<description>
Get the reason in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The reason for the BYE @packet or NULL if the packet did not contain
a reason string. The string must be freed with g_free() after usage.
</return>
</function>

<function name="gst_netaddress_get_ip6_address">
<description>
Get the IPv6 address stored in @naddr into @address.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a location to store the result.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a location to store the port.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the address could be retrieved.
</return>
</function>

<function name="gst_rtp_buffer_set_marker">
<description>
Set the marker bit on the RTP packet in @buffer to @marker.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="marker">
<parameter_description> the new marker
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_set_version">
<description>
Set the version of the RTP packet in @buffer to @version.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> the new version
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_find_norm_by_name">
<description>
Look up a #GstTunerNorm by name.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="norm">
<parameter_description> A string containing the name of a #GstTunerNorm
</parameter_description>
</parameter>
</parameters>
<return> A #GstTunerNorm, or NULL if no norm with the provided name
is available.
</return>
</function>

<function name="gst_rtsp_base64_decode_ip">
<description>
Decode the base64 string pointed to by @data in-place. When @len is not #NULL
it will contain the length of the decoded data.

</description>
<parameters>
<parameter name="data">
<parameter_description> the base64 encoded data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> location for output length or NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_transport_free">
<description>
Free the memory used by @transport.


</description>
<parameters>
<parameter name="transport">
<parameter_description> a #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_property_probe_get_property">
<description>
Get #GParamSpec for a property for which probing is supported.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe to get the properties for.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the property.
</parameter_description>
</parameter>
</parameters>
<return> the #GParamSpec of %NULL.
</return>
</function>

<function name="gst_property_probe_probe_and_get_values_name">
<description>
Same as gst_property_probe_probe_and_get_values ().


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property to get values for.
</parameter_description>
</parameter>
</parameters>
<return> the list of valid values for this property.
</return>
</function>

<function name="gst_rtcp_packet_sdes_add_item">
<description>
Add a new SDES item for @ssrc to @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the SSRC of the new item to add
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item could be added, %FALSE if the maximum amount of
items has been exceeded for the SDES packet or the MTU has been reached.
</return>
</function>

<function name="gst_ring_buffer_may_start">
<description>
Tell the ringbuffer that it is allowed to start playback when
the ringbuffer is filled with samples. 

Since: 0.10.6

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
<parameter name="allowed">
<parameter_description> the new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_signal_changed">
<description>
Called by elements implementing the #GstTuner interface when the
incoming signal strength changes. Fires the #GstTuner::signal-changed
signal on the tuner and the #GstTunerChannel::signal-changed signal on 
the channel.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The current #GstTunerChannel
</parameter_description>
</parameter>
<parameter name="signal">
<parameter_description> The new signal strength
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_orientation_get_vcenter">
<description>
Get the vertical centering offset from the given object.

Since: 0.10.11

</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports centering
</return>
</function>

<function name="gst_rtcp_buffer_end">
<description>
Finish @buffer after being constructured. This function is usually called
after gst_rtcp_buffer_new() and after adding the RTCP items to the new buffer. 

The function adjusts the size of @buffer with the total length of all the
added packets.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a buffer with an RTCP packet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_find_channel_by_name">
<description>
Look up a #GstTunerChannel by name.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A string containing the name of a #GstTunerChannel
</parameter_description>
</parameter>
</parameters>
<return> A #GstTunerChannel, or NULL if no channel with the provided name
is available.
</return>
</function>

<function name="gst_install_plugins_context_new">
<description>
Creates a new #GstInstallPluginsContext.


</description>
<parameters>
</parameters>
<return> a new #GstInstallPluginsContext. Free with
gst_install_plugins_context_free() when no longer needed

Since: 0.10.12
</return>
</function>

<function name="gst_mixer_mute_toggled">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the given track
has changed mute state.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the GstMixerTrack that has change mute state.
</parameter_description>
</parameter>
<parameter name="mute">
<parameter_description> the new state of the mute flag on the track
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_buffer_new_copy_data">
<description>
Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.


</description>
<parameters>
<parameter name="data">
<parameter_description> data for the new buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of data
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer with a copy of @data and of size @len.
</return>
</function>

<function name="gst_fft_f32_window">
<description>
This calls the window function @window on the @timedata sample buffer.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF32 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Time domain samples
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> Window function to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_riff_parse_info">
<description>
Parses stream metadata from input data.

</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="taglist">
<parameter_description> a pointer to a taglist (returned by this function)
containing information about this stream. May be
NULL if no supported tags were found.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_get_padding">
<description>
Check if the padding bit is set on the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer has the padding bit set.
</return>
</function>

<function name="gst_sdp_message_get_session_name">
<description>
Get the session name in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtcp_buffer_validate">
<description>
Check if the data pointed to by @buffer is a valid RTCP packet using
gst_rtcp_buffer_validate_data().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer is a valid RTCP packet.
</return>
</function>

<function name="gst_sdp_message_get_attribute">
<description>
Get the attribute at position @idx in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the index
</parameter_description>
</parameter>
</parameters>
<return> the #GstSDPAttribute at position @idx.
</return>
</function>

<function name="gst_sdp_media_get_attribute_val_n">
<description>
Get the @nth attribute value for @key in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the @nth attribute value.
</return>
</function>

<function name="gst_rtcp_packet_bye_set_reason">
<description>
Set the reason string to @reason in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> a reason string
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the string could be set.
</return>
</function>

<function name="gst_rtp_buffer_get_csrc_count">
<description>
Get the CSRC count of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> the CSRC count of @buffer.
</return>
</function>

<function name="gst_missing_encoder_installer_detail_new">
<description>
Returns: a newly-allocated detail string, or NULL on error. Free string

</description>
<parameters>
<parameter name="encode_caps">
<parameter_description> the (fixed) caps for which an encoder element is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

Since: 0.10.15
</return>
</function>

<function name="gst_missing_plugin_message_get_installer_detail">
<description>
Returns: a newly-allocated detail string, or NULL on error. Free string

</description>
<parameters>
<parameter name="msg">
<parameter_description> a missing-plugin #GstMessage of type #GST_MESSAGE_ELEMENT
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.
</return>
</function>

<function name="gst_rtsp_connection_flush">
<description>
Start or stop the flushing action on @conn. When flushing, all current
and future actions on @conn will return #GST_RTSP_EINTR until the connection
is set to non-flushing mode again.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="flush">
<parameter_description> start or stop the flush
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_audio_frame_length">
<description>
Calculate length of buffer in frames.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the caps from
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> the #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> 0 if there&apos;s an error, or the number of frames if everything&apos;s ok
</return>
</function>

<function name="gst_netbuffer_new">
<description>
Create a new network buffer.


</description>
<parameters>
</parameters>
<return> a new #GstNetBuffer.
</return>
</function>

<function name="gst_sdp_message_get_time">
<description>
Get time information with index @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the time index
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPTime.
</return>
</function>

<function name="gst_vorbis_tag_add">
<description>
Convenience function using gst_tag_from_vorbis_tag(), parsing
a vorbis comment string into the right type and adding it to the
given taglist @list.

Unknown vorbiscomment tags will be added to the tag list in form
of a #GST_TAG_EXTENDED_COMMENT (since 0.10.10 at least).

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GstTagList
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> a vorbiscomment tag string (key in key=value), must be valid UTF-8
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a vorbiscomment value string (value in key=value), must be valid UTF-8
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_missing_encoder_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that an encoder element for a particular set of (fixed) caps is missing.
This function is mainly for use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="encode_caps">
<parameter_description> the (fixed) caps for which an encoder element is needed
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_video_format_from_fourcc">
<description>
Converts a FOURCC value into the corresponding #GstVideoFormat.
If the FOURCC cannot be represented by #GstVideoFormat,
#GST_VIDEO_FORMAT_UNKNOWN is returned.

Since: 0.10.16


</description>
<parameters>
<parameter name="fourcc">
<parameter_description> a FOURCC value representing raw YUV video
</parameter_description>
</parameter>
</parameters>
<return> the #GstVideoFormat describing the FOURCC value
</return>
</function>

<function name="gst_rtsp_message_init_data">
<description>
Initialize a new data #GstRTSPMessage for @channel.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> a channel
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_fft_f32_free">
<description>
This frees the memory allocated for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF32 instance for this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_netaddress_equal">
<description>
Compare two #GstNetAddress structures


</description>
<parameters>
<parameter name="naddr1">
<parameter_description> The first #GstNetAddress
</parameter_description>
</parameter>
<parameter name="naddr2">
<parameter_description> The second #GstNetAddress
</parameter_description>
</parameter>
</parameters>
<return> TRUE if they are identical, FALSE otherwise

Since: 0.10.18
</return>
</function>

<function name="GstTunerChannel">
<description>
Reports that the signal strength has changed.

See Also: gst_tuner_signal_strength()

</description>
<parameters>
<parameter name="tunerchannel">
<parameter_description> The #GstTunerChannel
</parameter_description>
</parameter>
<parameter name="signal">
<parameter_description> The new signal strength (an integer)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_format_to_fourcc">
<description>
Converts a #GstVideoFormat value into the corresponding FOURCC.  Only
a few YUV formats have corresponding FOURCC values.  If @format has
no corresponding FOURCC value, 0 is returned.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat video format
</parameter_description>
</parameter>
</parameters>
<return> the FOURCC corresponding to @format
</return>
</function>

<function name="gst_fft_s32_inverse_fft">
<description>
This performs the inverse FFT on @freqdata and puts the result in @timedata.

@freqdata must have @len/2 + 1 samples, where @len is the parameter specified
while allocating the #GstFFTS32 instance with gst_fft_s32_new().

@timedata must be large enough to hold @len time domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS32 instance for this call
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Buffer of the samples in the frequency domain
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Target buffer for the samples in the time domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_media_get_information">
<description>
Get the information of @media


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the information of @media.
</return>
</function>

<function name="gst_pb_utils_init">
<description>
Initialises the base utils support library. This function is not
thread-safe. Applications should call it after calling gst_init(),
plugins should call it from their plugin_init function.

This function may be called multiple times. It will do nothing if the
library has already been initialised.

Since: 0.10.12

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_tuner_signal_strength">
<description>
Get the strength of the signal on this channel. Note that this
requires the current channel to be a &quot;tuning&quot; channel, i.e. a
channel on which frequency can be set. This can be checked using
GST_TUNER_CHANNEL_HAS_FLAG (), and the appropriate flag to check
for is GST_TUNER_CHANNEL_FREQUENCY.

The valid range of the signal strength is indicated in the 
min_signal and max_signal properties of the #GstTunerChannel.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) that owns the given channel.
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> the #GstTunerChannel to get the signal strength from.
</parameter_description>
</parameter>
</parameters>
<return> Signal strength, or 0 on error.
</return>
</function>

<function name="gst_sdp_media_add_bandwidth">
<description>
Add the bandwidth information with @bwtype and @bandwidth to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="bwtype">
<parameter_description> the bandwidth modifier type
</parameter_description>
</parameter>
<parameter name="bandwidth">
<parameter_description> the bandwidth in kilobits per second
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_x_overlay_handle_events">
<description>
Tell an overlay that it should handle events from the window system. These
events are forwared upstream as navigation events. In some window system,
events are not propagated in the window hierarchy if a client is listening
for them. This method allows you to disable events handling completely
from the XOverlay.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay to expose.
</parameter_description>
</parameter>
<parameter name="handle_events">
<parameter_description> a #gboolean indicating if events should be handled or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_orientation_get_hflip">
<description>
Get the horizontal flipping state (%TRUE for flipped) from the given object.

Since: 0.10.11

</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flip">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports flipping
</return>
</function>

<function name="gst_video_format_is_yuv">
<description>
Determine whether the video format is a YUV format.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @format represents YUV video
</return>
</function>

<function name="gst_rtcp_packet_sdes_get_item_count">
<description>
Get the number of items in the SDES packet @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The number of items in @packet.
</return>
</function>

<function name="gst_rtsp_transport_get_manager">
<description>
Get the #GStreamer element that can handle the buffers transported over
@trans.

It is possible that there are several managers available, use @option to
selected one.

@manager will contain an element name or #NULL when no manager is
needed/available for @trans.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstRTSPTransMode
</parameter_description>
</parameter>
<parameter name="manager">
<parameter_description> location to hold the result
</parameter_description>
</parameter>
<parameter name="option">
<parameter_description> option index.
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK. 
</return>
</function>

<function name="gst_tag_list_add_id3_image">
<description>
Adds an image from an ID3 APIC frame (or similar, such as used in FLAC)
to the given tag list. Also see gst_tag_image_data_to_image_buffer() for
more information on image tags in GStreamer.


</description>
<parameters>
<parameter name="tag_list">
<parameter_description> a tag list
</parameter_description>
</parameter>
<parameter name="image_data">
<parameter_description> the (encoded) image
</parameter_description>
</parameter>
<parameter name="image_data_len">
<parameter_description> the length of the encoded image data at @image_data
</parameter_description>
</parameter>
<parameter name="id3_picture_type">
<parameter_description> picture type as per the ID3 (v2.4.0) specification for
the APIC frame (0 = unknown/other)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the image was processed, otherwise %FALSE

Since: 0.10.20
</return>
</function>

<function name="gst_color_balance_get_value">
<description>
Retrieve the current value of the indicated channel, between min_value
and max_value.

See Also: The #GstColorBalanceChannel::min_value and
#GstColorBalanceChannel::max_value members of the
#GstColorBalanceChannel object.


</description>
<parameters>
<parameter name="balance">
<parameter_description> A #GstColorBalance instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A #GstColorBalanceChannel instance
</parameter_description>
</parameter>
</parameters>
<return> The current value of the channel.
</return>
</function>

<function name="gst_sdp_media_get_bandwidth">
<description>
Get the bandwidth at position @idx in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the #GstSDPBandwidth at position @idx.
</return>
</function>

<function name="gst_tuner_set_norm">
<description>
Changes the video norm on this tuner to the given norm.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) to set the norm on.
</parameter_description>
</parameter>
<parameter name="norm">
<parameter_description> the norm to use for the current channel.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_media_get_port">
<description>
Get the port number for @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the port number of @media.
</return>
</function>

<function name="gst_sdp_message_uninit">
<description>
Free all resources allocated in @msg. @msg should not be used anymore after
this function. This function should be used when @msg was allocated on the
stack and initialized with gst_sdp_message_init().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_ring_buffer_device_is_open">
<description>
Checks the status of the device associated with the ring buffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device was open, FALSE if it was closed.

MT safe.
</return>
</function>

<function name="gst_sdp_message_medias_len">
<description>
Get the number of media descriptions in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of media descriptions in @msg.
</return>
</function>

<function name="gst_fft_s16_inverse_fft">
<description>
This performs the inverse FFT on @freqdata and puts the result in @timedata.

@freqdata must have @len/2 + 1 samples, where @len is the parameter specified
while allocating the #GstFFTS16 instance with gst_fft_s16_new().

@timedata must be large enough to hold @len time domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS16 instance for this call
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Buffer of the samples in the frequency domain
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Target buffer for the samples in the time domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tag_freeform_string_to_utf8">
<description>
Convenience function to read a string with unknown character encoding. If
the string is already in UTF-8 encoding, it will be returned right away.
Otherwise, the environment will be searched for a number of environment
variables (whose names are specified in the NULL-terminated string array
@env_vars) containing a list of character encodings to try/use. If none
are specified, the current locale will be tried. If that also doesn&apos;t work,
ISO-8859-1 is assumed (which will almost always succeed).


</description>
<parameters>
<parameter name="data">
<parameter_description> string data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> length of string data, or -1 if the string is NUL-terminated
</parameter_description>
</parameter>
<parameter name="env_vars">
<parameter_description> a NULL-terminated string array of environment variable names,
or NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated string in UTF-8 encoding, or NULL

Since: 0.10.13
</return>
</function>

<function name="gst_tag_from_id3_user_tag">
<description>
Looks up the GStreamer tag for an ID3v2 user tag (e.g. description in
TXXX frame or owner in UFID frame).


</description>
<parameters>
<parameter name="type">
<parameter_description> the type of ID3v2 user tag (e.g. &quot;TXXX&quot; or &quot;UDIF&quot;)
</parameter_description>
</parameter>
<parameter name="id3_user_tag">
<parameter_description> ID3v2 user tag to convert to GStreamer tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding GStreamer tag or NULL if none exists.
</return>
</function>

<function name="gst_sdp_message_attributes_len">
<description>
Get the number of attributes in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of attributes in @msg.
</return>
</function>

<function name="gst_tuner_norm_changed">
<description>
Called by elements implementing the #GstTuner interface when the
current norm changes. Fires the #GstTuner::norm-changed signal.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="norm">
<parameter_description> A #GstTunerNorm instance
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pb_utils_add_codec_description_to_tag_list">
<description>
Adds a codec tag describing the format specified by @caps to @taglist.


</description>
<parameters>
<parameter name="taglist">
<parameter_description> a #GstTagList
</parameter_description>
</parameter>
<parameter name="codec_tag">
<parameter_description> a GStreamer codec tag such as #GST_TAG_AUDIO_CODEC,
#GST_TAG_VIDEO_CODEC or #GST_TAG_CODEC
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the (fixed) #GstCaps for which a codec tag should be added.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if a codec tag was added, FALSE otherwise.
</return>
</function>

<function name="gst_pb_utils_get_source_description">
<description>
Returns: a newly-allocated description string, or NULL on error. Free

</description>
<parameters>
<parameter name="protocol">
<parameter_description> the protocol the source element needs to handle, e.g. &quot;http&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_fft_s32_free">
<description>
This frees the memory allocated for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS32 instance for this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_media_add_connection">
<description>
Add the given connection parameters to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="nettype">
<parameter_description> the type of network. &quot;IN&quot; is defined to have the meaning
&quot;Internet&quot;.
</parameter_description>
</parameter>
<parameter name="addrtype">
<parameter_description> the type of address.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> the address
</parameter_description>
</parameter>
<parameter name="ttl">
<parameter_description> the time to live of the address
</parameter_description>
</parameter>
<parameter name="addr_number">
<parameter_description> the number of layers
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_new">
<description>
Allocate a new GstSDPMedia and store the result in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> pointer to new #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtsp_message_dump">
<description>
Dump the contents of @msg to stdout.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="GstColorBalanceChannel">
<description>
Fired when the value of the indicated channel has changed.

</description>
<parameters>
<parameter name="channel">
<parameter_description> The #GstColorBalanceChannel
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_parse_buffer">
<description>
Parse the contents of @size bytes pointed to by @data and store the result in
@msg.


</description>
<parameters>
<parameter name="data">
<parameter_description> the start of the buffer
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of the buffer
</parameter_description>
</parameter>
<parameter name="msg">
<parameter_description> the result #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK on success.
</return>
</function>

<function name="gst_rtcp_packet_bye_get_nth_ssrc">
<description>
Get the @nth SSRC of the BYE @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth SSRC to get
</parameter_description>
</parameter>
</parameters>
<return> The @nth SSRC of @packet.
</return>
</function>

<function name="gst_tag_image_data_to_image_buffer">
<description>
Helper function for tag-reading plugins to create a #GstBuffer suitable to
add to a #GstTagList as an image tag (such as #GST_TAG_IMAGE or
#GST_TAG_PREVIEW_IMAGE) from the encoded image data and an (optional) image
type.

Background: cover art and other images in tags are usually stored as a
blob of binary image data, often accompanied by a MIME type or some other
content type string (e.g. &apos;png&apos;, &apos;jpeg&apos;, &apos;jpg&apos;). Sometimes there is also an
&apos;image type&apos; to indicate what kind of image this is (e.g. front cover,
back cover, artist, etc.). The image data may also be an URI to the image
rather than the image itself.

In GStreamer, image tags are #GstBuffer&amp;lt;!-- --&amp;gt;s containing the raw image
data, with the buffer caps describing the content type of the image
(e.g. image/jpeg, image/png, text/uri-list). The buffer caps may contain
an additional &apos;image-type&apos; field of #GST_TYPE_TAG_IMAGE_TYPE to describe
the type of image (front cover, back cover etc.). #GST_TAG_PREVIEW_IMAGE
tags should not carry an image type, their type is already indicated via
the special tag name.

This function will do various checks and typefind the encoded image
data (we can&apos;t trust the declared mime type).


</description>
<parameters>
<parameter name="image_data">
<parameter_description> the (encoded) image
</parameter_description>
</parameter>
<parameter name="image_data_len">
<parameter_description> the length of the encoded image data at @image_data
</parameter_description>
</parameter>
<parameter name="image_type">
<parameter_description> type of the image, or #GST_TAG_IMAGE_TYPE_UNDEFINED. Pass
#GST_TAG_IMAGE_TYPE_NONE if no image type should be set at all (e.g.
for preview images)
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated image buffer for use in tag lists, or NULL

Since: 0.10.20
</return>
</function>

<function name="gst_rtsp_message_new_request">
<description>
Create a new #GstRTSPMessage with @method and @uri and store the result
request message in @msg. 


</description>
<parameters>
<parameter name="msg">
<parameter_description> a location for the new #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> the request method to use
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the uri of the request
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult. Free with gst_rtsp_message_free().
</return>
</function>

<function name="gst_base_rtp_audio_payload_set_frame_options">
<description>
Sets the options for frame based audio codecs.


</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
<parameter name="frame_duration">
<parameter_description> The duraction of an audio frame in milliseconds.
</parameter_description>
</parameter>
<parameter name="frame_size">
<parameter_description> The size of an audio frame in bytes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_message_new_response">
<description>
Create a new response #GstRTSPMessage with @code and @reason and store the
result message in @msg. 

When @reason is #NULL, the default reason for @code will be used.

When @request is not #NULL, the relevant headers will be copied to the new
response message.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a location for the new #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> the status code
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> the status reason or #NULL
</parameter_description>
</parameter>
<parameter name="request">
<parameter_description> the request that triggered the response or #NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult. Free with gst_rtsp_message_free().
</return>
</function>

<function name="gst_rtsp_connection_close">
<description>
Close the connected @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_video_format_get_size">
<description>
Calculates the total number of bytes in the raw video format.  This
number should be used when allocating a buffer for raw video.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of video
</parameter_description>
</parameter>
</parameters>
<return> size (in bytes) of raw video format
</return>
</function>

<function name="gst_rtsp_message_steal_body">
<description>
Take the body of @msg and store it in @data and @size. After this method,
the body and size of @msg will be set to #NULL and 0 respectively.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for the data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> location for the size of @data
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_x_overlay_set_xwindow_id">
<description>
This will call the video overlay&apos;s set_xwindow_id method. You should
use this method to tell to a XOverlay to display video output to a
specific XWindow. Passing 0 as the xwindow_id will tell the overlay to
stop using that window and create an internal one.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay to set the XWindow on.
</parameter_description>
</parameter>
<parameter name="xwindow_id">
<parameter_description> a #XID referencing the XWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_sink_set_provide_clock">
<description>
Controls whether @sink will provide a clock or not. If @provide is %TRUE, 
gst_element_provide_clock() will return a clock that reflects the datarate
of @sink. If @provide is %FALSE, gst_element_provide_clock() will return NULL.

Since: 0.10.16

</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
<parameter name="provide">
<parameter_description> new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_close_device">
<description>
Close the audio device associated with the ring buffer. The ring buffer
should already have been released via gst_ring_buffer_release().


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be closed, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_ring_buffer_clear">
<description>
Clear the given segment of the buffer with silence samples.
This function is used by subclasses.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to clear
</parameter_description>
</parameter>
<parameter name="segment">
<parameter_description> the segment to clear
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_get_length">
<description>
Get the length field of @packet. This is the length of the packet in 
32-bit words minus one.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The length field of @packet.
</return>
</function>

<function name="gst_rtp_buffer_set_csrc">
<description>
Modify the CSRC at index @idx in @buffer to @csrc.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the CSRC index to set
</parameter_description>
</parameter>
<parameter name="csrc">
<parameter_description> the CSRC in host order to set at @idx
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_set_connection">
<description>
Configure the SDP connection in @msg with the given parameters.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="nettype">
<parameter_description> the type of network. &quot;IN&quot; is defined to have the meaning
&quot;Internet&quot;.
</parameter_description>
</parameter>
<parameter name="addrtype">
<parameter_description> the type of address.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> the address
</parameter_description>
</parameter>
<parameter name="ttl">
<parameter_description> the time to live of the address
</parameter_description>
</parameter>
<parameter name="addr_number">
<parameter_description> the number of layers
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_tag_id3_genre_get">
<description>
Gets the ID3v1 genre name for a given ID.


</description>
<parameters>
<parameter name="id">
<parameter_description> ID of genre to query
</parameter_description>
</parameter>
</parameters>
<return> the genre or NULL if no genre is associated with that ID.
</return>
</function>

<function name="gst_rtp_buffer_set_extension">
<description>
Set the extension bit on the RTP packet in @buffer to @extension.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="extension">
<parameter_description> the new extension
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_get_extension">
<description>
Check if the extension bit is set on the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer has the extension bit set.
</return>
</function>

<function name="gst_rtcp_packet_rr_set_ssrc">
<description>
Set the ssrc field of the RR @packet.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the SSRC to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_media_get_format">
<description>
Get the format information at position @idx in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the format at position @idx.
</return>
</function>

<function name="SECTION">
<description>
&amp;lt;refsect2&amp;gt;
&amp;lt;para&amp;gt;
This library contains some helper functions and includes the 
videosink and videofilter base classes.
&amp;lt;/para&amp;gt;
&amp;lt;/refsect2&amp;gt;

</description>
<parameters>
<parameter name="short_description">
<parameter_description> Support library for video operations
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="str_case_equal">
<description>
Compares @v1 and @v2 in a case-insensitive manner


</description>
<parameters>
<parameter name="v1">
<parameter_description> an ASCII string
</parameter_description>
</parameter>
<parameter name="v2">
<parameter_description> another ASCII string
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if they are equal (modulo case)
</return>
</function>

<function name="gst_sdp_message_set_version">
<description>
Set the version in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> the version
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_get_attribute_val">
<description>
Get the first attribute value for @key in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> a key
</parameter_description>
</parameter>
</parameters>
<return> the first attribute value for @key.
</return>
</function>

<function name="gst_mixer_volume_changed">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the volume(s) for the
given track have changed.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the GstMixerTrack that has changed.
</parameter_description>
</parameter>
<parameter name="volumes">
<parameter_description> Array of volume values, one per channel on the mixer track.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_property_probe_probe_property">
<description>
Runs a probe on the property specified by %pspec

</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe to check.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> #GParamSpec of the property.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_set_channel_positions">
<description>
Adds a &quot;channel-positions&quot; field to the given #GstStructure,
which will represent the channel positions as given in the
provided #GstAudioChannelPosition array.

</description>
<parameters>
<parameter name="str">
<parameter_description> A #GstStructure to set channel positions on.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> an array of channel positions. The number of members
in this array should be equal to the (fixed!) number
of the &quot;channels&quot; field in the given #GstStructure.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_payload_info_for_pt">
<description>
Get the #GstRTPPayloadInfo for @payload_type. This function is
mostly used to get the default clock-rate and bandwidth for static payload
types specified with @payload_type.


</description>
<parameters>
<parameter name="payload_type">
<parameter_description> the payload_type to find
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTPPayloadInfo or NULL when no info could be found.
</return>
</function>

<function name="gst_sdp_message_add_phone">
<description>
Add @phone to the list of phones in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="phone">
<parameter_description> a phone
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="GstMixerTrack">
<description>
Index of the mixer track, if available. Mixer track implementations
must set this at construct time. This can be used to discern between
multiple tracks with identical labels.

Since: 0.10.21

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_video_format_get_component_width">
<description>
Calculates the width of the component.  See
@gst_video_format_get_row_stride for a description
of the component index.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
</parameters>
<return> width of component @component
</return>
</function>

<function name="gst_fft_s32_new">
<description>
This returns a new #GstFFTS32 instance with the given parameters. It makes
sense to keep one instance for several calls for speed reasons.

@len must be even and to get the best performance a product of
2, 3 and 5. To get the next number with this characteristics use
gst_fft_next_fast_length().


</description>
<parameters>
<parameter name="len">
<parameter_description> Length of the FFT in the time domain
</parameter_description>
</parameter>
<parameter name="inverse">
<parameter_description> %TRUE if the #GstFFTS32 instance should be used for the inverse FFT
</parameter_description>
</parameter>
</parameters>
<return> a new #GstFFTS32 instance.
</return>
</function>

<function name="gst_rtcp_packet_sdes_add_entry">
<description>
Add a new SDES entry to the current item in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GstRTCPSDESType of the SDES entry
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the data length
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the item could be added, %FALSE if the MTU has been
reached.
</return>
</function>

<function name="gst_x_overlay_got_xwindow_id">
<description>
This will post a &quot;have-xwindow-id&quot; element message on the bus.

This function should only be used by video overlay plugin developers.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay which got a XWindow.
</parameter_description>
</parameter>
<parameter name="xwindow_id">
<parameter_description> a #XID referencing the XWindow.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_get_packet_len">
<description>
Return the total length of the packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The total length of the packet in @buffer.
</return>
</function>

<function name="gst_rtcp_packet_get_count">
<description>
Get the count field in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The count field in @packet or -1 if @packet does not point to a
valid packet.
</return>
</function>

<function name="gst_rtp_buffer_set_packet_len">
<description>
Set the total @buffer size to @len. The data in the buffer will be made
larger if needed. Any padding will be removed from the packet. 

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the new packet length
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_property_probe_get_values">
<description>
Gets the possible (probed) values for the given property,
requires the property to have been probed before.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> the #GParamSpec property identifier.
</parameter_description>
</parameter>
</parameters>
<return> A list of valid values for the given property.
</return>
</function>

<function name="gst_sdp_message_bandwidths_len">
<description>
Get the number of bandwidth information in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of bandwidth information in @msg.
</return>
</function>

<function name="gst_rtsp_message_remove_header">
<description>
Remove the @indx header with key @field from @msg. If @indx equals -1, all
headers will be removed.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
<parameter name="indx">
<parameter_description> the index of the header
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtp_buffer_get_ssrc">
<description>
Get the SSRC of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> the SSRC of @buffer in host order.
</return>
</function>

<function name="gst_base_audio_src_set_provide_clock">
<description>
Controls whether @src will provide a clock or not. If @provide is %TRUE, 
gst_element_provide_clock() will return a clock that reflects the datarate
of @src. If @provide is %FALSE, gst_element_provide_clock() will return NULL.

Since: 0.10.16

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc
</parameter_description>
</parameter>
<parameter name="provide">
<parameter_description> new state
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_get_volume">
<description>
Get the current volume(s) on the given track.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the GstMixerTrack to get the volume from.
</parameter_description>
</parameter>
<parameter name="volumes">
<parameter_description> a pre-allocated array of integers (of size
track-&amp;gt;num_channels) to store the current volume
of each channel in the given track in.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_format_get_row_stride">
<description>
Calculates the row stride (number of bytes from one row of pixels to
the next) for the video component with an index of @component.  For
YUV video, Y, U, and V have component indices of 0, 1, and 2,
respectively.  For RGB video, R, G, and B have component indicies of
0, 1, and 2, respectively.  Alpha channels, if present, have a component
index of 3.  The @width parameter always represents the width of the
video, not the component.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
</parameters>
<return> row stride of component @component
</return>
</function>

<function name="gst_riff_parse_strf_iavs">
<description>
Parses a interleaved (also known as &quot;complex&quot;)  stream´s strf
structure plus optionally some extradata from input data. This 
function takes ownership of @buf.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="strf">
<parameter_description> a pointer (returned by this function) to a filled-in
strf/iavs structure. Caller should free it.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer (returned by this function) to a buffer
containing extradata for this particular stream (e.g.
codec initialization data).
</parameter_description>
</parameter>
</parameters>
<return> TRUE if parsing succeeded, otherwise FALSE.
</return>
</function>

<function name="gst_ring_buffer_read">
<description>
Read @len samples from the ringbuffer into the memory pointed 
to by @data.
The first sample should be read from position @sample in
the ringbuffer.

@len should not be a multiple of the segment size of the ringbuffer
although it is recommended.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to read from
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample position of the data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> where the data should be read
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of samples in data to read
</parameter_description>
</parameter>
</parameters>
<return> The number of samples read from the ringbuffer or -1 on
error.

MT safe.
</return>
</function>

<function name="gst_rtp_buffer_new_allocate">
<description>
Allocate a new #Gstbuffer with enough data to hold an RTP packet with @csrc_count CSRCs,
a payload length of @payload_len and padding of @pad_len.
All other RTP header fields will be set to 0/FALSE.


</description>
<parameters>
<parameter name="payload_len">
<parameter_description> the length of the payload
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer that can hold an RTP packet with given
parameters.
</return>
</function>

<function name="gst_rtsp_connection_reset_timeout">
<description>
Reset the timeout of @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtcp_buffer_new">
<description>
Create a new buffer for constructing RTCP packets. The packet will have a
maximum size of @mtu.


</description>
<parameters>
<parameter name="mtu">
<parameter_description> the maximum mtu size.
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer.
</return>
</function>

<function name="gst_rtsp_version_as_text">
<description>
Convert @version to a string.


</description>
<parameters>
<parameter name="version">
<parameter_description> a #GstRTSPVersion
</parameter_description>
</parameter>
</parameters>
<return> a string representation of @version.
</return>
</function>

<function name="gst_sdp_media_connections_len">
<description>
Get the number of connection fields in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of connections in @media.
</return>
</function>

<function name="gst_missing_uri_sink_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that a sink element for a particular URI protocol is missing. This
function is mainly for use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the URI protocol the missing sink needs to implement,
e.g. &quot;http&quot; or &quot;smb&quot;
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_ring_buffer_set_flushing">
<description>
Set the ringbuffer to flushing mode or normal mode.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to flush
</parameter_description>
</parameter>
<parameter name="flushing">
<parameter_description> the new mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_orientation_set_vflip">
<description>
Set the vertical flipping state (%TRUE for flipped) for the given object.

Since: 0.10.11

</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flip">
<parameter_description> use flipping
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports flipping
</return>
</function>

<function name="gst_rtp_buffer_new_copy_data">
<description>
Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.


</description>
<parameters>
<parameter name="data">
<parameter_description> data for the new buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of data
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated buffer with a copy of @data and of size @len.
</return>
</function>

<function name="gst_video_parse_caps_framerate">
<description>
Extracts the frame rate from @caps and places the values in the locations
pointed to by @fps_n and @fps_d.  Returns TRUE if the values could be
parsed correctly, FALSE if not.

This function can be used with #GstCaps that have any media type; it
is not limited to formats handled by #GstVideoFormat.

Since: 0.10.16


</description>
<parameters>
<parameter name="caps">
<parameter_description> pointer to a #GstCaps instance
</parameter_description>
</parameter>
<parameter name="fps_n">
<parameter_description> pointer to integer to hold numerator of frame rate (output)
</parameter_description>
</parameter>
<parameter name="fps_d">
<parameter_description> pointer to integer to hold denominator of frame rate (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps was parsed correctly.
</return>
</function>

<function name="gst_install_plugins_supported">
<description>
Checks whether plugin installation is likely to be supported by the
current environment. This currently only checks whether the helper script
that is to be provided by the distribution or operating system vendor
exists.


</description>
<parameters>
</parameters>
<return> TRUE if plugin installation is likely to be supported.

Since: 0.10.15
</return>
</function>

<function name="gst_rtp_buffer_set_extension_data">
<description>
Set the extension bit of the rtp buffer and fill in the @bits and @length of the
extension header. It will refuse to set the extension data if the buffer is not
large enough.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="bits">
<parameter_description> the bits specific for the extension
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length that counts the number of 32-bit words in
the extension, excluding the extension header ( therefore zero is a valid length)
</parameter_description>
</parameter>
</parameters>
<return> True if done.

Since : 0.10.18
</return>
</function>

<function name="gst_rtsp_url_free">
<description>
Free the memory used by @url.

</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GstBaseRTPDepayload">
<description>
Control the amount of packets to buffer.

Deprecated: Use a jitterbuffer or RTP session manager to delay packet
playback. This property has no effect anymore since 0.10.15.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_default_clock_rate">
<description>
Get the default clock-rate for the static payload type @payload_type.


</description>
<parameters>
<parameter name="payload_type">
<parameter_description> the static payload type
</parameter_description>
</parameter>
</parameters>
<return> the default clock rate or -1 if the payload type is not static or
the clock-rate is undefined.

Since: 0.10.13
</return>
</function>

<function name="gst_sdp_media_attributes_len">
<description>
Get the number of attribute fields in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of attributes in @media.
</return>
</function>

<function name="gst_rtcp_packet_get_type">
<description>
Get the packet type of the packet pointed to by @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The packet type.
</return>
</function>

<function name="gst_riff_create_video_caps">
<description>

</description>
<parameters>
<parameter name="codec_fcc">
<parameter_description> fourCC codec for this codec.
</parameter_description>
</parameter>
<parameter name="strh">
<parameter_description> pointer to the strh stream header structure.
</parameter_description>
</parameter>
<parameter name="strf">
<parameter_description> pointer to the strf stream header structure, including any
data that is within the range of strf.size, but excluding any
additional data withint this chunk but outside strf.size.
</parameter_description>
</parameter>
<parameter name="strf_data">
<parameter_description> a #GstBuffer containing the additional data in the strf
chunk outside reach of strf.size. Ususally a palette.
</parameter_description>
</parameter>
<parameter name="strd_data">
<parameter_description> a #GstBuffer containing the data in the strd stream header
chunk. Usually codec initialization data.
</parameter_description>
</parameter>
<parameter name="codec_name">
<parameter_description> if given, will be filled with a human-readable codec name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_calculate_display_ratio">
<description>
Given the Pixel Aspect Ratio and size of an input video frame, and the 
pixel aspect ratio of the intended display device, calculates the actual 
display ratio the video will be rendered with.


</description>
<parameters>
<parameter name="dar_n">
<parameter_description> Numerator of the calculated display_ratio
</parameter_description>
</parameter>
<parameter name="dar_d">
<parameter_description> Denominator of the calculated display_ratio
</parameter_description>
</parameter>
<parameter name="video_width">
<parameter_description> Width of the video frame in pixels
</parameter_description>
</parameter>
<parameter name="video_height">
<parameter_description> Height of the video frame in pixels
</parameter_description>
</parameter>
<parameter name="video_par_n">
<parameter_description> Numerator of the pixel aspect ratio of the input video.
</parameter_description>
</parameter>
<parameter name="video_par_d">
<parameter_description> Denominator of the pixel aspect ratio of the input video.
</parameter_description>
</parameter>
<parameter name="display_par_n">
<parameter_description> Numerator of the pixel aspect ratio of the display device
</parameter_description>
</parameter>
<parameter name="display_par_d">
<parameter_description> Denominator of the pixel aspect ratio of the display device
</parameter_description>
</parameter>
</parameters>
<return> A boolean indicating success and a calculated Display Ratio in the 
dar_n and dar_d parameters. 
The return value is FALSE in the case of integer overflow or other error. 

Since: 0.10.7
</return>
</function>

<function name="gst_rtsp_transport_new">
<description>
Allocate a new initialized #GstRTSPTransport. Use gst_rtsp_transport_free()
after usage.


</description>
<parameters>
<parameter name="transport">
<parameter_description> location to hold the new #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult. 
</return>
</function>

<function name="GstBaseRTPAudioPayload">
<description>
Minimum duration of the packet data in ns (can&apos;t go above MTU)

Since: 0.10.13

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_get_payload_len">
<description>
Get the length of the payload of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The length of the payload in @buffer.
</return>
</function>

<function name="gst_sdp_media_get_num_ports">
<description>
Get the number of ports for @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of ports for @media.
</return>
</function>

<function name="gst_sdp_message_get_origin">
<description>
Get the origin of @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPOrigin. The result remains valid as long as @msg is valid.
</return>
</function>

<function name="gst_install_plugins_return_get_name">
<description>
Convenience function to return the descriptive string associated
with a status code.  This function returns English strings and
should not be used for user messages. It is here only to assist
in debugging.


</description>
<parameters>
<parameter name="ret">
<parameter_description> the return status code
</parameter_description>
</parameter>
</parameters>
<return> a descriptive string for the status code in @ret

Since: 0.10.12
</return>
</function>

<function name="gst_rtcp_packet_sdes_get_entry">
<description>
Get the data of the current SDES item entry. @type (when not NULL) will
contain the type of the entry. @data (when not NULL) will point to @len
bytes.

When @type refers to a text item, @data will point to a UTF8 string. Note
that this UTF8 string is NOT null-terminated. Use
gst_rtcp_packet_sdes_copy_entry() to get a null-termined copy of the entry.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> result of the entry type
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> result length of the entry data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> result entry data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was valid data.
</return>
</function>

<function name="gst_audio_buffer_clip">
<description>
Clip the the buffer to the given %GstSegment.

After calling this function the caller does not own a reference to 
@buffer anymore.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> The buffer to clip.
</parameter_description>
</parameter>
<parameter name="segment">
<parameter_description> Segment in %GST_FORMAT_TIME or %GST_FORMAT_DEFAULT to which the buffer should be clipped.
</parameter_description>
</parameter>
<parameter name="rate">
<parameter_description> sample rate.
</parameter_description>
</parameter>
<parameter name="frame_size">
<parameter_description> size of one audio frame in bytes.
</parameter_description>
</parameter>
</parameters>
<return> %NULL if the buffer is completely outside the configured segment,
otherwise the clipped buffer is returned.

If the buffer has no timestamp, it is assumed to be inside the segment and
is not clipped 

Since: 0.10.14
</return>
</function>

<function name="gst_rtp_buffer_ext_timestamp">
<description>
Update the @exttimestamp field with @timestamp. For the first call of the
method, @exttimestamp should point to a location with a value of -1.

This function makes sure that the returned value is a constantly increasing
value even in the case where there is a timestamp wraparound.


</description>
<parameters>
<parameter name="exttimestamp">
<parameter_description> a previous extended timestamp
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a new timestamp
</parameter_description>
</parameter>
</parameters>
<return> The extended timestamp of @timestamp.

Since: 0.10.15
</return>
</function>

<function name="gst_rtcp_packet_bye_get_ssrc_count">
<description>
Get the number of SSRC fields in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The number of SSRC fields in @packet.
</return>
</function>

<function name="gst_rtcp_packet_get_rb_count">
<description>
Get the number of report blocks in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR or RR #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The number of report blocks in @packet.
</return>
</function>

<function name="gst_audio_set_structure_channel_positions_list">
<description>
Sets a (possibly non-fixed) list of possible audio channel
positions (given in pos) on the given structure. The
structure, after this function has been called, will contain
a &quot;channel-positions&quot; field with an array of the size of
the &quot;channels&quot; field value in the given structure (note
that this means that the channels field in the provided
structure should be fixed!). Each value in the array will
contain each of the values given in the pos array.

</description>
<parameters>
<parameter name="str">
<parameter_description> #GstStructure to set the list of channel positions
on.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the array containing one or more possible audio
channel positions that we should add in each value
of the array in the given structure.
</parameter_description>
</parameter>
<parameter name="num_positions">
<parameter_description> the number of values in pos.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_message_parse_record_toggled">
<description>
Extracts the contents of a record-toggled bus message. Reads
the GstMixerTrack that has changed, and the new value of the 
recording flag.

The GstMixerTrack remains valid until the message is freed.

Since: 0.10.14

</description>
<parameters>
<parameter name="message">
<parameter_description> A record-toggled change notification message.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> Pointer to hold a GstMixerTrack object, or NULL.
</parameter_description>
</parameter>
<parameter name="record">
<parameter_description> A pointer to a gboolean variable, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_set_option">
<description>
Sets a name/value option in the mixer to the requested value.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer (a #GstElement) that owns the optionlist.
</parameter_description>
</parameter>
<parameter name="opts">
<parameter_description> The #GstMixerOptions that we operate on.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The requested new option value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_rtp_audio_payload_get_adapter">
<description>
Gets the internal adapter used by the depayloader.


</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a #GstBaseRTPAudioPayload
</parameter_description>
</parameter>
</parameters>
<return> a #GstAdapter.

Since: 0.10.13
</return>
</function>

<function name="gst_tuner_list_norms">
<description>
Retrieve a GList of available #GstTunerNorm settings for the currently
tuned channel on the given tuner object.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (*a #GstElement) to get the list of norms from.
</parameter_description>
</parameter>
</parameters>
<return> A list of norms available on the current channel for this
tuner object. The list is owned by the GstTuner and must not
be freed.
</return>
</function>

<function name="gst_base_audio_sink_get_provide_clock">
<description>
Queries whether @sink will provide a clock or not. See also
gst_base_audio_sink_set_provide_clock.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @sink will provide a clock.

Since: 0.10.16
</return>
</function>

<function name="gst_base_audio_src_get_provide_clock">
<description>
Queries whether @src will provide a clock or not. See also
gst_base_audio_src_set_provide_clock.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @src will provide a clock.

Since: 0.10.16
</return>
</function>

<function name="gst_video_format_new_caps">
<description>
Creates a new #GstCaps object based on the parameters provided.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> the #GstVideoFormat describing the raw video format
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of video
</parameter_description>
</parameter>
<parameter name="framerate_n">
<parameter_description> numerator of frame rate
</parameter_description>
</parameter>
<parameter name="framerate_d">
<parameter_description> denominator of frame rate
</parameter_description>
</parameter>
<parameter name="par_n">
<parameter_description> numerator of pixel aspect ratio
</parameter_description>
</parameter>
<parameter name="par_d">
<parameter_description> denominator of pixel aspect ratio
</parameter_description>
</parameter>
</parameters>
<return> a new #GstCaps object, or NULL if there was an error
</return>
</function>

<function name="gst_audio_fixate_channel_positions">
<description>
Custom fixate function. Elements that implement some sort of
channel conversion algorithm should use this function for
fixating on GstAudioChannelPosition properties. It will take
care of equal channel positioning (left/right). Caller g_free()s
the return value. The input properties may be (and are supposed
to be) unfixed.
Note that this function is mostly a hack because we currently
have no way to add default fixation functions for new GTypes.


</description>
<parameters>
<parameter name="str">
<parameter_description> a #GstStructure containing a (possibly unfixed)
&quot;channel-positions&quot; field.
</parameter_description>
</parameter>
</parameters>
<return> fixed values that the caller could use as a fixed
set of #GstAudioChannelPosition values.
</return>
</function>

<function name="gst_sdp_message_add_zone">
<description>
Add time zone information to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="adj_time">
<parameter_description> the NTP time that a time zone adjustment happens
</parameter_description>
</parameter>
<parameter name="typed_time">
<parameter_description> the offset from the time when the session was first scheduled
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_base_rtp_audio_payload_set_sample_options">
<description>
Sets the options for sample based audio codecs.


</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
<parameter name="sample_size">
<parameter_description> Size per sample in bytes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_get_email">
<description>
Get the email with number @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an email index
</parameter_description>
</parameter>
</parameters>
<return> the email at position @idx.
</return>
</function>

<function name="gst_rtp_payload_info_for_name">
<description>
Get the #GstRTPPayloadInfo for @media and @encoding_name. This function is
mostly used to get the default clock-rate and bandwidth for dynamic payload
types specified with @media and @encoding name.

The search for @encoding_name will be performed in a case insensitve way.


</description>
<parameters>
<parameter name="media">
<parameter_description> the media to find
</parameter_description>
</parameter>
<parameter name="encoding_name">
<parameter_description> the encoding name to find
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTPPayloadInfo or NULL when no info could be found.
</return>
</function>

<function name="gst_rtp_buffer_get_payload_subbuffer">
<description>
Create a subbuffer of the payload of the RTP packet in @buffer. @offset bytes
are skipped in the payload and the subbuffer will be of size @len.
If @len is -1 the total payload starting from @offset if subbuffered.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset in the payload
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length in the payload
</parameter_description>
</parameter>
</parameters>
<return> A new buffer with the specified data of the payload.

Since: 0.10.10
</return>
</function>

<function name="gst_riff_parse_strf_auds">
<description>
Parses an audio stream´s strf structure plus optionally some
extradata from input data. This function takes ownership of @buf.
use.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="strf">
<parameter_description> a pointer (returned by this function) to a filled-in
strf/auds structure. Caller should free it.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer (returned by this function) to a buffer
containing extradata for this particular stream (e.g.
codec initialization data).
</parameter_description>
</parameter>
</parameters>
<return> TRUE if parsing succeeded, otherwise FALSE. The stream
should be skipped on error, but it is not fatal.
</return>
</function>

<function name="gst_netaddress_get_ip4_address">
<description>
Get the IPv4 address stored in @naddr into @address.


</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a location to store the address.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a location to store the port.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the address could be retrieved.
</return>
</function>

<function name="gst_rtp_buffer_get_extension_data">
<description>
Get the extension data. @bits will contain the extension 16 bits of custom
data. @data will point to the data in the extension and @wordlen will contain
the length of @data in 32 bits words.

If @buffer did not contain an extension, this function will return %FALSE
with @bits, @data and @wordlen unchanged.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="bits">
<parameter_description> location for result bits
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for data
</parameter_description>
</parameter>
<parameter name="wordlen">
<parameter_description> location for length of @data in 32 bits words
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer had the extension bit set.

Since: 0.10.15
</return>
</function>

<function name="gst_rtsp_connection_connect">
<description>
Attempt to connect to the url of @conn made with
gst_rtsp_connection_create(). If @timeout is #NULL this function can block
forever. If @timeout contains a valid timeout, this function will return
#GST_RTSP_ETIMEOUT after the timeout expired.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection 
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a #GTimeVal timeout
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK when a connection could be made.
</return>
</function>

<function name="gst_pb_utils_get_encoder_description">
<description>
Returns: a newly-allocated description string, or NULL on error. Free

</description>
<parameters>
<parameter name="caps">
<parameter_description> the (fixed) #GstCaps for which an encoder description is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_rtp_buffer_get_payload_buffer">
<description>
Create a buffer of the payload of the RTP packet in @buffer. This function
will internally create a subbuffer of @buffer so that a memcpy can be
avoided.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> A new buffer with the data of the payload.
</return>
</function>

<function name="gst_rtcp_buffer_get_packet_count">
<description>
Get the number of RTCP packets in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a valid RTCP buffer
</parameter_description>
</parameter>
</parameters>
<return> the number of RTCP packets in @buffer.
</return>
</function>

<function name="gst_mixer_list_tracks">
<description>
Returns: A #GList consisting of zero or more #GstMixerTracks.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) to get the tracks from.
</parameter_description>
</parameter>
</parameters>
<return> A #GList consisting of zero or more #GstMixerTracks.
</return>
</function>

<function name="gst_property_probe_probe_and_get_values">
<description>
Check whether the given property requires a new probe. If so,
fo the probe. After that, retrieve a value list. Meant as a
utility function that wraps the above functions.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object.
</parameter_description>
</parameter>
<parameter name="pspec">
<parameter_description> The #GParamSpec property identifier.
</parameter_description>
</parameter>
</parameters>
<return> the list of valid values for this property.
</return>
</function>

<function name="gst_tag_to_id3_tag">
<description>
Looks up the ID3v2 tag for a GStreamer tag.


</description>
<parameters>
<parameter name="gst_tag">
<parameter_description> GStreamer tag to convert to vorbiscomment tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding ID3v2 tag or NULL if none exists.
</return>
</function>

<function name="gst_rtp_buffer_get_header_len">
<description>
Return the total length of the header in @buffer. This include the length of
the fixed header, the CSRC list and the extension header.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The total length of the header in @buffer.
</return>
</function>

<function name="gst_rtp_buffer_set_timestamp">
<description>
Set the timestamp of the RTP packet in @buffer to @timestamp.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> the new timestamp
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_transport_parse">
<description>
Parse the RTSP transport string @str into @transport.


</description>
<parameters>
<parameter name="str">
<parameter_description> a transport string
</parameter_description>
</parameter>
<parameter name="transport">
<parameter_description> a #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_audio_structure_set_int">
<description>
Do not use anymore.

Deprecated: use gst_structure_set()

</description>
<parameters>
<parameter name="structure">
<parameter_description> a #GstStructure
</parameter_description>
</parameter>
<parameter name="flag">
<parameter_description> a set of #GstAudioFieldFlag
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_set_callback">
<description>
Sets the given callback function on the buffer. This function
will be called every time a segment has been written to a device.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to set the callback on
</parameter_description>
</parameter>
<parameter name="cb">
<parameter_description> the callback to set
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_bye_add_ssrcs">
<description>
Adds @len SSRCs in @ssrc to BYE @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> an array of SSRCs to add
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> number of elements in @ssrc
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the all the SSRCs were added. This function can return %FALSE if
the max MTU is exceeded or the number of sources blocks is greater than
#GST_RTCP_MAX_BYE_SSRC_COUNT.
</return>
</function>

<function name="gst_video_get_size">
<description>
Inspect the caps of the provided pad and retrieve the width and height of
the video frames it is configured for.

The pad needs to have negotiated caps containing width and height properties.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pointer to a #GstPad
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> pointer to integer to hold pixel width of the video frames (output)
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> pointer to integer to hold pixel height of the video frames (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the width and height could be retrieved.

</return>
</function>

<function name="GstPropertyProbe">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_set_rb">
<description>
Set the @nth new report block in @packet with the given values.

Note: Not implemented.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR or RR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth report block to set
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> data source being reported
</parameter_description>
</parameter>
<parameter name="fractionlost">
<parameter_description> fraction lost since last SR/RR
</parameter_description>
</parameter>
<parameter name="packetslost">
<parameter_description> the cumululative number of packets lost
</parameter_description>
</parameter>
<parameter name="exthighestseq">
<parameter_description> the extended last sequence number received
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> the interarrival jitter
</parameter_description>
</parameter>
<parameter name="lsr">
<parameter_description> the last SR packet from this source
</parameter_description>
</parameter>
<parameter name="dlsr">
<parameter_description> the delay since last SR packet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_buffer_add_packet">
<description>
Add a new packet of @type to @buffer. @packet will point to the newly created 
packet.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a valid RTCP buffer
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GstRTCPType of the new packet
</parameter_description>
</parameter>
<parameter name="packet">
<parameter_description> pointer to new packet
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the packet could be created. This function returns %FALSE
if the max mtu is exceeded for the buffer.
</return>
</function>

<function name="gst_mixer_message_parse_mute_toggled">
<description>
Extracts the contents of a mute-toggled bus message. Reads
the GstMixerTrack that has changed, and the new value of the mute
flag.

The GstMixerTrack remains valid until the message is freed.

Since: 0.10.14

</description>
<parameters>
<parameter name="message">
<parameter_description> A mute-toggled change notification message.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> Pointer to hold a GstMixerTrack object, or NULL.
</parameter_description>
</parameter>
<parameter name="mute">
<parameter_description> A pointer to a gboolean variable, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_remove">
<description>
Removes the packet pointed to by @packet.

Note: Not implemented.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_riff_parse_file_header">
<description>
Reads the first few bytes from the provided buffer, checks
if this stream is a RIFF stream, and determines document type.
This function takes ownership of @buf so it should not be used anymore
after calling this function.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input buffer from which the file header will be parsed,
should be at least 12 bytes long.
</parameter_description>
</parameter>
<parameter name="doctype">
<parameter_description> a fourcc (returned by this function) to indicate the
type of document (according to the header).
</parameter_description>
</parameter>
</parameters>
<return> FALSE if this is not a RIFF stream (in which case the
caller should error out; we already throw an error), or TRUE
if it is.
</return>
</function>

<function name="gst_base_rtp_audio_payload_set_sample_based">
<description>
Tells #GstBaseRTPAudioPayload that the child element is for a sample based
audio codec


</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_basertppayload_set_options">
<description>
Set the rtp options of the payloader. These options will be set in the caps
of the payloader. Subclasses must call this method before calling
gst_basertppayload_push() or gst_basertppayload_set_outcaps().

</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="media">
<parameter_description> the media type (typically &quot;audio&quot; or &quot;video&quot;)
</parameter_description>
</parameter>
<parameter name="dynamic">
<parameter_description> if the payload type is dynamic
</parameter_description>
</parameter>
<parameter name="encoding_name">
<parameter_description> the encoding name 
</parameter_description>
</parameter>
<parameter name="clock_rate">
<parameter_description> the clock rate of the media
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_message_parse_data">
<description>
Parse the data message @msg and store the channel in @channel.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> location to hold the channel
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_rtsp_connection_read">
<description>
Attempt to read @size bytes into @data from the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to read
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_rtsp_message_init_response">
<description>
Initialize @msg with @code and @reason.

When @reason is #NULL, the default reason for @code will be used.

When @request is not #NULL, the relevant headers will be copied to the new
response message.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> the status code
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> the status reason or #NULL
</parameter_description>
</parameter>
<parameter name="request">
<parameter_description> the request that triggered the response or #NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_ring_buffer_commit">
<description>
Same as gst_ring_buffer_commit_full() but with a in_samples and out_samples
equal to @len, ignoring accum.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to commit
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample position of the data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to commit
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of samples in the data to commit
</parameter_description>
</parameter>
</parameters>
<return> The number of samples written to the ringbuffer or -1 on
error.

MT safe.
</return>
</function>

<function name="gst_sdp_media_set_media">
<description>
Set the media description of @media to @med.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="med">
<parameter_description> the media description
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_rtsp_url_get_port">
<description>
Get the port number of @url.


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> location to hold the port
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_transport_init">
<description>
Initialize @transport so that it can be used.


</description>
<parameters>
<parameter name="transport">
<parameter_description> a #GstRTSPTransport
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK. 
</return>
</function>

<function name="gst_audio_is_buffer_framed">
<description>
Check if the buffer size is a whole multiple of the frame size.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the caps from
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> the #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if buffer size is multiple.
</return>
</function>

<function name="gst_video_frame_rate">
<description>
A convenience function to retrieve a GValue holding the framerate
from the caps on a pad.

The pad needs to have negotiated caps containing a framerate property.


</description>
<parameters>
<parameter name="pad">
<parameter_description> pointer to a #GstPad
</parameter_description>
</parameter>
</parameters>
<return> NULL if the pad has no configured caps or the configured caps
do not contain a framerate.

</return>
</function>

<function name="gst_rtsp_url_set_port">
<description>
Set the port number in @url to @port.


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtsp_header_as_text">
<description>
Convert @field to a string.


</description>
<parameters>
<parameter name="field">
<parameter_description> a #GstRTSPHeaderField
</parameter_description>
</parameter>
</parameters>
<return> a string representation of @field.
</return>
</function>

<function name="gst_sdp_message_set_information">
<description>
Set the information in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="information">
<parameter_description> the information
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_bandwidths_len">
<description>
Get the number of bandwidth fields in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of bandwidths in @media.
</return>
</function>

<function name="gst_video_orientation_set_hflip">
<description>
Set the horizontal flipping state (%TRUE for flipped) for the given object.

Since: 0.10.11

</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flip">
<parameter_description> use flipping
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports flipping
</return>
</function>

<function name="gst_mixer_message_get_type">
<description>
Check a bus message to see if it is a GstMixer notification
message and return the GstMixerMessageType identifying which
type of notification it is.


</description>
<parameters>
<parameter name="message">
<parameter_description> A GstMessage to inspect.
</parameter_description>
</parameter>
</parameters>
<return> The type of the GstMixerMessage, or GST_MIXER_MESSAGE_NONE
if the message is not a GstMixer notification.

Since: 0.10.14
</return>
</function>

<function name="GstColorBalance">
<description>
Fired when the value of the indicated channel has changed.

</description>
<parameters>
<parameter name="colorbalance">
<parameter_description> The GstColorBalance instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The #GstColorBalanceChannel
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The new value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_get_information">
<description>
Get the information in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtp_buffer_get_payload">
<description>
Get a pointer to the payload data in @buffer. This pointer is valid as long
as a reference to @buffer is held.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> A pointer to the payload data in @buffer.
</return>
</function>

<function name="gst_sdp_media_set_port_info">
<description>
Set the port information in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port number
</parameter_description>
</parameter>
<parameter name="num_ports">
<parameter_description> the number of ports
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_sdp_message_phones_len">
<description>
Get the number of phones in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of phones in @msg.
</return>
</function>

<function name="gst_rtcp_packet_rr_get_ssrc">
<description>
Get the ssrc field of the RR @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid RR #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> the ssrc.
</return>
</function>

<function name="gst_mixer_message_parse_options_list_changed">
<description>
Extracts the GstMixerOptions whose value list has changed from an
options-list-changed bus notification message.

The options object returned remains valid until the message is freed. You
do not need to unref it.

Since: 0.10.18

</description>
<parameters>
<parameter name="message">
<parameter_description> A volume-changed change notification message.
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> Pointer to hold a GstMixerOptions object, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_f32_fft">
<description>
This performs the FFT on @timedata and puts the result in @freqdata.

@timedata must have as many samples as specified with the @len parameter while
allocating the #GstFFTF32 instance with gst_fft_f32_new().

@freqdata must be large enough to hold @len/2 + 1 #GstFFTF32Complex frequency
domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF32 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Buffer of the samples in the time domain
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Target buffer for the samples in the frequency domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_sink_create_ringbuffer">
<description>
Create and return the #GstRingBuffer for @sink. This function will call the
::create_ringbuffer vmethod and will set @sink as the parent of the returned
buffer (see gst_object_set_parent()).


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink.
</parameter_description>
</parameter>
</parameters>
<return> The new ringbuffer of @sink.
</return>
</function>

<function name="gst_base_rtp_audio_payload_push">
<description>
Create an RTP buffer and store @payload_len bytes of @data as the
payload. Set the timestamp on the new buffer to @timestamp before pushing
the buffer downstream.


</description>
<parameters>
<parameter name="baseaudiopayload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to set as payload
</parameter_description>
</parameter>
<parameter name="payload_len">
<parameter_description> length of payload
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> a #GstClockTime
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn

Since: 0.10.13
</return>
</function>

<function name="gst_ring_buffer_open_device">
<description>
Open the audio device associated with the ring buffer. Does not perform any
setup on the device. You must open the device before acquiring the ring
buffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be opened, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_rtsp_message_new">
<description>
Create a new initialized #GstRTSPMessage.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a location for the new #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult. Free with gst_rtsp_message_free().
</return>
</function>

<function name="gst_ring_buffer_debug_spec_caps">
<description>
Print debug info about the parsed caps in @spec to the debug log.

</description>
<parameters>
<parameter name="spec">
<parameter_description> the spec to debug
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_duration_from_pad_buffer">
<description>
Calculate length in nanoseconds of audio buffer @buf based on capabilities of
@pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the caps from
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> the #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> the length.
</return>
</function>

<function name="gst_fft_f64_window">
<description>
This calls the window function @window on the @timedata sample buffer.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF64 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Time domain samples
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> Window function to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_pad_to">
<description>
Set the amount of padding in the RTP packet in @buffer to
@len. If @len is 0, the padding is removed.

NOTE: This function does not work correctly.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the new amount of padding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_strresult">
<description>
Convert @result in a human readable string.


</description>
<parameters>
<parameter name="result">
<parameter_description> a #GstRTSPResult
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string. g_free() after usage.
</return>
</function>

<function name="gst_fft_s32_fft">
<description>
This performs the FFT on @timedata and puts the result in @freqdata.

@timedata must have as many samples as specified with the @len parameter while
allocating the #GstFFTS32 instance with gst_fft_s32_new().

@freqdata must be large enough to hold @len/2 + 1 #GstFFTS32Complex frequency
domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS32 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Buffer of the samples in the time domain
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Target buffer for the samples in the frequency domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_riff_init">
<description>
Initialize riff library.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_range_parse">
<description>
Parse @rangestr to a #GstRTSPTimeRange.


</description>
<parameters>
<parameter name="rangestr">
<parameter_description> a range string to parse
</parameter_description>
</parameter>
<parameter name="range">
<parameter_description> location to hold the #GstRTSPTimeRange result
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_base_rtp_depayload_push_ts">
<description>
Push @out_buf to the peer of @filter. This function takes ownership of
@out_buf.

Unlike gst_base_rtp_depayload_push(), this function will apply @timestamp
on the outgoing buffer, using the configured clock_rate to convert the
timestamp to a valid GStreamer clock time.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstBaseRTPDepayload
</parameter_description>
</parameter>
<parameter name="timestamp">
<parameter_description> an RTP timestamp to apply
</parameter_description>
</parameter>
<parameter name="out_buf">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn.
</return>
</function>

<function name="gst_property_probe_probe_property_name">
<description>
Runs a probe on the property specified by %name.

</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe to check.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> name of the property.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_connection_free">
<description>
Close and free @conn.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_video_format_get_component_height">
<description>
Calculates the height of the component.  See
@gst_video_format_get_row_stride for a description
of the component index.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of video
</parameter_description>
</parameter>
</parameters>
<return> height of component @component
</return>
</function>

<function name="gst_rtsp_connection_create">
<description>
Create a newly allocated #GstRTSPConnection from @url and store it in @conn.
The connection will not yet attempt to connect to @url, use
gst_rtsp_connection_connect().


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl 
</parameter_description>
</parameter>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK when @conn contains a valid connection.
</return>
</function>

<function name="gst_tag_register_musicbrainz_tags">
<description>
Registers additional musicbrainz-specific tags with the GStreamer tag
system. Plugins and applications that use these tags should call this
function before using them. Can be called multiple times.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_get_seq">
<description>
Get the sequence number of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The sequence number in host order.
</return>
</function>

<function name="gst_video_format_has_alpha">
<description>
Returns: TRUE if @format has an alpha channel

</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @format has an alpha channel
</return>
</function>

<function name="gst_rtsp_connection_clear_auth_params">
<description>
Clear the list of authentication directives stored in @conn.

Since: 0.10.20

</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_set_volume">
<description>
Sets the volume on each channel in a track. Short note about
naming: a track is defined as one separate stream owned by
the mixer/element, such as &apos;Line-in&apos; or &apos;Microphone&apos;. A
channel is said to be a mono-stream inside this track. A
stereo track thus contains two channels.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer (a #GstElement) that owns the track.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> The #GstMixerTrack to set the volume on.
</parameter_description>
</parameter>
<parameter name="volumes">
<parameter_description> an array of integers (of size track-&amp;gt;num_channels)
that gives the wanted volume for each channel in
this track.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_status_as_text">
<description>
Convert @code to a string.


</description>
<parameters>
<parameter name="code">
<parameter_description> a #GstRTSPStatusCode
</parameter_description>
</parameter>
</parameters>
<return> a string representation of @code.
</return>
</function>

<function name="gst_rtcp_packet_sdes_first_item">
<description>
Move to the first SDES item in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there was a first item.
</return>
</function>

<function name="gst_rtsp_message_parse_request">
<description>
Parse the request message @msg and store the values @method, @uri and
@version. The result locations can be #NULL if one is not interested in its
value.

@uri remains valid for as long as @msg is valid and unchanged.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> location to hold the method
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> location to hold the uri
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> location to hold the version
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_sdp_message_init">
<description>
Initialize @msg so that its contents are as if it was freshly allocated
with gst_sdp_message_new(). This function is mostly used to initialize a message
allocated on the stack. gst_sdp_message_uninit() undoes this operation.

When this function is invoked on newly allocated data (with malloc or on the
stack), its contents should be set to 0 before calling this function.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_message_times_len">
<description>
Get the number of time information entries in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of time information entries in @msg.
</return>
</function>

<function name="gst_fft_f32_inverse_fft">
<description>
This performs the inverse FFT on @freqdata and puts the result in @timedata.

@freqdata must have @len/2 + 1 samples, where @len is the parameter specified
while allocating the #GstFFTF32 instance with gst_fft_f32_new().

@timedata must be large enough to hold @len time domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF32 instance for this call
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Buffer of the samples in the frequency domain
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Target buffer for the samples in the time domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_format_get_component_offset">
<description>
Calculates the offset (in bytes) of the first pixel of the component
with index @component.  For packed formats, this will typically be a
small integer (0, 1, 2, 3).  For planar formats, this will be a
(relatively) large offset to the beginning of the second or third
component planes.  See @gst_video_format_get_row_stride for a description
of the component index.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="component">
<parameter_description> the component index
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of video
</parameter_description>
</parameter>
</parameters>
<return> offset of component @component
</return>
</function>

<function name="gst_rtsp_message_take_body">
<description>
Set the body of @msg to @data and @size. This method takes ownership of
@data.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_video_sink_center_rect">
<description>
Takes @src rectangle and position it at the center of @dst rectangle with or
without @scaling. It handles clipping if the @src rectangle is bigger than
the @dst one and @scaling is set to FALSE.

</description>
<parameters>
<parameter name="src">
<parameter_description> the #GstVideoRectangle describing the source area
</parameter_description>
</parameter>
<parameter name="dst">
<parameter_description> the #GstVideoRectangle describing the destination area
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a pointer to a #GstVideoRectangle which will receive the result area
</parameter_description>
</parameter>
<parameter name="scaling">
<parameter_description> a #gboolean indicating if scaling should be applied or not
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_riff_read_chunk">
<description>
Reads a single chunk of data. Since 0.10.8 &apos;JUNK&apos; chunks
are skipped automatically.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging).
</parameter_description>
</parameter>
<parameter name="pad">
<parameter_description> pad to pull data from.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset to pull from, incremented by this function.
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> fourcc of the chunk (returned by this function).
</parameter_description>
</parameter>
<parameter name="chunk_data">
<parameter_description> buffer (returned by this function).
</parameter_description>
</parameter>
</parameters>
<return> flow status.
</return>
</function>

<function name="gst_rtp_buffer_validate_data">
<description>
Check if the @data and @size point to the data of a valid RTP packet.
This function checks the length, version and padding of the packet data.
Use this function to validate a packet before using the other functions in
this module.


</description>
<parameters>
<parameter name="data">
<parameter_description> the data to validate
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @data to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the data points to a valid RTP packet.
</return>
</function>

<function name="gst_rtsp_connection_poll">
<description>
Wait up to the specified @timeout for the connection to become available for
at least one of the operations specified in @events. When the function returns
with #GST_RTSP_OK, @revents will contain a bitmask of available operations on
@conn.

@timeout can be #NULL, in which case this function might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="events">
<parameter_description> a bitmask of #GstRTSPEvent flags to check
</parameter_description>
</parameter>
<parameter name="revents">
<parameter_description> location for result flags 
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.

Since: 0.10.15
</return>
</function>

<function name="gst_sdp_message_get_phone">
<description>
Get the phone with number @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> a phone index
</parameter_description>
</parameter>
</parameters>
<return> the phone at position @idx.
</return>
</function>

<function name="gst_rtsp_connection_set_qos_dscp">
<description>
Configure @conn to use the specified DSCP value.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="qos_dscp">
<parameter_description> DSCP value
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.

Since: 0.10.20
</return>
</function>

<function name="gst_pb_utils_get_codec_description">
<description>
Returns: a newly-allocated description string, or NULL on error. Free

</description>
<parameters>
<parameter name="caps">
<parameter_description> the (fixed) #GstCaps for which an format description is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_ring_buffer_parse_caps">
<description>
Parse @caps into @spec.


</description>
<parameters>
<parameter name="spec">
<parameter_description> a spec
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> a #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the caps could be parsed.
</return>
</function>

<function name="gst_rtcp_packet_sr_set_sender_info">
<description>
Set the given values in the SR packet @packet.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the SSRC 
</parameter_description>
</parameter>
<parameter name="ntptime">
<parameter_description> the NTP time
</parameter_description>
</parameter>
<parameter name="rtptime">
<parameter_description> the RTP time
</parameter_description>
</parameter>
<parameter name="packet_count">
<parameter_description> the packet count
</parameter_description>
</parameter>
<parameter name="octet_count">
<parameter_description> the octect count
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_video_format_convert">
<description>
Converts among various #GstFormat types.  This function handles
GST_FORMAT_BYTES, GST_FORMAT_TIME, and GST_FORMAT_DEFAULT.  For
raw video, GST_FORMAT_DEFAULT corresponds to video frames.  This
function can be to handle pad queries of the type GST_QUERY_CONVERT.

Since: 0.10.16


</description>
<parameters>
<parameter name="format">
<parameter_description> a #GstVideoFormat
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of video
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of video
</parameter_description>
</parameter>
<parameter name="fps_n">
<parameter_description> frame rate numerator
</parameter_description>
</parameter>
<parameter name="fps_d">
<parameter_description> frame rate denominator
</parameter_description>
</parameter>
<parameter name="src_format">
<parameter_description> #GstFormat of the @src_value
</parameter_description>
</parameter>
<parameter name="src_value">
<parameter_description> value to convert
</parameter_description>
</parameter>
<parameter name="dest_format">
<parameter_description> #GstFormat of the @dest_value
</parameter_description>
</parameter>
<parameter name="dest_value">
<parameter_description> pointer to destination value
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the conversion was successful.
</return>
</function>

<function name="gst_fft_s16_new">
<description>
This returns a new #GstFFTS16 instance with the given parameters. It makes
sense to keep one instance for several calls for speed reasons.

@len must be even and to get the best performance a product of
2, 3 and 5. To get the next number with this characteristics use
gst_fft_next_fast_length().


</description>
<parameters>
<parameter name="len">
<parameter_description> Length of the FFT in the time domain
</parameter_description>
</parameter>
<parameter name="inverse">
<parameter_description> %TRUE if the #GstFFTS16 instance should be used for the inverse FFT
</parameter_description>
</parameter>
</parameters>
<return> a new #GstFFTS16 instance.
</return>
</function>

<function name="gst_video_parse_caps_pixel_aspect_ratio">
<description>
Extracts the pixel aspect ratio from @caps and places the values in
the locations pointed to by @par_n and @par_d.  Returns TRUE if the
values could be parsed correctly, FALSE if not.

This function can be used with #GstCaps that have any media type; it
is not limited to formats handled by #GstVideoFormat.

Since: 0.10.16


</description>
<parameters>
<parameter name="caps">
<parameter_description> pointer to a #GstCaps instance
</parameter_description>
</parameter>
<parameter name="par_n">
<parameter_description> pointer to numerator of pixel aspect ratio (output)
</parameter_description>
</parameter>
<parameter name="par_d">
<parameter_description> pointer to denominator of pixel aspect ratio (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps was parsed correctly.
</return>
</function>

<function name="gst_install_plugins_context_set_xid">
<description>
This function is for X11-based applications (such as most Gtk/Qt
applications on linux/unix) only. You can use it to tell the external
installer the XID of your main application window. That way the installer
can make its own window transient to your application window during the
installation.

If set, the XID will be passed to the installer via a --transient-for=XID
command line option.

Gtk+/Gnome application should be able to obtain the XID of the top-level
window like this:
&amp;lt;programlisting&amp;gt;
##include &amp;lt;gtk/gtk.h&amp;gt;
##ifdef GDK_WINDOWING_X11
##include &amp;lt;gdk/gdkx.h&amp;gt;
##endif
...
##ifdef GDK_WINDOWING_X11
xid = GDK_WINDOW_XWINDOW (GTK_WIDGET (application_window)-&amp;gt;window);
##endif
...
&amp;lt;/programlisting&amp;gt;

Since: 0.10.12

</description>
<parameters>
<parameter name="ctx">
<parameter_description> a #GstInstallPluginsContext
</parameter_description>
</parameter>
<parameter name="xid">
<parameter_description> the XWindow ID (XID) of the top-level application
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_rtp_audio_payload_set_frame_based">
<description>
Tells #GstBaseRTPAudioPayload that the child element is for a frame based
audio codec


</description>
<parameters>
<parameter name="basertpaudiopayload">
<parameter_description> a pointer to the element.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_allocate_data">
<description>
Allocate enough data in @buffer to hold an RTP packet with @csrc_count CSRCs,
a payload length of @payload_len and padding of @pad_len.
MALLOCDATA of @buffer will be overwritten and will not be freed. 
All other RTP header fields will be set to 0/FALSE.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
<parameter name="payload_len">
<parameter_description> the length of the payload
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_set_caps_channel_positions_list">
<description>
Sets a (possibly non-fixed) list of possible audio channel
positions (given in pos) on the given caps. Each of the
structures of the caps, after this function has been called,
will contain a &quot;channel-positions&quot; field with an array.
Each value in the array will contain each of the values given
in the pos array. Note that the size of the caps might be
increased by this, since each structure with a &quot;channel-
positions&quot; field needs to have a fixed &quot;channels&quot; field.
The input caps is not required to have this.

</description>
<parameters>
<parameter name="caps">
<parameter_description> #GstCaps to set the list of channel positions on.
</parameter_description>
</parameter>
<parameter name="pos">
<parameter_description> the array containing one or more possible audio
channel positions that we should add in each value
of the array in the given structure.
</parameter_description>
</parameter>
<parameter name="num_positions">
<parameter_description> the number of values in pos.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_audio_get_channel_positions">
<description>
Retrieves a number of (fixed!) audio channel positions from
the provided #GstStructure and returns it as a newly allocated
array. The caller should g_free () this array. The caller
should also check that the members in this #GstStructure are
indeed &quot;fixed&quot; before calling this function.


</description>
<parameters>
<parameter name="str">
<parameter_description> A #GstStructure to retrieve channel positions from.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated array containing the channel
positions as provided in the given #GstStructure. Returns
NULL on error.
</return>
</function>

<function name="gst_rtcp_packet_sdes_first_entry">
<description>
Move to the first SDES entry in the current item.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was a first entry.
</return>
</function>

<function name="gst_sdp_media_set_key">
<description>
Adds the encryption information to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the encryption type
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the encryption data
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_tag_list_from_vorbiscomment_buffer">
<description>
Creates a new tag list that contains the information parsed out of a
vorbiscomment packet.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> buffer to convert
</parameter_description>
</parameter>
<parameter name="id_data">
<parameter_description> identification data at start of stream
</parameter_description>
</parameter>
<parameter name="id_data_length">
<parameter_description> length of identification data
</parameter_description>
</parameter>
<parameter name="vendor_string">
<parameter_description> pointer to a string that should take the vendor string
of this vorbis comment or NULL if you don&apos;t need it.
</parameter_description>
</parameter>
</parameters>
<return> A new #GstTagList with all tags that could be extracted from the
given vorbiscomment buffer or NULL on error.
</return>
</function>

<function name="gst_rtcp_unix_to_ntp">
<description>
Converts a UNIX timestamp in nanoseconds to an NTP time. The caller should
pass a value with nanoseconds since 1970. The NTP time will, in the upper
32 bits, contain the number of seconds since 1900 and, in the lower 32
bits, the fractional seconds. The resulting value can be used as an ntptime
for constructing SR RTCP packets.


</description>
<parameters>
<parameter name="unixtime">
<parameter_description> an UNIX timestamp in nanoseconds
</parameter_description>
</parameter>
</parameters>
<return> the NTP time for @gsttime.
</return>
</function>

<function name="gst_rtp_buffer_get_payload_type">
<description>
Get the payload type of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The payload type.
</return>
</function>

<function name="gst_rtsp_connection_receive">
<description>
Attempt to read into @message from the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the message to read
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_video_orientation_set_vcenter">
<description>
Set the vertical centering offset for the given object.

Since: 0.10.11

</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> centering offset
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports centering
</return>
</function>

<function name="gst_video_orientation_set_hcenter">
<description>
Set the horizontal centering offset for the given object.

Since: 0.10.11

</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="center">
<parameter_description> centering offset
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports centering
</return>
</function>

<function name="gst_ring_buffer_advance">
<description>
Subclasses should call this function to notify the fact that 
@advance segments are now processed by the device.

MT safe.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to advance
</parameter_description>
</parameter>
<parameter name="advance">
<parameter_description> the number of segments written
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_release">
<description>
Free the resources of the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to release
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be released, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_rtp_buffer_set_padding">
<description>
Set the padding bit on the RTP packet in @buffer to @padding.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="padding">
<parameter_description> the new padding
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_delay">
<description>
Get the number of samples queued in the audio device. This is
usually less than the segment size but can be bigger when the
implementation uses another internal buffer between the audio
device.

For playback ringbuffers this is the amount of samples transfered from the
ringbuffer to the device but still not played.

For capture ringbuffers this is the amount of samples in the device that are
not yet transfered to the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to query
</parameter_description>
</parameter>
</parameters>
<return> The number of samples queued in the audio device.

MT safe.
</return>
</function>

<function name="gst_rtsp_message_set_body">
<description>
Set the body of @msg to a copy of @data.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_ring_buffer_start">
<description>
Start processing samples from the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to start
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be started, FALSE on error.

MT safe.
</return>
</function>

<function name="read_packet_header">
<description>
Read the packet headers for the packet pointed to by @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a packet
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @packet pointed to a valid header.
</return>
</function>

<function name="gst_fft_f64_new">
<description>
This returns a new #GstFFTF64 instance with the given parameters. It makes
sense to keep one instance for several calls for speed reasons.

@len must be even and to get the best performance a product of
2, 3 and 5. To get the next number with this characteristics use
gst_fft_next_fast_length().


</description>
<parameters>
<parameter name="len">
<parameter_description> Length of the FFT in the time domain
</parameter_description>
</parameter>
<parameter name="inverse">
<parameter_description> %TRUE if the #GstFFTF64 instance should be used for the inverse FFT
</parameter_description>
</parameter>
</parameters>
<return> a new #GstFFTF64 instance.
</return>
</function>

<function name="gst_sdp_message_add_bandwidth">
<description>
Add the specified bandwidth information to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="bwtype">
<parameter_description> the bandwidth modifier type
</parameter_description>
</parameter>
<parameter name="bandwidth">
<parameter_description> the bandwidth in kilobits per second
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtsp_message_parse_response">
<description>
Parse the response message @msg and store the values @code, @reason and
@version. The result locations can be #NULL if one is not interested in its
value.

@reason remains valid for as long as @msg is valid and unchanged.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> location to hold the status code
</parameter_description>
</parameter>
<parameter name="reason">
<parameter_description> location to hold the status reason
</parameter_description>
</parameter>
<parameter name="version">
<parameter_description> location to hold the version
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_sdp_message_set_uri">
<description>
Set the URI in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the URI
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_formats_len">
<description>
Get the number of formats in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the number of formats in @media.
</return>
</function>

<function name="gst_rtp_buffer_compare_seqnum">
<description>
Compare two sequence numbers, taking care of wraparounds. This function
Returns: a negative value if @seqnum1 is bigger than @seqnum2, 0 if they

</description>
<parameters>
<parameter name="seqnum1">
<parameter_description> a sequence number
</parameter_description>
</parameter>
<parameter name="seqnum2">
<parameter_description> a sequence number
</parameter_description>
</parameter>
</parameters>
<return> a negative value if @seqnum1 is bigger than @seqnum2, 0 if they
are equal or a positive value if @seqnum1 is smaller than @segnum2.

Since: 0.10.15
</return>
</function>

<function name="gst_ring_buffer_stop">
<description>
Stop processing samples from the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to stop
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be stopped, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_install_plugins_installation_in_progress">
<description>
Checks whether plugin installation (initiated by this application only)
is currently in progress.


</description>
<parameters>
</parameters>
<return> TRUE if plugin installation is in progress, otherwise FALSE

Since: 0.10.12
</return>
</function>

<function name="gst_rtsp_message_new_data">
<description>
Create a new data #GstRTSPMessage with @channel and store the
result message in @msg. 


</description>
<parameters>
<parameter name="msg">
<parameter_description> a location for the new #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> the channel
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult. Free with gst_rtsp_message_free().
</return>
</function>

<function name="gst_missing_uri_sink_installer_detail_new">
<description>
Returns: a newly-allocated detail string, or NULL on error. Free string

</description>
<parameters>
<parameter name="protocol">
<parameter_description> the URI protocol the missing source needs to implement,
e.g. &quot;http&quot; or &quot;mms&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

Since: 0.10.15
</return>
</function>

<function name="gst_missing_element_installer_detail_new">
<description>
Returns: a newly-allocated detail string, or NULL on error. Free string

</description>
<parameters>
<parameter name="factory_name">
<parameter_description> the name of the missing element (element factory),
e.g. &quot;videoscale&quot; or &quot;cdparanoiasrc&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

Since: 0.10.15
</return>
</function>

<function name="gst_rtsp_connection_send">
<description>
Attempt to send @message to the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="message">
<parameter_description> the message to send
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_sdp_message_get_version">
<description>
Get the version in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_audio_clock_reset">
<description>
Inform @clock that future calls to #GstAudioClockGetTimeFunc will return values
starting from @time. The clock will update an internal offset to make sure that
future calls to internal_time will return an increasing result as required by
the #GstClock object.

</description>
<parameters>
<parameter name="clock">
<parameter_description> a #GstAudioClock
</parameter_description>
</parameter>
<parameter name="time">
<parameter_description> a #GstClockTime
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_fft_next_fast_length">
<description>
Returns: the next fast FFT length.

</description>
<parameters>
<parameter name="n">
<parameter_description> Number for which the next fast length should be returned
</parameter_description>
</parameter>
</parameters>
<return> the next fast FFT length.

</return>
</function>

<function name="gst_install_plugins_async">
<description>
Requests plugin installation without blocking. Once the plugins have been
installed or installation has failed, @func will be called with the result
of the installation and your provided @user_data pointer.

This function requires a running GLib/Gtk main loop. If you are not
running a GLib/Gtk main loop, make sure to regularly call
g_main_context_iteration(NULL,FALSE).

The installer strings that make up @detail are typically obtained by
calling gst_missing_plugin_message_get_installer_detail() on missing-plugin
messages that have been caught on a pipeline&apos;s bus or created by the
application via the provided API, such as gst_missing_element_message_new().

It is possible to request the installation of multiple missing plugins in
one go (as might be required if there is a demuxer for a certain format
installed but no suitable video decoder and no suitable audio decoder).


</description>
<parameters>
<parameter name="details">
<parameter_description> NULL-terminated array of installer string details (see below)
</parameter_description>
</parameter>
<parameter name="ctx">
<parameter_description> a #GstInstallPluginsContext, or NULL
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to call when the installer program returns
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the user data to pass to @func when called, or NULL
</parameter_description>
</parameter>
</parameters>
<return> result code whether an external installer could be started

Since: 0.10.12
</return>
</function>

<function name="gst_rtcp_packet_get_rb">
<description>
Parse the values of the @nth report block in @packet and store the result in
the values.

</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SR or RR #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the nth report block in @packet
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> result for data source being reported
</parameter_description>
</parameter>
<parameter name="fractionlost">
<parameter_description> result for fraction lost since last SR/RR
</parameter_description>
</parameter>
<parameter name="packetslost">
<parameter_description> result for the cumululative number of packets lost
</parameter_description>
</parameter>
<parameter name="exthighestseq">
<parameter_description> result for the extended last sequence number received
</parameter_description>
</parameter>
<parameter name="jitter">
<parameter_description> result for the interarrival jitter
</parameter_description>
</parameter>
<parameter name="lsr">
<parameter_description> result for the last SR packet from this source
</parameter_description>
</parameter>
<parameter name="dlsr">
<parameter_description> result for the delay since last SR packet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_get_bandwidth">
<description>
Get the bandwidth at index @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the bandwidth index
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPBandwidth.
</return>
</function>

<function name="gst_sdp_message_get_uri">
<description>
Get the URI in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_sdp_media_uninit">
<description>
Free all resources allocated in @media. @media should not be used anymore after
this function. This function should be used when @media was allocated on the
stack and initialized with gst_sdp_media_init().


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtp_buffer_calc_payload_len">
<description>
Calculate the length of the payload of an RTP packet with size @packet_len,
a padding of @pad_len and a @csrc_count CSRC entries.


</description>
<parameters>
<parameter name="packet_len">
<parameter_description> the length of the total RTP packet
</parameter_description>
</parameter>
<parameter name="pad_len">
<parameter_description> the amount of padding
</parameter_description>
</parameter>
<parameter name="csrc_count">
<parameter_description> the number of CSRC entries
</parameter_description>
</parameter>
</parameters>
<return> The length of the payload of an RTP packet  with given parameters.
</return>
</function>

<function name="gst_rtp_buffer_set_ssrc">
<description>
Set the SSRC on the RTP packet in @buffer to @ssrc.

</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> the new SSRC
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_ntp_to_unix">
<description>
Converts an NTP time to UNIX nanoseconds. @ntptime can typically be
the NTP time of an SR RTCP message and contains, in the upper 32 bits, the
number of seconds since 1900 and, in the lower 32 bits, the fractional
seconds. The resulting value will be the number of nanoseconds since 1970.


</description>
<parameters>
<parameter name="ntptime">
<parameter_description> an NTP timestamp
</parameter_description>
</parameter>
</parameters>
<return> the UNIX time for @ntptime in nanoseconds.
</return>
</function>

<function name="gst_basertppayload_push">
<description>
Push @buffer to the peer element of the payloader. The SSRC, payload type,
seqnum and timestamp of the RTP buffer will be updated first.

This function takes ownership of @buffer.


</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn.
</return>
</function>

<function name="gst_sdp_message_get_attribute_val_n">
<description>
Get the @nth attribute with key @key in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key
</parameter_description>
</parameter>
<parameter name="nth">
<parameter_description> the index
</parameter_description>
</parameter>
</parameters>
<return> the attribute value of the @nth attribute with @key.
</return>
</function>

<function name="gst_install_plugins_sync">
<description>
Requests plugin installation and block until the plugins have been
installed or installation has failed.

This function should almost never be used, it only exists for cases where
a non-GLib main loop is running and the user wants to run it in a separate
thread and marshal the result back asynchronously into the main thread
using the other non-GLib main loop. You should almost always use
gst_install_plugins_async() instead of this function.


</description>
<parameters>
<parameter name="details">
<parameter_description> NULL-terminated array of installer string details
</parameter_description>
</parameter>
<parameter name="ctx">
<parameter_description> a #GstInstallPluginsContext, or NULL
</parameter_description>
</parameter>
</parameters>
<return> the result of the installation.

Since: 0.10.12
</return>
</function>

<function name="gst_rtp_buffer_get_version">
<description>
Get the version number of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The version of @buffer.
</return>
</function>

<function name="gst_audio_frame_byte_size">
<description>
Calculate byte size of an audio frame.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the #GstPad to get the caps from
</parameter_description>
</parameter>
</parameters>
<return> the byte size, or 0 if there was an error
</return>
</function>

<function name="gst_fft_s16_free">
<description>
This frees the memory allocated for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS16 instance for this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mixer_mixer_changed">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the list of available
mixer tracks for a given mixer object has changed. Applications should
rebuild their interface when they receive this message.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

Since: 0.10.18

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) which has changed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_message_get_zone">
<description>
Get time zone information with index @idx from @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the zone index
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPZone.
</return>
</function>

<function name="gst_basertppayload_set_outcaps">
<description>
Configure the output caps with the optional parameters.

Variable arguments should be in the form field name, field type
(as a GType), value(s).  The last variable argument should be NULL.


</description>
<parameters>
<parameter name="payload">
<parameter_description> a #GstBaseRTPPayload
</parameter_description>
</parameter>
<parameter name="fieldname">
<parameter_description> the first field name or %NULL
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> field values
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the caps could be set.
</return>
</function>

<function name="gst_audio_check_channel_positions">
<description>
This functions checks if the given channel positions are valid. Channel
positions are valid if:
&amp;lt;itemizedlist&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;No channel positions appears twice or all positions are %GST_AUDIO_CHANNEL_POSITION_NONE.
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;Either all or none of the channel positions are %GST_AUDIO_CHANNEL_POSITION_NONE.
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;listitem&amp;gt;&amp;lt;para&amp;gt;%GST_AUDIO_CHANNEL_POSITION_FRONT_MONO and %GST_AUDIO_CHANNEL_POSITION_LEFT or %GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT don&apos;t appear together in the given positions.
&amp;lt;/para&amp;gt;&amp;lt;/listitem&amp;gt;
&amp;lt;/itemizedlist&amp;gt;

Since: 0.10.20


</description>
<parameters>
<parameter name="pos">
<parameter_description> An array of #GstAudioChannelPosition.
</parameter_description>
</parameter>
<parameter name="channels">
<parameter_description> The number of elements in @pos.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given channel positions are valid
and %FALSE otherwise.
</return>
</function>

<function name="gst_tag_from_id3_tag">
<description>
Looks up the GStreamer tag for a ID3v2 tag.


</description>
<parameters>
<parameter name="id3_tag">
<parameter_description> ID3v2 tag to convert to GStreamer tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding GStreamer tag or NULL if none exists.
</return>
</function>

<function name="gst_mixer_record_toggled">
<description>
This function is called by the mixer implementation to produce
a notification message on the bus indicating that the given track
has changed recording state.

This function only works for GstElements that are implementing the
GstMixer interface, and the element needs to have been provided a bus.

</description>
<parameters>
<parameter name="mixer">
<parameter_description> the #GstMixer (a #GstElement) that owns the track
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> the GstMixerTrack that has changed recording state.
</parameter_description>
</parameter>
<parameter name="record">
<parameter_description> the new state of the record flag on the track
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_message_unset">
<description>
Unset the concents of @msg so that it becomes an uninitialized
#GstRTSPMessage again. This function is mostly used in combination with 
gst_rtsp_message_init_request(), gst_rtsp_message_init_response() and
gst_rtsp_message_init_data() on stack allocated #GstRTSPMessage structures.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_base_rtp_depayload_push">
<description>
Push @out_buf to the peer of @filter. This function takes ownership of
@out_buf.

Unlike gst_base_rtp_depayload_push_ts(), this function will not apply
any timestamp on the outgoing buffer.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstBaseRTPDepayload
</parameter_description>
</parameter>
<parameter name="out_buf">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> a #GstFlowReturn.
</return>
</function>

<function name="gst_color_balance_value_changed">
<description>
A helper function called by implementations of the GstColorBalance
interface. It fires the #GstColorBalance::value-changed signal on the
instance, and the #GstColorBalanceChannel::value-changed signal on the
channel object.

</description>
<parameters>
<parameter name="balance">
<parameter_description> A #GstColorBalance instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> A #GstColorBalanceChannel whose value has changed
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> The new value of the channel
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pb_utils_get_sink_description">
<description>
Returns: a newly-allocated description string, or NULL on error. Free

</description>
<parameters>
<parameter name="protocol">
<parameter_description> the protocol the sink element needs to handle, e.g. &quot;http&quot;
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_install_plugins_context_free">
<description>
Frees a #GstInstallPluginsContext.

Since: 0.10.12

</description>
<parameters>
<parameter name="ctx">
<parameter_description> a #GstInstallPluginsContext
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtp_buffer_validate">
<description>
Check if the data pointed to by @buffer is a valid RTP packet using
gst_rtp_buffer_validate_data().


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer to validate
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer is a valid RTP packet.
</return>
</function>

<function name="gst_rtsp_message_get_body">
<description>
Get the body of @msg. @data remains valid for as long as @msg is valid and
unchanged.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> location for the data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> location for the size of @data
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_mixer_message_parse_option_changed">
<description>
Extracts the GstMixerOptions and new value from a option-changed bus notification
message.

The options and value returned remain valid until the message is freed.

Since: 0.10.14

</description>
<parameters>
<parameter name="message">
<parameter_description> A volume-changed change notification message.
</parameter_description>
</parameter>
<parameter name="options">
<parameter_description> Pointer to hold a GstMixerOptions object, or NULL.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> Result location to receive the new options value, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_pb_utils_get_decoder_description">
<description>
Returns: a newly-allocated description string, or NULL on error. Free

</description>
<parameters>
<parameter name="caps">
<parameter_description> the (fixed) #GstCaps for which an decoder description is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_sdp_message_set_key">
<description>
Adds the encryption information to @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the encryption type
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the encryption data
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_rtsp_message_free">
<description>
Free the memory used by @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_property_probe_needs_probe_name">
<description>
Same as gst_property_probe_needs_probe ().


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe object to which the given property belongs.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the property to check.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the property needs a new probe, FALSE if not.
</return>
</function>

<function name="gst_sdp_message_get_media">
<description>
Get the media description at index @idx in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> the index
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPMedia.
</return>
</function>

<function name="gst_rtsp_base64_encode">
<description>
Encode a sequence of binary data into its Base-64 stringified representation.


</description>
<parameters>
<parameter name="data">
<parameter_description> the binary data to encode
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of @data
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated, zero-terminated Base-64 encoded string
representing @data.
</return>
</function>

<function name="gst_rtcp_packet_sdes_get_ssrc">
<description>
Get the SSRC of the current SDES item.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> the SSRC of the current item.
</return>
</function>

<function name="gst_rtcp_packet_move_to_next">
<description>
Move the packet pointer @packet to the next packet in the payload.
Use gst_rtcp_buffer_get_first_packet() to initialize @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @packet is pointing to a valid packet after calling this
function.
</return>
</function>

<function name="gst_fft_f32_new">
<description>
This returns a new #GstFFTF32 instance with the given parameters. It makes
sense to keep one instance for several calls for speed reasons.

@len must be even and to get the best performance a product of
2, 3 and 5. To get the next number with this characteristics use
gst_fft_next_fast_length().


</description>
<parameters>
<parameter name="len">
<parameter_description> Length of the FFT in the time domain
</parameter_description>
</parameter>
<parameter name="inverse">
<parameter_description> %TRUE if the #GstFFTF32 instance should be used for the inverse FFT
</parameter_description>
</parameter>
</parameters>
<return> a new #GstFFTF32 instance.
</return>
</function>

<function name="gst_netaddress_set_ip6_address">
<description>
Set @naddr with the IPv6 @address and @port pair.

</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> an IPv6 network address.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a port number to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_prepare_read">
<description>
Returns: FALSE if the buffer is not started.

</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to read from
</parameter_description>
</parameter>
<parameter name="segment">
<parameter_description> the segment to read
</parameter_description>
</parameter>
<parameter name="readptr">
<parameter_description> the pointer to the memory where samples can be read
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the number of bytes to read
</parameter_description>
</parameter>
</parameters>
<return> FALSE if the buffer is not started.

MT safe.
</return>
</function>

<function name="gst_sdp_media_as_text">
<description>
Convert the contents of @media to a text string.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> A dynamically allocated string representing the media.
</return>
</function>

<function name="gst_sdp_message_set_origin">
<description>
Configure the SDP origin in @msg with the given parameters.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> the user name
</parameter_description>
</parameter>
<parameter name="sess_id">
<parameter_description> a session id
</parameter_description>
</parameter>
<parameter name="sess_version">
<parameter_description> a session version
</parameter_description>
</parameter>
<parameter name="nettype">
<parameter_description> a network type
</parameter_description>
</parameter>
<parameter name="addrtype">
<parameter_description> an address type
</parameter_description>
</parameter>
<parameter name="addr">
<parameter_description> an address
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_x_overlay_expose">
<description>
Tell an overlay that it has been exposed. This will redraw the current frame
in the drawable even if the pipeline is PAUSED.

</description>
<parameters>
<parameter name="overlay">
<parameter_description> a #GstXOverlay to expose.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_audio_src_get_slave_method">
<description>
Get the current slave method used by @src.


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc
</parameter_description>
</parameter>
</parameters>
<return> The current slave method used by @src.

Since: 0.10.20
</return>
</function>

<function name="gst_tag_parse_extended_comment">
<description>
Convenience function to parse a GST_TAG_EXTENDED_COMMENT string and
separate it into its components.

If successful, @key, @lang and/or @value will be set to newly allocated
strings that you need to free with g_free() when done. @key and @lang
may also be set to NULL by this function if there is no key or no language
code in the extended comment string.


</description>
<parameters>
<parameter name="ext_comment">
<parameter_description> an extended comment string, see #GST_TAG_EXTENDED_COMMENT
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> return location for the comment description key, or NULL
</parameter_description>
</parameter>
<parameter name="lang">
<parameter_description> return location for the comment ISO-639 language code, or NULL
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> return location for the actual comment string, or NULL
</parameter_description>
</parameter>
<parameter name="fail_if_no_key">
<parameter_description> whether to fail if strings are not in key=value form
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the string could be parsed, otherwise FALSE

Since: 0.10.10
</return>
</function>

<function name="gst_video_format_parse_caps">
<description>
Determines the #GstVideoFormat of @caps and places it in the location
pointed to by @format.  Extracts the size of the video and places it
in the location pointed to by @width and @height.  If @caps does not
represent one of the raw video formats listed in #GstVideoFormat, the
function will fail and return FALSE.

Since: 0.10.16


</description>
<parameters>
<parameter name="caps">
<parameter_description> the #GstCaps to parse
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the #GstVideoFormat of the video represented by @caps (output)
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> the width of the video represented by @caps, may be NULL (output)
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> the height of the video represented by @caps, may be NULL (output)
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @caps was parsed correctly.
</return>
</function>

<function name="gst_base_audio_sink_get_slave_method">
<description>
Get the current slave method used by @sink.


</description>
<parameters>
<parameter name="sink">
<parameter_description> a #GstBaseAudioSink
</parameter_description>
</parameter>
</parameters>
<return> The current slave method used by @sink.

Since: 0.10.16
</return>
</function>

<function name="gst_mixer_get_option">
<description>
Get the current value of a name/value option in the mixer.


</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer (a #GstElement) that owns the optionlist.
</parameter_description>
</parameter>
<parameter name="opts">
<parameter_description> The #GstMixerOptions that we operate on.
</parameter_description>
</parameter>
</parameters>
<return> current value of the name/value option.
</return>
</function>

<function name="str_case_hash">
<description>
Hashes @key in a case-insensitive manner.


</description>
<parameters>
<parameter name="key">
<parameter_description> ASCII string to hash
</parameter_description>
</parameter>
</parameters>
<return> the hash code.
</return>
</function>

<function name="GstBaseAudioSrc">
<description>
Actual configured audio latency in microseconds.

Since: 0.10.20

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_is_missing_plugin_message">
<description>
Checks whether @msg is a missing plugins message.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstMessage
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @msg is a missing-plugins message, otherwise %FALSE.
</return>
</function>

<function name="gst_rtp_buffer_get_timestamp">
<description>
Get the timestamp of the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> The timestamp in host order.
</return>
</function>

<function name="gst_rtsp_connection_write">
<description>
Attempt to write @size bytes of @data to the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush().


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to write
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_cdda_base_src_add_track">
<description>
CDDA sources use this function from their start vfunc to announce the
available data and audio tracks to the base source class. The caller
should allocate @track on the stack, the base source will do a shallow
copy of the structure (and take ownership of the taglist if there is one).


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstCddaBaseSrc
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> address of #GstCddaBaseSrcTrack to add
</parameter_description>
</parameter>
</parameters>
<return> FALSE on error, otherwise TRUE.
</return>
</function>

<function name="gst_property_probe_get_properties">
<description>
Get a list of properties for which probing is supported.


</description>
<parameters>
<parameter name="probe">
<parameter_description> the #GstPropertyProbe to get the properties for.
</parameter_description>
</parameter>
</parameters>
<return> the list of properties for which probing is supported
by this element.
</return>
</function>

<function name="gst_rtsp_url_get_request_uri">
<description>
Get a newly allocated string describing the request URI for @url. 


</description>
<parameters>
<parameter name="url">
<parameter_description> a #GstRTSPUrl
</parameter_description>
</parameter>
</parameters>
<return> a string with the request URI. g_free() after usage.
</return>
</function>

<function name="gst_sdp_media_get_media">
<description>
Get the media description of @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the media description.
</return>
</function>

<function name="gst_rtp_buffer_get_marker">
<description>
Check if the marker bit is set on the RTP packet in @buffer.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> the buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if @buffer has the marker bit set.
</return>
</function>

<function name="gst_sdp_message_get_attribute_val">
<description>
Get the first attribute with key @key in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the key
</parameter_description>
</parameter>
</parameters>
<return> the attribute value of the first attribute with @key.
</return>
</function>

<function name="gst_sdp_media_get_attribute">
<description>
Get the attribute at position @idx in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the #GstSDPAttribute at position @idx.
</return>
</function>

<function name="gst_rtsp_method_as_text">
<description>
Convert @method to a string.


</description>
<parameters>
<parameter name="method">
<parameter_description> a #GstRTSPMethod
</parameter_description>
</parameter>
</parameters>
<return> a string representation of @method.
</return>
</function>

<function name="gst_sdp_message_new">
<description>
Allocate a new GstSDPMessage and store the result in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> pointer to new #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_tuner_frequency_changed">
<description>
Called by elements implementing the #GstTuner interface when the
configured frequency changes. Fires the #GstTuner::frequency-changed
signal on the tuner, and the #GstTunerChannel::frequency-changed signal
on the channel.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> A #GstTuner instance
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The current #GstTunerChannel
</parameter_description>
</parameter>
<parameter name="frequency">
<parameter_description> The new frequency setting
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_bye_add_ssrc">
<description>
Add @ssrc to the BYE @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
<parameter name="ssrc">
<parameter_description> an SSRC to add
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the ssrc was added. This function can return %FALSE if
the max MTU is exceeded or the number of sources blocks is greater than
#GST_RTCP_MAX_BYE_SSRC_COUNT.
</return>
</function>

<function name="gst_tuner_set_channel">
<description>
Tunes the object to the given channel.

</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) that owns the channel.
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> the channel to tune to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_missing_plugin_message_get_description">
<description>
Returns: a newly-allocated description string, or NULL on error. Free

</description>
<parameters>
<parameter name="msg">
<parameter_description> a missing-plugin #GstMessage of type #GST_MESSAGE_ELEMENT
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated description string, or NULL on error. Free
string with g_free() when not needed any longer.
</return>
</function>

<function name="gst_rtcp_packet_bye_get_reason_len">
<description>
Get the length of the reason string.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid BYE #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> The length of the reason string or 0 when there is no reason string
present.
</return>
</function>

<function name="gst_missing_uri_source_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that a source element for a particular URI protocol is missing. This
function is mainly for use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the URI protocol the missing source needs to implement,
e.g. &quot;http&quot; or &quot;mms&quot;
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_netaddress_set_ip4_address">
<description>
Set @naddr with the IPv4 @address and @port pair.

</description>
<parameters>
<parameter name="naddr">
<parameter_description> a network address
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> an IPv4 network address.
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a port number to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_tuner_get_norm">
<description>
Get the current video norm from the given tuner object for the
currently selected channel.


</description>
<parameters>
<parameter name="tuner">
<parameter_description> the #GstTuner (a #GstElement) to get the current norm from.
</parameter_description>
</parameter>
</parameters>
<return> the current norm.
</return>
</function>

<function name="gst_video_orientation_get_vflip">
<description>
Get the vertical flipping state (%TRUE for flipped) from the given object.

Since: 0.10.11

</description>
<parameters>
<parameter name="video_orientation">
<parameter_description> #GstVideoOrientation interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flip">
<parameter_description> return location for the result
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case the element supports flipping
</return>
</function>

<function name="gst_sdp_media_get_connection">
<description>
Get the connection at position @idx in @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> an index
</parameter_description>
</parameter>
</parameters>
<return> the #GstSDPConnection at position @idx.
</return>
</function>

<function name="gst_fft_f64_fft">
<description>
This performs the FFT on @timedata and puts the result in @freqdata.

@timedata must have as many samples as specified with the @len parameter while
allocating the #GstFFTF64 instance with gst_fft_f64_new().

@freqdata must be large enough to hold @len/2 + 1 #GstFFTF64Complex frequency
domain samples.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF64 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Buffer of the samples in the time domain
</parameter_description>
</parameter>
<parameter name="freqdata">
<parameter_description> Target buffer for the samples in the frequency domain
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_message_init_request">
<description>
Initialize @msg as a request message with @method and @uri. To clear @msg
again, use gst_rtsp_message_unset().


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> the request method to use
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the uri of the request
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_ring_buffer_pause">
<description>
Pause processing samples from the ringbuffer.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to pause
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the device could be paused, FALSE on error.

MT safe.
</return>
</function>

<function name="gst_audio_filter_class_add_pad_templates">
<description>
Convenience function to add pad templates to this element class, with
@allowed_caps as the caps that can be handled.

This function is usually used from within a GObject base_init function.

Since: 0.10.12

</description>
<parameters>
<parameter name="klass">
<parameter_description> an #GstAudioFilterClass
</parameter_description>
</parameter>
<parameter name="allowed_caps">
<parameter_description> what formats the filter can handle, as #GstCaps
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtcp_packet_sdes_next_item">
<description>
Move to the next SDES item in @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid SDES #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there was a next item.
</return>
</function>

<function name="gst_fft_s32_window">
<description>
This calls the window function @window on the @timedata sample buffer.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTS32 instance for this call
</parameter_description>
</parameter>
<parameter name="timedata">
<parameter_description> Time domain samples
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> Window function to apply
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_missing_element_message_new">
<description>
Creates a missing-plugin message for @element to notify the application
that a certain required element is missing. This function is mainly for
use in plugins.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement posting the message
</parameter_description>
</parameter>
<parameter name="factory_name">
<parameter_description> the name of the missing element (element factory),
e.g. &quot;videoscale&quot; or &quot;cdparanoiasrc&quot;
</parameter_description>
</parameter>
</parameters>
<return> a new #GstMessage, or NULL on error
</return>
</function>

<function name="gst_mixer_message_parse_volume_changed">
<description>
Parses a volume-changed notification message and extracts the track object
it refers to, as well as an array of volumes and the size of the volumes array.

The track object remains valid until the message is freed.

The caller must free the array returned in the volumes parameter using g_free
when they are done with it.

Since: 0.10.14

</description>
<parameters>
<parameter name="message">
<parameter_description> A volume-changed change notification message.
</parameter_description>
</parameter>
<parameter name="track">
<parameter_description> Pointer to hold a GstMixerTrack object, or NULL.
</parameter_description>
</parameter>
<parameter name="volumes">
<parameter_description> A pointer to receive an array of gint values, or NULL.
</parameter_description>
</parameter>
<parameter name="num_channels">
<parameter_description> Result location to receive the number of channels, or NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_missing_decoder_installer_detail_new">
<description>
Returns: a newly-allocated detail string, or NULL on error. Free string

</description>
<parameters>
<parameter name="decode_caps">
<parameter_description> the (fixed) caps for which a decoder element is needed
</parameter_description>
</parameter>
</parameters>
<return> a newly-allocated detail string, or NULL on error. Free string
with g_free() when not needed any longer.

Since: 0.10.15
</return>
</function>

<function name="gst_sdp_message_as_text">
<description>
Convert the contents of @msg to a text string.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> A dynamically allocated string representing the SDP description.
</return>
</function>

<function name="gst_rtsp_message_append_headers">
<description>
Append the currently configured headers in @msg to the #GString @str suitable
for transmission.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstRTSPMessage
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_sdp_message_add_media">
<description>
Adds @media to the array of medias in @msg. This function takes ownership of
the contents of @media so that @media will have to be reinitialized with
gst_media_init() before it can be used again.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
<parameter name="media">
<parameter_description> a #GstSDPMedia to add
</parameter_description>
</parameter>
</parameters>
<return> a #GstSDPResult.
</return>
</function>

<function name="gst_mixer_get_mixer_flags">
<description>
Get the set of supported flags for this mixer implementation.


</description>
<parameters>
<parameter name="mixer">
<parameter_description> The #GstMixer implementation
</parameter_description>
</parameter>
</parameters>
<return> A set of or-ed GstMixerFlags for supported features.
</return>
</function>

<function name="gst_rtsp_connection_next_timeout">
<description>
Calculate the next timeout for @conn, storing the result in @timeout.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK.
</return>
</function>

<function name="gst_rtcp_packet_get_padding">
<description>
Get the packet padding of the packet pointed to by @packet.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a valid #GstRTCPPacket
</parameter_description>
</parameter>
</parameters>
<return> If the packet has the padding bit set.
</return>
</function>

<function name="GstTuner">
<description>
Reports that the signal strength has changed.

See Also: gst_tuner_signal_strength()

</description>
<parameters>
<parameter name="tuner">
<parameter_description> The element providing the GstTuner interface
</parameter_description>
</parameter>
<parameter name="channel">
<parameter_description> The current #GstTunerChannel
</parameter_description>
</parameter>
<parameter name="signal">
<parameter_description> The new signal strength (an integer)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_sdp_media_add_format">
<description>
Add the format information to @media.


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> the format
</parameter_description>
</parameter>
</parameters>
<return> #GST_SDP_OK.
</return>
</function>

<function name="gst_rtsp_url_parse">
<description>
Parse the RTSP @urlstr into a newly allocated #GstRTSPUrl. Free after usage
with gst_rtsp_url_free().


</description>
<parameters>
<parameter name="urlstr">
<parameter_description> the url string to parse
</parameter_description>
</parameter>
<parameter name="url">
<parameter_description> location to hold the result.
</parameter_description>
</parameter>
</parameters>
<return> a #GstRTSPResult.
</return>
</function>

<function name="gst_tag_from_vorbis_tag">
<description>
Looks up the GStreamer tag for a vorbiscomment tag.


</description>
<parameters>
<parameter name="vorbis_tag">
<parameter_description> vorbiscomment tag to convert to GStreamer tag
</parameter_description>
</parameter>
</parameters>
<return> The corresponding GStreamer tag or NULL if none exists.
</return>
</function>

<function name="gst_riff_parse_strh">
<description>
Parses a strh structure from input data. Takes ownership of @buf.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="strh">
<parameter_description> a pointer (returned by this function) to a filled-in
strh structure. Caller should free it.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if parsing succeeded, otherwise FALSE. The stream
should be skipped on error, but it is not fatal.
</return>
</function>

<function name="gst_base_audio_src_set_slave_method">
<description>
Controls how clock slaving will be performed in @src. 

Since: 0.10.20

</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc
</parameter_description>
</parameter>
<parameter name="method">
<parameter_description> the new slave method
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_ring_buffer_commit_full">
<description>
Commit @in_samples samples pointed to by @data to the ringbuffer @buf. 

@in_samples and @out_samples define the rate conversion to perform on the the
samples in @data. For negative rates, @out_samples must be negative and
@in_samples positive.

When @out_samples is positive, the first sample will be written at position @sample
in the ringbuffer. When @out_samples is negative, the last sample will be written to
@sample in reverse order.

@out_samples does not need to be a multiple of the segment size of the ringbuffer
although it is recommended for optimal performance. 

@accum will hold a temporary accumulator used in rate conversion and should be
set to 0 when this function is first called. In case the commit operation is
interrupted, one can resume the processing by passing the previously returned
@accum value back to this function.


</description>
<parameters>
<parameter name="buf">
<parameter_description> the #GstRingBuffer to commit
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample position of the data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to commit
</parameter_description>
</parameter>
<parameter name="in_samples">
<parameter_description> the number of samples in the data to commit
</parameter_description>
</parameter>
<parameter name="out_samples">
<parameter_description> the number of samples to write to the ringbuffer
</parameter_description>
</parameter>
<parameter name="accum">
<parameter_description> accumulator for rate conversion.
</parameter_description>
</parameter>
</parameters>
<return> The number of samples written to the ringbuffer or -1 on error. The
number of samples written can be less than @out_samples when @buf was interrupted
with a flush or stop.

Since: 0.10.11.

MT safe.
</return>
</function>

<function name="gst_sdp_message_zones_len">
<description>
Get the number of time zone information entries in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of time zone information entries in @msg.
</return>
</function>

<function name="gst_sdp_message_emails_len">
<description>
Get the number of emails in @msg.


</description>
<parameters>
<parameter name="msg">
<parameter_description> a #GstSDPMessage
</parameter_description>
</parameter>
</parameters>
<return> the number of emails in @msg.
</return>
</function>

<function name="gst_rtsp_connection_read_internal">
<description>
Attempt to read @size bytes into @data from the connected @conn, blocking up to
the specified @timeout. @timeout can be #NULL, in which case this function
might block forever.

This function can be cancelled with gst_rtsp_connection_flush() only if
@allow_interrupt is set.


</description>
<parameters>
<parameter name="conn">
<parameter_description> a #GstRTSPConnection
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to read
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="timeout">
<parameter_description> a timeout value or #NULL
</parameter_description>
</parameter>
<parameter name="allow_interrupt">
<parameter_description> can the pending read be interrupted
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK on success.
</return>
</function>

<function name="gst_base_audio_src_create_ringbuffer">
<description>
Create and return the #GstRingBuffer for @src. This function will call the
::create_ringbuffer vmethod and will set @src as the parent of the returned
buffer (see gst_object_set_parent()).


</description>
<parameters>
<parameter name="src">
<parameter_description> a #GstBaseAudioSrc.
</parameter_description>
</parameter>
</parameters>
<return> The new ringbuffer of @src.
</return>
</function>

<function name="gst_sdp_media_get_proto">
<description>
Get the transport protocol of @media


</description>
<parameters>
<parameter name="media">
<parameter_description> a #GstSDPMedia
</parameter_description>
</parameter>
</parameters>
<return> the transport protocol of @media.
</return>
</function>

<function name="gst_color_balance_list_channels">
<description>
Retrieve a list of the available channels.


</description>
<parameters>
<parameter name="balance">
<parameter_description> A #GstColorBalance instance
</parameter_description>
</parameter>
</parameters>
<return> A GList containing pointers to #GstColorBalanceChannel objects.
The list is owned by the #GstColorBalance instance and must not
be freed.
</return>
</function>

<function name="gst_riff_parse_chunk">
<description>
Reads a single chunk.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input buffer.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset in the buffer in the caller. Is incremented
by the read size by this function.
</parameter_description>
</parameter>
<parameter name="fourcc">
<parameter_description> fourcc (returned by this function0 of the chunk.
</parameter_description>
</parameter>
<parameter name="chunk_data">
<parameter_description> buffer (returned by the function) containing the
chunk data.
</parameter_description>
</parameter>
</parameters>
<return> the fourcc tag of this chunk, or FALSE on error
</return>
</function>

<function name="gst_riff_parse_strf_vids">
<description>
Parses a video stream´s strf structure plus optionally some
extradata from input data. This function takes ownership of @buf.


</description>
<parameters>
<parameter name="element">
<parameter_description> caller element (used for debugging/error).
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> input data to be used for parsing, stripped from header.
</parameter_description>
</parameter>
<parameter name="strf">
<parameter_description> a pointer (returned by this function) to a filled-in
strf/vids structure. Caller should free it.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer (returned by this function) to a buffer
containing extradata for this particular stream (e.g.
palette, codec initialization data).
</parameter_description>
</parameter>
</parameters>
<return> TRUE if parsing succeeded, otherwise FALSE. The stream
should be skipped on error, but it is not fatal.
</return>
</function>

<function name="gst_fft_f64_free">
<description>
This frees the memory allocated for @self.


</description>
<parameters>
<parameter name="self">
<parameter_description> #GstFFTF64 instance for this call
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_rtsp_transport_get_mime">
<description>
Get the mime type of the transport mode @trans. This mime type is typically
used to generate #GstCaps on buffers.


</description>
<parameters>
<parameter name="trans">
<parameter_description> a #GstRTSPTransMode
</parameter_description>
</parameter>
<parameter name="mime">
<parameter_description> location to hold the result
</parameter_description>
</parameter>
</parameters>
<return> #GST_RTSP_OK. 
</return>
</function>

</root>
