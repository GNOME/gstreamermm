// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/systemclock.h>

_DEFS(gstreamerbasemm,gstbase)

namespace GstBase
{

/** @defgroup GstBaseBaseClasses gstreamerbasemm Base Classes
 *  Wrapped gst-plugins-base base classes (plug-ins derrive from these).
 */

/** @defgroup GstBasePlugins gstreamerbasemm Plugins
 *  Wrapped gst-plugins-base plugins.
 */

/** @defgroup GstBaseInterfaces gstreamerbasemm Interfaces
 *  Wrapped gst-plugins-base interfaces.
 */

/** GstBase::AudioClock â€” Helper object for implementing audio clocks.
 * GstBase::AudioClock makes it easy for elements to implement a Gst::Clock,
 * they simply need to provide a slot that returns the current clock time.
 *
 * This object is internally used to implement the clock in
 * GstBase::BaseAudioSink.
 *
 * Last reviewed on 2006-09-27 (0.10.12).
 */
class AudioClock : public Gst::SystemClock
{
  _CLASS_GOBJECT(AudioClock, GstAudioClock, GST_AUDIO_CLOCK, Gst::SystemClock, GstSystemClock)
  _CUSTOM_DTOR()

public:
  /** For example,
   * Gst::ClockTime on_get_time(const Glib::RefPtr<Gst::Clock>& clock);.
   * This function will be called whenever the current clock time needs to be
   * calculated. If this function returns Gst::CLOCK_TIME_NONE, the last
   * reported time will be returned by the clock.
   *
   * @param clock The GstBase::AudioClock.
   */
  typedef sigc::slot< Gst::ClockTime, const Glib::RefPtr<Gst::Clock>& > SlotGetTime;

protected:
  AudioClock(const Glib::ustring& name, const SlotGetTime& time_slot);

public:
  /** Create a new GstBase::AudioClock instance. Whenever the clock time should
   * be calculated it will call @a time_slot. When @a time_slot returns
   * Gst::CLOCK_TIME_NONE, the clock will return the last reported time.
   * 
   *@param name The name of the clock.
   *@param time_slot A slot that returns the time.
   *
   * @return a new GstBase::AudioClock.
   */
  _WRAP_CREATE(const Glib::ustring& name, const SlotGetTime& time_slot);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
private:
  SlotGetTime* slot;
  bool _slot_set(bool mark_set = false);
#endif
};

} // namespace GstBase

