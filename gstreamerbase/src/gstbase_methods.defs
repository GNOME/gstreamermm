;; -*- scheme -*-
; object definitions ...
(define-object Adder
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstAdder")
  (gtype-id "GST_TYPE_ADDER")
)

(define-object AlsaMixerElement
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstAlsaMixerElement")
  (gtype-id "GST_TYPE_ALSA_MIXER_ELEMENT")
)

(define-object AudioClock
  (in-module "Gst")
  (parent "GstSystemClock")
  (c-name "GstAudioClock")
  (gtype-id "GST_TYPE_AUDIO_CLOCK")
)

(define-object AudioConvert
  (in-module "Gst")
  (parent "GstBaseTransform")
  (c-name "GstAudioConvert")
  (gtype-id "GST_TYPE_AUDIO_CONVERT")
)

(define-object AudioFilter
  (in-module "Gst")
  (parent "GstBaseTransform")
  (c-name "GstAudioFilter")
  (gtype-id "GST_TYPE_AUDIO_FILTER")
)

(define-object AudioTestSrc
  (in-module "Gst")
  (parent "GstBaseSrc")
  (c-name "GstAudioTestSrc")
  (gtype-id "GST_TYPE_AUDIO_TEST_SRC")
)

(define-object BaseAudioSink
  (in-module "Gst")
  (parent "GstBaseSink")
  (c-name "GstBaseAudioSink")
  (gtype-id "GST_TYPE_BASE_AUDIO_SINK")
)

(define-object AudioSink
  (in-module "Gst")
  (parent "GstBaseAudioSink")
  (c-name "GstAudioSink")
  (gtype-id "GST_TYPE_AUDIO_SINK")
)

(define-object AlsaSink
  (in-module "Gst")
  (parent "GstAudioSink")
  (c-name "GstAlsaSink")
  (gtype-id "GST_TYPE_ALSA_SINK")
)

(define-object BaseAudioSrc
  (in-module "Gst")
  (parent "GstPushSrc")
  (c-name "GstBaseAudioSrc")
  (gtype-id "GST_TYPE_BASE_AUDIO_SRC")
)

(define-object AudioSrc
  (in-module "Gst")
  (parent "GstBaseAudioSrc")
  (c-name "GstAudioSrc")
  (gtype-id "GST_TYPE_AUDIO_SRC")
)

(define-object AlsaSrc
  (in-module "Gst")
  (parent "GstAudioSrc")
  (c-name "GstAlsaSrc")
  (gtype-id "GST_TYPE_ALSA_SRC")
)

(define-object BaseRTPDepayload
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstBaseRTPDepayload")
  (gtype-id "GST_TYPE_BASE_RTP_DEPAYLOAD")
)

(define-object BaseRTPPayload
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstBaseRTPPayload")
  (gtype-id "GST_TYPE_BASE_RTP_PAYLOAD")
)

(define-object BaseRTPAudioPayload
  (in-module "Gst")
  (parent "GstBaseRTPPayload")
  (c-name "GstBaseRTPAudioPayload")
  (gtype-id "GST_TYPE_BASE_RTP_AUDIO_PAYLOAD")
)

(define-object CddaBaseSrc
  (in-module "Gst")
  (parent "GstPushSrc")
  (c-name "GstCddaBaseSrc")
  (gtype-id "GST_TYPE_CDDA_BASE_SRC")
)

(define-object CdParanoiaSrc
  (in-module "Gst")
  (parent "GstCddaBaseSrc")
  (c-name "GstCdParanoiaSrc")
  (gtype-id "GST_TYPE_CD_PARANOIA_SRC")
)

(define-object ColorBalance
  (in-module "Gst")
  (c-name "GstColorBalance")
  (gtype-id "GST_TYPE_COLOR_BALANCE")
)

(define-object ColorBalanceChannel
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstColorBalanceChannel")
  (gtype-id "GST_TYPE_COLOR_BALANCE_CHANNEL")
)

(define-object ColorBalanceChannel
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstColorBalanceChannel")
  (gtype-id "GST_TYPE_COLOR_BALANCE_CHANNEL")
)

(define-object FFMpegCsp
  (in-module "Gst")
  (parent "GstBaseTransform")
  (c-name "GstFFMpegCsp")
  (gtype-id "GST_TYPE_FF_MPEG_CSP")
)

(define-object GDPDepay
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstGDPDepay")
  (gtype-id "GST_TYPE_GDP_DEPAY")
)

(define-object GDPPay
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstGDPPay")
  (gtype-id "GST_TYPE_GDP_PAY")
)

(define-object GioBaseSink
  (in-module "Gst")
  (parent "GstBaseSink")
  (c-name "GstGioBaseSink")
  (gtype-id "GST_TYPE_GIO_BASE_SINK")
)

(define-object GioBaseSrc
  (in-module "Gst")
  (parent "GstBaseSrc")
  (c-name "GstGioBaseSrc")
  (gtype-id "GST_TYPE_GIO_BASE_SRC")
)

(define-object GioSink
  (in-module "Gst")
  (parent "GstGioBaseSink")
  (c-name "GstGioSink")
  (gtype-id "GST_TYPE_GIO_SINK")
)

(define-object GioSrc
  (in-module "Gst")
  (parent "GstGioBaseSrc")
  (c-name "GstGioSrc")
  (gtype-id "GST_TYPE_GIO_SRC")
)

(define-object GioStreamSink
  (in-module "Gst")
  (parent "GstGioBaseSink")
  (c-name "GstGioStreamSink")
  (gtype-id "GST_TYPE_GIO_STREAM_SINK")
)

(define-object GioStreamSrc
  (in-module "Gst")
  (parent "GstGioBaseSrc")
  (c-name "GstGioStreamSrc")
  (gtype-id "GST_TYPE_GIO_STREAM_SRC")
)

(define-object GnomeVFSSink
  (in-module "Gst")
  (parent "GstBaseSink")
  (c-name "GstGnomeVFSSink")
  (gtype-id "GST_TYPE_GNOME_VFS_SINK")
)

(define-object GnomeVFSSrc
  (in-module "Gst")
  (parent "GstBaseSrc")
  (c-name "GstGnomeVFSSrc")
  (gtype-id "GST_TYPE_GNOME_VFS_SRC")
)

(define-object Mixer
  (in-module "Gst")
  (c-name "GstMixer")
  (gtype-id "GST_TYPE_MIXER")
)

(define-object MixerTrack
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstMixerTrack")
  (gtype-id "GST_TYPE_MIXER_TRACK")
)

(define-object MixerOptions
  (in-module "Gst")
  (parent "GstMixerTrack")
  (c-name "GstMixerOptions")
  (gtype-id "GST_TYPE_MIXER_OPTIONS")
)

(define-object AlsaMixerOptions
  (in-module "Gst")
  (parent "GstMixerOptions")
  (c-name "GstAlsaMixerOptions")
  (gtype-id "GST_TYPE_ALSA_MIXER_OPTIONS")
)

(define-object AlsaMixerTrack
  (in-module "Gst")
  (parent "GstMixerTrack")
  (c-name "GstAlsaMixerTrack")
  (gtype-id "GST_TYPE_ALSA_MIXER_TRACK")
)

(define-object MultiFdSink
  (in-module "Gst")
  (parent "GstBaseSink")
  (c-name "GstMultiFdSink")
  (gtype-id "GST_TYPE_MULTI_FD_SINK")
)

(define-object NetBuffer
  (in-module "Gst")
  (parent "GstBuffer")
  (c-name "GstNetBuffer")
  (gtype-id "GST_TYPE_NET_BUFFER")
)

(define-object OggDemux
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstOggDemux")
  (gtype-id "GST_TYPE_OGG_DEMUX")
)

(define-object OggMux
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstOggMux")
  (gtype-id "GST_TYPE_OGG_MUX")
)

(define-object OggPad
  (in-module "Gst")
  (parent "GstPad")
  (c-name "GstOggPad")
  (gtype-id "GST_TYPE_OGG_PAD")
)

(define-object PlayBaseBin
  (in-module "Gst")
  (parent "GstPipeline")
  (c-name "GstPlayBaseBin")
  (gtype-id "GST_TYPE_PLAY_BASE_BIN")
)

(define-object RingBuffer
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstRingBuffer")
  (gtype-id "GST_TYPE_RING_BUFFER")
)

(define-object SpeexResample
  (in-module "Gst")
  (parent "GstBaseTransform")
  (c-name "GstSpeexResample")
  (gtype-id "GST_TYPE_SPEEX_RESAMPLE")
)

(define-object SsaParse
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstSsaParse")
  (gtype-id "GST_TYPE_SSA_PARSE")
)

(define-object StreamInfo
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstStreamInfo")
  (gtype-id "GST_TYPE_STREAM_INFO")
)

(define-object StreamSelector
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstStreamSelector")
  (gtype-id "GST_TYPE_STREAM_SELECTOR")
)

(define-object SubParse
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstSubParse")
  (gtype-id "GST_TYPE_SUB_PARSE")
)

(define-object TCPClientSink
  (in-module "Gst")
  (parent "GstBaseSink")
  (c-name "GstTCPClientSink")
  (gtype-id "GST_TYPE_TCP_CLIENT_SINK")
)

(define-object TCPClientSrc
  (in-module "Gst")
  (parent "GstPushSrc")
  (c-name "GstTCPClientSrc")
  (gtype-id "GST_TYPE_TCP_CLIENT_SRC")
)

(define-object TCPServerSink
  (in-module "Gst")
  (parent "GstMultiFdSink")
  (c-name "GstTCPServerSink")
  (gtype-id "GST_TYPE_TCP_SERVER_SINK")
)

(define-object TCPServerSrc
  (in-module "Gst")
  (parent "GstPushSrc")
  (c-name "GstTCPServerSrc")
  (gtype-id "GST_TYPE_TCP_SERVER_SRC")
)

(define-object TagDemux
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstTagDemux")
  (gtype-id "GST_TYPE_TAG_DEMUX")
)

(define-object TextOverlay
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstTextOverlay")
  (gtype-id "GST_TYPE_TEXT_OVERLAY")
)

(define-object ClockOverlay
  (in-module "Gst")
  (parent "GstTextOverlay")
  (c-name "GstClockOverlay")
  (gtype-id "GST_TYPE_CLOCK_OVERLAY")
)

(define-object TextRender
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstTextRender")
  (gtype-id "GST_TYPE_TEXT_RENDER")
)

(define-object TheoraDec
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstTheoraDec")
  (gtype-id "GST_TYPE_THEORA_DEC")
)

(define-object TheoraEnc
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstTheoraEnc")
  (gtype-id "GST_TYPE_THEORA_ENC")
)

(define-object TheoraParse
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstTheoraParse")
  (gtype-id "GST_TYPE_THEORA_PARSE")
)

(define-object TimeOverlay
  (in-module "Gst")
  (parent "GstTextOverlay")
  (c-name "GstTimeOverlay")
  (gtype-id "GST_TYPE_TIME_OVERLAY")
)

(define-object Tuner
  (in-module "Gst")
  (c-name "GstTuner")
  (gtype-id "GST_TYPE_TUNER")
)

(define-object TunerChannel
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstTunerChannel")
  (gtype-id "GST_TYPE_TUNER_CHANNEL")
)

(define-object TunerChannel
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstTunerChannel")
  (gtype-id "GST_TYPE_TUNER_CHANNEL")
)

(define-object TunerNorm
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstTunerNorm")
  (gtype-id "GST_TYPE_TUNER_NORM")
)

(define-object TunerNorm
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstTunerNorm")
  (gtype-id "GST_TYPE_TUNER_NORM")
)

(define-object VideoFilter
  (in-module "Gst")
  (parent "GstBaseTransform")
  (c-name "GstVideoFilter")
  (gtype-id "GST_TYPE_VIDEO_FILTER")
)

(define-object VideoRate
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstVideoRate")
  (gtype-id "GST_TYPE_VIDEO_RATE")
)

(define-object VideoScale
  (in-module "Gst")
  (parent "GstBaseTransform")
  (c-name "GstVideoScale")
  (gtype-id "GST_TYPE_VIDEO_SCALE")
)

(define-object VideoSink
  (in-module "Gst")
  (parent "GstBaseSink")
  (c-name "GstVideoSink")
  (gtype-id "GST_TYPE_VIDEO_SINK")
)

(define-object VideoTestSrc
  (in-module "Gst")
  (parent "GstPushSrc")
  (c-name "GstVideoTestSrc")
  (gtype-id "GST_TYPE_VIDEO_TEST_SRC")
)

(define-object Volume
  (in-module "Gst")
  (parent "GstAudioFilter")
  (c-name "GstVolume")
  (gtype-id "GST_TYPE_VOLUME")
)

(define-object VorbisDec
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstVorbisDec")
  (gtype-id "GST_TYPE_VORBIS_DEC")
)

(define-object VorbisEnc
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstVorbisEnc")
  (gtype-id "GST_TYPE_VORBIS_ENC")
)

(define-object VorbisParse
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstVorbisParse")
  (gtype-id "GST_TYPE_VORBIS_PARSE")
)

(define-object VorbisTag
  (in-module "Gst")
  (parent "GstVorbisParse")
  (c-name "GstVorbisTag")
  (gtype-id "GST_TYPE_VORBIS_TAG")
)

(define-object XOverlay
  (in-module "Gst")
  (c-name "GstXOverlay")
  (gtype-id "GST_TYPE_XOVERLAY")
)

;; Enumerations and flags ...

(define-flags AudioFieldFlag
  (in-module "Gst")
  (c-name "GstAudioFieldFlag")
  (gtype-id "GST_TYPE_AUDIO_FIELD_FLAG")
  (values
    '("rate" "GST_AUDIO_FIELD_RATE")
    '("channels" "GST_AUDIO_FIELD_CHANNELS")
    '("endianness" "GST_AUDIO_FIELD_ENDIANNESS")
    '("width" "GST_AUDIO_FIELD_WIDTH")
    '("depth" "GST_AUDIO_FIELD_DEPTH")
    '("signed" "GST_AUDIO_FIELD_SIGNED")
  )
)

(define-enum BaseAudioSinkSlaveMethod
  (in-module "Gst")
  (c-name "GstBaseAudioSinkSlaveMethod")
  (gtype-id "GST_TYPE_BASE_AUDIO_SINK_SLAVE_METHOD")
  (values
    '("resample" "GST_BASE_AUDIO_SINK_SLAVE_RESAMPLE")
    '("skew" "GST_BASE_AUDIO_SINK_SLAVE_SKEW")
    '("none" "GST_BASE_AUDIO_SINK_SLAVE_NONE")
  )
)

(define-enum BaseAudioSrcSlaveMethod
  (in-module "Gst")
  (c-name "GstBaseAudioSrcSlaveMethod")
  (gtype-id "GST_TYPE_BASE_AUDIO_SRC_SLAVE_METHOD")
  (values
    '("resample" "GST_BASE_AUDIO_SRC_SLAVE_RESAMPLE")
    '("retimestamp" "GST_BASE_AUDIO_SRC_SLAVE_RETIMESTAMP")
    '("skew" "GST_BASE_AUDIO_SRC_SLAVE_SKEW")
    '("none" "GST_BASE_AUDIO_SRC_SLAVE_NONE")
  )
)

(define-enum RingBufferState
  (in-module "Gst")
  (c-name "GstRingBufferState")
  (gtype-id "GST_TYPE_RING_BUFFER_STATE")
  (values
    '("stopped" "GST_RING_BUFFER_STATE_STOPPED")
    '("paused" "GST_RING_BUFFER_STATE_PAUSED")
    '("started" "GST_RING_BUFFER_STATE_STARTED")
  )
)

(define-enum RingBufferSegState
  (in-module "Gst")
  (c-name "GstRingBufferSegState")
  (gtype-id "GST_TYPE_RING_BUFFER_SEG_STATE")
  (values
    '("invalid" "GST_SEGSTATE_INVALID")
    '("empty" "GST_SEGSTATE_EMPTY")
    '("filled" "GST_SEGSTATE_FILLED")
    '("partial" "GST_SEGSTATE_PARTIAL")
  )
)

(define-enum BufferFormatType
  (in-module "Gst")
  (c-name "GstBufferFormatType")
  (gtype-id "GST_TYPE_BUFFER_FORMAT_TYPE")
  (values
    '("linear" "GST_BUFTYPE_LINEAR")
    '("float" "GST_BUFTYPE_FLOAT")
    '("mu-law" "GST_BUFTYPE_MU_LAW")
    '("a-law" "GST_BUFTYPE_A_LAW")
    '("ima-adpcm" "GST_BUFTYPE_IMA_ADPCM")
    '("mpeg" "GST_BUFTYPE_MPEG")
    '("gsm" "GST_BUFTYPE_GSM")
    '("iec958" "GST_BUFTYPE_IEC958")
    '("ac3" "GST_BUFTYPE_AC3")
    '("eac3" "GST_BUFTYPE_EAC3")
    '("dts" "GST_BUFTYPE_DTS")
  )
)

(define-enum BufferFormat
  (in-module "Gst")
  (c-name "GstBufferFormat")
  (gtype-id "GST_TYPE_BUFFER_FORMAT")
  (values
    '("unknown" "GST_UNKNOWN")
    '("s8" "GST_S8")
    '("u8" "GST_U8")
    '("s16-le" "GST_S16_LE")
    '("s16-be" "GST_S16_BE")
    '("u16-le" "GST_U16_LE")
    '("u16-be" "GST_U16_BE")
    '("s24-le" "GST_S24_LE")
    '("s24-be" "GST_S24_BE")
    '("u24-le" "GST_U24_LE")
    '("u24-be" "GST_U24_BE")
    '("s32-le" "GST_S32_LE")
    '("s32-be" "GST_S32_BE")
    '("u32-le" "GST_U32_LE")
    '("u32-be" "GST_U32_BE")
    '("s24-3le" "GST_S24_3LE")
    '("s24-3be" "GST_S24_3BE")
    '("u24-3le" "GST_U24_3LE")
    '("u24-3be" "GST_U24_3BE")
    '("s20-3le" "GST_S20_3LE")
    '("s20-3be" "GST_S20_3BE")
    '("u20-3le" "GST_U20_3LE")
    '("u20-3be" "GST_U20_3BE")
    '("s18-3le" "GST_S18_3LE")
    '("s18-3be" "GST_S18_3BE")
    '("u18-3le" "GST_U18_3LE")
    '("u18-3be" "GST_U18_3BE")
    '("float32-le" "GST_FLOAT32_LE")
    '("float32-be" "GST_FLOAT32_BE")
    '("float64-le" "GST_FLOAT64_LE")
    '("float64-be" "GST_FLOAT64_BE")
    '("mu-law" "GST_MU_LAW")
    '("a-law" "GST_A_LAW")
    '("ima-adpcm" "GST_IMA_ADPCM")
    '("mpeg" "GST_MPEG")
    '("gsm" "GST_GSM")
    '("iec958" "GST_IEC958")
    '("ac3" "GST_AC3")
    '("eac3" "GST_EAC3")
    '("dts" "GST_DTS")
  )
)

(define-enum AudioChannelPosition
  (in-module "Gst")
  (c-name "GstAudioChannelPosition")
  (gtype-id "GST_TYPE_AUDIO_CHANNEL_POSITION")
  (values
    '("invalid" "GST_AUDIO_CHANNEL_POSITION_INVALID")
    '("front-mono" "GST_AUDIO_CHANNEL_POSITION_FRONT_MONO")
    '("front-left" "GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT")
    '("front-right" "GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT")
    '("rear-center" "GST_AUDIO_CHANNEL_POSITION_REAR_CENTER")
    '("rear-left" "GST_AUDIO_CHANNEL_POSITION_REAR_LEFT")
    '("rear-right" "GST_AUDIO_CHANNEL_POSITION_REAR_RIGHT")
    '("lfe" "GST_AUDIO_CHANNEL_POSITION_LFE")
    '("front-center" "GST_AUDIO_CHANNEL_POSITION_FRONT_CENTER")
    '("front-left-of-center" "GST_AUDIO_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER")
    '("front-right-of-center" "GST_AUDIO_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER")
    '("side-left" "GST_AUDIO_CHANNEL_POSITION_SIDE_LEFT")
    '("side-right" "GST_AUDIO_CHANNEL_POSITION_SIDE_RIGHT")
    '("none" "GST_AUDIO_CHANNEL_POSITION_NONE")
    '("num" "GST_AUDIO_CHANNEL_POSITION_NUM")
  )
)

(define-enum CddaBaseSrcMode
  (in-module "Gst")
  (c-name "GstCddaBaseSrcMode")
  (gtype-id "GST_TYPE_CDDA_BASE_SRC_MODE")
  (values
    '("normal" "GST_CDDA_BASE_SRC_MODE_NORMAL")
    '("continuous" "GST_CDDA_BASE_SRC_MODE_CONTINUOUS")
  )
)

(define-enum FFTWindow
  (in-module "Gst")
  (c-name "GstFFTWindow")
  (gtype-id "GST_TYPE_FFT_WINDOW")
  (values
    '("rectangular" "GST_FFT_WINDOW_RECTANGULAR")
    '("hamming" "GST_FFT_WINDOW_HAMMING")
    '("hann" "GST_FFT_WINDOW_HANN")
    '("bartlett" "GST_FFT_WINDOW_BARTLETT")
    '("blackman" "GST_FFT_WINDOW_BLACKMAN")
  )
)

(define-enum ColorBalanceType
  (in-module "Gst")
  (c-name "GstColorBalanceType")
  (gtype-id "GST_TYPE_COLOR_BALANCE_TYPE")
  (values
    '("hardware" "GST_COLOR_BALANCE_HARDWARE")
    '("software" "GST_COLOR_BALANCE_SOFTWARE")
  )
)

(define-enum MixerType
  (in-module "Gst")
  (c-name "GstMixerType")
  (gtype-id "GST_TYPE_MIXER_TYPE")
  (values
    '("hardware" "GST_MIXER_HARDWARE")
    '("software" "GST_MIXER_SOFTWARE")
  )
)

(define-enum MixerMessageType
  (in-module "Gst")
  (c-name "GstMixerMessageType")
  (gtype-id "GST_TYPE_MIXER_MESSAGE_TYPE")
  (values
    '("invalid" "GST_MIXER_MESSAGE_INVALID")
    '("mute-toggled" "GST_MIXER_MESSAGE_MUTE_TOGGLED")
    '("record-toggled" "GST_MIXER_MESSAGE_RECORD_TOGGLED")
    '("volume-changed" "GST_MIXER_MESSAGE_VOLUME_CHANGED")
    '("option-changed" "GST_MIXER_MESSAGE_OPTION_CHANGED")
    '("options-list-changed" "GST_MIXER_MESSAGE_OPTIONS_LIST_CHANGED")
    '("mixer-changed" "GST_MIXER_MESSAGE_MIXER_CHANGED")
  )
)

(define-flags MixerFlags
  (in-module "Gst")
  (c-name "GstMixerFlags")
  (gtype-id "GST_TYPE_MIXER_FLAGS")
  (values
    '("none" "GST_MIXER_FLAG_NONE")
    '("auto-notifications" "GST_MIXER_FLAG_AUTO_NOTIFICATIONS")
  )
)

(define-flags MixerTrackFlags
  (in-module "Gst")
  (c-name "GstMixerTrackFlags")
  (gtype-id "GST_TYPE_MIXER_TRACK_FLAGS")
  (values
    '("input" "GST_MIXER_TRACK_INPUT")
    '("output" "GST_MIXER_TRACK_OUTPUT")
    '("mute" "GST_MIXER_TRACK_MUTE")
    '("record" "GST_MIXER_TRACK_RECORD")
    '("master" "GST_MIXER_TRACK_MASTER")
    '("software" "GST_MIXER_TRACK_SOFTWARE")
  )
)

(define-flags TunerChannelFlags
  (in-module "Gst")
  (c-name "GstTunerChannelFlags")
  (gtype-id "GST_TYPE_TUNER_CHANNEL_FLAGS")
  (values
    '("input" "GST_TUNER_CHANNEL_INPUT")
    '("output" "GST_TUNER_CHANNEL_OUTPUT")
    '("frequency" "GST_TUNER_CHANNEL_FREQUENCY")
    '("audio" "GST_TUNER_CHANNEL_AUDIO")
  )
)

(define-enum NetType
  (in-module "Gst")
  (c-name "GstNetType")
  (gtype-id "GST_TYPE_NET_TYPE")
  (values
    '("unknown" "GST_NET_TYPE_UNKNOWN")
    '("ip4" "GST_NET_TYPE_IP4")
    '("ip6" "GST_NET_TYPE_IP6")
  )
)

(define-enum RTCPType
  (in-module "Gst")
  (c-name "GstRTCPType")
  (gtype-id "GST_TYPE_RTCP_TYPE")
  (values
    '("invalid" "GST_RTCP_TYPE_INVALID")
    '("sr" "GST_RTCP_TYPE_SR")
    '("rr" "GST_RTCP_TYPE_RR")
    '("sdes" "GST_RTCP_TYPE_SDES")
    '("bye" "GST_RTCP_TYPE_BYE")
    '("app" "GST_RTCP_TYPE_APP")
  )
)

(define-enum RTCPSDESType
  (in-module "Gst")
  (c-name "GstRTCPSDESType")
  (gtype-id "GST_TYPE_RTCPSDES_TYPE")
  (values
    '("invalid" "GST_RTCP_SDES_INVALID")
    '("end" "GST_RTCP_SDES_END")
    '("cname" "GST_RTCP_SDES_CNAME")
    '("name" "GST_RTCP_SDES_NAME")
    '("email" "GST_RTCP_SDES_EMAIL")
    '("phone" "GST_RTCP_SDES_PHONE")
    '("loc" "GST_RTCP_SDES_LOC")
    '("tool" "GST_RTCP_SDES_TOOL")
    '("note" "GST_RTCP_SDES_NOTE")
    '("priv" "GST_RTCP_SDES_PRIV")
  )
)

(define-enum RTPPayload
  (in-module "Gst")
  (c-name "GstRTPPayload")
  (gtype-id "GST_TYPE_RTP_PAYLOAD")
  (values
    '("pcmu" "GST_RTP_PAYLOAD_PCMU")
    '("1016" "GST_RTP_PAYLOAD_1016")
    '("g721" "GST_RTP_PAYLOAD_G721")
    '("gsm" "GST_RTP_PAYLOAD_GSM")
    '("g723" "GST_RTP_PAYLOAD_G723")
    '("dvi4-8000" "GST_RTP_PAYLOAD_DVI4_8000")
    '("dvi4-16000" "GST_RTP_PAYLOAD_DVI4_16000")
    '("lpc" "GST_RTP_PAYLOAD_LPC")
    '("pcma" "GST_RTP_PAYLOAD_PCMA")
    '("g722" "GST_RTP_PAYLOAD_G722")
    '("l16-stereo" "GST_RTP_PAYLOAD_L16_STEREO")
    '("l16-mono" "GST_RTP_PAYLOAD_L16_MONO")
    '("qcelp" "GST_RTP_PAYLOAD_QCELP")
    '("cn" "GST_RTP_PAYLOAD_CN")
    '("mpa" "GST_RTP_PAYLOAD_MPA")
    '("g728" "GST_RTP_PAYLOAD_G728")
    '("dvi4-11025" "GST_RTP_PAYLOAD_DVI4_11025")
    '("dvi4-22050" "GST_RTP_PAYLOAD_DVI4_22050")
    '("g729" "GST_RTP_PAYLOAD_G729")
    '("cellb" "GST_RTP_PAYLOAD_CELLB")
    '("jpeg" "GST_RTP_PAYLOAD_JPEG")
    '("nv" "GST_RTP_PAYLOAD_NV")
    '("h261" "GST_RTP_PAYLOAD_H261")
    '("mpv" "GST_RTP_PAYLOAD_MPV")
    '("mp2t" "GST_RTP_PAYLOAD_MP2T")
    '("h263" "GST_RTP_PAYLOAD_H263")
  )
)

(define-enum RTSPResult
  (in-module "Gst")
  (c-name "GstRTSPResult")
  (gtype-id "GST_TYPE_RTSP_RESULT")
  (values
    '("ok" "GST_RTSP_OK")
    '("error" "GST_RTSP_ERROR")
    '("einval" "GST_RTSP_EINVAL")
    '("eintr" "GST_RTSP_EINTR")
    '("enomem" "GST_RTSP_ENOMEM")
    '("eresolv" "GST_RTSP_ERESOLV")
    '("enotimpl" "GST_RTSP_ENOTIMPL")
    '("esys" "GST_RTSP_ESYS")
    '("eparse" "GST_RTSP_EPARSE")
    '("ewsastart" "GST_RTSP_EWSASTART")
    '("ewsaversion" "GST_RTSP_EWSAVERSION")
    '("eeof" "GST_RTSP_EEOF")
    '("enet" "GST_RTSP_ENET")
    '("enotip" "GST_RTSP_ENOTIP")
    '("etimeout" "GST_RTSP_ETIMEOUT")
    '("elast" "GST_RTSP_ELAST")
  )
)

(define-flags RTSPEvent
  (in-module "Gst")
  (c-name "GstRTSPEvent")
  (gtype-id "GST_TYPE_RTSP_EVENT")
  (values
    '("read" "GST_RTSP_EV_READ")
    '("write" "GST_RTSP_EV_WRITE")
  )
)

(define-enum RTSPFamily
  (in-module "Gst")
  (c-name "GstRTSPFamily")
  (gtype-id "GST_TYPE_RTSP_FAMILY")
  (values
    '("none" "GST_RTSP_FAM_NONE")
    '("inet" "GST_RTSP_FAM_INET")
    '("inet6" "GST_RTSP_FAM_INET6")
  )
)

(define-enum RTSPState
  (in-module "Gst")
  (c-name "GstRTSPState")
  (gtype-id "GST_TYPE_RTSP_STATE")
  (values
    '("invalid" "GST_RTSP_STATE_INVALID")
    '("init" "GST_RTSP_STATE_INIT")
    '("ready" "GST_RTSP_STATE_READY")
    '("seeking" "GST_RTSP_STATE_SEEKING")
    '("playing" "GST_RTSP_STATE_PLAYING")
    '("recording" "GST_RTSP_STATE_RECORDING")
  )
)

(define-enum RTSPVersion
  (in-module "Gst")
  (c-name "GstRTSPVersion")
  (gtype-id "GST_TYPE_RTSP_VERSION")
  (values
    '("invalid" "GST_RTSP_VERSION_INVALID")
    '("1-0" "GST_RTSP_VERSION_1_0")
  )
)

(define-flags RTSPMethod
  (in-module "Gst")
  (c-name "GstRTSPMethod")
  (gtype-id "GST_TYPE_RTSP_METHOD")
  (values
    '("invalid" "GST_RTSP_INVALID")
    '("describe" "GST_RTSP_DESCRIBE")
    '("announce" "GST_RTSP_ANNOUNCE")
    '("get-parameter" "GST_RTSP_GET_PARAMETER")
    '("options" "GST_RTSP_OPTIONS")
    '("pause" "GST_RTSP_PAUSE")
    '("play" "GST_RTSP_PLAY")
    '("record" "GST_RTSP_RECORD")
    '("redirect" "GST_RTSP_REDIRECT")
    '("setup" "GST_RTSP_SETUP")
    '("set-parameter" "GST_RTSP_SET_PARAMETER")
    '("teardown" "GST_RTSP_TEARDOWN")
  )
)

(define-enum RTSPAuthMethod
  (in-module "Gst")
  (c-name "GstRTSPAuthMethod")
  (gtype-id "GST_TYPE_RTSP_AUTH_METHOD")
  (values
    '("none" "GST_RTSP_AUTH_NONE")
    '("basic" "GST_RTSP_AUTH_BASIC")
    '("digest" "GST_RTSP_AUTH_DIGEST")
  )
)

(define-enum RTSPHeaderField
  (in-module "Gst")
  (c-name "GstRTSPHeaderField")
  (gtype-id "GST_TYPE_RTSP_HEADER_FIELD")
  (values
    '("invalid" "GST_RTSP_HDR_INVALID")
    '("accept" "GST_RTSP_HDR_ACCEPT")
    '("accept-encoding" "GST_RTSP_HDR_ACCEPT_ENCODING")
    '("accept-language" "GST_RTSP_HDR_ACCEPT_LANGUAGE")
    '("allow" "GST_RTSP_HDR_ALLOW")
    '("authorization" "GST_RTSP_HDR_AUTHORIZATION")
    '("bandwidth" "GST_RTSP_HDR_BANDWIDTH")
    '("blocksize" "GST_RTSP_HDR_BLOCKSIZE")
    '("cache-control" "GST_RTSP_HDR_CACHE_CONTROL")
    '("conference" "GST_RTSP_HDR_CONFERENCE")
    '("connection" "GST_RTSP_HDR_CONNECTION")
    '("content-base" "GST_RTSP_HDR_CONTENT_BASE")
    '("content-encoding" "GST_RTSP_HDR_CONTENT_ENCODING")
    '("content-language" "GST_RTSP_HDR_CONTENT_LANGUAGE")
    '("content-length" "GST_RTSP_HDR_CONTENT_LENGTH")
    '("content-location" "GST_RTSP_HDR_CONTENT_LOCATION")
    '("content-type" "GST_RTSP_HDR_CONTENT_TYPE")
    '("cseq" "GST_RTSP_HDR_CSEQ")
    '("date" "GST_RTSP_HDR_DATE")
    '("expires" "GST_RTSP_HDR_EXPIRES")
    '("from" "GST_RTSP_HDR_FROM")
    '("if-modified-since" "GST_RTSP_HDR_IF_MODIFIED_SINCE")
    '("last-modified" "GST_RTSP_HDR_LAST_MODIFIED")
    '("proxy-authenticate" "GST_RTSP_HDR_PROXY_AUTHENTICATE")
    '("proxy-require" "GST_RTSP_HDR_PROXY_REQUIRE")
    '("public" "GST_RTSP_HDR_PUBLIC")
    '("range" "GST_RTSP_HDR_RANGE")
    '("referer" "GST_RTSP_HDR_REFERER")
    '("require" "GST_RTSP_HDR_REQUIRE")
    '("retry-after" "GST_RTSP_HDR_RETRY_AFTER")
    '("rtp-info" "GST_RTSP_HDR_RTP_INFO")
    '("scale" "GST_RTSP_HDR_SCALE")
    '("session" "GST_RTSP_HDR_SESSION")
    '("server" "GST_RTSP_HDR_SERVER")
    '("speed" "GST_RTSP_HDR_SPEED")
    '("transport" "GST_RTSP_HDR_TRANSPORT")
    '("unsupported" "GST_RTSP_HDR_UNSUPPORTED")
    '("user-agent" "GST_RTSP_HDR_USER_AGENT")
    '("via" "GST_RTSP_HDR_VIA")
    '("www-authenticate" "GST_RTSP_HDR_WWW_AUTHENTICATE")
    '("client-challenge" "GST_RTSP_HDR_CLIENT_CHALLENGE")
    '("real-challenge1" "GST_RTSP_HDR_REAL_CHALLENGE1")
    '("real-challenge2" "GST_RTSP_HDR_REAL_CHALLENGE2")
    '("real-challenge3" "GST_RTSP_HDR_REAL_CHALLENGE3")
    '("subscribe" "GST_RTSP_HDR_SUBSCRIBE")
    '("alert" "GST_RTSP_HDR_ALERT")
    '("client-id" "GST_RTSP_HDR_CLIENT_ID")
    '("company-id" "GST_RTSP_HDR_COMPANY_ID")
    '("guid" "GST_RTSP_HDR_GUID")
    '("region-data" "GST_RTSP_HDR_REGION_DATA")
    '("max-asm-width" "GST_RTSP_HDR_MAX_ASM_WIDTH")
    '("language" "GST_RTSP_HDR_LANGUAGE")
    '("player-start-time" "GST_RTSP_HDR_PLAYER_START_TIME")
    '("location" "GST_RTSP_HDR_LOCATION")
  )
)

(define-enum RTSPStatusCode
  (in-module "Gst")
  (c-name "GstRTSPStatusCode")
  (gtype-id "GST_TYPE_RTSP_STATUS_CODE")
  (values
    '("invalid" "GST_RTSP_STS_INVALID")
    '("continue" "GST_RTSP_STS_CONTINUE")
    '("ok" "GST_RTSP_STS_OK")
    '("created" "GST_RTSP_STS_CREATED")
    '("low-on-storage" "GST_RTSP_STS_LOW_ON_STORAGE")
    '("multiple-choices" "GST_RTSP_STS_MULTIPLE_CHOICES")
    '("moved-permanently" "GST_RTSP_STS_MOVED_PERMANENTLY")
    '("move-temporarily" "GST_RTSP_STS_MOVE_TEMPORARILY")
    '("see-other" "GST_RTSP_STS_SEE_OTHER")
    '("not-modified" "GST_RTSP_STS_NOT_MODIFIED")
    '("use-proxy" "GST_RTSP_STS_USE_PROXY")
    '("bad-request" "GST_RTSP_STS_BAD_REQUEST")
    '("unauthorized" "GST_RTSP_STS_UNAUTHORIZED")
    '("payment-required" "GST_RTSP_STS_PAYMENT_REQUIRED")
    '("forbidden" "GST_RTSP_STS_FORBIDDEN")
    '("not-found" "GST_RTSP_STS_NOT_FOUND")
    '("method-not-allowed" "GST_RTSP_STS_METHOD_NOT_ALLOWED")
    '("not-acceptable" "GST_RTSP_STS_NOT_ACCEPTABLE")
    '("proxy-auth-required" "GST_RTSP_STS_PROXY_AUTH_REQUIRED")
    '("request-timeout" "GST_RTSP_STS_REQUEST_TIMEOUT")
    '("gone" "GST_RTSP_STS_GONE")
    '("length-required" "GST_RTSP_STS_LENGTH_REQUIRED")
    '("precondition-failed" "GST_RTSP_STS_PRECONDITION_FAILED")
    '("request-entity-too-large" "GST_RTSP_STS_REQUEST_ENTITY_TOO_LARGE")
    '("request-uri-too-large" "GST_RTSP_STS_REQUEST_URI_TOO_LARGE")
    '("unsupported-media-type" "GST_RTSP_STS_UNSUPPORTED_MEDIA_TYPE")
    '("parameter-not-understood" "GST_RTSP_STS_PARAMETER_NOT_UNDERSTOOD")
    '("conference-not-found" "GST_RTSP_STS_CONFERENCE_NOT_FOUND")
    '("not-enough-bandwidth" "GST_RTSP_STS_NOT_ENOUGH_BANDWIDTH")
    '("session-not-found" "GST_RTSP_STS_SESSION_NOT_FOUND")
    '("method-not-valid-in-this-state" "GST_RTSP_STS_METHOD_NOT_VALID_IN_THIS_STATE")
    '("header-field-not-valid-for-resource" "GST_RTSP_STS_HEADER_FIELD_NOT_VALID_FOR_RESOURCE")
    '("invalid-range" "GST_RTSP_STS_INVALID_RANGE")
    '("parameter-is-readonly" "GST_RTSP_STS_PARAMETER_IS_READONLY")
    '("aggregate-operation-not-allowed" "GST_RTSP_STS_AGGREGATE_OPERATION_NOT_ALLOWED")
    '("only-aggregate-operation-allowed" "GST_RTSP_STS_ONLY_AGGREGATE_OPERATION_ALLOWED")
    '("unsupported-transport" "GST_RTSP_STS_UNSUPPORTED_TRANSPORT")
    '("destination-unreachable" "GST_RTSP_STS_DESTINATION_UNREACHABLE")
    '("internal-server-error" "GST_RTSP_STS_INTERNAL_SERVER_ERROR")
    '("not-implemented" "GST_RTSP_STS_NOT_IMPLEMENTED")
    '("bad-gateway" "GST_RTSP_STS_BAD_GATEWAY")
    '("service-unavailable" "GST_RTSP_STS_SERVICE_UNAVAILABLE")
    '("gateway-timeout" "GST_RTSP_STS_GATEWAY_TIMEOUT")
    '("rtsp-version-not-supported" "GST_RTSP_STS_RTSP_VERSION_NOT_SUPPORTED")
    '("option-not-supported" "GST_RTSP_STS_OPTION_NOT_SUPPORTED")
  )
)

(define-enum RTSPMsgType
  (in-module "Gst")
  (c-name "GstRTSPMsgType")
  (gtype-id "GST_TYPE_RTSP_MSG_TYPE")
  (values
    '("invalid" "GST_RTSP_MESSAGE_INVALID")
    '("request" "GST_RTSP_MESSAGE_REQUEST")
    '("response" "GST_RTSP_MESSAGE_RESPONSE")
    '("data" "GST_RTSP_MESSAGE_DATA")
  )
)

(define-enum RTSPRangeUnit
  (in-module "Gst")
  (c-name "GstRTSPRangeUnit")
  (gtype-id "GST_TYPE_RTSP_RANGE_UNIT")
  (values
    '("smpte" "GST_RTSP_RANGE_SMPTE")
    '("smpte-30-drop" "GST_RTSP_RANGE_SMPTE_30_DROP")
    '("smpte-25" "GST_RTSP_RANGE_SMPTE_25")
    '("npt" "GST_RTSP_RANGE_NPT")
    '("clock" "GST_RTSP_RANGE_CLOCK")
  )
)

(define-enum RTSPTimeType
  (in-module "Gst")
  (c-name "GstRTSPTimeType")
  (gtype-id "GST_TYPE_RTSP_TIME_TYPE")
  (values
    '("seconds" "GST_RTSP_TIME_SECONDS")
    '("now" "GST_RTSP_TIME_NOW")
    '("end" "GST_RTSP_TIME_END")
  )
)

(define-flags RTSPTransMode
  (in-module "Gst")
  (c-name "GstRTSPTransMode")
  (gtype-id "GST_TYPE_RTSP_TRANS_MODE")
  (values
    '("unknown" "GST_RTSP_TRANS_UNKNOWN")
    '("rtp" "GST_RTSP_TRANS_RTP")
    '("rdt" "GST_RTSP_TRANS_RDT")
  )
)

(define-flags RTSPProfile
  (in-module "Gst")
  (c-name "GstRTSPProfile")
  (gtype-id "GST_TYPE_RTSP_PROFILE")
  (values
    '("unknown" "GST_RTSP_PROFILE_UNKNOWN")
    '("avp" "GST_RTSP_PROFILE_AVP")
    '("savp" "GST_RTSP_PROFILE_SAVP")
  )
)

(define-flags RTSPLowerTrans
  (in-module "Gst")
  (c-name "GstRTSPLowerTrans")
  (gtype-id "GST_TYPE_RTSP_LOWER_TRANS")
  (values
    '("unknown" "GST_RTSP_LOWER_TRANS_UNKNOWN")
    '("udp" "GST_RTSP_LOWER_TRANS_UDP")
    '("udp-mcast" "GST_RTSP_LOWER_TRANS_UDP_MCAST")
    '("tcp" "GST_RTSP_LOWER_TRANS_TCP")
  )
)

(define-enum SDPResult
  (in-module "Gst")
  (c-name "GstSDPResult")
  (gtype-id "GST_TYPE_SDP_RESULT")
  (values
    '("ok" "GST_SDP_OK")
    '("einval" "GST_SDP_EINVAL")
  )
)

(define-enum TagDemuxResult
  (in-module "Gst")
  (c-name "GstTagDemuxResult")
  (gtype-id "GST_TYPE_TAG_DEMUX_RESULT")
  (values
    '("broken-tag" "GST_TAG_DEMUX_RESULT_BROKEN_TAG")
    '("again" "GST_TAG_DEMUX_RESULT_AGAIN")
    '("ok" "GST_TAG_DEMUX_RESULT_OK")
  )
)

(define-enum TagImageType
  (in-module "Gst")
  (c-name "GstTagImageType")
  (gtype-id "GST_TYPE_TAG_IMAGE_TYPE")
  (values
    '("none" "GST_TAG_IMAGE_TYPE_NONE")
    '("undefined" "GST_TAG_IMAGE_TYPE_UNDEFINED")
    '("front-cover" "GST_TAG_IMAGE_TYPE_FRONT_COVER")
    '("back-cover" "GST_TAG_IMAGE_TYPE_BACK_COVER")
    '("leaflet-page" "GST_TAG_IMAGE_TYPE_LEAFLET_PAGE")
    '("medium" "GST_TAG_IMAGE_TYPE_MEDIUM")
    '("lead-artist" "GST_TAG_IMAGE_TYPE_LEAD_ARTIST")
    '("artist" "GST_TAG_IMAGE_TYPE_ARTIST")
    '("conductor" "GST_TAG_IMAGE_TYPE_CONDUCTOR")
    '("band-orchestra" "GST_TAG_IMAGE_TYPE_BAND_ORCHESTRA")
    '("composer" "GST_TAG_IMAGE_TYPE_COMPOSER")
    '("lyricist" "GST_TAG_IMAGE_TYPE_LYRICIST")
    '("recording-location" "GST_TAG_IMAGE_TYPE_RECORDING_LOCATION")
    '("during-recording" "GST_TAG_IMAGE_TYPE_DURING_RECORDING")
    '("during-performance" "GST_TAG_IMAGE_TYPE_DURING_PERFORMANCE")
    '("video-capture" "GST_TAG_IMAGE_TYPE_VIDEO_CAPTURE")
    '("fish" "GST_TAG_IMAGE_TYPE_FISH")
    '("illustration" "GST_TAG_IMAGE_TYPE_ILLUSTRATION")
    '("band-artist-logo" "GST_TAG_IMAGE_TYPE_BAND_ARTIST_LOGO")
    '("publisher-studio-logo" "GST_TAG_IMAGE_TYPE_PUBLISHER_STUDIO_LOGO")
  )
)

(define-enum InstallPluginsReturn
  (in-module "Gst")
  (c-name "GstInstallPluginsReturn")
  (gtype-id "GST_TYPE_INSTALL_PLUGINS_RETURN")
  (values
    '("success" "GST_INSTALL_PLUGINS_SUCCESS")
    '("not-found" "GST_INSTALL_PLUGINS_NOT_FOUND")
    '("error" "GST_INSTALL_PLUGINS_ERROR")
    '("partial-success" "GST_INSTALL_PLUGINS_PARTIAL_SUCCESS")
    '("user-abort" "GST_INSTALL_PLUGINS_USER_ABORT")
    '("crashed" "GST_INSTALL_PLUGINS_CRASHED")
    '("invalid" "GST_INSTALL_PLUGINS_INVALID")
    '("started-ok" "GST_INSTALL_PLUGINS_STARTED_OK")
    '("internal-failure" "GST_INSTALL_PLUGINS_INTERNAL_FAILURE")
    '("helper-missing" "GST_INSTALL_PLUGINS_HELPER_MISSING")
    '("install-in-progress" "GST_INSTALL_PLUGINS_INSTALL_IN_PROGRESS")
  )
)

(define-enum VideoFormat
  (in-module "Gst")
  (c-name "GstVideoFormat")
  (gtype-id "GST_TYPE_VIDEO_FORMAT")
  (values
    '("unknown" "GST_VIDEO_FORMAT_UNKNOWN")
    '("i420" "GST_VIDEO_FORMAT_I420")
    '("yv12" "GST_VIDEO_FORMAT_YV12")
    '("yuy2" "GST_VIDEO_FORMAT_YUY2")
    '("uyvy" "GST_VIDEO_FORMAT_UYVY")
    '("ayuv" "GST_VIDEO_FORMAT_AYUV")
    '("rgbx" "GST_VIDEO_FORMAT_RGBx")
    '("bgrx" "GST_VIDEO_FORMAT_BGRx")
    '("xrgb" "GST_VIDEO_FORMAT_xRGB")
    '("xbgr" "GST_VIDEO_FORMAT_xBGR")
    '("rgba" "GST_VIDEO_FORMAT_RGBA")
    '("bgra" "GST_VIDEO_FORMAT_BGRA")
    '("argb" "GST_VIDEO_FORMAT_ARGB")
    '("abgr" "GST_VIDEO_FORMAT_ABGR")
    '("rgb" "GST_VIDEO_FORMAT_RGB")
    '("bgr" "GST_VIDEO_FORMAT_BGR")
    '("y41b" "GST_VIDEO_FORMAT_Y41B")
    '("y42b" "GST_VIDEO_FORMAT_Y42B")
  )
)

(define-enum AdderFormat
  (in-module "Gst")
  (c-name "GstAdderFormat")
  (gtype-id "GST_TYPE_ADDER_FORMAT")
  (values
    '("unset" "GST_ADDER_FORMAT_UNSET")
    '("int" "GST_ADDER_FORMAT_INT")
    '("float" "GST_ADDER_FORMAT_FLOAT")
  )
)

(define-enum AudioConvertDithering
  (in-module "Gst")
  (c-name "GstAudioConvertDithering")
  (gtype-id "GST_TYPE_AUDIO_CONVERT_DITHERING")
  (values
    '("none" "DITHER_NONE")
    '("rpdf" "DITHER_RPDF")
    '("tpdf" "DITHER_TPDF")
    '("tpdf-hf" "DITHER_TPDF_HF")
  )
)

(define-enum AudioConvertNoiseShaping
  (in-module "Gst")
  (c-name "GstAudioConvertNoiseShaping")
  (gtype-id "GST_TYPE_AUDIO_CONVERT_NOISE_SHAPING")
  (values
    '("none" "NOISE_SHAPING_NONE")
    '("error-feedback" "NOISE_SHAPING_ERROR_FEEDBACK")
    '("simple" "NOISE_SHAPING_SIMPLE")
    '("medium" "NOISE_SHAPING_MEDIUM")
    '("high" "NOISE_SHAPING_HIGH")
  )
)

(define-enum AudioTestSrcWave
  (in-module "Gst")
  (c-name "GstAudioTestSrcWave")
  (gtype-id "GST_TYPE_AUDIO_TEST_SRC_WAVE")
  (values
    '("sine" "GST_AUDIO_TEST_SRC_WAVE_SINE")
    '("square" "GST_AUDIO_TEST_SRC_WAVE_SQUARE")
    '("saw" "GST_AUDIO_TEST_SRC_WAVE_SAW")
    '("triangle" "GST_AUDIO_TEST_SRC_WAVE_TRIANGLE")
    '("silence" "GST_AUDIO_TEST_SRC_WAVE_SILENCE")
    '("white-noise" "GST_AUDIO_TEST_SRC_WAVE_WHITE_NOISE")
    '("pink-noise" "GST_AUDIO_TEST_SRC_WAVE_PINK_NOISE")
    '("sine-tab" "GST_AUDIO_TEST_SRC_WAVE_SINE_TAB")
    '("ticks" "GST_AUDIO_TEST_SRC_WAVE_TICKS")
  )
)

(define-enum AudioTestSrcFormat
  (in-module "Gst")
  (c-name "GstAudioTestSrcFormat")
  (gtype-id "GST_TYPE_AUDIO_TEST_SRC_FORMAT")
  (values
    '("none" "GST_AUDIO_TEST_SRC_FORMAT_NONE")
    '("s16" "GST_AUDIO_TEST_SRC_FORMAT_S16")
    '("s32" "GST_AUDIO_TEST_SRC_FORMAT_S32")
    '("f32" "GST_AUDIO_TEST_SRC_FORMAT_F32")
    '("f64" "GST_AUDIO_TEST_SRC_FORMAT_F64")
  )
)

(define-enum GDPDepayState
  (in-module "Gst")
  (c-name "GstGDPDepayState")
  (gtype-id "GST_TYPE_GDP_DEPAY_STATE")
  (values
    '("header" "GST_GDP_DEPAY_STATE_HEADER")
    '("payload" "GST_GDP_DEPAY_STATE_PAYLOAD")
    '("buffer" "GST_GDP_DEPAY_STATE_BUFFER")
    '("caps" "GST_GDP_DEPAY_STATE_CAPS")
    '("event" "GST_GDP_DEPAY_STATE_EVENT")
  )
)

(define-flags FactoryListType
  (in-module "Gst")
  (c-name "GstFactoryListType")
  (gtype-id "GST_TYPE_FACTORY_LIST_TYPE")
  (values
    '("decoder" "GST_FACTORY_LIST_DECODER")
    '("encoder" "GST_FACTORY_LIST_ENCODER")
    '("sink" "GST_FACTORY_LIST_SINK")
    '("src" "GST_FACTORY_LIST_SRC")
  )
)

(define-enum AutoplugSelectResult
  (in-module "Gst")
  (c-name "GstAutoplugSelectResult")
  (gtype-id "GST_TYPE_AUTOPLUG_SELECT_RESULT")
  (values
    '("try" "GST_AUTOPLUG_SELECT_TRY")
    '("expose" "GST_AUTOPLUG_SELECT_EXPOSE")
    '("skip" "GST_AUTOPLUG_SELECT_SKIP")
  )
)

(define-flags PlayFlags
  (in-module "Gst")
  (c-name "GstPlayFlags")
  (gtype-id "GST_TYPE_PLAY_FLAGS")
  (values
    '("video" "GST_PLAY_FLAG_VIDEO")
    '("audio" "GST_PLAY_FLAG_AUDIO")
    '("text" "GST_PLAY_FLAG_TEXT")
    '("vis" "GST_PLAY_FLAG_VIS")
    '("soft-volume" "GST_PLAY_FLAG_SOFT_VOLUME")
    '("native-audio" "GST_PLAY_FLAG_NATIVE_AUDIO")
    '("native-video" "GST_PLAY_FLAG_NATIVE_VIDEO")
  )
)

(define-enum PlaySinkType
  (in-module "Gst")
  (c-name "GstPlaySinkType")
  (gtype-id "GST_TYPE_PLAY_SINK_TYPE")
  (values
    '("audio" "GST_PLAY_SINK_TYPE_AUDIO")
    '("audio-raw" "GST_PLAY_SINK_TYPE_AUDIO_RAW")
    '("video" "GST_PLAY_SINK_TYPE_VIDEO")
    '("video-raw" "GST_PLAY_SINK_TYPE_VIDEO_RAW")
    '("text" "GST_PLAY_SINK_TYPE_TEXT")
    '("last" "GST_PLAY_SINK_TYPE_LAST")
  )
)

(define-enum StreamType
  (in-module "Gst")
  (c-name "GstStreamType")
  (gtype-id "GST_TYPE_STREAM_TYPE")
  (values
    '("unknown" "GST_STREAM_TYPE_UNKNOWN")
    '("audio" "GST_STREAM_TYPE_AUDIO")
    '("video" "GST_STREAM_TYPE_VIDEO")
    '("text" "GST_STREAM_TYPE_TEXT")
    '("subpicture" "GST_STREAM_TYPE_SUBPICTURE")
    '("element" "GST_STREAM_TYPE_ELEMENT")
  )
)

(define-enum SubParseFormat
  (in-module "Gst")
  (c-name "GstSubParseFormat")
  (gtype-id "GST_TYPE_SUB_PARSE_FORMAT")
  (values
    '("unknown" "GST_SUB_PARSE_FORMAT_UNKNOWN")
    '("mdvdsub" "GST_SUB_PARSE_FORMAT_MDVDSUB")
    '("subrip" "GST_SUB_PARSE_FORMAT_SUBRIP")
    '("mpsub" "GST_SUB_PARSE_FORMAT_MPSUB")
    '("sami" "GST_SUB_PARSE_FORMAT_SAMI")
    '("tmplayer" "GST_SUB_PARSE_FORMAT_TMPLAYER")
    '("mpl2" "GST_SUB_PARSE_FORMAT_MPL2")
    '("subviewer" "GST_SUB_PARSE_FORMAT_SUBVIEWER")
  )
)

(define-flags MultiFdSinkFlags
  (in-module "Gst")
  (c-name "GstMultiFdSinkFlags")
  (gtype-id "GST_TYPE_MULTI_FD_SINK_FLAGS")
  (values
    '("open" "GST_MULTI_FD_SINK_OPEN")
    '("flag-last" "GST_MULTI_FD_SINK_FLAG_LAST")
  )
)

(define-enum RecoverPolicy
  (in-module "Gst")
  (c-name "GstRecoverPolicy")
  (gtype-id "GST_TYPE_RECOVER_POLICY")
  (values
    '("none" "GST_RECOVER_POLICY_NONE")
    '("resync-latest" "GST_RECOVER_POLICY_RESYNC_LATEST")
    '("resync-soft-limit" "GST_RECOVER_POLICY_RESYNC_SOFT_LIMIT")
    '("resync-keyframe" "GST_RECOVER_POLICY_RESYNC_KEYFRAME")
  )
)

(define-enum SyncMethod
  (in-module "Gst")
  (c-name "GstSyncMethod")
  (gtype-id "GST_TYPE_SYNC_METHOD")
  (values
    '("latest" "GST_SYNC_METHOD_LATEST")
    '("next-keyframe" "GST_SYNC_METHOD_NEXT_KEYFRAME")
    '("latest-keyframe" "GST_SYNC_METHOD_LATEST_KEYFRAME")
    '("burst" "GST_SYNC_METHOD_BURST")
    '("burst-keyframe" "GST_SYNC_METHOD_BURST_KEYFRAME")
    '("burst-with-keyframe" "GST_SYNC_METHOD_BURST_WITH_KEYFRAME")
  )
)

(define-enum TCPUnitType
  (in-module "Gst")
  (c-name "GstTCPUnitType")
  (gtype-id "GST_TYPE_TCP_UNIT_TYPE")
  (values
    '("undefined" "GST_TCP_UNIT_TYPE_UNDEFINED")
    '("buffers" "GST_TCP_UNIT_TYPE_BUFFERS")
    '("time" "GST_TCP_UNIT_TYPE_TIME")
    '("bytes" "GST_TCP_UNIT_TYPE_BYTES")
  )
)

(define-enum ClientStatus
  (in-module "Gst")
  (c-name "GstClientStatus")
  (gtype-id "GST_TYPE_CLIENT_STATUS")
  (values
    '("ok" "GST_CLIENT_STATUS_OK")
    '("closed" "GST_CLIENT_STATUS_CLOSED")
    '("removed" "GST_CLIENT_STATUS_REMOVED")
    '("slow" "GST_CLIENT_STATUS_SLOW")
    '("error" "GST_CLIENT_STATUS_ERROR")
    '("duplicate" "GST_CLIENT_STATUS_DUPLICATE")
    '("flushing" "GST_CLIENT_STATUS_FLUSHING")
  )
)

(define-flags TCPClientSinkFlags
  (in-module "Gst")
  (c-name "GstTCPClientSinkFlags")
  (gtype-id "GST_TYPE_TCP_CLIENT_SINK_FLAGS")
  (values
    '("open" "GST_TCP_CLIENT_SINK_OPEN")
    '("flag-last" "GST_TCP_CLIENT_SINK_FLAG_LAST")
  )
)

(define-flags TCPClientSrcFlags
  (in-module "Gst")
  (c-name "GstTCPClientSrcFlags")
  (gtype-id "GST_TYPE_TCP_CLIENT_SRC_FLAGS")
  (values
    '("open" "GST_TCP_CLIENT_SRC_OPEN")
    '("flag-last" "GST_TCP_CLIENT_SRC_FLAG_LAST")
  )
)

(define-enum TCPProtocol
  (in-module "Gst")
  (c-name "GstTCPProtocol")
  (gtype-id "GST_TYPE_TCP_PROTOCOL")
  (values
    '("none" "GST_TCP_PROTOCOL_NONE")
    '("gdp" "GST_TCP_PROTOCOL_GDP")
  )
)

(define-flags TCPServerSinkFlags
  (in-module "Gst")
  (c-name "GstTCPServerSinkFlags")
  (gtype-id "GST_TYPE_TCP_SERVER_SINK_FLAGS")
  (values
    '("open" "GST_TCP_SERVER_SINK_OPEN")
    '("flag-last" "GST_TCP_SERVER_SINK_FLAG_LAST")
  )
)

(define-flags TCPServerSrcFlags
  (in-module "Gst")
  (c-name "GstTCPServerSrcFlags")
  (gtype-id "GST_TYPE_TCP_SERVER_SRC_FLAGS")
  (values
    '("open" "GST_TCP_SERVER_SRC_OPEN")
    '("flag-last" "GST_TCP_SERVER_SRC_FLAG_LAST")
  )
)

(define-enum VideoScaleMethod
  (in-module "Gst")
  (c-name "GstVideoScaleMethod")
  (gtype-id "GST_TYPE_VIDEO_SCALE_METHOD")
  (values
    '("nearest" "GST_VIDEO_SCALE_NEAREST")
    '("bilinear" "GST_VIDEO_SCALE_BILINEAR")
    '("4tap" "GST_VIDEO_SCALE_4TAP")
  )
)

(define-enum VideoTestSrcPattern
  (in-module "Gst")
  (c-name "GstVideoTestSrcPattern")
  (gtype-id "GST_TYPE_VIDEO_TEST_SRC_PATTERN")
  (values
    '("smpte" "GST_VIDEO_TEST_SRC_SMPTE")
    '("snow" "GST_VIDEO_TEST_SRC_SNOW")
    '("black" "GST_VIDEO_TEST_SRC_BLACK")
    '("white" "GST_VIDEO_TEST_SRC_WHITE")
    '("red" "GST_VIDEO_TEST_SRC_RED")
    '("green" "GST_VIDEO_TEST_SRC_GREEN")
    '("blue" "GST_VIDEO_TEST_SRC_BLUE")
    '("checkers1" "GST_VIDEO_TEST_SRC_CHECKERS1")
    '("checkers2" "GST_VIDEO_TEST_SRC_CHECKERS2")
    '("checkers4" "GST_VIDEO_TEST_SRC_CHECKERS4")
    '("checkers8" "GST_VIDEO_TEST_SRC_CHECKERS8")
    '("circular" "GST_VIDEO_TEST_SRC_CIRCULAR")
    '("blink" "GST_VIDEO_TEST_SRC_BLINK")
    '("smpte75" "GST_VIDEO_TEST_SRC_SMPTE75")
    '("zone-plate" "GST_VIDEO_TEST_SRC_ZONE_PLATE")
  )
)

(define-enum VideoTestSrcColorSpec
  (in-module "Gst")
  (c-name "GstVideoTestSrcColorSpec")
  (gtype-id "GST_TYPE_VIDEO_TEST_SRC_COLOR_SPEC")
  (values
    '("bt601" "GST_VIDEO_TEST_SRC_BT601")
    '("bt709" "GST_VIDEO_TEST_SRC_BT709")
  )
)

(define-flags AlsaMixerDirection
  (in-module "Gst")
  (c-name "GstAlsaMixerDirection")
  (gtype-id "GST_TYPE_ALSA_MIXER_DIRECTION")
  (values
    '("capture" "GST_ALSA_MIXER_CAPTURE")
    '("playback" "GST_ALSA_MIXER_PLAYBACK")
    '("all" "GST_ALSA_MIXER_ALL")
  )
)

(define-enum OggPadMode
  (in-module "Gst")
  (c-name "GstOggPadMode")
  (gtype-id "GST_TYPE_OGG_PAD_MODE")
  (values
    '("init" "GST_OGG_PAD_MODE_INIT")
    '("streaming" "GST_OGG_PAD_MODE_STREAMING")
  )
)

(define-enum OggPadState
  (in-module "Gst")
  (c-name "GstOggPadState")
  (gtype-id "GST_TYPE_OGG_PAD_STATE")
  (values
    '("control" "GST_OGG_PAD_STATE_CONTROL")
    '("data" "GST_OGG_PAD_STATE_DATA")
  )
)

(define-enum TextOverlayVAlign
  (in-module "Gst")
  (c-name "GstTextOverlayVAlign")
  (gtype-id "GST_TYPE_TEXT_OVERLAY_VALIGN")
  (values
    '("baseline" "GST_TEXT_OVERLAY_VALIGN_BASELINE")
    '("bottom" "GST_TEXT_OVERLAY_VALIGN_BOTTOM")
    '("top" "GST_TEXT_OVERLAY_VALIGN_TOP")
  )
)

(define-enum TextOverlayHAlign
  (in-module "Gst")
  (c-name "GstTextOverlayHAlign")
  (gtype-id "GST_TYPE_TEXT_OVERLAY_HALIGN")
  (values
    '("left" "GST_TEXT_OVERLAY_HALIGN_LEFT")
    '("center" "GST_TEXT_OVERLAY_HALIGN_CENTER")
    '("right" "GST_TEXT_OVERLAY_HALIGN_RIGHT")
  )
)

(define-enum TextOverlayWrapMode
  (in-module "Gst")
  (c-name "GstTextOverlayWrapMode")
  (gtype-id "GST_TYPE_TEXT_OVERLAY_WRAP_MODE")
  (values
    '("none" "GST_TEXT_OVERLAY_WRAP_MODE_NONE")
    '("word" "GST_TEXT_OVERLAY_WRAP_MODE_WORD")
    '("char" "GST_TEXT_OVERLAY_WRAP_MODE_CHAR")
    '("word-char" "GST_TEXT_OVERLAY_WRAP_MODE_WORD_CHAR")
  )
)

(define-enum TextOverlayLineAlign
  (in-module "Gst")
  (c-name "GstTextOverlayLineAlign")
  (gtype-id "GST_TYPE_TEXT_OVERLAY_LINE_ALIGN")
  (values
    '("left" "GST_TEXT_OVERLAY_LINE_ALIGN_LEFT")
    '("center" "GST_TEXT_OVERLAY_LINE_ALIGN_CENTER")
    '("right" "GST_TEXT_OVERLAY_LINE_ALIGN_RIGHT")
  )
)

(define-enum TheoraEncBorderMode
  (in-module "Gst")
  (c-name "GstTheoraEncBorderMode")
  (gtype-id "GST_TYPE_THEORA_ENC_BORDER_MODE")
  (values
    '("none" "BORDER_NONE")
    '("black" "BORDER_BLACK")
    '("mirror" "BORDER_MIRROR")
  )
)


;; From audio.h

(define-function gst_audio_frame_byte_size
  (c-name "gst_audio_frame_byte_size")
  (return-type "int")
  (parameters
    '("GstPad*" "pad")
  )
)

(define-function gst_audio_frame_length
  (c-name "gst_audio_frame_length")
  (return-type "long")
  (parameters
    '("GstPad*" "pad")
    '("GstBuffer*" "buf")
  )
)

(define-function gst_audio_duration_from_pad_buffer
  (c-name "gst_audio_duration_from_pad_buffer")
  (return-type "GstClockTime")
  (parameters
    '("GstPad*" "pad")
    '("GstBuffer*" "buf")
  )
)

(define-function gst_audio_is_buffer_framed
  (c-name "gst_audio_is_buffer_framed")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "pad")
    '("GstBuffer*" "buf")
  )
)

(define-function gst_audio_structure_set_int
  (c-name "gst_audio_structure_set_int")
  (return-type "none")
  (parameters
    '("GstStructure*" "structure")
    '("GstAudioFieldFlag" "flag")
  )
)

(define-function gst_audio_buffer_clip
  (c-name "gst_audio_buffer_clip")
  (return-type "GstBuffer*")
  (parameters
    '("GstBuffer*" "buffer")
    '("GstSegment*" "segment")
    '("gint" "rate")
    '("gint" "frame_size")
  )
)



;; From gstaudioclock.h

(define-function gst_audio_clock_get_type
  (c-name "gst_audio_clock_get_type")
  (return-type "GType")
)

(define-function gst_audio_clock_new
  (c-name "gst_audio_clock_new")
  (is-constructor-of "GstAudioClock")
  (return-type "GstClock*")
  (parameters
    '("gchar*" "name")
    '("GstAudioClockGetTimeFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method reset
  (of-object "GstAudioClock")
  (c-name "gst_audio_clock_reset")
  (return-type "none")
  (parameters
    '("GstClockTime" "time")
  )
)



;; From gstaudiofilter.h

(define-function gst_audio_filter_get_type
  (c-name "gst_audio_filter_get_type")
  (return-type "GType")
)

(define-method add_pad_templates
  (of-object "GstAudioFilterClass")
  (c-name "gst_audio_filter_class_add_pad_templates")
  (return-type "none")
  (parameters
    '("const-GstCaps*" "allowed_caps")
  )
)



;; From gstaudiosink.h

(define-function gst_audio_sink_get_type
  (c-name "gst_audio_sink_get_type")
  (return-type "GType")
)



;; From gstaudiosrc.h

(define-function gst_audio_src_get_type
  (c-name "gst_audio_src_get_type")
  (return-type "GType")
)



;; From gstbaseaudiosink.h

(define-function gst_base_audio_sink_get_type
  (c-name "gst_base_audio_sink_get_type")
  (return-type "GType")
)

(define-method create_ringbuffer
  (of-object "GstBaseAudioSink")
  (c-name "gst_base_audio_sink_create_ringbuffer")
  (return-type "GstRingBuffer*")
)

(define-method set_provide_clock
  (of-object "GstBaseAudioSink")
  (c-name "gst_base_audio_sink_set_provide_clock")
  (return-type "none")
  (parameters
    '("gboolean" "provide")
  )
)

(define-method get_provide_clock
  (of-object "GstBaseAudioSink")
  (c-name "gst_base_audio_sink_get_provide_clock")
  (return-type "gboolean")
)

(define-method set_slave_method
  (of-object "GstBaseAudioSink")
  (c-name "gst_base_audio_sink_set_slave_method")
  (return-type "none")
  (parameters
    '("GstBaseAudioSinkSlaveMethod" "method")
  )
)

(define-method get_slave_method
  (of-object "GstBaseAudioSink")
  (c-name "gst_base_audio_sink_get_slave_method")
  (return-type "GstBaseAudioSinkSlaveMethod")
)



;; From gstbaseaudiosrc.h

(define-function gst_base_audio_src_get_type
  (c-name "gst_base_audio_src_get_type")
  (return-type "GType")
)

(define-method create_ringbuffer
  (of-object "GstBaseAudioSrc")
  (c-name "gst_base_audio_src_create_ringbuffer")
  (return-type "GstRingBuffer*")
)

(define-method set_provide_clock
  (of-object "GstBaseAudioSrc")
  (c-name "gst_base_audio_src_set_provide_clock")
  (return-type "none")
  (parameters
    '("gboolean" "provide")
  )
)

(define-method get_provide_clock
  (of-object "GstBaseAudioSrc")
  (c-name "gst_base_audio_src_get_provide_clock")
  (return-type "gboolean")
)

(define-method set_slave_method
  (of-object "GstBaseAudioSrc")
  (c-name "gst_base_audio_src_set_slave_method")
  (return-type "none")
  (parameters
    '("GstBaseAudioSrcSlaveMethod" "method")
  )
)

(define-method get_slave_method
  (of-object "GstBaseAudioSrc")
  (c-name "gst_base_audio_src_get_slave_method")
  (return-type "GstBaseAudioSrcSlaveMethod")
)



;; From gstringbuffer.h

(define-function gst_ring_buffer_get_type
  (c-name "gst_ring_buffer_get_type")
  (return-type "GType")
)

(define-method set_callback
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_set_callback")
  (return-type "none")
  (parameters
    '("GstRingBufferCallback" "cb")
    '("gpointer" "user_data")
  )
)

(define-function gst_ring_buffer_parse_caps
  (c-name "gst_ring_buffer_parse_caps")
  (return-type "gboolean")
  (parameters
    '("GstRingBufferSpec*" "spec")
    '("GstCaps*" "caps")
  )
)

(define-function gst_ring_buffer_debug_spec_caps
  (c-name "gst_ring_buffer_debug_spec_caps")
  (return-type "none")
  (parameters
    '("GstRingBufferSpec*" "spec")
  )
)

(define-function gst_ring_buffer_debug_spec_buff
  (c-name "gst_ring_buffer_debug_spec_buff")
  (return-type "none")
  (parameters
    '("GstRingBufferSpec*" "spec")
  )
)

(define-method convert
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_convert")
  (return-type "gboolean")
  (parameters
    '("GstFormat" "src_fmt")
    '("gint64" "src_val")
    '("GstFormat" "dest_fmt")
    '("gint64*" "dest_val")
  )
)

(define-method open_device
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_open_device")
  (return-type "gboolean")
)

(define-method close_device
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_close_device")
  (return-type "gboolean")
)

(define-method device_is_open
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_device_is_open")
  (return-type "gboolean")
)

(define-method acquire
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_acquire")
  (return-type "gboolean")
  (parameters
    '("GstRingBufferSpec*" "spec")
  )
)

(define-method release
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_release")
  (return-type "gboolean")
)

(define-method is_acquired
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_is_acquired")
  (return-type "gboolean")
)

(define-method activate
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_activate")
  (return-type "gboolean")
  (parameters
    '("gboolean" "active")
  )
)

(define-method is_active
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_is_active")
  (return-type "gboolean")
)

(define-method set_flushing
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_set_flushing")
  (return-type "none")
  (parameters
    '("gboolean" "flushing")
  )
)

(define-method start
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_start")
  (return-type "gboolean")
)

(define-method pause
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_pause")
  (return-type "gboolean")
)

(define-method stop
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_stop")
  (return-type "gboolean")
)

(define-method delay
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_delay")
  (return-type "guint")
)

(define-method samples_done
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_samples_done")
  (return-type "guint64")
)

(define-method set_sample
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_set_sample")
  (return-type "none")
  (parameters
    '("guint64" "sample")
  )
)

(define-method clear_all
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_clear_all")
  (return-type "none")
)

(define-method commit
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_commit")
  (return-type "guint")
  (parameters
    '("guint64" "sample")
    '("guchar*" "data")
    '("guint" "len")
  )
)

(define-method commit_full
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_commit_full")
  (return-type "guint")
  (parameters
    '("guint64*" "sample")
    '("guchar*" "data")
    '("gint" "in_samples")
    '("gint" "out_samples")
    '("gint*" "accum")
  )
)

(define-method read
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_read")
  (return-type "guint")
  (parameters
    '("guint64" "sample")
    '("guchar*" "data")
    '("guint" "len")
  )
)

(define-method prepare_read
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_prepare_read")
  (return-type "gboolean")
  (parameters
    '("gint*" "segment")
    '("guint8**" "readptr")
    '("gint*" "len")
  )
)

(define-method clear
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_clear")
  (return-type "none")
  (parameters
    '("gint" "segment")
  )
)

(define-method advance
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_advance")
  (return-type "none")
  (parameters
    '("guint" "advance")
  )
)

(define-method may_start
  (of-object "GstRingBuffer")
  (c-name "gst_ring_buffer_may_start")
  (return-type "none")
  (parameters
    '("gboolean" "allowed")
  )
)



;; From mixerutils.h

(define-function gst_audio_default_registry_mixer_filter
  (c-name "gst_audio_default_registry_mixer_filter")
  (return-type "GList*")
  (parameters
    '("GstAudioMixerFilterFunc" "filter_func")
    '("gboolean" "first")
    '("gpointer" "user_data")
  )
)



;; From multichannel-enumtypes.h

(define-function gst_audio_channel_position_get_type
  (c-name "gst_audio_channel_position_get_type")
  (return-type "GType")
)



;; From multichannel.h

(define-function gst_audio_get_channel_positions
  (c-name "gst_audio_get_channel_positions")
  (return-type "GstAudioChannelPosition*")
  (parameters
    '("GstStructure*" "str")
  )
)

(define-function gst_audio_set_channel_positions
  (c-name "gst_audio_set_channel_positions")
  (return-type "none")
  (parameters
    '("GstStructure*" "str")
    '("const-GstAudioChannelPosition*" "pos")
  )
)

(define-function gst_audio_set_structure_channel_positions_list
  (c-name "gst_audio_set_structure_channel_positions_list")
  (return-type "none")
  (parameters
    '("GstStructure*" "str")
    '("const-GstAudioChannelPosition*" "pos")
    '("gint" "num_positions")
  )
)

(define-function gst_audio_set_caps_channel_positions_list
  (c-name "gst_audio_set_caps_channel_positions_list")
  (return-type "none")
  (parameters
    '("GstCaps*" "caps")
    '("const-GstAudioChannelPosition*" "pos")
    '("gint" "num_positions")
  )
)

(define-function gst_audio_fixate_channel_positions
  (c-name "gst_audio_fixate_channel_positions")
  (return-type "GstAudioChannelPosition*")
  (parameters
    '("GstStructure*" "str")
  )
)

(define-function gst_audio_check_channel_positions
  (c-name "gst_audio_check_channel_positions")
  (return-type "gboolean")
  (parameters
    '("const-GstAudioChannelPosition*" "pos")
    '("guint" "channels")
  )
)



;; From gstcddabasesrc.h

(define-function gst_cdda_base_src_get_type
  (c-name "gst_cdda_base_src_get_type")
  (return-type "GType")
)

(define-method add_track
  (of-object "GstCddaBaseSrc")
  (c-name "gst_cdda_base_src_add_track")
  (return-type "gboolean")
  (parameters
    '("GstCddaBaseSrcTrack*" "track")
  )
)



;; From sha1.h

(define-function sha_init
  (c-name "sha_init")
  (return-type "none")
  (parameters
    '("SHA_INFO" "*")
  )
)

(define-function sha_update
  (c-name "sha_update")
  (return-type "none")
  (parameters
    '("SHA_INFO" "*")
    '("SHA_BYTE" "*")
  )
)

(define-function sha_final
  (c-name "sha_final")
  (return-type "none")
  (parameters
    '("unsigned-char" "[20]")
    '("SHA_INFO" "*")
  )
)



;; From gstfftf32.h

(define-function gst_fft_f32_new
  (c-name "gst_fft_f32_new")
  (is-constructor-of "GstFftF32")
  (return-type "GstFFTF32*")
  (parameters
    '("gint" "len")
    '("gboolean" "inverse")
  )
)

(define-method fft
  (of-object "GstFFTF32")
  (c-name "gst_fft_f32_fft")
  (return-type "none")
  (parameters
    '("const-gfloat*" "timedata")
    '("GstFFTF32Complex*" "freqdata")
  )
)

(define-method inverse_fft
  (of-object "GstFFTF32")
  (c-name "gst_fft_f32_inverse_fft")
  (return-type "none")
  (parameters
    '("const-GstFFTF32Complex*" "freqdata")
    '("gfloat*" "timedata")
  )
)

(define-method free
  (of-object "GstFFTF32")
  (c-name "gst_fft_f32_free")
  (return-type "none")
)

(define-method window
  (of-object "GstFFTF32")
  (c-name "gst_fft_f32_window")
  (return-type "none")
  (parameters
    '("gfloat*" "timedata")
    '("GstFFTWindow" "window")
  )
)



;; From gstfftf64.h

(define-function gst_fft_f64_new
  (c-name "gst_fft_f64_new")
  (is-constructor-of "GstFftF64")
  (return-type "GstFFTF64*")
  (parameters
    '("gint" "len")
    '("gboolean" "inverse")
  )
)

(define-method fft
  (of-object "GstFFTF64")
  (c-name "gst_fft_f64_fft")
  (return-type "none")
  (parameters
    '("const-gdouble*" "timedata")
    '("GstFFTF64Complex*" "freqdata")
  )
)

(define-method inverse_fft
  (of-object "GstFFTF64")
  (c-name "gst_fft_f64_inverse_fft")
  (return-type "none")
  (parameters
    '("const-GstFFTF64Complex*" "freqdata")
    '("gdouble*" "timedata")
  )
)

(define-method free
  (of-object "GstFFTF64")
  (c-name "gst_fft_f64_free")
  (return-type "none")
)

(define-method window
  (of-object "GstFFTF64")
  (c-name "gst_fft_f64_window")
  (return-type "none")
  (parameters
    '("gdouble*" "timedata")
    '("GstFFTWindow" "window")
  )
)



;; From gstfft.h

(define-function gst_fft_next_fast_length
  (c-name "gst_fft_next_fast_length")
  (return-type "gint")
  (parameters
    '("gint" "n")
  )
)



;; From gstffts16.h

(define-function gst_fft_s16_new
  (c-name "gst_fft_s16_new")
  (is-constructor-of "GstFftS16")
  (return-type "GstFFTS16*")
  (parameters
    '("gint" "len")
    '("gboolean" "inverse")
  )
)

(define-method fft
  (of-object "GstFFTS16")
  (c-name "gst_fft_s16_fft")
  (return-type "none")
  (parameters
    '("const-gint16*" "timedata")
    '("GstFFTS16Complex*" "freqdata")
  )
)

(define-method inverse_fft
  (of-object "GstFFTS16")
  (c-name "gst_fft_s16_inverse_fft")
  (return-type "none")
  (parameters
    '("const-GstFFTS16Complex*" "freqdata")
    '("gint16*" "timedata")
  )
)

(define-method free
  (of-object "GstFFTS16")
  (c-name "gst_fft_s16_free")
  (return-type "none")
)

(define-method window
  (of-object "GstFFTS16")
  (c-name "gst_fft_s16_window")
  (return-type "none")
  (parameters
    '("gint16*" "timedata")
    '("GstFFTWindow" "window")
  )
)



;; From gstffts32.h

(define-function gst_fft_s32_new
  (c-name "gst_fft_s32_new")
  (is-constructor-of "GstFftS32")
  (return-type "GstFFTS32*")
  (parameters
    '("gint" "len")
    '("gboolean" "inverse")
  )
)

(define-method fft
  (of-object "GstFFTS32")
  (c-name "gst_fft_s32_fft")
  (return-type "none")
  (parameters
    '("const-gint32*" "timedata")
    '("GstFFTS32Complex*" "freqdata")
  )
)

(define-method inverse_fft
  (of-object "GstFFTS32")
  (c-name "gst_fft_s32_inverse_fft")
  (return-type "none")
  (parameters
    '("const-GstFFTS32Complex*" "freqdata")
    '("gint32*" "timedata")
  )
)

(define-method free
  (of-object "GstFFTS32")
  (c-name "gst_fft_s32_free")
  (return-type "none")
)

(define-method window
  (of-object "GstFFTS32")
  (c-name "gst_fft_s32_window")
  (return-type "none")
  (parameters
    '("gint32*" "timedata")
    '("GstFFTWindow" "window")
  )
)



;; From kiss_fft_f32.h

(define-function kiss_fft_f32_alloc
  (c-name "kiss_fft_f32_alloc")
  (return-type "kiss_fft_f32_cfg")
  (parameters
    '("int" "nfft")
    '("int" "inverse_fft")
    '("void*" "mem")
    '("size_t*" "lenmem")
  )
)

(define-function kiss_fft_f32
  (c-name "kiss_fft_f32")
  (return-type "none")
  (parameters
    '("kiss_fft_f32_cfg" "cfg")
    '("const-kiss_fft_f32_cpx*" "fin")
    '("kiss_fft_f32_cpx*" "fout")
  )
)

(define-function kiss_fft_f32_stride
  (c-name "kiss_fft_f32_stride")
  (return-type "none")
  (parameters
    '("kiss_fft_f32_cfg" "cfg")
    '("const-kiss_fft_f32_cpx*" "fin")
    '("kiss_fft_f32_cpx*" "fout")
    '("int" "fin_stride")
  )
)

(define-function kiss_fft_f32_cleanup
  (c-name "kiss_fft_f32_cleanup")
  (return-type "none")
)

(define-function kiss_fft_f32_next_fast_size
  (c-name "kiss_fft_f32_next_fast_size")
  (return-type "int")
  (parameters
    '("int" "n")
  )
)



;; From kiss_fft_f64.h

(define-function kiss_fft_f64_alloc
  (c-name "kiss_fft_f64_alloc")
  (return-type "kiss_fft_f64_cfg")
  (parameters
    '("int" "nfft")
    '("int" "inverse_fft")
    '("void*" "mem")
    '("size_t*" "lenmem")
  )
)

(define-function kiss_fft_f64
  (c-name "kiss_fft_f64")
  (return-type "none")
  (parameters
    '("kiss_fft_f64_cfg" "cfg")
    '("const-kiss_fft_f64_cpx*" "fin")
    '("kiss_fft_f64_cpx*" "fout")
  )
)

(define-function kiss_fft_f64_stride
  (c-name "kiss_fft_f64_stride")
  (return-type "none")
  (parameters
    '("kiss_fft_f64_cfg" "cfg")
    '("const-kiss_fft_f64_cpx*" "fin")
    '("kiss_fft_f64_cpx*" "fout")
    '("int" "fin_stride")
  )
)

(define-function kiss_fft_f64_cleanup
  (c-name "kiss_fft_f64_cleanup")
  (return-type "none")
)

(define-function kiss_fft_f64_next_fast_size
  (c-name "kiss_fft_f64_next_fast_size")
  (return-type "int")
  (parameters
    '("int" "n")
  )
)



;; From _kiss_fft_guts_f32.h



;; From _kiss_fft_guts_f64.h



;; From _kiss_fft_guts_s16.h



;; From _kiss_fft_guts_s32.h



;; From kiss_fftr_f32.h

(define-function kiss_fftr_f32_alloc
  (c-name "kiss_fftr_f32_alloc")
  (return-type "kiss_fftr_f32_cfg")
  (parameters
    '("int" "nfft")
    '("int" "inverse_fft")
    '("void*" "mem")
    '("size_t*" "lenmem")
  )
)

(define-function kiss_fftr_f32
  (c-name "kiss_fftr_f32")
  (return-type "none")
  (parameters
    '("kiss_fftr_f32_cfg" "cfg")
    '("const-kiss_fft_f32_scalar*" "timedata")
    '("kiss_fft_f32_cpx*" "freqdata")
  )
)

(define-function kiss_fftri_f32
  (c-name "kiss_fftri_f32")
  (return-type "none")
  (parameters
    '("kiss_fftr_f32_cfg" "cfg")
    '("const-kiss_fft_f32_cpx*" "freqdata")
    '("kiss_fft_f32_scalar*" "timedata")
  )
)



;; From kiss_fftr_f64.h

(define-function kiss_fftr_f64_alloc
  (c-name "kiss_fftr_f64_alloc")
  (return-type "kiss_fftr_f64_cfg")
  (parameters
    '("int" "nfft")
    '("int" "inverse_fft")
    '("void*" "mem")
    '("size_t*" "lenmem")
  )
)

(define-function kiss_fftr_f64
  (c-name "kiss_fftr_f64")
  (return-type "none")
  (parameters
    '("kiss_fftr_f64_cfg" "cfg")
    '("const-kiss_fft_f64_scalar*" "timedata")
    '("kiss_fft_f64_cpx*" "freqdata")
  )
)

(define-function kiss_fftri_f64
  (c-name "kiss_fftri_f64")
  (return-type "none")
  (parameters
    '("kiss_fftr_f64_cfg" "cfg")
    '("const-kiss_fft_f64_cpx*" "freqdata")
    '("kiss_fft_f64_scalar*" "timedata")
  )
)



;; From kiss_fftr_s16.h

(define-function kiss_fftr_s16_alloc
  (c-name "kiss_fftr_s16_alloc")
  (return-type "kiss_fftr_s16_cfg")
  (parameters
    '("int" "nfft")
    '("int" "inverse_fft")
    '("void*" "mem")
    '("size_t*" "lenmem")
  )
)

(define-function kiss_fftr_s16
  (c-name "kiss_fftr_s16")
  (return-type "none")
  (parameters
    '("kiss_fftr_s16_cfg" "cfg")
    '("const-kiss_fft_s16_scalar*" "timedata")
    '("kiss_fft_s16_cpx*" "freqdata")
  )
)

(define-function kiss_fftri_s16
  (c-name "kiss_fftri_s16")
  (return-type "none")
  (parameters
    '("kiss_fftr_s16_cfg" "cfg")
    '("const-kiss_fft_s16_cpx*" "freqdata")
    '("kiss_fft_s16_scalar*" "timedata")
  )
)



;; From kiss_fftr_s32.h

(define-function kiss_fftr_s32_alloc
  (c-name "kiss_fftr_s32_alloc")
  (return-type "kiss_fftr_s32_cfg")
  (parameters
    '("int" "nfft")
    '("int" "inverse_fft")
    '("void*" "mem")
    '("size_t*" "lenmem")
  )
)

(define-function kiss_fftr_s32
  (c-name "kiss_fftr_s32")
  (return-type "none")
  (parameters
    '("kiss_fftr_s32_cfg" "cfg")
    '("const-kiss_fft_s32_scalar*" "timedata")
    '("kiss_fft_s32_cpx*" "freqdata")
  )
)

(define-function kiss_fftri_s32
  (c-name "kiss_fftri_s32")
  (return-type "none")
  (parameters
    '("kiss_fftr_s32_cfg" "cfg")
    '("const-kiss_fft_s32_cpx*" "freqdata")
    '("kiss_fft_s32_scalar*" "timedata")
  )
)



;; From kiss_fft_s16.h

(define-function kiss_fft_s16_alloc
  (c-name "kiss_fft_s16_alloc")
  (return-type "kiss_fft_s16_cfg")
  (parameters
    '("int" "nfft")
    '("int" "inverse_fft")
    '("void*" "mem")
    '("size_t*" "lenmem")
  )
)

(define-function kiss_fft_s16
  (c-name "kiss_fft_s16")
  (return-type "none")
  (parameters
    '("kiss_fft_s16_cfg" "cfg")
    '("const-kiss_fft_s16_cpx*" "fin")
    '("kiss_fft_s16_cpx*" "fout")
  )
)

(define-function kiss_fft_s16_stride
  (c-name "kiss_fft_s16_stride")
  (return-type "none")
  (parameters
    '("kiss_fft_s16_cfg" "cfg")
    '("const-kiss_fft_s16_cpx*" "fin")
    '("kiss_fft_s16_cpx*" "fout")
    '("int" "fin_stride")
  )
)

(define-function kiss_fft_s16_cleanup
  (c-name "kiss_fft_s16_cleanup")
  (return-type "none")
)

(define-function kiss_fft_s16_next_fast_size
  (c-name "kiss_fft_s16_next_fast_size")
  (return-type "int")
  (parameters
    '("int" "n")
  )
)



;; From kiss_fft_s32.h

(define-function kiss_fft_s32_alloc
  (c-name "kiss_fft_s32_alloc")
  (return-type "kiss_fft_s32_cfg")
  (parameters
    '("int" "nfft")
    '("int" "inverse_fft")
    '("void*" "mem")
    '("size_t*" "lenmem")
  )
)

(define-function kiss_fft_s32
  (c-name "kiss_fft_s32")
  (return-type "none")
  (parameters
    '("kiss_fft_s32_cfg" "cfg")
    '("const-kiss_fft_s32_cpx*" "fin")
    '("kiss_fft_s32_cpx*" "fout")
  )
)

(define-function kiss_fft_s32_stride
  (c-name "kiss_fft_s32_stride")
  (return-type "none")
  (parameters
    '("kiss_fft_s32_cfg" "cfg")
    '("const-kiss_fft_s32_cpx*" "fin")
    '("kiss_fft_s32_cpx*" "fout")
    '("int" "fin_stride")
  )
)

(define-function kiss_fft_s32_cleanup
  (c-name "kiss_fft_s32_cleanup")
  (return-type "none")
)

(define-function kiss_fft_s32_next_fast_size
  (c-name "kiss_fft_s32_next_fast_size")
  (return-type "int")
  (parameters
    '("int" "n")
  )
)



;; From floatcast.h



;; From colorbalancechannel.h

(define-function gst_color_balance_channel_get_type
  (c-name "gst_color_balance_channel_get_type")
  (return-type "GType")
)



;; From colorbalance.h

(define-function gst_color_balance_get_type
  (c-name "gst_color_balance_get_type")
  (return-type "GType")
)

(define-method list_channels
  (of-object "GstColorBalance")
  (c-name "gst_color_balance_list_channels")
  (return-type "const-GList*")
)

(define-method set_value
  (of-object "GstColorBalance")
  (c-name "gst_color_balance_set_value")
  (return-type "none")
  (parameters
    '("GstColorBalanceChannel*" "channel")
    '("gint" "value")
  )
)

(define-method get_value
  (of-object "GstColorBalance")
  (c-name "gst_color_balance_get_value")
  (return-type "gint")
  (parameters
    '("GstColorBalanceChannel*" "channel")
  )
)

(define-method value_changed
  (of-object "GstColorBalance")
  (c-name "gst_color_balance_value_changed")
  (return-type "none")
  (parameters
    '("GstColorBalanceChannel*" "channel")
    '("gint" "value")
  )
)



;; From interfaces-enumtypes.h

(define-function gst_color_balance_type_get_type
  (c-name "gst_color_balance_type_get_type")
  (return-type "GType")
)

(define-function gst_mixer_type_get_type
  (c-name "gst_mixer_type_get_type")
  (return-type "GType")
)

(define-function gst_mixer_message_type_get_type
  (c-name "gst_mixer_message_type_get_type")
  (return-type "GType")
)

(define-function gst_mixer_flags_get_type
  (c-name "gst_mixer_flags_get_type")
  (return-type "GType")
)

(define-function gst_mixer_track_flags_get_type
  (c-name "gst_mixer_track_flags_get_type")
  (return-type "GType")
)

(define-function gst_tuner_channel_flags_get_type
  (c-name "gst_tuner_channel_flags_get_type")
  (return-type "GType")
)



;; From interfaces-marshal.h



;; From mixer.h

(define-function gst_mixer_get_type
  (c-name "gst_mixer_get_type")
  (return-type "GType")
)

(define-method list_tracks
  (of-object "GstMixer")
  (c-name "gst_mixer_list_tracks")
  (return-type "const-GList*")
)

(define-method set_volume
  (of-object "GstMixer")
  (c-name "gst_mixer_set_volume")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gint*" "volumes")
  )
)

(define-method get_volume
  (of-object "GstMixer")
  (c-name "gst_mixer_get_volume")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gint*" "volumes")
  )
)

(define-method set_mute
  (of-object "GstMixer")
  (c-name "gst_mixer_set_mute")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gboolean" "mute")
  )
)

(define-method set_record
  (of-object "GstMixer")
  (c-name "gst_mixer_set_record")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gboolean" "record")
  )
)

(define-method set_option
  (of-object "GstMixer")
  (c-name "gst_mixer_set_option")
  (return-type "none")
  (parameters
    '("GstMixerOptions*" "opts")
    '("gchar*" "value")
  )
)

(define-method get_option
  (of-object "GstMixer")
  (c-name "gst_mixer_get_option")
  (return-type "const-gchar*")
  (parameters
    '("GstMixerOptions*" "opts")
  )
)

(define-method mute_toggled
  (of-object "GstMixer")
  (c-name "gst_mixer_mute_toggled")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gboolean" "mute")
  )
)

(define-method record_toggled
  (of-object "GstMixer")
  (c-name "gst_mixer_record_toggled")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gboolean" "record")
  )
)

(define-method volume_changed
  (of-object "GstMixer")
  (c-name "gst_mixer_volume_changed")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gint*" "volumes")
  )
)

(define-method option_changed
  (of-object "GstMixer")
  (c-name "gst_mixer_option_changed")
  (return-type "none")
  (parameters
    '("GstMixerOptions*" "opts")
    '("gchar*" "value")
  )
)

(define-method mixer_changed
  (of-object "GstMixer")
  (c-name "gst_mixer_mixer_changed")
  (return-type "none")
)

(define-method options_list_changed
  (of-object "GstMixer")
  (c-name "gst_mixer_options_list_changed")
  (return-type "none")
  (parameters
    '("GstMixerOptions*" "opts")
  )
)

(define-method get_mixer_flags
  (of-object "GstMixer")
  (c-name "gst_mixer_get_mixer_flags")
  (return-type "GstMixerFlags")
)

(define-function gst_mixer_message_get_type
  (c-name "gst_mixer_message_get_type")
  (return-type "GstMixerMessageType")
  (parameters
    '("GstMessage*" "message")
  )
)

(define-function gst_mixer_message_parse_mute_toggled
  (c-name "gst_mixer_message_parse_mute_toggled")
  (return-type "none")
  (parameters
    '("GstMessage*" "message")
    '("GstMixerTrack**" "track")
    '("gboolean*" "mute")
  )
)

(define-function gst_mixer_message_parse_record_toggled
  (c-name "gst_mixer_message_parse_record_toggled")
  (return-type "none")
  (parameters
    '("GstMessage*" "message")
    '("GstMixerTrack**" "track")
    '("gboolean*" "record")
  )
)

(define-function gst_mixer_message_parse_volume_changed
  (c-name "gst_mixer_message_parse_volume_changed")
  (return-type "none")
  (parameters
    '("GstMessage*" "message")
    '("GstMixerTrack**" "track")
    '("gint**" "volumes")
    '("gint*" "num_channels")
  )
)

(define-function gst_mixer_message_parse_option_changed
  (c-name "gst_mixer_message_parse_option_changed")
  (return-type "none")
  (parameters
    '("GstMessage*" "message")
    '("GstMixerOptions**" "options")
    '("const-gchar**" "value")
  )
)

(define-function gst_mixer_message_parse_options_list_changed
  (c-name "gst_mixer_message_parse_options_list_changed")
  (return-type "none")
  (parameters
    '("GstMessage*" "message")
    '("GstMixerOptions**" "options")
  )
)



;; From mixeroptions.h

(define-function gst_mixer_options_get_type
  (c-name "gst_mixer_options_get_type")
  (return-type "GType")
)

(define-method get_values
  (of-object "GstMixerOptions")
  (c-name "gst_mixer_options_get_values")
  (return-type "GList*")
)



;; From mixertrack.h

(define-function gst_mixer_track_get_type
  (c-name "gst_mixer_track_get_type")
  (return-type "GType")
)



;; From navigation.h

(define-function gst_navigation_get_type
  (c-name "gst_navigation_get_type")
  (return-type "GType")
)

(define-method send_event
  (of-object "GstNavigation")
  (c-name "gst_navigation_send_event")
  (return-type "none")
  (parameters
    '("GstStructure*" "structure")
  )
)

(define-method send_key_event
  (of-object "GstNavigation")
  (c-name "gst_navigation_send_key_event")
  (return-type "none")
  (parameters
    '("const-char*" "event")
    '("const-char*" "key")
  )
)

(define-method send_mouse_event
  (of-object "GstNavigation")
  (c-name "gst_navigation_send_mouse_event")
  (return-type "none")
  (parameters
    '("const-char*" "event")
    '("int" "button")
    '("double" "x")
    '("double" "y")
  )
)



;; From propertyprobe.h

(define-function gst_property_probe_get_type
  (c-name "gst_property_probe_get_type")
  (return-type "GType")
)

(define-method get_properties
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_get_properties")
  (return-type "const-GList*")
)

(define-method get_property
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_get_property")
  (return-type "const-GParamSpec*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method probe_property
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_probe_property")
  (return-type "none")
  (parameters
    '("const-GParamSpec*" "pspec")
  )
)

(define-method probe_property_name
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_probe_property_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method needs_probe
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_needs_probe")
  (return-type "gboolean")
  (parameters
    '("const-GParamSpec*" "pspec")
  )
)

(define-method needs_probe_name
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_needs_probe_name")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_values
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_get_values")
  (return-type "GValueArray*")
  (parameters
    '("const-GParamSpec*" "pspec")
  )
)

(define-method get_values_name
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_get_values_name")
  (return-type "GValueArray*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method probe_and_get_values
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_probe_and_get_values")
  (return-type "GValueArray*")
  (parameters
    '("const-GParamSpec*" "pspec")
  )
)

(define-method probe_and_get_values_name
  (of-object "GstPropertyProbe")
  (c-name "gst_property_probe_probe_and_get_values_name")
  (return-type "GValueArray*")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From tunerchannel.h

(define-function gst_tuner_channel_get_type
  (c-name "gst_tuner_channel_get_type")
  (return-type "GType")
)



;; From tuner.h

(define-function gst_tuner_get_type
  (c-name "gst_tuner_get_type")
  (return-type "GType")
)

(define-method list_channels
  (of-object "GstTuner")
  (c-name "gst_tuner_list_channels")
  (return-type "const-GList*")
)

(define-method set_channel
  (of-object "GstTuner")
  (c-name "gst_tuner_set_channel")
  (return-type "none")
  (parameters
    '("GstTunerChannel*" "channel")
  )
)

(define-method get_channel
  (of-object "GstTuner")
  (c-name "gst_tuner_get_channel")
  (return-type "GstTunerChannel*")
)

(define-method list_norms
  (of-object "GstTuner")
  (c-name "gst_tuner_list_norms")
  (return-type "const-GList*")
)

(define-method set_norm
  (of-object "GstTuner")
  (c-name "gst_tuner_set_norm")
  (return-type "none")
  (parameters
    '("GstTunerNorm*" "norm")
  )
)

(define-method get_norm
  (of-object "GstTuner")
  (c-name "gst_tuner_get_norm")
  (return-type "GstTunerNorm*")
)

(define-method set_frequency
  (of-object "GstTuner")
  (c-name "gst_tuner_set_frequency")
  (return-type "none")
  (parameters
    '("GstTunerChannel*" "channel")
    '("gulong" "frequency")
  )
)

(define-method get_frequency
  (of-object "GstTuner")
  (c-name "gst_tuner_get_frequency")
  (return-type "gulong")
  (parameters
    '("GstTunerChannel*" "channel")
  )
)

(define-method signal_strength
  (of-object "GstTuner")
  (c-name "gst_tuner_signal_strength")
  (return-type "gint")
  (parameters
    '("GstTunerChannel*" "channel")
  )
)

(define-method find_norm_by_name
  (of-object "GstTuner")
  (c-name "gst_tuner_find_norm_by_name")
  (return-type "GstTunerNorm*")
  (parameters
    '("gchar*" "norm")
  )
)

(define-method find_channel_by_name
  (of-object "GstTuner")
  (c-name "gst_tuner_find_channel_by_name")
  (return-type "GstTunerChannel*")
  (parameters
    '("gchar*" "channel")
  )
)

(define-method channel_changed
  (of-object "GstTuner")
  (c-name "gst_tuner_channel_changed")
  (return-type "none")
  (parameters
    '("GstTunerChannel*" "channel")
  )
)

(define-method norm_changed
  (of-object "GstTuner")
  (c-name "gst_tuner_norm_changed")
  (return-type "none")
  (parameters
    '("GstTunerNorm*" "norm")
  )
)

(define-method frequency_changed
  (of-object "GstTuner")
  (c-name "gst_tuner_frequency_changed")
  (return-type "none")
  (parameters
    '("GstTunerChannel*" "channel")
    '("gulong" "frequency")
  )
)

(define-method signal_changed
  (of-object "GstTuner")
  (c-name "gst_tuner_signal_changed")
  (return-type "none")
  (parameters
    '("GstTunerChannel*" "channel")
    '("gint" "signal")
  )
)



;; From tunernorm.h

(define-function gst_tuner_norm_get_type
  (c-name "gst_tuner_norm_get_type")
  (return-type "GType")
)



;; From videoorientation.h

(define-function gst_video_orientation_get_type
  (c-name "gst_video_orientation_get_type")
  (return-type "GType")
)

(define-method get_hflip
  (of-object "GstVideoOrientation")
  (c-name "gst_video_orientation_get_hflip")
  (return-type "gboolean")
  (parameters
    '("gboolean*" "flip")
  )
)

(define-method get_vflip
  (of-object "GstVideoOrientation")
  (c-name "gst_video_orientation_get_vflip")
  (return-type "gboolean")
  (parameters
    '("gboolean*" "flip")
  )
)

(define-method get_hcenter
  (of-object "GstVideoOrientation")
  (c-name "gst_video_orientation_get_hcenter")
  (return-type "gboolean")
  (parameters
    '("gint*" "center")
  )
)

(define-method get_vcenter
  (of-object "GstVideoOrientation")
  (c-name "gst_video_orientation_get_vcenter")
  (return-type "gboolean")
  (parameters
    '("gint*" "center")
  )
)

(define-method set_hflip
  (of-object "GstVideoOrientation")
  (c-name "gst_video_orientation_set_hflip")
  (return-type "gboolean")
  (parameters
    '("gboolean" "flip")
  )
)

(define-method set_vflip
  (of-object "GstVideoOrientation")
  (c-name "gst_video_orientation_set_vflip")
  (return-type "gboolean")
  (parameters
    '("gboolean" "flip")
  )
)

(define-method set_hcenter
  (of-object "GstVideoOrientation")
  (c-name "gst_video_orientation_set_hcenter")
  (return-type "gboolean")
  (parameters
    '("gint" "center")
  )
)

(define-method set_vcenter
  (of-object "GstVideoOrientation")
  (c-name "gst_video_orientation_set_vcenter")
  (return-type "gboolean")
  (parameters
    '("gint" "center")
  )
)



;; From xoverlay.h

(define-function gst_x_overlay_get_type
  (c-name "gst_x_overlay_get_type")
  (return-type "GType")
)

(define-method set_xwindow_id
  (of-object "GstXOverlay")
  (c-name "gst_x_overlay_set_xwindow_id")
  (return-type "none")
  (parameters
    '("gulong" "xwindow_id")
  )
)

(define-method expose
  (of-object "GstXOverlay")
  (c-name "gst_x_overlay_expose")
  (return-type "none")
)

(define-method handle_events
  (of-object "GstXOverlay")
  (c-name "gst_x_overlay_handle_events")
  (return-type "none")
  (parameters
    '("gboolean" "handle_events")
  )
)

(define-method got_xwindow_id
  (of-object "GstXOverlay")
  (c-name "gst_x_overlay_got_xwindow_id")
  (return-type "none")
  (parameters
    '("gulong" "xwindow_id")
  )
)

(define-method prepare_xwindow_id
  (of-object "GstXOverlay")
  (c-name "gst_x_overlay_prepare_xwindow_id")
  (return-type "none")
)



;; From gstnetbuffer.h

(define-function gst_netbuffer_get_type
  (c-name "gst_netbuffer_get_type")
  (return-type "GType")
)

(define-function gst_netbuffer_new
  (c-name "gst_netbuffer_new")
  (is-constructor-of "GstNetbuffer")
  (return-type "GstNetBuffer*")
)

(define-method set_ip4_address
  (of-object "GstNetAddress")
  (c-name "gst_netaddress_set_ip4_address")
  (return-type "none")
  (parameters
    '("guint32" "address")
    '("guint16" "port")
  )
)

(define-method set_ip6_address
  (of-object "GstNetAddress")
  (c-name "gst_netaddress_set_ip6_address")
  (return-type "none")
  (parameters
    '("guint8" "address[16]")
    '("guint16" "port")
  )
)

(define-method get_net_type
  (of-object "GstNetAddress")
  (c-name "gst_netaddress_get_net_type")
  (return-type "GstNetType")
)

(define-method get_ip4_address
  (of-object "GstNetAddress")
  (c-name "gst_netaddress_get_ip4_address")
  (return-type "gboolean")
  (parameters
    '("guint32*" "address")
    '("guint16*" "port")
  )
)

(define-method get_ip6_address
  (of-object "GstNetAddress")
  (c-name "gst_netaddress_get_ip6_address")
  (return-type "gboolean")
  (parameters
    '("guint8" "address[16]")
    '("guint16*" "port")
  )
)

(define-method equal
  (of-object "GstNetAddress")
  (c-name "gst_netaddress_equal")
  (return-type "gboolean")
  (parameters
    '("const-GstNetAddress*" "naddr2")
  )
)



;; From riff-ids.h



;; From riff-media.h

(define-function gst_riff_create_video_caps
  (c-name "gst_riff_create_video_caps")
  (return-type "GstCaps*")
  (parameters
    '("guint32" "codec_fcc")
    '("gst_riff_strh*" "strh")
    '("gst_riff_strf_vids*" "strf")
    '("GstBuffer*" "strf_data")
    '("GstBuffer*" "strd_data")
    '("char**" "codec_name")
  )
)

(define-function gst_riff_create_audio_caps
  (c-name "gst_riff_create_audio_caps")
  (return-type "GstCaps*")
  (parameters
    '("guint16" "codec_id")
    '("gst_riff_strh*" "strh")
    '("gst_riff_strf_auds*" "strf")
    '("GstBuffer*" "strf_data")
    '("GstBuffer*" "strd_data")
    '("char**" "codec_name")
  )
)

(define-function gst_riff_create_iavs_caps
  (c-name "gst_riff_create_iavs_caps")
  (return-type "GstCaps*")
  (parameters
    '("guint32" "codec_fcc")
    '("gst_riff_strh*" "strh")
    '("gst_riff_strf_iavs*" "strf")
    '("GstBuffer*" "strf_data")
    '("GstBuffer*" "strd_data")
    '("char**" "codec_name")
  )
)

(define-function gst_riff_create_video_template_caps
  (c-name "gst_riff_create_video_template_caps")
  (return-type "GstCaps*")
)

(define-function gst_riff_create_audio_template_caps
  (c-name "gst_riff_create_audio_template_caps")
  (return-type "GstCaps*")
)

(define-function gst_riff_create_iavs_template_caps
  (c-name "gst_riff_create_iavs_template_caps")
  (return-type "GstCaps*")
)



;; From riff-read.h

(define-function gst_riff_read_chunk
  (c-name "gst_riff_read_chunk")
  (return-type "GstFlowReturn")
  (parameters
    '("GstElement*" "element")
    '("GstPad*" "pad")
    '("guint64*" "offset")
    '("guint32*" "tag")
    '("GstBuffer**" "chunk_data")
  )
)

(define-function gst_riff_parse_chunk
  (c-name "gst_riff_parse_chunk")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstBuffer*" "buf")
    '("guint*" "offset")
    '("guint32*" "fourcc")
    '("GstBuffer**" "chunk_data")
  )
)

(define-function gst_riff_parse_file_header
  (c-name "gst_riff_parse_file_header")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstBuffer*" "buf")
    '("guint32*" "doctype")
  )
)

(define-function gst_riff_parse_strh
  (c-name "gst_riff_parse_strh")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstBuffer*" "buf")
    '("gst_riff_strh**" "strh")
  )
)

(define-function gst_riff_parse_strf_vids
  (c-name "gst_riff_parse_strf_vids")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstBuffer*" "buf")
    '("gst_riff_strf_vids**" "strf")
    '("GstBuffer**" "data")
  )
)

(define-function gst_riff_parse_strf_auds
  (c-name "gst_riff_parse_strf_auds")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstBuffer*" "buf")
    '("gst_riff_strf_auds**" "strf")
    '("GstBuffer**" "data")
  )
)

(define-function gst_riff_parse_strf_iavs
  (c-name "gst_riff_parse_strf_iavs")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstBuffer*" "buf")
    '("gst_riff_strf_iavs**" "strf")
    '("GstBuffer**" "data")
  )
)

(define-function gst_riff_parse_info
  (c-name "gst_riff_parse_info")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
    '("GstBuffer*" "buf")
    '("GstTagList**" "taglist")
  )
)

(define-function gst_riff_init
  (c-name "gst_riff_init")
  (return-type "none")
)



;; From gstbasertpaudiopayload.h

(define-function gst_base_rtp_audio_payload_get_type
  (c-name "gst_base_rtp_audio_payload_get_type")
  (return-type "GType")
)

(define-method set_frame_based
  (of-object "GstBaseRTPAudioPayload")
  (c-name "gst_base_rtp_audio_payload_set_frame_based")
  (return-type "none")
)

(define-method set_sample_based
  (of-object "GstBaseRTPAudioPayload")
  (c-name "gst_base_rtp_audio_payload_set_sample_based")
  (return-type "none")
)

(define-method set_frame_options
  (of-object "GstBaseRTPAudioPayload")
  (c-name "gst_base_rtp_audio_payload_set_frame_options")
  (return-type "none")
  (parameters
    '("gint" "frame_duration")
    '("gint" "frame_size")
  )
)

(define-method set_sample_options
  (of-object "GstBaseRTPAudioPayload")
  (c-name "gst_base_rtp_audio_payload_set_sample_options")
  (return-type "none")
  (parameters
    '("gint" "sample_size")
  )
)

(define-method set_samplebits_options
  (of-object "GstBaseRTPAudioPayload")
  (c-name "gst_base_rtp_audio_payload_set_samplebits_options")
  (return-type "none")
  (parameters
    '("gint" "sample_size")
  )
)

(define-method push
  (of-object "GstBaseRTPAudioPayload")
  (c-name "gst_base_rtp_audio_payload_push")
  (return-type "GstFlowReturn")
  (parameters
    '("const-guint8*" "data")
    '("guint" "payload_len")
    '("GstClockTime" "timestamp")
  )
)

(define-method get_adapter
  (of-object "GstBaseRTPAudioPayload")
  (c-name "gst_base_rtp_audio_payload_get_adapter")
  (return-type "GstAdapter*")
)



;; From gstbasertpdepayload.h

(define-function gst_base_rtp_depayload_get_type
  (c-name "gst_base_rtp_depayload_get_type")
  (return-type "GType")
)

(define-method push
  (of-object "GstBaseRTPDepayload")
  (c-name "gst_base_rtp_depayload_push")
  (return-type "GstFlowReturn")
  (parameters
    '("GstBuffer*" "out_buf")
  )
)

(define-method push_ts
  (of-object "GstBaseRTPDepayload")
  (c-name "gst_base_rtp_depayload_push_ts")
  (return-type "GstFlowReturn")
  (parameters
    '("guint32" "timestamp")
    '("GstBuffer*" "out_buf")
  )
)



;; From gstbasertppayload.h

(define-function gst_basertppayload_get_type
  (c-name "gst_basertppayload_get_type")
  (return-type "GType")
)

(define-method set_options
  (of-object "GstBaseRTPPayload")
  (c-name "gst_basertppayload_set_options")
  (return-type "none")
  (parameters
    '("gchar*" "media")
    '("gboolean" "dynamic")
    '("gchar*" "encoding_name")
    '("guint32" "clock_rate")
  )
)

(define-method set_outcaps
  (of-object "GstBaseRTPPayload")
  (c-name "gst_basertppayload_set_outcaps")
  (return-type "gboolean")
  (parameters
    '("gchar*" "fieldname")
  )
  (varargs #t)
)

(define-method is_filled
  (of-object "GstBaseRTPPayload")
  (c-name "gst_basertppayload_is_filled")
  (return-type "gboolean")
  (parameters
    '("guint" "size")
    '("GstClockTime" "duration")
  )
)

(define-method push
  (of-object "GstBaseRTPPayload")
  (c-name "gst_basertppayload_push")
  (return-type "GstFlowReturn")
  (parameters
    '("GstBuffer*" "buffer")
  )
)



;; From gstrtcpbuffer.h

(define-function gst_rtcp_buffer_new_take_data
  (c-name "gst_rtcp_buffer_new_take_data")
  (return-type "GstBuffer*")
  (parameters
    '("gpointer" "data")
    '("guint" "len")
  )
)

(define-function gst_rtcp_buffer_new_copy_data
  (c-name "gst_rtcp_buffer_new_copy_data")
  (return-type "GstBuffer*")
  (parameters
    '("gpointer" "data")
    '("guint" "len")
  )
)

(define-function gst_rtcp_buffer_validate_data
  (c-name "gst_rtcp_buffer_validate_data")
  (return-type "gboolean")
  (parameters
    '("guint8*" "data")
    '("guint" "len")
  )
)

(define-function gst_rtcp_buffer_validate
  (c-name "gst_rtcp_buffer_validate")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtcp_buffer_new
  (c-name "gst_rtcp_buffer_new")
  (is-constructor-of "GstRtcpBuffer")
  (return-type "GstBuffer*")
  (parameters
    '("guint" "mtu")
  )
)

(define-function gst_rtcp_buffer_end
  (c-name "gst_rtcp_buffer_end")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtcp_buffer_get_packet_count
  (c-name "gst_rtcp_buffer_get_packet_count")
  (return-type "guint")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtcp_buffer_get_first_packet
  (c-name "gst_rtcp_buffer_get_first_packet")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
    '("GstRTCPPacket*" "packet")
  )
)

(define-method move_to_next
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_move_to_next")
  (return-type "gboolean")
)

(define-function gst_rtcp_buffer_add_packet
  (c-name "gst_rtcp_buffer_add_packet")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
    '("GstRTCPType" "type")
    '("GstRTCPPacket*" "packet")
  )
)

(define-method remove
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_remove")
  (return-type "none")
)

(define-method get_padding
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_get_padding")
  (return-type "gboolean")
)

(define-method get_count
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_get_count")
  (return-type "guint8")
)

(define-method get_type
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_get_type")
  (return-type "GstRTCPType")
)

(define-method get_length
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_get_length")
  (return-type "guint16")
)

(define-method sr_get_sender_info
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sr_get_sender_info")
  (return-type "none")
  (parameters
    '("guint32*" "ssrc")
    '("guint64*" "ntptime")
    '("guint32*" "rtptime")
    '("guint32*" "packet_count")
    '("guint32*" "octet_count")
  )
)

(define-method sr_set_sender_info
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sr_set_sender_info")
  (return-type "none")
  (parameters
    '("guint32" "ssrc")
    '("guint64" "ntptime")
    '("guint32" "rtptime")
    '("guint32" "packet_count")
    '("guint32" "octet_count")
  )
)

(define-method rr_get_ssrc
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_rr_get_ssrc")
  (return-type "guint32")
)

(define-method rr_set_ssrc
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_rr_set_ssrc")
  (return-type "none")
  (parameters
    '("guint32" "ssrc")
  )
)

(define-method get_rb_count
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_get_rb_count")
  (return-type "guint")
)

(define-method get_rb
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_get_rb")
  (return-type "none")
  (parameters
    '("guint" "nth")
    '("guint32*" "ssrc")
    '("guint8*" "fractionlost")
    '("gint32*" "packetslost")
    '("guint32*" "exthighestseq")
    '("guint32*" "jitter")
    '("guint32*" "lsr")
    '("guint32*" "dlsr")
  )
)

(define-method add_rb
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_add_rb")
  (return-type "gboolean")
  (parameters
    '("guint32" "ssrc")
    '("guint8" "fractionlost")
    '("gint32" "packetslost")
    '("guint32" "exthighestseq")
    '("guint32" "jitter")
    '("guint32" "lsr")
    '("guint32" "dlsr")
  )
)

(define-method set_rb
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_set_rb")
  (return-type "none")
  (parameters
    '("guint" "nth")
    '("guint32" "ssrc")
    '("guint8" "fractionlost")
    '("gint32" "packetslost")
    '("guint32" "exthighestseq")
    '("guint32" "jitter")
    '("guint32" "lsr")
    '("guint32" "dlsr")
  )
)

(define-method sdes_get_item_count
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_get_item_count")
  (return-type "guint")
)

(define-method sdes_first_item
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_first_item")
  (return-type "gboolean")
)

(define-method sdes_next_item
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_next_item")
  (return-type "gboolean")
)

(define-method sdes_get_ssrc
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_get_ssrc")
  (return-type "guint32")
)

(define-method sdes_first_entry
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_first_entry")
  (return-type "gboolean")
)

(define-method sdes_next_entry
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_next_entry")
  (return-type "gboolean")
)

(define-method sdes_get_entry
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_get_entry")
  (return-type "gboolean")
  (parameters
    '("GstRTCPSDESType*" "type")
    '("guint8*" "len")
    '("guint8**" "data")
  )
)

(define-method sdes_copy_entry
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_copy_entry")
  (return-type "gboolean")
  (parameters
    '("GstRTCPSDESType*" "type")
    '("guint8*" "len")
    '("guint8**" "data")
  )
)

(define-method sdes_add_item
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_add_item")
  (return-type "gboolean")
  (parameters
    '("guint32" "ssrc")
  )
)

(define-method sdes_add_entry
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_sdes_add_entry")
  (return-type "gboolean")
  (parameters
    '("GstRTCPSDESType" "type")
    '("guint8" "len")
    '("const-guint8*" "data")
  )
)

(define-method bye_get_ssrc_count
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_bye_get_ssrc_count")
  (return-type "guint")
)

(define-method bye_get_nth_ssrc
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_bye_get_nth_ssrc")
  (return-type "guint32")
  (parameters
    '("guint" "nth")
  )
)

(define-method bye_add_ssrc
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_bye_add_ssrc")
  (return-type "gboolean")
  (parameters
    '("guint32" "ssrc")
  )
)

(define-method bye_add_ssrcs
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_bye_add_ssrcs")
  (return-type "gboolean")
  (parameters
    '("guint32*" "ssrc")
    '("guint" "len")
  )
)

(define-method bye_get_reason_len
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_bye_get_reason_len")
  (return-type "guint8")
)

(define-method bye_get_reason
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_bye_get_reason")
  (return-type "gchar*")
)

(define-method bye_set_reason
  (of-object "GstRTCPPacket")
  (c-name "gst_rtcp_packet_bye_set_reason")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "reason")
  )
)

(define-function gst_rtcp_ntp_to_unix
  (c-name "gst_rtcp_ntp_to_unix")
  (return-type "guint64")
  (parameters
    '("guint64" "ntptime")
  )
)

(define-function gst_rtcp_unix_to_ntp
  (c-name "gst_rtcp_unix_to_ntp")
  (return-type "guint64")
  (parameters
    '("guint64" "unixtime")
  )
)



;; From gstrtpbuffer.h

(define-function gst_rtp_buffer_allocate_data
  (c-name "gst_rtp_buffer_allocate_data")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint" "payload_len")
    '("guint8" "pad_len")
    '("guint8" "csrc_count")
  )
)

(define-function gst_rtp_buffer_new_take_data
  (c-name "gst_rtp_buffer_new_take_data")
  (return-type "GstBuffer*")
  (parameters
    '("gpointer" "data")
    '("guint" "len")
  )
)

(define-function gst_rtp_buffer_new_copy_data
  (c-name "gst_rtp_buffer_new_copy_data")
  (return-type "GstBuffer*")
  (parameters
    '("gpointer" "data")
    '("guint" "len")
  )
)

(define-function gst_rtp_buffer_new_allocate
  (c-name "gst_rtp_buffer_new_allocate")
  (return-type "GstBuffer*")
  (parameters
    '("guint" "payload_len")
    '("guint8" "pad_len")
    '("guint8" "csrc_count")
  )
)

(define-function gst_rtp_buffer_new_allocate_len
  (c-name "gst_rtp_buffer_new_allocate_len")
  (return-type "GstBuffer*")
  (parameters
    '("guint" "packet_len")
    '("guint8" "pad_len")
    '("guint8" "csrc_count")
  )
)

(define-function gst_rtp_buffer_calc_header_len
  (c-name "gst_rtp_buffer_calc_header_len")
  (return-type "guint")
  (parameters
    '("guint8" "csrc_count")
  )
)

(define-function gst_rtp_buffer_calc_packet_len
  (c-name "gst_rtp_buffer_calc_packet_len")
  (return-type "guint")
  (parameters
    '("guint" "payload_len")
    '("guint8" "pad_len")
    '("guint8" "csrc_count")
  )
)

(define-function gst_rtp_buffer_calc_payload_len
  (c-name "gst_rtp_buffer_calc_payload_len")
  (return-type "guint")
  (parameters
    '("guint" "packet_len")
    '("guint8" "pad_len")
    '("guint8" "csrc_count")
  )
)

(define-function gst_rtp_buffer_validate_data
  (c-name "gst_rtp_buffer_validate_data")
  (return-type "gboolean")
  (parameters
    '("guint8*" "data")
    '("guint" "len")
  )
)

(define-function gst_rtp_buffer_validate
  (c-name "gst_rtp_buffer_validate")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_packet_len
  (c-name "gst_rtp_buffer_set_packet_len")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint" "len")
  )
)

(define-function gst_rtp_buffer_get_packet_len
  (c-name "gst_rtp_buffer_get_packet_len")
  (return-type "guint")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_get_header_len
  (c-name "gst_rtp_buffer_get_header_len")
  (return-type "guint")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_get_version
  (c-name "gst_rtp_buffer_get_version")
  (return-type "guint8")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_version
  (c-name "gst_rtp_buffer_set_version")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint8" "version")
  )
)

(define-function gst_rtp_buffer_get_padding
  (c-name "gst_rtp_buffer_get_padding")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_padding
  (c-name "gst_rtp_buffer_set_padding")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("gboolean" "padding")
  )
)

(define-function gst_rtp_buffer_pad_to
  (c-name "gst_rtp_buffer_pad_to")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint" "len")
  )
)

(define-function gst_rtp_buffer_get_extension
  (c-name "gst_rtp_buffer_get_extension")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_extension
  (c-name "gst_rtp_buffer_set_extension")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("gboolean" "extension")
  )
)

(define-function gst_rtp_buffer_get_extension_data
  (c-name "gst_rtp_buffer_get_extension_data")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint16*" "bits")
    '("gpointer*" "data")
    '("guint*" "wordlen")
  )
)

(define-function gst_rtp_buffer_set_extension_data
  (c-name "gst_rtp_buffer_set_extension_data")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint16" "bits")
    '("guint16" "length")
  )
)

(define-function gst_rtp_buffer_get_ssrc
  (c-name "gst_rtp_buffer_get_ssrc")
  (return-type "guint32")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_ssrc
  (c-name "gst_rtp_buffer_set_ssrc")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint32" "ssrc")
  )
)

(define-function gst_rtp_buffer_get_csrc_count
  (c-name "gst_rtp_buffer_get_csrc_count")
  (return-type "guint8")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_get_csrc
  (c-name "gst_rtp_buffer_get_csrc")
  (return-type "guint32")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint8" "idx")
  )
)

(define-function gst_rtp_buffer_set_csrc
  (c-name "gst_rtp_buffer_set_csrc")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint8" "idx")
    '("guint32" "csrc")
  )
)

(define-function gst_rtp_buffer_get_marker
  (c-name "gst_rtp_buffer_get_marker")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_marker
  (c-name "gst_rtp_buffer_set_marker")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("gboolean" "marker")
  )
)

(define-function gst_rtp_buffer_get_payload_type
  (c-name "gst_rtp_buffer_get_payload_type")
  (return-type "guint8")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_payload_type
  (c-name "gst_rtp_buffer_set_payload_type")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint8" "payload_type")
  )
)

(define-function gst_rtp_buffer_get_seq
  (c-name "gst_rtp_buffer_get_seq")
  (return-type "guint16")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_seq
  (c-name "gst_rtp_buffer_set_seq")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint16" "seq")
  )
)

(define-function gst_rtp_buffer_get_timestamp
  (c-name "gst_rtp_buffer_get_timestamp")
  (return-type "guint32")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_set_timestamp
  (c-name "gst_rtp_buffer_set_timestamp")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint32" "timestamp")
  )
)

(define-function gst_rtp_buffer_get_payload_buffer
  (c-name "gst_rtp_buffer_get_payload_buffer")
  (return-type "GstBuffer*")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_get_payload_subbuffer
  (c-name "gst_rtp_buffer_get_payload_subbuffer")
  (return-type "GstBuffer*")
  (parameters
    '("GstBuffer*" "buffer")
    '("guint" "offset")
    '("guint" "len")
  )
)

(define-function gst_rtp_buffer_get_payload_len
  (c-name "gst_rtp_buffer_get_payload_len")
  (return-type "guint")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_get_payload
  (c-name "gst_rtp_buffer_get_payload")
  (return-type "gpointer")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_rtp_buffer_default_clock_rate
  (c-name "gst_rtp_buffer_default_clock_rate")
  (return-type "guint32")
  (parameters
    '("guint8" "payload_type")
  )
)

(define-function gst_rtp_buffer_compare_seqnum
  (c-name "gst_rtp_buffer_compare_seqnum")
  (return-type "gint")
  (parameters
    '("guint16" "seqnum1")
    '("guint16" "seqnum2")
  )
)

(define-function gst_rtp_buffer_ext_timestamp
  (c-name "gst_rtp_buffer_ext_timestamp")
  (return-type "guint64")
  (parameters
    '("guint64*" "exttimestamp")
    '("guint32" "timestamp")
  )
)



;; From gstrtppayloads.h

(define-function gst_rtp_payload_info_for_pt
  (c-name "gst_rtp_payload_info_for_pt")
  (return-type "const-GstRTPPayloadInfo*")
  (parameters
    '("guint8" "payload_type")
  )
)

(define-function gst_rtp_payload_info_for_name
  (c-name "gst_rtp_payload_info_for_name")
  (return-type "const-GstRTPPayloadInfo*")
  (parameters
    '("const-gchar*" "media")
    '("const-gchar*" "encoding_name")
  )
)



;; From gstrtspbase64.h

(define-function gst_rtsp_base64_encode
  (c-name "gst_rtsp_base64_encode")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "data")
    '("gsize" "len")
  )
)

(define-function gst_rtsp_base64_decode_ip
  (c-name "gst_rtsp_base64_decode_ip")
  (return-type "none")
  (parameters
    '("gchar*" "data")
    '("gsize*" "len")
  )
)



;; From gstrtspconnection.h

(define-function gst_rtsp_connection_create
  (c-name "gst_rtsp_connection_create")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPUrl*" "url")
    '("GstRTSPConnection**" "conn")
  )
)

(define-method connect
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_connect")
  (return-type "GstRTSPResult")
  (parameters
    '("GTimeVal*" "timeout")
  )
)

(define-method close
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_close")
  (return-type "GstRTSPResult")
)

(define-method free
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_free")
  (return-type "GstRTSPResult")
)

(define-method read
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_read")
  (return-type "GstRTSPResult")
  (parameters
    '("guint8*" "data")
    '("guint" "size")
    '("GTimeVal*" "timeout")
  )
)

(define-method write
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_write")
  (return-type "GstRTSPResult")
  (parameters
    '("const-guint8*" "data")
    '("guint" "size")
    '("GTimeVal*" "timeout")
  )
)

(define-method send
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_send")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage*" "message")
    '("GTimeVal*" "timeout")
  )
)

(define-method receive
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_receive")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage*" "message")
    '("GTimeVal*" "timeout")
  )
)

(define-method poll
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_poll")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPEvent" "events")
    '("GstRTSPEvent*" "revents")
    '("GTimeVal*" "timeout")
  )
)

(define-method next_timeout
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_next_timeout")
  (return-type "GstRTSPResult")
  (parameters
    '("GTimeVal*" "timeout")
  )
)

(define-method reset_timeout
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_reset_timeout")
  (return-type "GstRTSPResult")
)

(define-method flush
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_flush")
  (return-type "GstRTSPResult")
  (parameters
    '("gboolean" "flush")
  )
)

(define-method set_auth
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_set_auth")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPAuthMethod" "method")
    '("const-gchar*" "user")
    '("const-gchar*" "pass")
  )
)

(define-method set_auth_param
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_set_auth_param")
  (return-type "none")
  (parameters
    '("const-gchar*" "param")
    '("const-gchar*" "value")
  )
)

(define-method clear_auth_params
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_clear_auth_params")
  (return-type "none")
)

(define-method set_qos_dscp
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_set_qos_dscp")
  (return-type "GstRTSPResult")
  (parameters
    '("guint" "qos_dscp")
  )
)

(define-method get_ip
  (of-object "GstRTSPConnection")
  (c-name "gst_rtsp_connection_get_ip")
  (return-type "const-gchar*")
)



;; From gstrtspdefs.h

(define-function gst_rtsp_strresult
  (c-name "gst_rtsp_strresult")
  (return-type "gchar*")
  (parameters
    '("GstRTSPResult" "result")
  )
)

(define-method as_text
  (of-object "GstRTSPMethod")
  (c-name "gst_rtsp_method_as_text")
  (return-type "const-gchar*")
)

(define-method as_text
  (of-object "GstRTSPVersion")
  (c-name "gst_rtsp_version_as_text")
  (return-type "const-gchar*")
)

(define-function gst_rtsp_header_as_text
  (c-name "gst_rtsp_header_as_text")
  (return-type "const-gchar*")
  (parameters
    '("GstRTSPHeaderField" "field")
  )
)

(define-function gst_rtsp_status_as_text
  (c-name "gst_rtsp_status_as_text")
  (return-type "const-gchar*")
  (parameters
    '("GstRTSPStatusCode" "code")
  )
)

(define-function gst_rtsp_find_header_field
  (c-name "gst_rtsp_find_header_field")
  (return-type "GstRTSPHeaderField")
  (parameters
    '("const-gchar*" "header")
  )
)

(define-function gst_rtsp_find_method
  (c-name "gst_rtsp_find_method")
  (return-type "GstRTSPMethod")
  (parameters
    '("const-gchar*" "method")
  )
)



;; From gstrtsp-enumtypes.h

(define-function gst_rtsp_result_get_type
  (c-name "gst_rtsp_result_get_type")
  (return-type "GType")
)

(define-function gst_rtsp_event_get_type
  (c-name "gst_rtsp_event_get_type")
  (return-type "GType")
)

(define-function gst_rtsp_family_get_type
  (c-name "gst_rtsp_family_get_type")
  (return-type "GType")
)

(define-function gst_rtsp_state_get_type
  (c-name "gst_rtsp_state_get_type")
  (return-type "GType")
)

(define-function gst_rtsp_version_get_type
  (c-name "gst_rtsp_version_get_type")
  (return-type "GType")
)

(define-function gst_rtsp_method_get_type
  (c-name "gst_rtsp_method_get_type")
  (return-type "GType")
)

(define-function gst_rtsp_auth_method_get_type
  (c-name "gst_rtsp_auth_method_get_type")
  (return-type "GType")
)

(define-function gst_rtsp_header_field_get_type
  (c-name "gst_rtsp_header_field_get_type")
  (return-type "GType")
)

(define-function gst_rtsp_status_code_get_type
  (c-name "gst_rtsp_status_code_get_type")
  (return-type "GType")
)



;; From gstrtspextension.h

(define-function gst_rtsp_extension_get_type
  (c-name "gst_rtsp_extension_get_type")
  (return-type "GType")
)

(define-method detect_server
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_detect_server")
  (return-type "gboolean")
  (parameters
    '("GstRTSPMessage*" "resp")
  )
)

(define-method before_send
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_before_send")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage*" "req")
  )
)

(define-method after_send
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_after_send")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage*" "req")
    '("GstRTSPMessage*" "resp")
  )
)

(define-method parse_sdp
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_parse_sdp")
  (return-type "GstRTSPResult")
  (parameters
    '("GstSDPMessage*" "sdp")
    '("GstStructure*" "s")
  )
)

(define-method setup_media
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_setup_media")
  (return-type "GstRTSPResult")
  (parameters
    '("GstSDPMedia*" "media")
  )
)

(define-method configure_stream
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_configure_stream")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "caps")
  )
)

(define-method get_transports
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_get_transports")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPLowerTrans" "protocols")
    '("gchar**" "transport")
  )
)

(define-method stream_select
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_stream_select")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPUrl*" "url")
  )
)

(define-method send
  (of-object "GstRTSPExtension")
  (c-name "gst_rtsp_extension_send")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage*" "req")
    '("GstRTSPMessage*" "resp")
  )
)



;; From gstrtsp.h



;; From gstrtspmessage.h

(define-function gst_rtsp_message_new
  (c-name "gst_rtsp_message_new")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage**" "msg")
  )
)

(define-method init
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_init")
  (return-type "GstRTSPResult")
)

(define-method unset
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_unset")
  (return-type "GstRTSPResult")
)

(define-method free
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_free")
  (return-type "GstRTSPResult")
)

(define-method get_type
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_get_type")
  (return-type "GstRTSPMsgType")
)

(define-function gst_rtsp_message_new_request
  (c-name "gst_rtsp_message_new_request")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage**" "msg")
    '("GstRTSPMethod" "method")
    '("const-gchar*" "uri")
  )
)

(define-method init_request
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_init_request")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMethod" "method")
    '("const-gchar*" "uri")
  )
)

(define-method parse_request
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_parse_request")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMethod*" "method")
    '("const-gchar**" "uri")
    '("GstRTSPVersion*" "version")
  )
)

(define-function gst_rtsp_message_new_response
  (c-name "gst_rtsp_message_new_response")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage**" "msg")
    '("GstRTSPStatusCode" "code")
    '("const-gchar*" "reason")
    '("const-GstRTSPMessage*" "request")
  )
)

(define-method init_response
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_init_response")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPStatusCode" "code")
    '("const-gchar*" "reason")
    '("const-GstRTSPMessage*" "request")
  )
)

(define-method parse_response
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_parse_response")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPStatusCode*" "code")
    '("const-gchar**" "reason")
    '("GstRTSPVersion*" "version")
  )
)

(define-function gst_rtsp_message_new_data
  (c-name "gst_rtsp_message_new_data")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPMessage**" "msg")
    '("guint8" "channel")
  )
)

(define-method init_data
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_init_data")
  (return-type "GstRTSPResult")
  (parameters
    '("guint8" "channel")
  )
)

(define-method parse_data
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_parse_data")
  (return-type "GstRTSPResult")
  (parameters
    '("guint8*" "channel")
  )
)

(define-method add_header
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_add_header")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPHeaderField" "field")
    '("const-gchar*" "value")
  )
)

(define-method remove_header
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_remove_header")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPHeaderField" "field")
    '("gint" "indx")
  )
)

(define-method get_header
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_get_header")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPHeaderField" "field")
    '("gchar**" "value")
    '("gint" "indx")
  )
)

(define-method append_headers
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_append_headers")
  (return-type "GstRTSPResult")
  (parameters
    '("GString*" "str")
  )
)

(define-method set_body
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_set_body")
  (return-type "GstRTSPResult")
  (parameters
    '("const-guint8*" "data")
    '("guint" "size")
  )
)

(define-method take_body
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_take_body")
  (return-type "GstRTSPResult")
  (parameters
    '("guint8*" "data")
    '("guint" "size")
  )
)

(define-method get_body
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_get_body")
  (return-type "GstRTSPResult")
  (parameters
    '("guint8**" "data")
    '("guint*" "size")
  )
)

(define-method steal_body
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_steal_body")
  (return-type "GstRTSPResult")
  (parameters
    '("guint8**" "data")
    '("guint*" "size")
  )
)

(define-method dump
  (of-object "GstRTSPMessage")
  (c-name "gst_rtsp_message_dump")
  (return-type "GstRTSPResult")
)



;; From gstrtsprange.h

(define-function gst_rtsp_range_parse
  (c-name "gst_rtsp_range_parse")
  (return-type "GstRTSPResult")
  (parameters
    '("const-gchar*" "rangestr")
    '("GstRTSPTimeRange**" "range")
  )
)

(define-function gst_rtsp_range_free
  (c-name "gst_rtsp_range_free")
  (return-type "none")
  (parameters
    '("GstRTSPTimeRange*" "range")
  )
)



;; From gstrtsptransport.h

(define-function gst_rtsp_transport_new
  (c-name "gst_rtsp_transport_new")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPTransport**" "transport")
  )
)

(define-method init
  (of-object "GstRTSPTransport")
  (c-name "gst_rtsp_transport_init")
  (return-type "GstRTSPResult")
)

(define-function gst_rtsp_transport_parse
  (c-name "gst_rtsp_transport_parse")
  (return-type "GstRTSPResult")
  (parameters
    '("const-gchar*" "str")
    '("GstRTSPTransport*" "transport")
  )
)

(define-method as_text
  (of-object "GstRTSPTransport")
  (c-name "gst_rtsp_transport_as_text")
  (return-type "gchar*")
)

(define-function gst_rtsp_transport_get_mime
  (c-name "gst_rtsp_transport_get_mime")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPTransMode" "trans")
    '("const-gchar**" "mime")
  )
)

(define-function gst_rtsp_transport_get_manager
  (c-name "gst_rtsp_transport_get_manager")
  (return-type "GstRTSPResult")
  (parameters
    '("GstRTSPTransMode" "trans")
    '("const-gchar**" "manager")
    '("guint" "option")
  )
)

(define-method free
  (of-object "GstRTSPTransport")
  (c-name "gst_rtsp_transport_free")
  (return-type "GstRTSPResult")
)



;; From gstrtspurl.h

(define-function gst_rtsp_url_parse
  (c-name "gst_rtsp_url_parse")
  (return-type "GstRTSPResult")
  (parameters
    '("const-gchar*" "urlstr")
    '("GstRTSPUrl**" "url")
  )
)

(define-method free
  (of-object "GstRTSPUrl")
  (c-name "gst_rtsp_url_free")
  (return-type "none")
)

(define-method get_request_uri
  (of-object "GstRTSPUrl")
  (c-name "gst_rtsp_url_get_request_uri")
  (return-type "gchar*")
)

(define-method set_port
  (of-object "GstRTSPUrl")
  (c-name "gst_rtsp_url_set_port")
  (return-type "GstRTSPResult")
  (parameters
    '("guint16" "port")
  )
)

(define-method get_port
  (of-object "GstRTSPUrl")
  (c-name "gst_rtsp_url_get_port")
  (return-type "GstRTSPResult")
  (parameters
    '("guint16*" "port")
  )
)



;; From md5.h



;; From rtsp-marshal.h



;; From gstsdp.h



;; From gstsdpmessage.h

(define-function gst_sdp_message_new
  (c-name "gst_sdp_message_new")
  (return-type "GstSDPResult")
  (parameters
    '("GstSDPMessage**" "msg")
  )
)

(define-method init
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_init")
  (return-type "GstSDPResult")
)

(define-method uninit
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_uninit")
  (return-type "GstSDPResult")
)

(define-method free
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_free")
  (return-type "GstSDPResult")
)

(define-function gst_sdp_message_parse_buffer
  (c-name "gst_sdp_message_parse_buffer")
  (return-type "GstSDPResult")
  (parameters
    '("const-guint8*" "data")
    '("guint" "size")
    '("GstSDPMessage*" "msg")
  )
)

(define-method as_text
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_as_text")
  (return-type "gchar*")
)

(define-method get_version
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_version")
  (return-type "const-gchar*")
)

(define-method set_version
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_set_version")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "version")
  )
)

(define-method get_origin
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_origin")
  (return-type "const-GstSDPOrigin*")
)

(define-method set_origin
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_set_origin")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "username")
    '("const-gchar*" "sess_id")
    '("const-gchar*" "sess_version")
    '("const-gchar*" "nettype")
    '("const-gchar*" "addrtype")
    '("const-gchar*" "addr")
  )
)

(define-method get_session_name
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_session_name")
  (return-type "const-gchar*")
)

(define-method set_session_name
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_set_session_name")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "session_name")
  )
)

(define-method get_information
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_information")
  (return-type "const-gchar*")
)

(define-method set_information
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_set_information")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "information")
  )
)

(define-method get_uri
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_uri")
  (return-type "const-gchar*")
)

(define-method set_uri
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_set_uri")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method emails_len
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_emails_len")
  (return-type "guint")
)

(define-method get_email
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_email")
  (return-type "const-gchar*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_email
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_add_email")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "email")
  )
)

(define-method phones_len
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_phones_len")
  (return-type "guint")
)

(define-method get_phone
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_phone")
  (return-type "const-gchar*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_phone
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_add_phone")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "phone")
  )
)

(define-method get_connection
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_connection")
  (return-type "const-GstSDPConnection*")
)

(define-method set_connection
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_set_connection")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "nettype")
    '("const-gchar*" "addrtype")
    '("const-gchar*" "address")
    '("guint" "ttl")
    '("guint" "addr_number")
  )
)

(define-method bandwidths_len
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_bandwidths_len")
  (return-type "guint")
)

(define-method get_bandwidth
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_bandwidth")
  (return-type "const-GstSDPBandwidth*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_bandwidth
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_add_bandwidth")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "bwtype")
    '("guint" "bandwidth")
  )
)

(define-method times_len
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_times_len")
  (return-type "guint")
)

(define-method get_time
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_time")
  (return-type "const-GstSDPTime*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_time
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_add_time")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "start")
    '("const-gchar*" "stop")
    '("const-gchar**" "repeat")
  )
)

(define-method zones_len
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_zones_len")
  (return-type "guint")
)

(define-method get_zone
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_zone")
  (return-type "const-GstSDPZone*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_zone
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_add_zone")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "adj_time")
    '("const-gchar*" "typed_time")
  )
)

(define-method get_key
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_key")
  (return-type "const-GstSDPKey*")
)

(define-method set_key
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_set_key")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "type")
    '("const-gchar*" "data")
  )
)

(define-method attributes_len
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_attributes_len")
  (return-type "guint")
)

(define-method get_attribute
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_attribute")
  (return-type "const-GstSDPAttribute*")
  (parameters
    '("guint" "idx")
  )
)

(define-method get_attribute_val
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_attribute_val")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_attribute_val_n
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_attribute_val_n")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "key")
    '("guint" "nth")
  )
)

(define-method add_attribute
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_add_attribute")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "value")
  )
)

(define-method medias_len
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_medias_len")
  (return-type "guint")
)

(define-method get_media
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_get_media")
  (return-type "const-GstSDPMedia*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_media
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_add_media")
  (return-type "GstSDPResult")
  (parameters
    '("GstSDPMedia*" "media")
  )
)

(define-method dump
  (of-object "GstSDPMessage")
  (c-name "gst_sdp_message_dump")
  (return-type "GstSDPResult")
)

(define-function gst_sdp_media_new
  (c-name "gst_sdp_media_new")
  (return-type "GstSDPResult")
  (parameters
    '("GstSDPMedia**" "media")
  )
)

(define-method init
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_init")
  (return-type "GstSDPResult")
)

(define-method uninit
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_uninit")
  (return-type "GstSDPResult")
)

(define-method free
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_free")
  (return-type "GstSDPResult")
)

(define-method as_text
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_as_text")
  (return-type "gchar*")
)

(define-method get_media
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_media")
  (return-type "const-gchar*")
)

(define-method set_media
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_set_media")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "med")
  )
)

(define-method get_port
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_port")
  (return-type "guint")
)

(define-method get_num_ports
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_num_ports")
  (return-type "guint")
)

(define-method set_port_info
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_set_port_info")
  (return-type "GstSDPResult")
  (parameters
    '("guint" "port")
    '("guint" "num_ports")
  )
)

(define-method get_proto
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_proto")
  (return-type "const-gchar*")
)

(define-method set_proto
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_set_proto")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "proto")
  )
)

(define-method formats_len
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_formats_len")
  (return-type "guint")
)

(define-method get_format
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_format")
  (return-type "const-gchar*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_format
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_add_format")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "format")
  )
)

(define-method get_information
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_information")
  (return-type "const-gchar*")
)

(define-method set_information
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_set_information")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "information")
  )
)

(define-method connections_len
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_connections_len")
  (return-type "guint")
)

(define-method get_connection
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_connection")
  (return-type "const-GstSDPConnection*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_connection
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_add_connection")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "nettype")
    '("const-gchar*" "addrtype")
    '("const-gchar*" "address")
    '("guint" "ttl")
    '("guint" "addr_number")
  )
)

(define-method bandwidths_len
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_bandwidths_len")
  (return-type "guint")
)

(define-method get_bandwidth
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_bandwidth")
  (return-type "const-GstSDPBandwidth*")
  (parameters
    '("guint" "idx")
  )
)

(define-method add_bandwidth
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_add_bandwidth")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "bwtype")
    '("guint" "bandwidth")
  )
)

(define-method get_key
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_key")
  (return-type "const-GstSDPKey*")
)

(define-method set_key
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_set_key")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "type")
    '("const-gchar*" "data")
  )
)

(define-method attributes_len
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_attributes_len")
  (return-type "guint")
)

(define-method get_attribute
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_attribute")
  (return-type "const-GstSDPAttribute*")
  (parameters
    '("guint" "idx")
  )
)

(define-method get_attribute_val
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_attribute_val")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "key")
  )
)

(define-method get_attribute_val_n
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_get_attribute_val_n")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "key")
    '("guint" "nth")
  )
)

(define-method add_attribute
  (of-object "GstSDPMedia")
  (c-name "gst_sdp_media_add_attribute")
  (return-type "GstSDPResult")
  (parameters
    '("const-gchar*" "key")
    '("const-gchar*" "value")
  )
)



;; From gsttagdemux.h

(define-function gst_tag_demux_get_type
  (c-name "gst_tag_demux_get_type")
  (return-type "GType")
)



;; From gsttageditingprivate.h

(define-function gst_vorbis_tag_get_type
  (c-name "gst_vorbis_tag_get_type")
  (return-type "GType")
)



;; From tag.h

(define-function gst_tag_image_type_get_type
  (c-name "gst_tag_image_type_get_type")
  (return-type "GType")
)

(define-function gst_tag_from_vorbis_tag
  (c-name "gst_tag_from_vorbis_tag")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "vorbis_tag")
  )
)

(define-function gst_tag_to_vorbis_tag
  (c-name "gst_tag_to_vorbis_tag")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "gst_tag")
  )
)

(define-function gst_vorbis_tag_add
  (c-name "gst_vorbis_tag_add")
  (return-type "none")
  (parameters
    '("GstTagList*" "list")
    '("const-gchar*" "tag")
    '("const-gchar*" "value")
  )
)

(define-function gst_tag_to_vorbis_comments
  (c-name "gst_tag_to_vorbis_comments")
  (return-type "GList*")
  (parameters
    '("const-GstTagList*" "list")
    '("const-gchar*" "tag")
  )
)

(define-function gst_tag_list_from_vorbiscomment_buffer
  (c-name "gst_tag_list_from_vorbiscomment_buffer")
  (return-type "GstTagList*")
  (parameters
    '("const-GstBuffer*" "buffer")
    '("const-guint8*" "id_data")
    '("const-guint" "id_data_length")
    '("gchar**" "vendor_string")
  )
)

(define-method to_vorbiscomment_buffer
  (of-object "GstTagList")
  (c-name "gst_tag_list_to_vorbiscomment_buffer")
  (return-type "GstBuffer*")
  (parameters
    '("const-guint8*" "id_data")
    '("const-guint" "id_data_length")
    '("const-gchar*" "vendor_string")
  )
)

(define-function gst_tag_id3_genre_count
  (c-name "gst_tag_id3_genre_count")
  (return-type "guint")
)

(define-function gst_tag_id3_genre_get
  (c-name "gst_tag_id3_genre_get")
  (return-type "const-gchar*")
  (parameters
    '("const-guint" "id")
  )
)

(define-function gst_tag_list_new_from_id3v1
  (c-name "gst_tag_list_new_from_id3v1")
  (return-type "GstTagList*")
  (parameters
    '("const-guint8*" "data")
  )
)

(define-function gst_tag_from_id3_tag
  (c-name "gst_tag_from_id3_tag")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "id3_tag")
  )
)

(define-function gst_tag_from_id3_user_tag
  (c-name "gst_tag_from_id3_user_tag")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "type")
    '("const-gchar*" "id3_user_tag")
  )
)

(define-function gst_tag_to_id3_tag
  (c-name "gst_tag_to_id3_tag")
  (return-type "const-gchar*")
  (parameters
    '("const-gchar*" "gst_tag")
  )
)

(define-method add_id3_image
  (of-object "GstTagList")
  (c-name "gst_tag_list_add_id3_image")
  (return-type "gboolean")
  (parameters
    '("const-guint8*" "image_data")
    '("guint" "image_data_len")
    '("guint" "id3_picture_type")
  )
)

(define-function gst_tag_parse_extended_comment
  (c-name "gst_tag_parse_extended_comment")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "ext_comment")
    '("gchar**" "key")
    '("gchar**" "lang")
    '("gchar**" "value")
    '("gboolean" "fail_if_no_key")
  )
)

(define-function gst_tag_freeform_string_to_utf8
  (c-name "gst_tag_freeform_string_to_utf8")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "data")
    '("gint" "size")
    '("const-gchar**" "env_vars")
  )
)

(define-function gst_tag_image_data_to_image_buffer
  (c-name "gst_tag_image_data_to_image_buffer")
  (return-type "GstBuffer*")
  (parameters
    '("const-guint8*" "image_data")
    '("guint" "image_data_len")
    '("GstTagImageType" "image_type")
  )
)

(define-function gst_tag_register_musicbrainz_tags
  (c-name "gst_tag_register_musicbrainz_tags")
  (return-type "none")
)



;; From descriptions.h

(define-function gst_pb_utils_add_codec_description_to_tag_list
  (c-name "gst_pb_utils_add_codec_description_to_tag_list")
  (return-type "gboolean")
  (parameters
    '("GstTagList*" "taglist")
    '("const-gchar*" "codec_tag")
    '("const-GstCaps*" "caps")
  )
)

(define-function gst_pb_utils_get_codec_description
  (c-name "gst_pb_utils_get_codec_description")
  (return-type "gchar*")
  (parameters
    '("const-GstCaps*" "caps")
  )
)

(define-function gst_pb_utils_get_source_description
  (c-name "gst_pb_utils_get_source_description")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "protocol")
  )
)

(define-function gst_pb_utils_get_sink_description
  (c-name "gst_pb_utils_get_sink_description")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "protocol")
  )
)

(define-function gst_pb_utils_get_decoder_description
  (c-name "gst_pb_utils_get_decoder_description")
  (return-type "gchar*")
  (parameters
    '("const-GstCaps*" "caps")
  )
)

(define-function gst_pb_utils_get_encoder_description
  (c-name "gst_pb_utils_get_encoder_description")
  (return-type "gchar*")
  (parameters
    '("const-GstCaps*" "caps")
  )
)

(define-function gst_pb_utils_get_element_description
  (c-name "gst_pb_utils_get_element_description")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "factory_name")
  )
)



;; From install-plugins.h

(define-function gst_install_plugins_context_new
  (c-name "gst_install_plugins_context_new")
  (is-constructor-of "GstInstallPluginsContext")
  (return-type "GstInstallPluginsContext*")
)

(define-method free
  (of-object "GstInstallPluginsContext")
  (c-name "gst_install_plugins_context_free")
  (return-type "none")
)

(define-method set_xid
  (of-object "GstInstallPluginsContext")
  (c-name "gst_install_plugins_context_set_xid")
  (return-type "none")
  (parameters
    '("guint" "xid")
  )
)

(define-function gst_install_plugins_context_get_type
  (c-name "gst_install_plugins_context_get_type")
  (return-type "GType")
)

(define-function gst_install_plugins_async
  (c-name "gst_install_plugins_async")
  (return-type "GstInstallPluginsReturn")
  (parameters
    '("gchar**" "details")
    '("GstInstallPluginsContext*" "ctx")
    '("GstInstallPluginsResultFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-function gst_install_plugins_sync
  (c-name "gst_install_plugins_sync")
  (return-type "GstInstallPluginsReturn")
  (parameters
    '("gchar**" "details")
    '("GstInstallPluginsContext*" "ctx")
  )
)

(define-method get_name
  (of-object "GstInstallPluginsReturn")
  (c-name "gst_install_plugins_return_get_name")
  (return-type "const-gchar*")
)

(define-function gst_install_plugins_installation_in_progress
  (c-name "gst_install_plugins_installation_in_progress")
  (return-type "gboolean")
)

(define-function gst_install_plugins_supported
  (c-name "gst_install_plugins_supported")
  (return-type "gboolean")
)



;; From missing-plugins.h

(define-function gst_missing_uri_source_message_new
  (c-name "gst_missing_uri_source_message_new")
  (is-constructor-of "GstMissingUriSourceMessage")
  (return-type "GstMessage*")
  (parameters
    '("GstElement*" "element")
    '("const-gchar*" "protocol")
  )
)

(define-function gst_missing_uri_sink_message_new
  (c-name "gst_missing_uri_sink_message_new")
  (is-constructor-of "GstMissingUriSinkMessage")
  (return-type "GstMessage*")
  (parameters
    '("GstElement*" "element")
    '("const-gchar*" "protocol")
  )
)

(define-function gst_missing_element_message_new
  (c-name "gst_missing_element_message_new")
  (is-constructor-of "GstMissingElementMessage")
  (return-type "GstMessage*")
  (parameters
    '("GstElement*" "element")
    '("const-gchar*" "factory_name")
  )
)

(define-function gst_missing_decoder_message_new
  (c-name "gst_missing_decoder_message_new")
  (is-constructor-of "GstMissingDecoderMessage")
  (return-type "GstMessage*")
  (parameters
    '("GstElement*" "element")
    '("const-GstCaps*" "decode_caps")
  )
)

(define-function gst_missing_encoder_message_new
  (c-name "gst_missing_encoder_message_new")
  (is-constructor-of "GstMissingEncoderMessage")
  (return-type "GstMessage*")
  (parameters
    '("GstElement*" "element")
    '("const-GstCaps*" "encode_caps")
  )
)

(define-function gst_missing_plugin_message_get_installer_detail
  (c-name "gst_missing_plugin_message_get_installer_detail")
  (return-type "gchar*")
  (parameters
    '("GstMessage*" "msg")
  )
)

(define-function gst_missing_plugin_message_get_description
  (c-name "gst_missing_plugin_message_get_description")
  (return-type "gchar*")
  (parameters
    '("GstMessage*" "msg")
  )
)

(define-function gst_is_missing_plugin_message
  (c-name "gst_is_missing_plugin_message")
  (return-type "gboolean")
  (parameters
    '("GstMessage*" "msg")
  )
)

(define-function gst_missing_uri_source_installer_detail_new
  (c-name "gst_missing_uri_source_installer_detail_new")
  (is-constructor-of "GstMissingUriSourceInstallerDetail")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "protocol")
  )
)

(define-function gst_missing_uri_sink_installer_detail_new
  (c-name "gst_missing_uri_sink_installer_detail_new")
  (is-constructor-of "GstMissingUriSinkInstallerDetail")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "protocol")
  )
)

(define-function gst_missing_element_installer_detail_new
  (c-name "gst_missing_element_installer_detail_new")
  (is-constructor-of "GstMissingElementInstallerDetail")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "factory_name")
  )
)

(define-function gst_missing_decoder_installer_detail_new
  (c-name "gst_missing_decoder_installer_detail_new")
  (is-constructor-of "GstMissingDecoderInstallerDetail")
  (return-type "gchar*")
  (parameters
    '("const-GstCaps*" "decode_caps")
  )
)

(define-function gst_missing_encoder_installer_detail_new
  (c-name "gst_missing_encoder_installer_detail_new")
  (is-constructor-of "GstMissingEncoderInstallerDetail")
  (return-type "gchar*")
  (parameters
    '("const-GstCaps*" "encode_caps")
  )
)



;; From pbutils-enumtypes.h

(define-function gst_install_plugins_return_get_type
  (c-name "gst_install_plugins_return_get_type")
  (return-type "GType")
)



;; From pbutils.h

(define-function gst_pb_utils_init
  (c-name "gst_pb_utils_init")
  (return-type "none")
)



;; From gstvideofilter.h

(define-function gst_video_filter_get_type
  (c-name "gst_video_filter_get_type")
  (return-type "GType")
)



;; From gstvideosink.h

(define-function gst_video_sink_get_type
  (c-name "gst_video_sink_get_type")
  (return-type "GType")
)

(define-function gst_video_sink_center_rect
  (c-name "gst_video_sink_center_rect")
  (return-type "none")
  (parameters
    '("GstVideoRectangle" "src")
    '("GstVideoRectangle" "dst")
    '("GstVideoRectangle*" "result")
    '("gboolean" "scaling")
  )
)



;; From video.h

(define-function gst_video_get_size
  (c-name "gst_video_get_size")
  (return-type "gboolean")
  (parameters
    '("GstPad*" "pad")
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-function gst_video_calculate_display_ratio
  (c-name "gst_video_calculate_display_ratio")
  (return-type "gboolean")
  (parameters
    '("guint*" "dar_n")
    '("guint*" "dar_d")
    '("guint" "video_width")
    '("guint" "video_height")
    '("guint" "video_par_n")
    '("guint" "video_par_d")
    '("guint" "display_par_n")
    '("guint" "display_par_d")
  )
)

(define-function gst_video_format_parse_caps
  (c-name "gst_video_format_parse_caps")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "caps")
    '("GstVideoFormat*" "format")
    '("int*" "width")
    '("int*" "height")
  )
)

(define-function gst_video_parse_caps_framerate
  (c-name "gst_video_parse_caps_framerate")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "caps")
    '("int*" "fps_n")
    '("int*" "fps_d")
  )
)

(define-function gst_video_parse_caps_pixel_aspect_ratio
  (c-name "gst_video_parse_caps_pixel_aspect_ratio")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "caps")
    '("int*" "par_n")
    '("int*" "par_d")
  )
)

(define-method new_caps
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_new_caps")
  (return-type "GstCaps*")
  (parameters
    '("int" "width")
    '("int" "height")
    '("int" "framerate_n")
    '("int" "framerate_d")
    '("int" "par_n")
    '("int" "par_d")
  )
)

(define-function gst_video_format_from_fourcc
  (c-name "gst_video_format_from_fourcc")
  (return-type "GstVideoFormat")
  (parameters
    '("guint32" "fourcc")
  )
)

(define-method to_fourcc
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_to_fourcc")
  (return-type "guint32")
)

(define-method is_rgb
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_is_rgb")
  (return-type "gboolean")
)

(define-method is_yuv
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_is_yuv")
  (return-type "gboolean")
)

(define-method has_alpha
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_has_alpha")
  (return-type "gboolean")
)

(define-method get_row_stride
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_get_row_stride")
  (return-type "int")
  (parameters
    '("int" "component")
    '("int" "width")
  )
)

(define-method get_pixel_stride
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_get_pixel_stride")
  (return-type "int")
  (parameters
    '("int" "component")
  )
)

(define-method get_component_width
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_get_component_width")
  (return-type "int")
  (parameters
    '("int" "component")
    '("int" "width")
  )
)

(define-method get_component_height
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_get_component_height")
  (return-type "int")
  (parameters
    '("int" "component")
    '("int" "height")
  )
)

(define-method get_component_offset
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_get_component_offset")
  (return-type "int")
  (parameters
    '("int" "component")
    '("int" "width")
    '("int" "height")
  )
)

(define-method get_size
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_get_size")
  (return-type "int")
  (parameters
    '("int" "width")
    '("int" "height")
  )
)

(define-method convert
  (of-object "GstVideoFormat")
  (c-name "gst_video_format_convert")
  (return-type "gboolean")
  (parameters
    '("int" "width")
    '("int" "height")
    '("int" "fps_n")
    '("int" "fps_d")
    '("GstFormat" "src_format")
    '("gint64" "src_value")
    '("GstFormat" "dest_format")
    '("gint64*" "dest_value")
  )
)



;; From gstadder.h

(define-function gst_adder_get_type
  (c-name "gst_adder_get_type")
  (return-type "GType")
)



;; From audioconvert.h

(define-function audio_convert_clean_fmt
  (c-name "audio_convert_clean_fmt")
  (return-type "gboolean")
  (parameters
    '("AudioConvertFmt*" "fmt")
  )
)

(define-function audio_convert_prepare_context
  (c-name "audio_convert_prepare_context")
  (return-type "gboolean")
  (parameters
    '("AudioConvertCtx*" "ctx")
    '("AudioConvertFmt*" "in")
    '("AudioConvertFmt*" "out")
    '("GstAudioConvertDithering" "dither")
    '("GstAudioConvertNoiseShaping" "ns")
  )
)

(define-function audio_convert_get_sizes
  (c-name "audio_convert_get_sizes")
  (return-type "gboolean")
  (parameters
    '("AudioConvertCtx*" "ctx")
    '("gint" "samples")
    '("gint*" "srcsize")
    '("gint*" "dstsize")
  )
)

(define-function audio_convert_clean_context
  (c-name "audio_convert_clean_context")
  (return-type "gboolean")
  (parameters
    '("AudioConvertCtx*" "ctx")
  )
)

(define-function audio_convert_convert
  (c-name "audio_convert_convert")
  (return-type "gboolean")
  (parameters
    '("AudioConvertCtx*" "ctx")
    '("gpointer" "src")
    '("gpointer" "dst")
    '("gint" "samples")
    '("gboolean" "src_writable")
  )
)



;; From gstaudioconvert.h



;; From gstaudioquantize.h

(define-function gst_audio_quantize_setup
  (c-name "gst_audio_quantize_setup")
  (return-type "gboolean")
  (parameters
    '("AudioConvertCtx*" "ctx")
  )
)

(define-function gst_audio_quantize_reset
  (c-name "gst_audio_quantize_reset")
  (return-type "none")
  (parameters
    '("AudioConvertCtx*" "ctx")
  )
)

(define-function gst_audio_quantize_free
  (c-name "gst_audio_quantize_free")
  (return-type "none")
  (parameters
    '("AudioConvertCtx*" "ctx")
  )
)



;; From gstchannelmix.h

(define-function gst_channel_mix_unset_matrix
  (c-name "gst_channel_mix_unset_matrix")
  (return-type "none")
  (parameters
    '("AudioConvertCtx*" "this")
  )
)

(define-function gst_channel_mix_setup_matrix
  (c-name "gst_channel_mix_setup_matrix")
  (return-type "none")
  (parameters
    '("AudioConvertCtx*" "this")
  )
)

(define-function gst_channel_mix_passthrough
  (c-name "gst_channel_mix_passthrough")
  (return-type "gboolean")
  (parameters
    '("AudioConvertCtx*" "this")
  )
)

(define-function gst_channel_mix_mix_int
  (c-name "gst_channel_mix_mix_int")
  (return-type "none")
  (parameters
    '("AudioConvertCtx*" "this")
    '("gint32*" "in_data")
    '("gint32*" "out_data")
    '("gint" "samples")
  )
)

(define-function gst_channel_mix_mix_float
  (c-name "gst_channel_mix_mix_float")
  (return-type "none")
  (parameters
    '("AudioConvertCtx*" "this")
    '("gdouble*" "in_data")
    '("gdouble*" "out_data")
    '("gint" "samples")
  )
)



;; From gstfastrandom.h



;; From plugin.h

(define-function gst_audio_convert_get_type
  (c-name "gst_audio_convert_get_type")
  (return-type "GType")
)



;; From gstaudiotestsrc.h

(define-function gst_audio_test_src_get_type
  (c-name "gst_audio_test_src_get_type")
  (return-type "GType")
)



;; From avcodec.h

(define-function get_pix_fmt_info
  (c-name "get_pix_fmt_info")
  (return-type "PixFmtInfo*")
  (parameters
    '("enum-PixelFormat" "format")
  )
)

(define-function avpicture_get_size
  (c-name "avpicture_get_size")
  (return-type "int")
  (parameters
    '("int" "pix_fmt")
    '("int" "width")
    '("int" "height")
  )
)

(define-function avcodec_get_chroma_sub_sample
  (c-name "avcodec_get_chroma_sub_sample")
  (return-type "none")
  (parameters
    '("int" "pix_fmt")
    '("int*" "h_shift")
    '("int*" "v_shift")
  )
)

(define-function avcodec_get_pix_fmt_name
  (c-name "avcodec_get_pix_fmt_name")
  (return-type "const-char*")
  (parameters
    '("int" "pix_fmt")
  )
)

(define-function avcodec_set_dimensions
  (c-name "avcodec_set_dimensions")
  (return-type "none")
  (parameters
    '("AVCodecContext*" "s")
    '("int" "width")
    '("int" "height")
  )
)

(define-function avcodec_get_pix_fmt_loss
  (c-name "avcodec_get_pix_fmt_loss")
  (return-type "int")
  (parameters
    '("int" "dst_pix_fmt")
    '("int" "src_pix_fmt")
    '("int" "has_alpha")
  )
)

(define-function avcodec_find_best_pix_fmt
  (c-name "avcodec_find_best_pix_fmt")
  (return-type "int")
  (parameters
    '("int" "pix_fmt_mask")
    '("int" "src_pix_fmt")
    '("int" "has_alpha")
    '("int*" "loss_ptr")
  )
)

(define-function img_get_alpha_info
  (c-name "img_get_alpha_info")
  (return-type "int")
  (parameters
    '("const-AVPicture*" "src")
    '("int" "pix_fmt")
    '("int" "width")
    '("int" "height")
  )
)

(define-function img_convert
  (c-name "img_convert")
  (return-type "int")
  (parameters
    '("AVPicture*" "dst")
    '("int" "dst_pix_fmt")
    '("const-AVPicture*" "src")
    '("int" "pix_fmt")
    '("int" "width")
    '("int" "height")
  )
)

(define-function avcodec_init
  (c-name "avcodec_init")
  (return-type "none")
)

(define-function avcodec_get_context_defaults
  (c-name "avcodec_get_context_defaults")
  (return-type "none")
  (parameters
    '("AVCodecContext*" "s")
  )
)

(define-function avcodec_alloc_context
  (c-name "avcodec_alloc_context")
  (return-type "AVCodecContext*")
)

(define-function av_malloc
  (c-name "av_malloc")
  (return-type "void*")
  (parameters
    '("unsigned-int" "size")
  )
)

(define-function av_mallocz
  (c-name "av_mallocz")
  (return-type "void*")
  (parameters
    '("unsigned-int" "size")
  )
)

(define-function av_realloc
  (c-name "av_realloc")
  (return-type "void*")
  (parameters
    '("void*" "ptr")
    '("unsigned-int" "size")
  )
)

(define-function av_free
  (c-name "av_free")
  (return-type "none")
  (parameters
    '("void*" "ptr")
  )
)

(define-function av_strdup
  (c-name "av_strdup")
  (return-type "char*")
  (parameters
    '("const-char*" "s")
  )
)

(define-function av_freep
  (c-name "av_freep")
  (return-type "none")
  (parameters
    '("void*" "ptr")
  )
)

(define-function av_fast_realloc
  (c-name "av_fast_realloc")
  (return-type "void*")
  (parameters
    '("void*" "ptr")
    '("unsigned-int*" "size")
    '("unsigned-int" "min_size")
  )
)

(define-function av_free_static
  (c-name "av_free_static")
  (return-type "none")
)

(define-function av_mallocz_static
  (c-name "av_mallocz_static")
  (return-type "void*")
  (parameters
    '("unsigned-int" "size")
  )
)



;; From dsputil.h

(define-function dsputil_static_init
  (c-name "dsputil_static_init")
  (return-type "none")
)



;; From gstffmpegcodecmap.h

(define-function gst_ffmpegcsp_codectype_to_caps
  (c-name "gst_ffmpegcsp_codectype_to_caps")
  (return-type "GstCaps*")
  (parameters
    '("enum-CodecType" "codec_type")
    '("AVCodecContext*" "context")
  )
)

(define-function gst_ffmpegcsp_caps_with_codectype
  (c-name "gst_ffmpegcsp_caps_with_codectype")
  (return-type "none")
  (parameters
    '("enum-CodecType" "type")
    '("const-GstCaps*" "caps")
    '("AVCodecContext*" "context")
  )
)

(define-function gst_ffmpegcsp_avpicture_fill
  (c-name "gst_ffmpegcsp_avpicture_fill")
  (return-type "int")
  (parameters
    '("AVPicture*" "picture")
    '("uint8_t*" "ptr")
    '("enum-PixelFormat" "pix_fmt")
    '("int" "width")
    '("int" "height")
  )
)



;; From gstffmpegcolorspace.h



;; From imgconvert_template.h



;; From gstgdpdepay.h

(define-function gst_gdp_depay_plugin_init
  (c-name "gst_gdp_depay_plugin_init")
  (return-type "gboolean")
  (parameters
    '("GstPlugin*" "plugin")
  )
)



;; From gstgdppay.h

(define-function gst_gdp_pay_plugin_init
  (c-name "gst_gdp_pay_plugin_init")
  (return-type "gboolean")
  (parameters
    '("GstPlugin*" "plugin")
  )
)



;; From gstfactorylists.h

(define-function gst_factory_list_is_type
  (c-name "gst_factory_list_is_type")
  (return-type "gboolean")
  (parameters
    '("GstElementFactory*" "factory")
    '("GstFactoryListType" "type")
  )
)

(define-function gst_factory_list_get_elements
  (c-name "gst_factory_list_get_elements")
  (return-type "GValueArray*")
  (parameters
    '("GstFactoryListType" "type")
  )
)

(define-function gst_factory_list_debug
  (c-name "gst_factory_list_debug")
  (return-type "none")
  (parameters
    '("GValueArray*" "array")
  )
)

(define-function gst_factory_list_filter
  (c-name "gst_factory_list_filter")
  (return-type "GValueArray*")
  (parameters
    '("GValueArray*" "array")
    '("const-GstCaps*" "caps")
  )
)



;; From gstplaybasebin.h

(define-function gst_play_base_bin_get_type
  (c-name "gst_play_base_bin_get_type")
  (return-type "GType")
)



;; From gstplay-enum.h

(define-function gst_autoplug_select_result_get_type
  (c-name "gst_autoplug_select_result_get_type")
  (return-type "GType")
)

(define-function gst_play_flags_get_type
  (c-name "gst_play_flags_get_type")
  (return-type "GType")
)



;; From gstplay-marshal.h



;; From gstplaysink.h

(define-function gst_play_sink_get_type
  (c-name "gst_play_sink_get_type")
  (return-type "GType")
)

(define-method request_pad
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_request_pad")
  (return-type "GstPad*")
  (parameters
    '("GstPlaySinkType" "type")
  )
)

(define-method release_pad
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_release_pad")
  (return-type "none")
  (parameters
    '("GstPad*" "pad")
  )
)

(define-method set_video_sink
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_set_video_sink")
  (return-type "none")
  (parameters
    '("GstElement*" "sink")
  )
)

(define-method get_video_sink
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_get_video_sink")
  (return-type "GstElement*")
)

(define-method set_audio_sink
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_set_audio_sink")
  (return-type "none")
  (parameters
    '("GstElement*" "sink")
  )
)

(define-method get_audio_sink
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_get_audio_sink")
  (return-type "GstElement*")
)

(define-method set_vis_plugin
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_set_vis_plugin")
  (return-type "none")
  (parameters
    '("GstElement*" "vis")
  )
)

(define-method get_vis_plugin
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_get_vis_plugin")
  (return-type "GstElement*")
)

(define-method set_volume
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_set_volume")
  (return-type "none")
  (parameters
    '("gdouble" "volume")
  )
)

(define-method get_volume
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_get_volume")
  (return-type "gdouble")
)

(define-method set_mute
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_set_mute")
  (return-type "none")
  (parameters
    '("gboolean" "mute")
  )
)

(define-method get_mute
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_get_mute")
  (return-type "gboolean")
)

(define-method set_flags
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_set_flags")
  (return-type "gboolean")
  (parameters
    '("GstPlayFlags" "flags")
  )
)

(define-method get_flags
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_get_flags")
  (return-type "GstPlayFlags")
)

(define-method set_font_desc
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_set_font_desc")
  (return-type "none")
  (parameters
    '("const-gchar*" "desc")
  )
)

(define-method get_font_desc
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_get_font_desc")
  (return-type "gchar*")
)

(define-method get_last_frame
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_get_last_frame")
  (return-type "GstBuffer*")
)

(define-method reconfigure
  (of-object "GstPlaySink")
  (c-name "gst_play_sink_reconfigure")
  (return-type "gboolean")
)



;; From gstscreenshot.h

(define-function gst_play_frame_conv_convert
  (c-name "gst_play_frame_conv_convert")
  (return-type "GstBuffer*")
  (parameters
    '("GstBuffer*" "buf")
    '("GstCaps*" "to")
  )
)



;; From gststreaminfo.h

(define-function gst_stream_info_get_type
  (c-name "gst_stream_info_get_type")
  (return-type "GType")
)

(define-function gst_stream_info_new
  (c-name "gst_stream_info_new")
  (is-constructor-of "GstStreamInfo")
  (return-type "GstStreamInfo*")
  (parameters
    '("GstObject*" "object")
    '("GstStreamType" "type")
    '("const-gchar*" "decoder")
    '("const-GstCaps*" "caps")
  )
)

(define-method set_mute
  (of-object "GstStreamInfo")
  (c-name "gst_stream_info_set_mute")
  (return-type "gboolean")
  (parameters
    '("gboolean" "mute")
  )
)

(define-method is_mute
  (of-object "GstStreamInfo")
  (c-name "gst_stream_info_is_mute")
  (return-type "gboolean")
)



;; From gststreamselector.h

(define-function gst_stream_selector_get_type
  (c-name "gst_stream_selector_get_type")
  (return-type "GType")
)



;; From arch.h



;; From fixed_arm4.h



;; From fixed_arm5e.h



;; From fixed_bfin.h



;; From fixed_debug.h



;; From fixed_generic.h



;; From gstspeexresample.h

(define-function gst_speex_resample_get_type
  (c-name "gst_speex_resample_get_type")
  (return-type "GType")
)



;; From resample_sse.h



;; From speex_resampler.h

(define-function speex_resampler_init
  (c-name "speex_resampler_init")
  (return-type "SpeexResamplerState*")
  (parameters
    '("spx_uint32_t" "nb_channels")
    '("spx_uint32_t" "in_rate")
    '("spx_uint32_t" "out_rate")
    '("int" "quality")
    '("int*" "err")
  )
)

(define-function speex_resampler_init_frac
  (c-name "speex_resampler_init_frac")
  (return-type "SpeexResamplerState*")
  (parameters
    '("spx_uint32_t" "nb_channels")
    '("spx_uint32_t" "ratio_num")
    '("spx_uint32_t" "ratio_den")
    '("spx_uint32_t" "in_rate")
    '("spx_uint32_t" "out_rate")
    '("int" "quality")
    '("int*" "err")
  )
)

(define-function speex_resampler_destroy
  (c-name "speex_resampler_destroy")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function speex_resampler_process_float
  (c-name "speex_resampler_process_float")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t" "channel_index")
    '("const-double*" "in")
    '("spx_uint32_t*" "in_len")
    '("double*" "out")
    '("spx_uint32_t*" "out_len")
  )
)

(define-function speex_resampler_process_float
  (c-name "speex_resampler_process_float")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t" "channel_index")
    '("const-float*" "in")
    '("spx_uint32_t*" "in_len")
    '("float*" "out")
    '("spx_uint32_t*" "out_len")
  )
)

(define-function speex_resampler_process_int
  (c-name "speex_resampler_process_int")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t" "channel_index")
    '("const-spx_int16_t*" "in")
    '("spx_uint32_t*" "in_len")
    '("spx_int16_t*" "out")
    '("spx_uint32_t*" "out_len")
  )
)

(define-function speex_resampler_process_interleaved_float
  (c-name "speex_resampler_process_interleaved_float")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("const-double*" "in")
    '("spx_uint32_t*" "in_len")
    '("double*" "out")
    '("spx_uint32_t*" "out_len")
  )
)

(define-function speex_resampler_process_interleaved_float
  (c-name "speex_resampler_process_interleaved_float")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("const-float*" "in")
    '("spx_uint32_t*" "in_len")
    '("float*" "out")
    '("spx_uint32_t*" "out_len")
  )
)

(define-function speex_resampler_process_interleaved_int
  (c-name "speex_resampler_process_interleaved_int")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("const-spx_int16_t*" "in")
    '("spx_uint32_t*" "in_len")
    '("spx_int16_t*" "out")
    '("spx_uint32_t*" "out_len")
  )
)

(define-function speex_resampler_set_rate
  (c-name "speex_resampler_set_rate")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t" "in_rate")
    '("spx_uint32_t" "out_rate")
  )
)

(define-function speex_resampler_get_rate
  (c-name "speex_resampler_get_rate")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t*" "in_rate")
    '("spx_uint32_t*" "out_rate")
  )
)

(define-function speex_resampler_set_rate_frac
  (c-name "speex_resampler_set_rate_frac")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t" "ratio_num")
    '("spx_uint32_t" "ratio_den")
    '("spx_uint32_t" "in_rate")
    '("spx_uint32_t" "out_rate")
  )
)

(define-function speex_resampler_get_ratio
  (c-name "speex_resampler_get_ratio")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t*" "ratio_num")
    '("spx_uint32_t*" "ratio_den")
  )
)

(define-function speex_resampler_set_quality
  (c-name "speex_resampler_set_quality")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("int" "quality")
  )
)

(define-function speex_resampler_get_quality
  (c-name "speex_resampler_get_quality")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("int*" "quality")
  )
)

(define-function speex_resampler_set_input_stride
  (c-name "speex_resampler_set_input_stride")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t" "stride")
  )
)

(define-function speex_resampler_get_input_stride
  (c-name "speex_resampler_get_input_stride")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t*" "stride")
  )
)

(define-function speex_resampler_set_output_stride
  (c-name "speex_resampler_set_output_stride")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t" "stride")
  )
)

(define-function speex_resampler_get_output_stride
  (c-name "speex_resampler_get_output_stride")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("spx_uint32_t*" "stride")
  )
)

(define-function speex_resampler_get_input_latency
  (c-name "speex_resampler_get_input_latency")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function speex_resampler_get_output_latency
  (c-name "speex_resampler_get_output_latency")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function speex_resampler_skip_zeros
  (c-name "speex_resampler_skip_zeros")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function speex_resampler_reset_mem
  (c-name "speex_resampler_reset_mem")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function speex_resampler_strerror
  (c-name "speex_resampler_strerror")
  (return-type "const-char*")
  (parameters
    '("int" "err")
  )
)



;; From speex_resampler_wrapper.h

(define-function resample_float_resampler_init
  (c-name "resample_float_resampler_init")
  (return-type "SpeexResamplerState*")
  (parameters
    '("guint32" "nb_channels")
    '("guint32" "in_rate")
    '("guint32" "out_rate")
    '("gint" "quality")
    '("gint*" "err")
  )
)

(define-function resample_float_resampler_destroy
  (c-name "resample_float_resampler_destroy")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_float_resampler_process_interleaved_float
  (c-name "resample_float_resampler_process_interleaved_float")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("const-guint8*" "in")
    '("guint32*" "in_len")
    '("guint8*" "out")
    '("guint32*" "out_len")
  )
)

(define-function resample_float_resampler_set_rate
  (c-name "resample_float_resampler_set_rate")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32" "in_rate")
    '("guint32" "out_rate")
  )
)

(define-function resample_float_resampler_get_rate
  (c-name "resample_float_resampler_get_rate")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32*" "in_rate")
    '("guint32*" "out_rate")
  )
)

(define-function resample_float_resampler_get_ratio
  (c-name "resample_float_resampler_get_ratio")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32*" "ratio_num")
    '("guint32*" "ratio_den")
  )
)

(define-function resample_float_resampler_get_input_latency
  (c-name "resample_float_resampler_get_input_latency")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_float_resampler_set_quality
  (c-name "resample_float_resampler_set_quality")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("gint" "quality")
  )
)

(define-function resample_float_resampler_reset_mem
  (c-name "resample_float_resampler_reset_mem")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_float_resampler_skip_zeros
  (c-name "resample_float_resampler_skip_zeros")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_float_resampler_strerror
  (c-name "resample_float_resampler_strerror")
  (return-type "const-char*")
  (parameters
    '("gint" "err")
  )
)

(define-function resample_double_resampler_init
  (c-name "resample_double_resampler_init")
  (return-type "SpeexResamplerState*")
  (parameters
    '("guint32" "nb_channels")
    '("guint32" "in_rate")
    '("guint32" "out_rate")
    '("gint" "quality")
    '("gint*" "err")
  )
)

(define-function resample_double_resampler_destroy
  (c-name "resample_double_resampler_destroy")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_double_resampler_process_interleaved_float
  (c-name "resample_double_resampler_process_interleaved_float")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("const-guint8*" "in")
    '("guint32*" "in_len")
    '("guint8*" "out")
    '("guint32*" "out_len")
  )
)

(define-function resample_double_resampler_set_rate
  (c-name "resample_double_resampler_set_rate")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32" "in_rate")
    '("guint32" "out_rate")
  )
)

(define-function resample_double_resampler_get_rate
  (c-name "resample_double_resampler_get_rate")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32*" "in_rate")
    '("guint32*" "out_rate")
  )
)

(define-function resample_double_resampler_get_ratio
  (c-name "resample_double_resampler_get_ratio")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32*" "ratio_num")
    '("guint32*" "ratio_den")
  )
)

(define-function resample_double_resampler_get_input_latency
  (c-name "resample_double_resampler_get_input_latency")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_double_resampler_set_quality
  (c-name "resample_double_resampler_set_quality")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("gint" "quality")
  )
)

(define-function resample_double_resampler_reset_mem
  (c-name "resample_double_resampler_reset_mem")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_double_resampler_skip_zeros
  (c-name "resample_double_resampler_skip_zeros")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_double_resampler_strerror
  (c-name "resample_double_resampler_strerror")
  (return-type "const-char*")
  (parameters
    '("gint" "err")
  )
)

(define-function resample_int_resampler_init
  (c-name "resample_int_resampler_init")
  (return-type "SpeexResamplerState*")
  (parameters
    '("guint32" "nb_channels")
    '("guint32" "in_rate")
    '("guint32" "out_rate")
    '("gint" "quality")
    '("gint*" "err")
  )
)

(define-function resample_int_resampler_destroy
  (c-name "resample_int_resampler_destroy")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_int_resampler_process_interleaved_int
  (c-name "resample_int_resampler_process_interleaved_int")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("const-guint8*" "in")
    '("guint32*" "in_len")
    '("guint8*" "out")
    '("guint32*" "out_len")
  )
)

(define-function resample_int_resampler_set_rate
  (c-name "resample_int_resampler_set_rate")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32" "in_rate")
    '("guint32" "out_rate")
  )
)

(define-function resample_int_resampler_get_rate
  (c-name "resample_int_resampler_get_rate")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32*" "in_rate")
    '("guint32*" "out_rate")
  )
)

(define-function resample_int_resampler_get_ratio
  (c-name "resample_int_resampler_get_ratio")
  (return-type "none")
  (parameters
    '("SpeexResamplerState*" "st")
    '("guint32*" "ratio_num")
    '("guint32*" "ratio_den")
  )
)

(define-function resample_int_resampler_get_input_latency
  (c-name "resample_int_resampler_get_input_latency")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_int_resampler_set_quality
  (c-name "resample_int_resampler_set_quality")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
    '("gint" "quality")
  )
)

(define-function resample_int_resampler_reset_mem
  (c-name "resample_int_resampler_reset_mem")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_int_resampler_skip_zeros
  (c-name "resample_int_resampler_skip_zeros")
  (return-type "int")
  (parameters
    '("SpeexResamplerState*" "st")
  )
)

(define-function resample_int_resampler_strerror
  (c-name "resample_int_resampler_strerror")
  (return-type "const-char*")
  (parameters
    '("gint" "err")
  )
)



;; From gstssaparse.h

(define-function gst_ssa_parse_get_type
  (c-name "gst_ssa_parse_get_type")
  (return-type "GType")
)



;; From gstsubparse.h

(define-function gst_sub_parse_get_type
  (c-name "gst_sub_parse_get_type")
  (return-type "GType")
)



;; From mpl2parse.h

(define-function parse_mpl2
  (c-name "parse_mpl2")
  (return-type "gchar*")
  (parameters
    '("ParserState*" "state")
    '("const-gchar*" "line")
  )
)



;; From samiparse.h

(define-function parse_sami
  (c-name "parse_sami")
  (return-type "gchar*")
  (parameters
    '("ParserState*" "state")
    '("const-gchar*" "line")
  )
)

(define-function sami_context_init
  (c-name "sami_context_init")
  (return-type "none")
  (parameters
    '("ParserState*" "state")
  )
)

(define-function sami_context_deinit
  (c-name "sami_context_deinit")
  (return-type "none")
  (parameters
    '("ParserState*" "state")
  )
)

(define-function sami_context_reset
  (c-name "sami_context_reset")
  (return-type "none")
  (parameters
    '("ParserState*" "state")
  )
)



;; From tmplayerparse.h

(define-function parse_tmplayer
  (c-name "parse_tmplayer")
  (return-type "gchar*")
  (parameters
    '("ParserState*" "state")
    '("const-gchar*" "line")
  )
)



;; From gstmultifdsink.h

(define-function gst_multi_fd_sink_get_type
  (c-name "gst_multi_fd_sink_get_type")
  (return-type "GType")
)

(define-method add
  (of-object "GstMultiFdSink")
  (c-name "gst_multi_fd_sink_add")
  (return-type "none")
  (parameters
    '("int" "fd")
  )
)

(define-method add_full
  (of-object "GstMultiFdSink")
  (c-name "gst_multi_fd_sink_add_full")
  (return-type "none")
  (parameters
    '("int" "fd")
    '("GstSyncMethod" "sync")
    '("GstTCPUnitType" "min_unit")
    '("guint64" "min_value")
    '("GstTCPUnitType" "max_unit")
    '("guint64" "max_value")
  )
)

(define-method remove
  (of-object "GstMultiFdSink")
  (c-name "gst_multi_fd_sink_remove")
  (return-type "none")
  (parameters
    '("int" "fd")
  )
)

(define-method remove_flush
  (of-object "GstMultiFdSink")
  (c-name "gst_multi_fd_sink_remove_flush")
  (return-type "none")
  (parameters
    '("int" "fd")
  )
)

(define-method clear
  (of-object "GstMultiFdSink")
  (c-name "gst_multi_fd_sink_clear")
  (return-type "none")
)

(define-method get_stats
  (of-object "GstMultiFdSink")
  (c-name "gst_multi_fd_sink_get_stats")
  (return-type "GValueArray*")
  (parameters
    '("int" "fd")
  )
)



;; From gsttcpclientsink.h

(define-function gst_tcp_client_sink_get_type
  (c-name "gst_tcp_client_sink_get_type")
  (return-type "GType")
)



;; From gsttcpclientsrc.h

(define-function gst_tcp_client_src_get_type
  (c-name "gst_tcp_client_src_get_type")
  (return-type "GType")
)



;; From gsttcp-enumtypes.h

(define-function gst_tcp_protocol_get_type
  (c-name "gst_tcp_protocol_get_type")
  (return-type "GType")
)



;; From gsttcp.h

(define-function gst_tcp_host_to_ip
  (c-name "gst_tcp_host_to_ip")
  (return-type "gchar*")
  (parameters
    '("GstElement*" "element")
    '("const-gchar*" "host")
  )
)

(define-function gst_tcp_socket_write
  (c-name "gst_tcp_socket_write")
  (return-type "gint")
  (parameters
    '("int" "socket")
    '("const-void*" "buf")
    '("size_t" "count")
  )
)

(define-function gst_tcp_socket_close
  (c-name "gst_tcp_socket_close")
  (return-type "none")
  (parameters
    '("GstPollFD*" "socket")
  )
)

(define-function gst_tcp_read_buffer
  (c-name "gst_tcp_read_buffer")
  (return-type "GstFlowReturn")
  (parameters
    '("GstElement*" "this")
    '("int" "socket")
    '("GstPoll*" "fdset")
    '("GstBuffer**" "buf")
  )
)

(define-function gst_tcp_gdp_read_buffer
  (c-name "gst_tcp_gdp_read_buffer")
  (return-type "GstFlowReturn")
  (parameters
    '("GstElement*" "this")
    '("int" "socket")
    '("GstPoll*" "fdset")
    '("GstBuffer**" "buf")
  )
)

(define-function gst_tcp_gdp_read_caps
  (c-name "gst_tcp_gdp_read_caps")
  (return-type "GstFlowReturn")
  (parameters
    '("GstElement*" "this")
    '("int" "socket")
    '("GstPoll*" "fdset")
    '("GstCaps**" "caps")
  )
)

(define-function gst_tcp_gdp_read_event
  (c-name "gst_tcp_gdp_read_event")
  (return-type "GstEvent*")
  (parameters
    '("GstElement*" "elem")
    '("int" "socket")
    '("GstPoll*" "fdset")
  )
)

(define-function gst_tcp_gdp_write_buffer
  (c-name "gst_tcp_gdp_write_buffer")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "elem")
    '("int" "socket")
    '("GstBuffer*" "buffer")
    '("gboolean" "fatal")
    '("const-gchar*" "host")
    '("int" "port")
  )
)

(define-function gst_tcp_gdp_write_event
  (c-name "gst_tcp_gdp_write_event")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "elem")
    '("int" "socket")
    '("GstEvent*" "event")
    '("gboolean" "fatal")
    '("const-gchar*" "host")
    '("int" "port")
  )
)

(define-function gst_tcp_gdp_write_caps
  (c-name "gst_tcp_gdp_write_caps")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "elem")
    '("int" "socket")
    '("const-GstCaps*" "caps")
    '("gboolean" "fatal")
    '("const-gchar*" "host")
    '("int" "port")
  )
)



;; From gsttcp-marshal.h



;; From gsttcpplugin.h



;; From gsttcpserversink.h

(define-function gst_tcp_server_sink_get_type
  (c-name "gst_tcp_server_sink_get_type")
  (return-type "GType")
)



;; From gsttcpserversrc.h

(define-function gst_tcp_server_src_get_type
  (c-name "gst_tcp_server_src_get_type")
  (return-type "GType")
)



;; From gstvideorate.h



;; From gstvideoscale.h

(define-function gst_video_scale_get_type
  (c-name "gst_video_scale_get_type")
  (return-type "GType")
)



;; From vs_4tap.h

(define-function vs_4tap_init
  (c-name "vs_4tap_init")
  (return-type "none")
)

(define-function vs_scanline_resample_4tap_Y
  (c-name "vs_scanline_resample_4tap_Y")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int" "src_width")
    '("int*" "xacc")
    '("int" "increment")
  )
)

(define-function vs_scanline_merge_4tap_Y
  (c-name "vs_scanline_merge_4tap_Y")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src1")
    '("uint8_t*" "src2")
    '("uint8_t*" "src3")
    '("uint8_t*" "src4")
    '("int" "n")
    '("int" "acc")
  )
)

(define-method scale_4tap_Y
  (of-object "VSImage")
  (c-name "vs_image_scale_4tap_Y")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)



;; From vs_image.h

(define-method scale_nearest_RGBA
  (of-object "VSImage")
  (c-name "vs_image_scale_nearest_RGBA")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_linear_RGBA
  (of-object "VSImage")
  (c-name "vs_image_scale_linear_RGBA")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_nearest_RGB
  (of-object "VSImage")
  (c-name "vs_image_scale_nearest_RGB")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_linear_RGB
  (of-object "VSImage")
  (c-name "vs_image_scale_linear_RGB")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_nearest_YUYV
  (of-object "VSImage")
  (c-name "vs_image_scale_nearest_YUYV")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_linear_YUYV
  (of-object "VSImage")
  (c-name "vs_image_scale_linear_YUYV")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_nearest_UYVY
  (of-object "VSImage")
  (c-name "vs_image_scale_nearest_UYVY")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_linear_UYVY
  (of-object "VSImage")
  (c-name "vs_image_scale_linear_UYVY")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_nearest_Y
  (of-object "VSImage")
  (c-name "vs_image_scale_nearest_Y")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_linear_Y
  (of-object "VSImage")
  (c-name "vs_image_scale_linear_Y")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_nearest_RGB565
  (of-object "VSImage")
  (c-name "vs_image_scale_nearest_RGB565")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_linear_RGB565
  (of-object "VSImage")
  (c-name "vs_image_scale_linear_RGB565")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_nearest_RGB555
  (of-object "VSImage")
  (c-name "vs_image_scale_nearest_RGB555")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)

(define-method scale_linear_RGB555
  (of-object "VSImage")
  (c-name "vs_image_scale_linear_RGB555")
  (return-type "none")
  (parameters
    '("const-VSImage*" "src")
    '("uint8_t*" "tmpbuf")
  )
)



;; From vs_scanline.h

(define-function vs_scanline_downsample_Y
  (c-name "vs_scanline_downsample_Y")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
  )
)

(define-function vs_scanline_resample_nearest_Y
  (c-name "vs_scanline_resample_nearest_Y")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_resample_linear_Y
  (c-name "vs_scanline_resample_linear_Y")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_merge_linear_Y
  (c-name "vs_scanline_merge_linear_Y")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src1")
    '("uint8_t*" "src2")
    '("int" "n")
    '("int" "x")
  )
)

(define-function vs_scanline_downsample_RGBA
  (c-name "vs_scanline_downsample_RGBA")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
  )
)

(define-function vs_scanline_resample_nearest_RGBA
  (c-name "vs_scanline_resample_nearest_RGBA")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_resample_linear_RGBA
  (c-name "vs_scanline_resample_linear_RGBA")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_merge_linear_RGBA
  (c-name "vs_scanline_merge_linear_RGBA")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src1")
    '("uint8_t*" "src2")
    '("int" "n")
    '("int" "x")
  )
)

(define-function vs_scanline_downsample_RGB
  (c-name "vs_scanline_downsample_RGB")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
  )
)

(define-function vs_scanline_resample_nearest_RGB
  (c-name "vs_scanline_resample_nearest_RGB")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_resample_linear_RGB
  (c-name "vs_scanline_resample_linear_RGB")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_merge_linear_RGB
  (c-name "vs_scanline_merge_linear_RGB")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src1")
    '("uint8_t*" "src2")
    '("int" "n")
    '("int" "x")
  )
)

(define-function vs_scanline_downsample_YUYV
  (c-name "vs_scanline_downsample_YUYV")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
  )
)

(define-function vs_scanline_resample_nearest_YUYV
  (c-name "vs_scanline_resample_nearest_YUYV")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_resample_linear_YUYV
  (c-name "vs_scanline_resample_linear_YUYV")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_merge_linear_YUYV
  (c-name "vs_scanline_merge_linear_YUYV")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src1")
    '("uint8_t*" "src2")
    '("int" "n")
    '("int" "x")
  )
)

(define-function vs_scanline_downsample_UYVY
  (c-name "vs_scanline_downsample_UYVY")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
  )
)

(define-function vs_scanline_resample_nearest_UYVY
  (c-name "vs_scanline_resample_nearest_UYVY")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_resample_linear_UYVY
  (c-name "vs_scanline_resample_linear_UYVY")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_merge_linear_UYVY
  (c-name "vs_scanline_merge_linear_UYVY")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src1")
    '("uint8_t*" "src2")
    '("int" "n")
    '("int" "x")
  )
)

(define-function vs_scanline_downsample_RGB565
  (c-name "vs_scanline_downsample_RGB565")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
  )
)

(define-function vs_scanline_resample_nearest_RGB565
  (c-name "vs_scanline_resample_nearest_RGB565")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_resample_linear_RGB565
  (c-name "vs_scanline_resample_linear_RGB565")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_merge_linear_RGB565
  (c-name "vs_scanline_merge_linear_RGB565")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src1")
    '("uint8_t*" "src2")
    '("int" "n")
    '("int" "x")
  )
)

(define-function vs_scanline_downsample_RGB555
  (c-name "vs_scanline_downsample_RGB555")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
  )
)

(define-function vs_scanline_resample_nearest_RGB555
  (c-name "vs_scanline_resample_nearest_RGB555")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_resample_linear_RGB555
  (c-name "vs_scanline_resample_linear_RGB555")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src")
    '("int" "n")
    '("int*" "accumulator")
    '("int" "increment")
  )
)

(define-function vs_scanline_merge_linear_RGB555
  (c-name "vs_scanline_merge_linear_RGB555")
  (return-type "none")
  (parameters
    '("uint8_t*" "dest")
    '("uint8_t*" "src1")
    '("uint8_t*" "src2")
    '("int" "n")
    '("int" "x")
  )
)



;; From gstvideotestsrc.h

(define-function gst_video_test_src_get_type
  (c-name "gst_video_test_src_get_type")
  (return-type "GType")
)



;; From videotestsrc.h

(define-function paint_get_structure
  (c-name "paint_get_structure")
  (return-type "GstStructure*")
  (parameters
    '("struct-fourcc_list_struct*" "format")
  )
)

(define-method get_size
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_get_size")
  (return-type "int")
  (parameters
    '("int" "w")
    '("int" "h")
  )
)

(define-method smpte
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_smpte")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method smpte75
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_smpte75")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method snow
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_snow")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method black
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_black")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method white
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_white")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method red
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_red")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method green
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_green")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method blue
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_blue")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method checkers1
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_checkers1")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method checkers2
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_checkers2")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method checkers4
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_checkers4")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method checkers8
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_checkers8")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method circular
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_circular")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)

(define-method zoneplate
  (of-object "GstVideoTestSrc")
  (c-name "gst_video_test_src_zoneplate")
  (return-type "none")
  (parameters
    '("unsigned-char*" "dest")
    '("int" "w")
    '("int" "h")
  )
)



;; From gstvolume.h

(define-function gst_volume_get_type
  (c-name "gst_volume_get_type")
  (return-type "GType")
)



;; From gstalsadeviceprobe.h

(define-function gst_alsa_type_add_device_property_probe_interface
  (c-name "gst_alsa_type_add_device_property_probe_interface")
  (return-type "none")
  (parameters
    '("GType" "type")
  )
)



;; From gstalsa.h

(define-function gst_alsa_open_iec958_pcm
  (c-name "gst_alsa_open_iec958_pcm")
  (return-type "snd_pcm_t*")
  (parameters
    '("GstObject*" "obj")
  )
)

(define-function gst_alsa_probe_supported_formats
  (c-name "gst_alsa_probe_supported_formats")
  (return-type "GstCaps*")
  (parameters
    '("GstObject*" "obj")
    '("snd_pcm_t*" "handle")
    '("const-GstCaps*" "template_caps")
  )
)

(define-function gst_alsa_find_device_name
  (c-name "gst_alsa_find_device_name")
  (return-type "gchar*")
  (parameters
    '("GstObject*" "obj")
    '("const-gchar*" "device")
    '("snd_pcm_t*" "handle")
    '("snd_pcm_stream_t" "stream")
  )
)



;; From gstalsamixerelement.h

(define-function gst_alsa_mixer_element_get_type
  (c-name "gst_alsa_mixer_element_get_type")
  (return-type "GType")
)



;; From gstalsamixer.h

(define-function gst_alsa_mixer_new
  (c-name "gst_alsa_mixer_new")
  (is-constructor-of "GstAlsaMixer")
  (return-type "GstAlsaMixer*")
  (parameters
    '("const-gchar*" "device")
    '("GstAlsaMixerDirection" "dir")
  )
)

(define-method free
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_free")
  (return-type "none")
)

(define-method list_tracks
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_list_tracks")
  (return-type "const-GList*")
)

(define-method set_volume
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_set_volume")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gint*" "volumes")
  )
)

(define-method get_volume
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_get_volume")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gint*" "volumes")
  )
)

(define-method set_record
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_set_record")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gboolean" "record")
  )
)

(define-method set_mute
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_set_mute")
  (return-type "none")
  (parameters
    '("GstMixerTrack*" "track")
    '("gboolean" "mute")
  )
)

(define-method set_option
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_set_option")
  (return-type "none")
  (parameters
    '("GstMixerOptions*" "opts")
    '("gchar*" "value")
  )
)

(define-method get_option
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_get_option")
  (return-type "const-gchar*")
  (parameters
    '("GstMixerOptions*" "opts")
  )
)

(define-method get_mixer_flags
  (of-object "GstAlsaMixer")
  (c-name "gst_alsa_mixer_get_mixer_flags")
  (return-type "GstMixerFlags")
)



;; From gstalsamixeroptions.h

(define-function gst_alsa_mixer_options_get_type
  (c-name "gst_alsa_mixer_options_get_type")
  (return-type "GType")
)

(define-function gst_alsa_mixer_options_new
  (c-name "gst_alsa_mixer_options_new")
  (is-constructor-of "GstAlsaMixerOptions")
  (return-type "GstMixerOptions*")
  (parameters
    '("snd_mixer_elem_t*" "element")
    '("gint" "track_num")
  )
)



;; From gstalsamixertrack.h

(define-function gst_alsa_mixer_track_get_type
  (c-name "gst_alsa_mixer_track_get_type")
  (return-type "GType")
)

(define-function gst_alsa_mixer_track_new
  (c-name "gst_alsa_mixer_track_new")
  (is-constructor-of "GstAlsaMixerTrack")
  (return-type "GstMixerTrack*")
  (parameters
    '("snd_mixer_elem_t*" "element")
    '("gint" "num")
    '("gint" "track_num")
    '("gint" "flags")
    '("gboolean" "sw")
    '("GstAlsaMixerTrack*" "shared_mute_track")
    '("gboolean" "label_append_capture")
  )
)

(define-method update
  (of-object "GstAlsaMixerTrack")
  (c-name "gst_alsa_mixer_track_update")
  (return-type "none")
)



;; From gstalsasink.h

(define-function gst_alsasink_get_type
  (c-name "gst_alsasink_get_type")
  (return-type "GType")
)



;; From gstalsasrc.h

(define-function gst_alsasrc_get_type
  (c-name "gst_alsasrc_get_type")
  (return-type "GType")
)



;; From gstcdparanoiasrc.h

(define-function gst_cd_paranoia_src_get_type
  (c-name "gst_cd_paranoia_src_get_type")
  (return-type "GType")
)



;; From gstgiobasesink.h

(define-function gst_gio_base_sink_get_type
  (c-name "gst_gio_base_sink_get_type")
  (return-type "GType")
)

(define-method set_stream
  (of-object "GstGioBaseSink")
  (c-name "gst_gio_base_sink_set_stream")
  (return-type "none")
  (parameters
    '("GOutputStream*" "stream")
  )
)



;; From gstgiobasesrc.h

(define-function gst_gio_base_src_get_type
  (c-name "gst_gio_base_src_get_type")
  (return-type "GType")
)

(define-method set_stream
  (of-object "GstGioBaseSrc")
  (c-name "gst_gio_base_src_set_stream")
  (return-type "none")
  (parameters
    '("GInputStream*" "stream")
  )
)



;; From gstgio.h

(define-function gst_gio_error
  (c-name "gst_gio_error")
  (return-type "gboolean")
  (parameters
    '("gpointer" "element")
    '("const-gchar*" "func_name")
    '("GError**" "err")
    '("GstFlowReturn*" "ret")
  )
)

(define-function gst_gio_seek
  (c-name "gst_gio_seek")
  (return-type "GstFlowReturn")
  (parameters
    '("gpointer" "element")
    '("GSeekable*" "stream")
    '("guint64" "offset")
    '("GCancellable*" "cancel")
  )
)

(define-function gst_gio_uri_handler_do_init
  (c-name "gst_gio_uri_handler_do_init")
  (return-type "none")
  (parameters
    '("GType" "type")
  )
)



;; From gstgiosink.h

(define-function gst_gio_sink_get_type
  (c-name "gst_gio_sink_get_type")
  (return-type "GType")
)



;; From gstgiosrc.h

(define-function gst_gio_src_get_type
  (c-name "gst_gio_src_get_type")
  (return-type "GType")
)



;; From gstgiostreamsink.h

(define-function gst_gio_stream_sink_get_type
  (c-name "gst_gio_stream_sink_get_type")
  (return-type "GType")
)



;; From gstgiostreamsrc.h

(define-function gst_gio_stream_src_get_type
  (c-name "gst_gio_stream_src_get_type")
  (return-type "GType")
)



;; From gstgnomevfs.h

(define-function gst_gnome_vfs_uri_get_type
  (c-name "gst_gnome_vfs_uri_get_type")
  (return-type "GType")
)

(define-function gst_gnome_vfs_handle_get_type
  (c-name "gst_gnome_vfs_handle_get_type")
  (return-type "GType")
)

(define-function gst_gnome_vfs_location_to_uri_string
  (c-name "gst_gnome_vfs_location_to_uri_string")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "location")
  )
)



;; From gstgnomevfssink.h

(define-function gst_gnome_vfs_sink_get_type
  (c-name "gst_gnome_vfs_sink_get_type")
  (return-type "GType")
)



;; From gstgnomevfssrc.h

(define-function gst_gnome_vfs_src_get_type
  (c-name "gst_gnome_vfs_src_get_type")
  (return-type "GType")
)



;; From gstgnomevfsuri.h

(define-function gst_gnomevfs_get_supported_uris
  (c-name "gst_gnomevfs_get_supported_uris")
  (return-type "gchar**")
)



;; From gstoggdemux.h



;; From gstoggmux.h

(define-function gst_ogg_mux_get_type
  (c-name "gst_ogg_mux_get_type")
  (return-type "GType")
)



;; From gstclockoverlay.h

(define-function gst_clock_overlay_get_type
  (c-name "gst_clock_overlay_get_type")
  (return-type "GType")
)



;; From gsttextoverlay.h

(define-function gst_text_overlay_get_type
  (c-name "gst_text_overlay_get_type")
  (return-type "GType")
)



;; From gsttextrender.h

(define-function gst_text_render_get_type
  (c-name "gst_text_render_get_type")
  (return-type "GType")
)



;; From gsttimeoverlay.h

(define-function gst_time_overlay_get_type
  (c-name "gst_time_overlay_get_type")
  (return-type "GType")
)



;; From gsttheoradec.h



;; From gsttheoraenc.h



;; From gsttheoraparse.h

(define-function gst_theora_parse_get_type
  (c-name "gst_theora_parse_get_type")
  (return-type "GType")
)



;; From vorbisdec.h

(define-function gst_vorbis_dec_get_type
  (c-name "gst_vorbis_dec_get_type")
  (return-type "GType")
)



;; From vorbisenc.h

(define-function gst_vorbis_enc_get_type
  (c-name "gst_vorbis_enc_get_type")
  (return-type "GType")
)



;; From vorbisparse.h

(define-function gst_vorbis_parse_get_type
  (c-name "gst_vorbis_parse_get_type")
  (return-type "GType")
)



;; From vorbistag.h

(define-function gst_vorbis_tag_get_type
  (c-name "gst_vorbis_tag_get_type")
  (return-type "GType")
)


