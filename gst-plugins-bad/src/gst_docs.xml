<root>
<enum name="GstCameraBinMode">
<description>
Capture mode to use.

</description>
<parameters>
<parameter name="MODE_IMAGE">
<parameter_description> image capture
</parameter_description>
</parameter>
<parameter name="MODE_VIDEO">
<parameter_description> video capture
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GstGLDisplay::create-context">
<description>
Overrides the @GstGLContext creation mechanism.
It can be called in any thread and it is emitted with
display's object lock held.


</description>
<parameters>
<parameter name="object">
<parameter_description> the #GstGLDisplay
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> other context to share resources with.
</parameter_description>
</parameter>
</parameters>
<return> the new context.
</return>
</signal>

<enum name="GstGLUploadReturn">
<description>

</description>
<parameters>
<parameter name="GST_GL_UPLOAD_DONE">
<parameter_description> No further processing required
</parameter_description>
</parameter>
<parameter name="GST_GL_UPLOAD_ERROR">
<parameter_description> An unspecified error occured
</parameter_description>
</parameter>
<parameter name="GST_GL_UPLOAD_UNSUPPORTED">
<parameter_description> The configuration is unsupported.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GstGLWindow::key-event">
<description>
Will be emitted when a key event is received by the GstGLwindow.


</description>
<parameters>
<parameter name="object">
<parameter_description> the #GstGLWindow
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the name of the event
</parameter_description>
</parameter>
<parameter name="key">
<parameter_description> the id of the key pressed
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GstGLWindow::mouse-event">
<description>
Will be emitted when a mouse event is received by the GstGLwindow.


</description>
<parameters>
<parameter name="object">
<parameter_description> the #GstGLWindow
</parameter_description>
</parameter>
<parameter name="id">
<parameter_description> the name of the event
</parameter_description>
</parameter>
<parameter name="button">
<parameter_description> the id of the button
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> the x coordinate of the mouse event
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> the y coordinate of the mouse event
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GstH264FramePackingType">
<description>
Frame packing arrangement types.


</description>
<parameters>
<parameter name="GST_H264_FRAME_PACKING_NONE">
<parameter_description> A complete 2D frame without any frame packing
</parameter_description>
</parameter>
<parameter name="GST_H264_FRAME_PACKING_CHECKERBOARD_INTERLEAVING">
<parameter_description> Checkerboard
based interleaving
</parameter_description>
</parameter>
<parameter name="GST_H264_FRAME_PACKING_COLUMN_INTERLEAVING">
<parameter_description> Column based interleaving
</parameter_description>
</parameter>
<parameter name="GST_H264_FRAME_PACKING_ROW_INTERLEAVING">
<parameter_description> Row based interleaving
</parameter_description>
</parameter>
<parameter name="GST_H264_FRAME_PACKING_SIDE_BY_SIDE">
<parameter_description> Side-by-side packing
</parameter_description>
</parameter>
<parameter name="GST_H264_FRMAE_PACKING_TOP_BOTTOM">
<parameter_description> Top-Bottom packing
</parameter_description>
</parameter>
<parameter name="GST_H264_FRAME_PACKING_TEMPORAL_INTERLEAVING">
<parameter_description> Temporal interleaving
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH264NalUnitExtensionType">
<description>
Indicates the type of H.264 NAL unit extension.


</description>
<parameters>
<parameter name="GST_H264_NAL_EXTENSION_NONE">
<parameter_description> No NAL unit header extension is available
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_EXTENSION_SVC">
<parameter_description> NAL unit header extension for SVC (Annex G)
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_EXTENSION_MVC">
<parameter_description> NAL unit header extension for MVC (Annex H)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH264NalUnitType">
<description>
Indicates the type of H264 Nal Units

</description>
<parameters>
<parameter name="GST_H264_NAL_UNKNOWN">
<parameter_description> Unknown nal type
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SLICE">
<parameter_description> Slice nal
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SLICE_DPA">
<parameter_description> DPA slice nal
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SLICE_DPB">
<parameter_description> DPB slice nal
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SLICE_DPC">
<parameter_description> DPC slice nal
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SLICE_IDR">
<parameter_description> DPR slice nal
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SEI">
<parameter_description> Supplemental enhancement information (SEI) nal unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SPS">
<parameter_description> Sequence parameter set (SPS) nal unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_PPS">
<parameter_description> Picture parameter set (PPS) nal unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_AU_DELIMITER">
<parameter_description> Access unit (AU) delimiter nal unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SEQ_END">
<parameter_description> End of sequence nal unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_STREAM_END">
<parameter_description> End of stream nal unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_FILLER_DATA">
<parameter_description> Filler data nal lunit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SPS_EXT">
<parameter_description> Sequence parameter set (SPS) extension NAL unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_PREFIX_UNIT">
<parameter_description> Prefix NAL unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SUBSET_SPS">
<parameter_description> Subset sequence parameter set (SSPS) NAL unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_DEPTH_SPS">
<parameter_description> Depth parameter set (DPS) NAL unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SLICE_AUX">
<parameter_description> Auxiliary coded picture without partitioning NAL unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SLICE_EXT">
<parameter_description> Coded slice extension NAL unit
</parameter_description>
</parameter>
<parameter name="GST_H264_NAL_SLICE_DEPTH">
<parameter_description> Coded slice extension for depth or 3D-AVC texture view
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH264ParserResult">
<description>
The result of parsing H264 data.

</description>
<parameters>
<parameter name="GST_H264_PARSER_OK">
<parameter_description> The parsing succeded
</parameter_description>
</parameter>
<parameter name="GST_H264_PARSER_BROKEN_DATA">
<parameter_description> The data to parse is broken
</parameter_description>
</parameter>
<parameter name="GST_H264_PARSER_BROKEN_LINK">
<parameter_description> The link to structure needed for the parsing couldn't be found
</parameter_description>
</parameter>
<parameter name="GST_H264_PARSER_ERROR">
<parameter_description> An error occured when parsing
</parameter_description>
</parameter>
<parameter name="GST_H264_PARSER_NO_NAL">
<parameter_description> No nal found during the parsing
</parameter_description>
</parameter>
<parameter name="GST_H264_PARSER_NO_NAL_END">
<parameter_description> Start of the nal found, but not the end.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH264Profile">
<description>
H.264 Profiles.


</description>
<parameters>
<parameter name="GST_H264_PROFILE_BASELINE">
<parameter_description> Baseline profile (A.2.1)
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_MAIN">
<parameter_description> Main profile (A.2.2)
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_EXTENDED">
<parameter_description> Extended profile (A.2.3)
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_HIGH">
<parameter_description> High profile (A.2.4)
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_HIGH10">
<parameter_description> High 10 profile (A.2.5) or High 10 Intra
profile (A.2.8), depending on constraint_set3_flag
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_HIGH_422">
<parameter_description> High 4:2:2 profile (A.2.6) or High
4:2:2 Intra profile (A.2.9), depending on constraint_set3_flag
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_HIGH_444">
<parameter_description> High 4:4:4 Predictive profile (A.2.7)
or High 4:4:4 Intra profile (A.2.10), depending on the value of
constraint_set3_flag
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_MULTIVIEW_HIGH">
<parameter_description> Multiview High profile (H.10.1.1)
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_STEREO_HIGH">
<parameter_description> Stereo High profile (H.10.1.2)
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_SCALABLE_BASELINE">
<parameter_description> Scalable Baseline profile (G.10.1.1)
</parameter_description>
</parameter>
<parameter name="GST_H264_PROFILE_SCALABLE_HIGH">
<parameter_description> Scalable High profile (G.10.1.2)
or Scalable High Intra profile (G.10.1.3), depending on the value
of constraint_set3_flag
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH264SEIPayloadType">
<description>
The type of SEI message.

</description>
<parameters>
<parameter name="GST_H264_SEI_BUF_PERIOD">
<parameter_description> Buffering Period SEI Message
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_TIMING">
<parameter_description> Picture Timing SEI Message
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_RECOVERY_POINT">
<parameter_description> Recovery Point SEI Message (D.2.7)
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_STEREO_VIDEO_INFO">
<parameter_description> stereo video info SEI message (Since: 1.6)
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_FRAME_PACKING">
<parameter_description> Frame Packing Arrangement (FPA) message that
contains the 3D arrangement for stereoscopic 3D video (Since: 1.6)
...
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH264SEIPicStructType">
<description>
SEI pic_struct type

</description>
<parameters>
<parameter name="GST_H264_SEI_PIC_STRUCT_FRAME">
<parameter_description> Picture is a frame
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_STRUCT_TOP_FIELD">
<parameter_description> Top field of frame
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_STRUCT_BOTTOM_FIELD">
<parameter_description> Botom field of frame
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_STRUCT_TOP_BOTTOM">
<parameter_description> Top bottom field of frame
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_STRUCT_BOTTOM_TOP">
<parameter_description> bottom top field of frame
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_STRUCT_TOP_BOTTOM_TOP">
<parameter_description> top bottom top field of frame
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM">
<parameter_description> bottom top bottom field of frame
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_STRUCT_FRAME_DOUBLING">
<parameter_description> indicates that the frame should
be displayed two times consecutively
</parameter_description>
</parameter>
<parameter name="GST_H264_SEI_PIC_STRUCT_FRAME_TRIPLING">
<parameter_description> indicates that the frame should be
displayed three times consecutively
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH265NalUnitType">
<description>
Indicates the type of H265 Nal Units

</description>
<parameters>
<parameter name="GST_H265_NAL_SLICE_TRAIL_N">
<parameter_description> Slice nal of a non-TSA, non-STSA trailing picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_TRAIL_R">
<parameter_description> Slice nal of a non-TSA, non-STSA trailing picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_TSA_N">
<parameter_description> Slice nal of a TSA picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_TSA_R">
<parameter_description> Slice nal of a TSA picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_STSA_N">
<parameter_description> Slice nal of a STSA picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_STSA_R">
<parameter_description> Slice nal of a STSA picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_RADL_N">
<parameter_description> Slice nal of a RADL picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_RADL_R">
<parameter_description> Slice nal of a RADL piicture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_RASL_N">
<parameter_description> Slice nal of a RASL picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_RASL_R">
<parameter_description> Slice nal of a RASL picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_BLA_W_LP">
<parameter_description> Slice nal of a BLA picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_BLA_W_RADL">
<parameter_description> Slice nal of a BLA picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_BLA_N_LP">
<parameter_description> Slice nal of a BLA picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_IDR_W_RADL">
<parameter_description> Slice nal of an IDR picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_IDR_N_LP">
<parameter_description> Slice nal of an IDR picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SLICE_CRA_NUT">
<parameter_description> Slice nal of a CRA picture
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_VPS">
<parameter_description> Video parameter set(VPS) nal unit
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SPS">
<parameter_description> Sequence parameter set (SPS) nal unit
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_PPS">
<parameter_description> Picture parameter set (PPS) nal unit
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_AUD">
<parameter_description> Access unit (AU) delimiter nal unit
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_EOS">
<parameter_description> End of sequence (EOS) nal unit
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_EOB">
<parameter_description> End of bitstream (EOB) nal unit
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_FD">
<parameter_description> Filler data (FD) nal lunit
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_PREFIX_SEI">
<parameter_description> Supplemental enhancement information prefix nal unit
</parameter_description>
</parameter>
<parameter name="GST_H265_NAL_SUFFIX_SEI">
<parameter_description> Suppliemental enhancement information suffix nal unit
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH265ParserResult">
<description>
The result of parsing H265 data.

</description>
<parameters>
<parameter name="GST_H265_PARSER_OK">
<parameter_description> The parsing succeded
</parameter_description>
</parameter>
<parameter name="GST_H265_PARSER_BROKEN_DATA">
<parameter_description> The data to parse is broken
</parameter_description>
</parameter>
<parameter name="GST_H265_PARSER_BROKEN_LINK">
<parameter_description> The link to structure needed for the parsing couldn't be found
</parameter_description>
</parameter>
<parameter name="GST_H265_PARSER_ERROR">
<parameter_description> An error accured when parsing
</parameter_description>
</parameter>
<parameter name="GST_H265_PARSER_NO_NAL">
<parameter_description> No nal found during the parsing
</parameter_description>
</parameter>
<parameter name="GST_H265_PARSER_NO_NAL_END">
<parameter_description> Start of the nal found, but not the end.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH265Profile">
<description>
H.265 Profiles.


</description>
<parameters>
<parameter name="GST_H265_PROFILE_MAIN">
<parameter_description> Main profile (A.3.2)
</parameter_description>
</parameter>
<parameter name="GST_H265_PROFILE_MAIN_10">
<parameter_description> Main 10 profile (A.3.3)
</parameter_description>
</parameter>
<parameter name="GST_H265_PROFILE_MAIN_STILL_PICTURE">
<parameter_description> Main Still Picture profile (A.3.4)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH265SEIPayloadType">
<description>
The type of SEI message.

</description>
<parameters>
<parameter name="GST_H265_SEI_BUF_PERIOD">
<parameter_description> Buffering Period SEI Message
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_TIMING">
<parameter_description> Picture Timing SEI Message
...
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstH265SEIPicStructType">
<description>
SEI pic_struct type

</description>
<parameters>
<parameter name="GST_H265_SEI_PIC_STRUCT_FRAME">
<parameter_description> Picture is a frame
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_TOP_FIELD">
<parameter_description> Top field of frame
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_BOTTOM_FIELD">
<parameter_description> Botom field of frame
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_TOP_BOTTOM">
<parameter_description> Top bottom field of frame
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_BOTTOM_TOP">
<parameter_description> bottom top field of frame
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_TOP_BOTTOM_TOP">
<parameter_description> top bottom top field of frame
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM">
<parameter_description> bottom top bottom field of frame
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_FRAME_DOUBLING">
<parameter_description> indicates that the frame should
be displayed two times consecutively
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_FRAME_TRIPLING">
<parameter_description> indicates that the frame should be
displayed three times consecutively
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_TOP_PAIRED_PREVIOUS_BOTTOM">
<parameter_description> top field paired with
previous bottom field in output order
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_BOTTOM_PAIRED_PREVIOUS_TOP">
<parameter_description> bottom field paried with
previous top field in output order
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_TOP_PAIRED_NEXT_BOTTOM">
<parameter_description> top field paired with next
bottom field in output order
</parameter_description>
</parameter>
<parameter name="GST_H265_SEI_PIC_STRUCT_BOTTOM_PAIRED_NEXT_TOP">
<parameter_description> bottom field paired with
next top field in output order
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="GstInsertBin::append">
<description>
This action signal adds the filter like element after any other element
in the bin.

Same as gst_insert_bin_append()

</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been added or not, or
%NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
<parameter name="user_data2">
<parameter_description> The user data of the signal (ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GstInsertBin::insert-after">
<description>
This action signal adds the filter like element after the @sibling
element in the bin.
element in the bin.

Same as gst_insert_bin_insert_after()

</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the #GstElement to add @element after
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been added or not, or
%NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
<parameter name="user_data2">
<parameter_description> The user data of the signal (ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GstInsertBin::insert-before">
<description>
This action signal adds the filter like element before the @sibling
element in the bin.

Same as gst_insert_bin_insert_before()

</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the #GstElement to add @element before
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been added or not, or
%NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
<parameter name="user_data2">
<parameter_description> The user data of the signal (ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GstInsertBin::prepend">
<description>
This action signal adds the filter like element before any other element
in the bin.

Same as gst_insert_bin_prepend()

</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been added or not, or
%NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
<parameter name="user_data2">
<parameter_description> The user data of the signal (ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="GstInsertBin::remove">
<description>
This action signal removed the filter like element from the bin.

Same as gst_insert_bin_remove()

</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to remove
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been removed or not,
or %NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
<parameter name="user_data2">
<parameter_description> The user data of the signal (ignored)
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="GstJpegEntropyCodingMode">
<description>
JPEG entropy coding mode.


</description>
<parameters>
<parameter name="GST_JPEG_ENTROPY_CODING_HUFFMAN">
<parameter_description> Huffman coding
</parameter_description>
</parameter>
<parameter name="GST_JPEG_ENTROPY_CODING_ARITHMETIC">
<parameter_description> arithmetic coding
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstJpegMarker">
<description>
Indicates the type of JPEG segment.


</description>
<parameters>
<parameter name="GST_JPEG_MARKER_SOF0">
<parameter_description> Start of frame marker code (Baseline)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF1">
<parameter_description> Start of frame marker code (Extended Sequential, Huffman)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF2">
<parameter_description> Start of frame marker code (Progressive, Huffman)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF3">
<parameter_description> Start of frame marker code (Lossless, Huffman)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF5">
<parameter_description> Start of frame marker code (Differential Sequential, Huffman)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF6">
<parameter_description> Start of frame marker code (Differential Progressive, Huffman)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF7">
<parameter_description> Start of frame marker code (Differential Lossless, Huffman)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF9">
<parameter_description> Start of frame marker code (Extended Sequential, Arithmetic)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF10">
<parameter_description> Start of frame marker code (Progressive, Arithmetic)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF11">
<parameter_description> Start of frame marker code (Lossless, Arithmetic)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF13">
<parameter_description> Start of frame marker code (Differential Sequential, Arithmetic)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF14">
<parameter_description> Start of frame marker code (Differential Progressive, Arithmetic)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOF15">
<parameter_description> Start of frame marker code (Differential Lossless, Arithmetic)
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_DHT">
<parameter_description> Huffman table marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_DAC">
<parameter_description> Arithmetic coding marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_RST_MIN">
<parameter_description> Restart interval min marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_RST_MAX">
<parameter_description> Restart interval max marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOI">
<parameter_description> Start of image marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_EOI">
<parameter_description> End of image marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_SOS">
<parameter_description> Start of scan marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_DQT">
<parameter_description> Define quantization table marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_DNL">
<parameter_description> Define number of lines marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_DRI">
<parameter_description> Define restart interval marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP0">
<parameter_description> Application segment 0 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP1">
<parameter_description> Application segment 1 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP2">
<parameter_description> Application segment 2 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP3">
<parameter_description> Application segment 3 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP4">
<parameter_description> Application segment 4 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP5">
<parameter_description> Application segment 5 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP6">
<parameter_description> Application segment 6 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP7">
<parameter_description> Application segment 7 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP8">
<parameter_description> Application segment 8 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP9">
<parameter_description> Application segment 9 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP10">
<parameter_description> Application segment 10 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP11">
<parameter_description> Application segment 11 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP12">
<parameter_description> Application segment 12 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP13">
<parameter_description> Application segment 13 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP14">
<parameter_description> Application segment 14 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_APP15">
<parameter_description> Application segment 15 marker code
</parameter_description>
</parameter>
<parameter name="GST_JPEG_MARKER_COM">
<parameter_description> Comment marker code
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstJpegProfile">
<description>
JPEG encoding processes.


</description>
<parameters>
<parameter name="GST_JPEG_PROFILE_BASELINE">
<parameter_description> Baseline DCT
</parameter_description>
</parameter>
<parameter name="GST_JPEG_PROFILE_EXTENDED">
<parameter_description> Extended sequential DCT
</parameter_description>
</parameter>
<parameter name="GST_JPEG_PROFILE_PROGRESSIVE">
<parameter_description> Progressive DCT
</parameter_description>
</parameter>
<parameter name="GST_JPEG_PROFILE_LOSSLESS">
<parameter_description> Lossless (sequential)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpeg4AspectRatioInfo">
<description>
Defines the different pixel aspect ratios as
defined in: Table 6-12 -- Meaning of pixel aspect ratio

</description>
<parameters>
<parameter name="GST_MPEG4_SQUARE">
<parameter_description> 1:1 square
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_625_TYPE_4_3">
<parameter_description> 12:11 (625-type for 4:3 picture)
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_525_TYPE_4_3">
<parameter_description> 10:11 (525-type for 4:3 picture)
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_625_TYPE_16_9">
<parameter_description> 16:11 (625-type stretched for 16:9 picture)
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_525_TYPE_16_9">
<parameter_description> 40:33 (525-type stretched for 16:9 picture)
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_EXTENDED_PAR">
<parameter_description> Extended par
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpeg4ParseResult">
<description>
Result type of any parsing function.

</description>
<parameters>
<parameter name="GST_MPEG4_PARSER_OK">
<parameter_description> The parsing went well
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_PARSER_BROKEN_DATA">
<parameter_description> The bitstream was broken
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_PARSER_NO_PACKET">
<parameter_description> There was no packet in the buffer
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_PARSER_NO_PACKET_END">
<parameter_description> There was no packet end in the buffer
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_PARSER_NO_PACKET_ERROR">
<parameter_description> An error accured durint the parsing
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpeg4VideoObjectCodingType">
<description>
The vop coding types as defined in:
Table 6-20 -- Meaning of vop_coding_type

</description>
<parameters>
<parameter name="GST_MPEG4_I_VOP">
<parameter_description> intra-coded (I)
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_P_VOP">
<parameter_description> predictive-coded (P)
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_B_VOP">
<parameter_description> bidirectionally-predictive-coded (B)
</parameter_description>
</parameter>
<parameter name="GST_MPEG4_S_VOP">
<parameter_description> sprite (S)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegVideoChromaFormat">
<description>
Chroma subsampling type.

</description>
<parameters>
<parameter name="GST_MPEG_VIDEO_CHROMA_RES">
<parameter_description> Invalid (reserved for future use)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_CHROMA_420">
<parameter_description> 4:2:0 subsampling
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_CHROMA_422">
<parameter_description> 4:2:2 subsampling
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_CHROMA_444">
<parameter_description> 4:4:4 (non-subsampled)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegVideoLevel">
<description>
Mpeg-2 Levels.

</description>
<parameters>
<parameter name="GST_MPEG_VIDEO_LEVEL_LOW">
<parameter_description> Low level (LL)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_LEVEL_MAIN">
<parameter_description> Main level (ML)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_LEVEL_HIGH_1440">
<parameter_description> High 1440 level (H-14)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_LEVEL_HIGH">
<parameter_description> High level (HL)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegVideoPacketExtensionCode">
<description>
Indicates what type of packets are in this block, some are mutually
exclusive though - ie, sequence packs are accumulated separately. GOP &amp;
Picture may occur together or separately.

</description>
<parameters>
<parameter name="GST_MPEG_VIDEO_PACKET_EXT_SEQUENCE">
<parameter_description> Sequence extension code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_EXT_SEQUENCE_DISPLAY">
<parameter_description> Sequence Display extension code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_EXT_QUANT_MATRIX">
<parameter_description> Quantization Matrix extension code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_EXT_SEQUENCE_SCALABLE">
<parameter_description> Sequence Scalable extension code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_EXT_PICTURE">
<parameter_description> Picture coding extension
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegVideoPacketTypeCode">
<description>
Indicates the type of MPEG packet

</description>
<parameters>
<parameter name="GST_MPEG_VIDEO_PACKET_PICTURE">
<parameter_description> Picture packet starting code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_SLICE_MIN">
<parameter_description> Slice min packet starting code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_SLICE_MAX">
<parameter_description> Slice max packet starting code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_USER_DATA">
<parameter_description> User data packet starting code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_SEQUENCE">
<parameter_description> Sequence packet starting code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_EXTENSION">
<parameter_description> Extension packet starting code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_SEQUENCE_END">
<parameter_description> Sequence end packet code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_GOP">
<parameter_description> Group of Picture packet starting code
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PACKET_NONE">
<parameter_description> None packet code
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegVideoPictureStructure">
<description>
Picture structure type.

</description>
<parameters>
<parameter name="GST_MPEG_VIDEO_PICTURE_STRUCTURE_TOP_FIELD">
<parameter_description> Top field
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PICTURE_STRUCTURE_BOTTOM_FIELD">
<parameter_description> Bottom field
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PICTURE_STRUCTURE_FRAME">
<parameter_description> Frame picture
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegVideoPictureType">
<description>
Picture type.

</description>
<parameters>
<parameter name="GST_MPEG_VIDEO_PICTURE_TYPE_I">
<parameter_description> Intra-coded (I) frame
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PICTURE_TYPE_P">
<parameter_description> Predictive-codec (P) frame
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PICTURE_TYPE_B">
<parameter_description> Bidirectionally predictive-coded (B) frame
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PICTURE_TYPE_D">
<parameter_description> D frame
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegVideoProfile">
<description>
Mpeg-2 Profiles.

</description>
<parameters>
<parameter name="GST_MPEG_VIDEO_PROFILE_422">
<parameter_description> 4:2:2 profile (422)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PROFILE_HIGH">
<parameter_description> High profile (HP)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PROFILE_SPATIALLY_SCALABLE">
<parameter_description> Spatially Scalable profile (Spatial)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PROFILE_SNR_SCALABLE">
<parameter_description> SNR Scalable profile (SNR)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PROFILE_MAIN">
<parameter_description> Main profile (MP)
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_PROFILE_SIMPLE">
<parameter_description> Simple profile (SP)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegVideoSequenceScalableMode">
<description>

</description>
<parameters>
<parameter name="GST_MPEG_VIDEO_SEQ_SCALABLE_MODE_DATA_PARTITIONING">
<parameter_description> Data partitioning
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_SEQ_SCALABLE_MODE_SPATIAL">
<parameter_description> Spatial Scalability
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_SEQ_SCALABLE_MODE_SNR">
<parameter_description> SNR Scalability
</parameter_description>
</parameter>
<parameter name="GST_MPEG_VIDEO_SEQ_SCALABLE_MODE_TEMPORAL">
<parameter_description> Temporal Scalability
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegtsScteStreamType">
<description>
Type of mpeg-ts streams for SCTE


</description>
<parameters>
<parameter name="GST_MPEGTS_STREAM_TYPE_SCTE_SUBTITLING">
<parameter_description>  SCTE-27 Subtitling
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SCTE_ISOCH_DATA">
<parameter_description>  SCTE-19 Isochronous data
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SCTE_DST_NRT">
<parameter_description>     SCTE-07 Data Service or
Network Resource Table
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SCTE_DSMCC_DCB">
<parameter_description>   Type B - DSM-CC Data Carousel
[IEC 13818-6])
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SCTE_SIGNALING">
<parameter_description>   Enhanced Television Application
Signaling (OC-SP-ETV-AM1.0.1-120614)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SCTE_SYNC_DATA">
<parameter_description>   SCTE-07 Synchronous data
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SCTE_ASYNC_DATA">
<parameter_description>  SCTE-53 Asynchronous data
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegtsSectionSCTETableID">
<description>
Values for a #GstMpegtsSection table_id.

These are the registered SCTE table_id variants.

see also: #GstMpegtsSectionTableID

</description>
<parameters>
<parameter name="GST_MTS_TABLE_ID_SCTE_EAS">
<parameter_description>    SCTE-18 Emergency Alert System
</parameter_description>
</parameter>
<parameter name="GST_MTS_TABLE_ID_SCTE_EBIF">
<parameter_description>   CL-SP-ETV-AM 1.0.1 EBIF message
</parameter_description>
</parameter>
<parameter name="GST_MTS_TABLE_ID_SCTE_EISS">
<parameter_description>   CL-SP-ETV-AM 1.0.1 EBIF Int. Signaling Sect.
</parameter_description>
</parameter>
<parameter name="GST_MTS_TABLE_ID_SCTE_DII">
<parameter_description>    CL-SP-ETV-AM 1.0.1 DSMCC DII message
</parameter_description>
</parameter>
<parameter name="GST_MTS_TABLE_ID_SCTE_DDB">
<parameter_description>    CL-SP-ETV-AM 1.0.1 DSMCC Data Download Block
</parameter_description>
</parameter>
<parameter name="GST_MTS_TABLE_ID_SCTE_SPLICE">
<parameter_description> SCTE-35 splice information is carried in a
section stream on a separate PID in the program’s Map Table (PMT) allowing
Splice Event notifications to remain associated with the program and pass
through multiplexers.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegtsSectionType">
<description>
Types of #GstMpegtsSection that the library handles.

</description>
<parameters>
<parameter name="GST_MPEGTS_SECTION_UNKNOWN">
<parameter_description> Unknown section type
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_PAT">
<parameter_description> Program Association Table (ISO/IEC 13818-1)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_PMT">
<parameter_description> Program Map Table (ISO/IEC 13818-1)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_CAT">
<parameter_description> Conditional Access Table (ISO/IEC 13818-1)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_TSDT">
<parameter_description> Transport Stream Description Table (ISO/IEC 13818-1)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_EIT">
<parameter_description> Event Information Table (EN 300 468)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_NIT">
<parameter_description> Network Information Table (ISO/IEC 13818-1 / EN 300 468)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_BAT">
<parameter_description> Bouquet Association Table ((EN 300 468)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_SDT">
<parameter_description> Service Description Table (EN 300 468)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_TDT">
<parameter_description> Time and Date Table (EN 300 468)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_TOT">
<parameter_description> Time Offset Table (EN 300 468)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_ATSC_TVCT">
<parameter_description> ATSC Terrestrial Virtual Channel Table (A65)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_ATSC_CVCT">
<parameter_description> ATSC Cable Virtual Channel Table (A65)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_ATSC_MGT">
<parameter_description> ATSC Master Guide Table (A65)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_ATSC_ETT">
<parameter_description> ATSC Extended Text Table (A65)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_ATSC_EIT">
<parameter_description> ATSC Event Information Table (A65)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_SECTION_ATSC_STT">
<parameter_description> ATSC System Time Table (A65)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstMpegtsStreamType">
<description>
Type of mpeg-ts stream type.

These values correspond to the base standard registered types. Depending
on the variant of mpeg-ts being used (Bluray, ATSC, DVB, ...), other
types might also be used, but will not conflict with these.

Corresponds to table 2-34 of ITU H.222.0 | ISO/IEC 13818-1

</description>
<parameters>
<parameter name="GST_MPEGTS_STREAM_TYPE_RESERVED_00">
<parameter_description> ITU-T | ISO/IEC Reserved
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_MPEG1">
<parameter_description> ISO/IEC 11172-2 Video
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_MPEG2">
<parameter_description> Rec. ITU-T H.262 | ISO/IEC 13818-2
Video or ISO/IEC 11172-2 constrained parameter video stream
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_AUDIO_MPEG1">
<parameter_description> ISO/IEC 11172-3 Audio
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_AUDIO_MPEG2">
<parameter_description> ISO/IEC 13818-3 Audio
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_PRIVATE_SECTIONS">
<parameter_description> private sections
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_PRIVATE_PES_PACKETS">
<parameter_description> PES packets containing private data
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_MHEG">
<parameter_description> ISO/IEC 13522 MHEG
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_DSM_CC">
<parameter_description> Annex A DSM-CC
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_H_222_1">
<parameter_description> Rec. ITU-T H.222.1
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_DSMCC_A">
<parameter_description> ISO/IEC 13818-6 type A
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_DSMCC_B">
<parameter_description> ISO/IEC 13818-6 type B
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_DSMCC_C">
<parameter_description> ISO/IEC 13818-6 type C
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_DSMCC_D">
<parameter_description> ISO/IEC 13818-6 type D
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_AUXILIARY">
<parameter_description> auxiliary streams
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_AUDIO_AAC_ADTS">
<parameter_description> ISO/IEC 13818-7 Audio with ADTS
transport syntax
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_MPEG4">
<parameter_description> ISO/IEC 14496-2 Visual
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_AUDIO_AAC_LATM">
<parameter_description> ISO/IEC 14496-3 Audio with the LATM
transport syntax as defined in ISO/IEC 14496-3
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SL_FLEXMUX_PES_PACKETS">
<parameter_description> ISO/IEC 14496-1
SL-packetized stream or FlexMux stream carried in PES packets
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SL_FLEXMUX_SECTIONS">
<parameter_description> ISO/IEC 14496-1 SL-packetized
stream or FlexMux stream carried in ISO/IEC 14496_sections
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_SYNCHRONIZED_DOWNLOAD">
<parameter_description> ISO/IEC 13818-6 Synchronized
Download Protocol
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_METADATA_PES_PACKETS">
<parameter_description> Metadata carried in PES packets
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_METADATA_SECTIONS">
<parameter_description> Metadata carried in metadata_sections
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_METADATA_DATA_CAROUSEL">
<parameter_description> Metadata carried in ISO/IEC
13818-6 Data Carousel
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_METADATA_OBJECT_CAROUSEL">
<parameter_description> Metadata carried in
ISO/IEC 13818-6 Object Carousel
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_METADATA_SYNCHRONIZED_DOWNLOAD">
<parameter_description> Metadata carried in
ISO/IEC 13818-6 Synchronized Download Protocol
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_MPEG2_IPMP">
<parameter_description> IPMP stream (defined in ISO/IEC 13818-11,
MPEG-2 IPMP)
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_H264">
<parameter_description> AVC video stream conforming to one or
more profiles defined in Annex A of Rec. ITU-T H.264 | ISO/IEC 14496-10 or
AVC video sub-bitstream of SVC as defined in 2.1.78 or MVC base view
sub-bitstream, as defined in 2.1.85, or AVC video sub-bitstream of MVC, as
defined in 2.1.88
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_AUDIO_AAC_CLEAN">
<parameter_description> ISO/IEC 14496-3 Audio, without
using any additional transport syntax, such as DST, ALS and SLS
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_MPEG4_TIMED_TEXT">
<parameter_description> ISO/IEC 14496-17 Text
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_RVC">
<parameter_description> Auxiliary video stream as defined in
ISO/IEC 23002-3
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_H264_SVC_SUB_BITSTREAM">
<parameter_description> SVC video sub-bitstream
of an AVC video stream conforming to one or more profiles defined in Annex G
of Rec. ITU-T H.264 | ISO/IEC 14496-10
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_H264_MVC_SUB_BITSTREAM">
<parameter_description> MVC video sub-bitstream
of an AVC video stream conforming to one or more profiles defined in Annex H
of Rec. ITU-T H.264 | ISO/IEC 14496-10
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_JP2K">
<parameter_description> Video stream conforming to one or more
profiles as defined in Rec. ITU-T T.800 | ISO/IEC 15444-1
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_MPEG2_STEREO_ADDITIONAL_VIEW">
<parameter_description> Additional view
Rec. ITU-T H.262 | ISO/IEC 13818-2 video stream for service-compatible
stereoscopic 3D services
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_VIDEO_H264_STEREO_ADDITIONAL_VIEW">
<parameter_description> Additional view
Rec. ITU-T H.264 | ISO/IEC 14496-10 video stream conforming to one or more
profiles defined in Annex A for service-compatible stereoscopic 3D services
</parameter_description>
</parameter>
<parameter name="GST_MPEGTS_STREAM_TYPE_IPMP_STREAM">
<parameter_description> IPMP stream
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyColorToneMode">
<description>
Modes for special color effects.

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_NORMAL">
<parameter_description> No effects
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_SEPIA">
<parameter_description> Sepia
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_NEGATIVE">
<parameter_description> Negative
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_GRAYSCALE">
<parameter_description> Grayscale
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_NATURAL">
<parameter_description> Natural
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_VIVID">
<parameter_description> Vivid
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_COLORSWAP">
<parameter_description> Colorswap
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_SOLARIZE">
<parameter_description> Solarize
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_OUT_OF_FOCUS">
<parameter_description> Out of focus
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_SKY_BLUE">
<parameter_description> Sky blue
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_GRASS_GREEN">
<parameter_description> Grass green
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_SKIN_WHITEN">
<parameter_description> Skin whiten
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_POSTERIZE">
<parameter_description> Posterize (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_WHITEBOARD">
<parameter_description> Whiteboard (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_BLACKBOARD">
<parameter_description> Blackboard (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_COLOR_TONE_MODE_AQUA">
<parameter_description> Aqua (Since 1.2)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyExposureMode">
<description>

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_EXPOSURE_MODE_AUTO">
<parameter_description> Adjust exposure automatically
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_EXPOSURE_MODE_MANUAL">
<parameter_description> Disable automatic exposure adjustment
and keep current values.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyFlashMode">
<description>
Modes for flash control.

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_FLASH_MODE_AUTO">
<parameter_description> Fire flash automatically according to
lighting conditions.
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FLASH_MODE_OFF">
<parameter_description> Never fire flash
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FLASH_MODE_ON">
<parameter_description> Always fire flash
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FLASH_MODE_FILL_IN">
<parameter_description> Fill in flash
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FLASH_MODE_RED_EYE">
<parameter_description> Flash mode for reducing chance of
capturing red eyes
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyFlickerReductionMode">
<description>
Reduce flicker in video caused by light source fluctuation.

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_FLICKER_REDUCTION_OFF">
<parameter_description> Disable flicker reduction
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FLICKER_REDUCTION_50HZ">
<parameter_description> 50Hz flicker reduction
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FLICKER_REDUCTION_60HZ">
<parameter_description> 60Hz flicker reduction
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FLICKER_REDUCTION_AUTO">
<parameter_description> Choose mode automatically
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyFocusMode">
<description>
Choose mode for focusing algorithm.

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_AUTO">
<parameter_description> Choose focus mode automatically
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_MACRO">
<parameter_description> Mode for focusing objects close to lens
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_PORTRAIT">
<parameter_description> Mode for portraits
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_INFINITY">
<parameter_description> Mode for landscapes and far away objects
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_HYPERFOCAL">
<parameter_description> Mode for maximum depth of field, keeping
focus acceptable both in infinify and as close objects as possible
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_EXTENDED">
<parameter_description> Extended focus mode
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_CONTINUOUS_NORMAL">
<parameter_description> Continuous autofocus mode
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_CONTINUOUS_EXTENDED">
<parameter_description> Extended continuous
autofocus mode
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_MODE_MANUAL">
<parameter_description> Disable automatic focusing
and keep current value. #GstPhotography:lens-focus property can
be used to change focus manually.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyFocusStatus">
<description>
Status of the focusing operation, used in #GST_PHOTOGRAPHY_AUTOFOCUS_DONE
message.

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_FOCUS_STATUS_NONE">
<parameter_description> No status available
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_STATUS_RUNNING">
<parameter_description> Focusing is ongoing
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_STATUS_FAIL">
<parameter_description> Focusing failed
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_FOCUS_STATUS_SUCCESS">
<parameter_description> Focusing succeeded
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyNoiseReduction">
<description>
Noise Reduction features of a photography capture or filter element.


</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_NOISE_REDUCTION_BAYER">
<parameter_description> Adaptive noise reduction on Bayer
format
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_NOISE_REDUCTION_YCC">
<parameter_description> reduces the noise on Y and 2-chroma
images.
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_NOISE_REDUCTION_TEMPORAL">
<parameter_description> Multi-frame adaptive NR,
provided for the video mode
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_NOISE_REDUCTION_FIXED">
<parameter_description> Fixed Pattern Noise refers to noise
that does not change between frames. The noise is removed from the sensor
image, by subtracting a previously-captured black image in memory.
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_NOISE_REDUCTION_EXTRA">
<parameter_description> Extra Noise Reduction. In the case
of high-ISO capturing, some noise remains after YCC NR. XNR reduces this
remaining noise.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographySceneMode">
<description>
Each mode contains preset #GstPhotography options in order to produce
good capturing result in certain scene.

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_MANUAL">
<parameter_description> Set individual options manually
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_CLOSEUP">
<parameter_description> Mode for close objects
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_PORTRAIT">
<parameter_description> Mode for portraits
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_LANDSCAPE">
<parameter_description> Mode for landscapes
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_SPORT">
<parameter_description> Mode for scene with fast motion
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_NIGHT">
<parameter_description> Mode for night conditions
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_AUTO">
<parameter_description> Choose scene mode automatically
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_ACTION">
<parameter_description> Take photos of fast moving
objects (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_NIGHT_PORTRAIT">
<parameter_description> Take people pictures
at night (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_THEATRE">
<parameter_description> Take photos in a theater (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_BEACH">
<parameter_description> Take pictures on the beach (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_SNOW">
<parameter_description> Take pictures on the snow (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_SUNSET">
<parameter_description> Take sunset photos (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_STEADY_PHOTO">
<parameter_description> Avoid blurry pictures
(for example, due to hand shake) (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_FIREWORKS">
<parameter_description> For shooting firework
displays (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_PARTY">
<parameter_description> Take indoor low-light shot (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_CANDLELIGHT">
<parameter_description> Capture the naturally warm color
of scenes lit by candles (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SCENE_MODE_BARCODE">
<parameter_description> Applications are looking for
a barcode (Since 1.2)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyShakeRisk">
<description>
Risk level of captured image becoming &quot;shaken&quot; due to camera movement and
too long exposure time. Used in #GST_PHOTOGRAPHY_SHAKE_RISK #GstMessage.

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_SHAKE_RISK_LOW">
<parameter_description> Low risk
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SHAKE_RISK_MEDIUM">
<parameter_description> Medium risk
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_SHAKE_RISK_HIGH">
<parameter_description> High risk
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstPhotographyWhiteBalanceMode">
<description>
Modes for white balance control.

</description>
<parameters>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_AUTO">
<parameter_description> Choose white balance mode automatically
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_DAYLIGHT">
<parameter_description> Mode for daylight conditions
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_CLOUDY">
<parameter_description> Mode for cloudy conditions
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_SUNSET">
<parameter_description> Mode for sunset conditions
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_TUNGSTEN">
<parameter_description> Mode for tungsten lighting
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_FLUORESCENT">
<parameter_description> Mode for fluorescent lighting
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_MANUAL">
<parameter_description> Disable automatic white balance adjustment
and keep current values.
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_WARM_FLUORESCENT">
<parameter_description> Mode for warm fluorescent lighting (Since 1.2)
</parameter_description>
</parameter>
<parameter name="GST_PHOTOGRAPHY_WB_MODE_SHADE">
<parameter_description> Mode for shade lighting (Since 1.2)
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="GstVp8ParserResult">
<description>
The result of parsing VP8 data.

</description>
<parameters>
<parameter name="GST_VP8_PARSER_OK">
<parameter_description> The parsing succeeded
</parameter_description>
</parameter>
<parameter name="GST_VP8_PARSER_BROKEN_DATA">
<parameter_description> The data to parse is broken
</parameter_description>
</parameter>
<parameter name="GST_VP8_PARSER_ERROR">
<parameter_description> An error accured when parsing
</parameter_description>
</parameter>
</parameters>
</enum>

<function name="advance_period">
<description>
Advances the manifest to the next period. New streams should be created
using gst_adaptive_demux_stream_new().

</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="data_received">
<description>
Notifies the subclass that a fragment chunk was downloaded. The subclass
can look at the data at the adapter and modify/push data as desired.


</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> #GstAdaptiveDemuxStream
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK if successful, #GST_FLOW_ERROR in case of error.
</return>
</function>

<function name="dvb_text_from_utf8">
<description>
Converts UTF-8 strings to text characters compliant with EN 300 468.
The converted text can be used directly in DVB #GstMpegtsDescriptor

The function will try different character maps until the string is
completely converted.

The function tries the default ISO 6937 character map first.

If no character map that contains all characters could be found, the
string is converted to ISO 6937 with unknown characters set to `?`.


</description>
<parameters>
<parameter name="text">
<parameter_description> The text to convert. This should be in UTF-8 format
</parameter_description>
</parameter>
<parameter name="out_size">
<parameter_description> the byte length of the new text
</parameter_description>
</parameter>
</parameters>
<return> byte array of size @out_size
</return>
</function>

<function name="finish_fragment">
<description>
Notifies the subclass that a fragment download was finished.
It can be used to cleanup internal state after a fragment and
also push any pending data before moving to the next fragment.

</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> #GstAdaptiveDemuxStream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="get_live_seek_range">
<description>
Gets the allowed seek start and stop positions for the current live stream

Return: %TRUE if successful

</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
<parameter name="start">
<parameter_description> pointer to put the start position allowed to seek to
</parameter_description>
</parameter>
<parameter name="stop">
<parameter_description> pointer to put the stop position allowed to seek to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="get_manifest_update_interval">
<description>
Used during live streaming, the subclass should return the interval
between successive manifest updates


</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
</parameters>
<return> the update interval in microseconds
</return>
</function>

<function name="get_presentation_offset">
<description>
Gets the delay to apply to @stream.

Return: a #GstClockTime representing the (positive) time offset to apply to
@stream.

</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> #GstAdaptiveDemuxStream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_aggregator_finish_buffer">
<description>
This method will push the provided output buffer downstream. If needed,
mandatory events such as stream-start, caps, and segment events will be
sent before pushing the buffer.

</description>
<parameters>
<parameter name="self">
<parameter_description> The #GstAggregator
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the #GstBuffer to push.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_aggregator_get_latency">
<description>
Retrieves the latency values reported by @self in response to the latency
query, or %GST_CLOCK_TIME_NONE if there is not live source connected and the element
will not wait for the clock.

Typically only called by subclasses.


</description>
<parameters>
<parameter name="self">
<parameter_description> a #GstAggregator
</parameter_description>
</parameter>
</parameters>
<return> The latency or %GST_CLOCK_TIME_NONE if the element does not sync
</return>
</function>

<function name="gst_aggregator_iterate_sinkpads">
<description>
Iterate the sinkpads of aggregator to call a function on them.

This method guarantees that @func will be called only once for each
sink pad.

</description>
<parameters>
<parameter name="self">
<parameter_description> The #GstAggregator
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> The function to call.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to @func.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_aggregator_merge_tags">
<description>
Adds tags to so-called pending tags, which will be processed
before pushing out data downstream.

Note that this is provided for convenience, and the subclass is
not required to use this and can still do tag handling on its own.

MT safe.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GstAggregator
</parameter_description>
</parameter>
<parameter name="tags">
<parameter_description> a #GstTagList to merge
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the #GstTagMergeMode to use
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_aggregator_pad_drop_buffer">
<description>
Drop the buffer currently queued in @pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the pad where to drop any pending buffer
</parameter_description>
</parameter>
</parameters>
<return> TRUE if there was a buffer queued in @pad, or FALSE if not.
</return>
</function>

<function name="gst_aggregator_pad_get_buffer">
<description>

</description>
<parameters>
<parameter name="pad">
<parameter_description> the pad to get buffer from
</parameter_description>
</parameter>
</parameters>
<return> A reference to the buffer in @pad or
NULL if no buffer was queued. You should unref the buffer after
usage.
</return>
</function>

<function name="gst_aggregator_pad_steal_buffer">
<description>
Steal the ref to the buffer currently queued in @pad.


</description>
<parameters>
<parameter name="pad">
<parameter_description> the pad to get buffer from
</parameter_description>
</parameter>
</parameters>
<return> The buffer in @pad or NULL if no buffer was
queued. You should unref the buffer after usage.
</return>
</function>

<function name="gst_aggregator_set_latency">
<description>
Lets #GstAggregator sub-classes tell the baseclass what their internal
latency is. Will also post a LATENCY message on the bus so the pipeline
can reconfigure its global latency.

</description>
<parameters>
<parameter name="self">
<parameter_description> a #GstAggregator
</parameter_description>
</parameter>
<parameter name="min_latency">
<parameter_description> minimum latency
</parameter_description>
</parameter>
<parameter name="max_latency">
<parameter_description> maximum latency
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_aggregator_set_src_caps">
<description>
Sets the caps to be used on the src pad.

</description>
<parameters>
<parameter name="self">
<parameter_description> The #GstAggregator
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> The #GstCaps to set on the src pad.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_camera_src_set_mode">
<description>
Set the chosen #GstCameraBinMode capture mode.

</description>
<parameters>
<parameter name="self">
<parameter_description> the camerasrc bin
</parameter_description>
</parameter>
<parameter name="mode">
<parameter_description> the mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_camera_src_setup_preview">
<description>
Apply preview caps to preview pipeline and to video source.

</description>
<parameters>
<parameter name="self">
<parameter_description> camerasrc bin
</parameter_description>
</parameter>
<parameter name="preview_caps">
<parameter_description> preview caps to set
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_base_camera_src_setup_zoom">
<description>
Apply zoom configured to camerabin to capture.

</description>
<parameters>
<parameter name="self">
<parameter_description> camerasrc object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_buffer_add_mpeg_video_meta">
<description>
Creates and adds a #GstMpegVideoMeta to a @buffer.

Provided structures must either be %NULL or GSlice-allocated.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GstMpegVideoMeta

</return>
</function>

<function name="gst_camerabin_create_preview_pipeline">
<description>
Creates a new previewing pipeline that can receive buffers
to be posted as camerabin preview messages for @element


</description>
<parameters>
<parameter name="element">
<parameter_description> Owner of this pipeline
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> Custom filter to process preview data (an extra ref is taken)
</parameter_description>
</parameter>
</parameters>
<return> The newly created #GstCameraBinPreviewPipelineData
</return>
</function>

<function name="gst_camerabin_destroy_preview_pipeline">
<description>
Frees a #GstCameraBinPreviewPipelineData

</description>
<parameters>
<parameter name="preview">
<parameter_description> the #GstCameraBinPreviewPipelineData
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_camerabin_preview_pipeline_post">
<description>
Converts the @sample to the desired format and posts the preview
message to the bus.


</description>
<parameters>
<parameter name="preview">
<parameter_description> the #GstCameraBinPreviewPipelineData
</parameter_description>
</parameter>
<parameter name="sample">
<parameter_description> the sample to be posted as a preview
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success
</return>
</function>

<function name="gst_camerabin_preview_set_caps">
<description>
The caps that preview buffers should have when posted
on the bus

</description>
<parameters>
<parameter name="preview">
<parameter_description> the #GstCameraBinPreviewPipelineData
</parameter_description>
</parameter>
<parameter name="caps">
<parameter_description> the #GstCaps to be set (a new ref will be taken)
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_camerabin_preview_set_filter">
<description>
Set the filter element into preview pipeline.


</description>
<parameters>
<parameter name="preview">
<parameter_description> the #GstCameraBinPreviewPipelineData
</parameter_description>
</parameter>
<parameter name="filter">
<parameter_description> Custom filter to process preview data (an extra ref is taken)
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success
</return>
</function>

<function name="gst_context_get_gl_display">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstContext
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> resulting #GstGLDisplay
</parameter_description>
</parameter>
</parameters>
<return> Whether @display was in @context

</return>
</function>

<function name="gst_context_set_gl_display">
<description>
Sets @display on @context


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstContext
</parameter_description>
</parameter>
<parameter name="display">
<parameter_description> resulting #GstGLDisplay
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_event_parse_mpegts_section">
<description>
Extracts the #GstMpegtsSection contained in the @event #GstEvent


</description>
<parameters>
<parameter name="event">
<parameter_description> #GstEvent containing a #GstMpegtsSection
</parameter_description>
</parameter>
</parameters>
<return> The extracted #GstMpegtsSection
</return>
</function>

<function name="gst_gl_api_from_string">
<description>

</description>
<parameters>
<parameter name="api_s">
<parameter_description> a space seperated string of OpenGL apis
</parameter_description>
</parameter>
</parameters>
<return> The #GstGLAPI represented by @api_s
</return>
</function>

<function name="gst_gl_api_to_string">
<description>

</description>
<parameters>
<parameter name="api">
<parameter_description> a #GstGLAPI to stringify
</parameter_description>
</parameter>
</parameters>
<return> A space seperated string of the OpenGL api's enabled in @api
</return>
</function>

<function name="gst_gl_base_buffer_init_once">
<description>
Initializes the GL Buffer allocator. It is safe to call this function
multiple times.  This must be called before any other GstGLBaseBuffer operation.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_gl_buffer_pool_new">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> the #GstGLContext to use
</parameter_description>
</parameter>
</parameters>
<return> a #GstBufferPool that allocates buffers with #GstGLMemory
</return>
</function>

<function name="gst_gl_buffer_pool_replace_last_buffer">
<description>
Set @pool&lt;--  --&gt;s last buffer to @buffer for #GstGLPlatform&lt;--  --&gt;s that
require it.

</description>
<parameters>
<parameter name="pool">
<parameter_description> a #GstGLBufferPool
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_color_convert_new">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLColorConvert object
</return>
</function>

<function name="gst_gl_color_convert_perform">
<description>
Converts the data contained by @inbuf using the formats specified by the
#GstVideoInfo&lt;!--  --&gt;s passed to gst_gl_color_convert_set_caps() 


</description>
<parameters>
<parameter name="convert">
<parameter_description> a #GstGLColorConvert
</parameter_description>
</parameter>
<parameter name="inbuf">
<parameter_description> the texture ids for input formatted according to in_info
</parameter_description>
</parameter>
</parameters>
<return> a converted #GstBuffer or %NULL%
</return>
</function>

<function name="gst_gl_color_convert_set_caps">
<description>
Initializes @convert with the information required for conversion.

</description>
<parameters>
<parameter name="convert">
<parameter_description> a #GstGLColorConvert
</parameter_description>
</parameter>
<parameter name="in_caps">
<parameter_description> input #GstCaps
</parameter_description>
</parameter>
<parameter name="out_caps">
<parameter_description> output #GstCaps
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_context_activate">
<description>
(De)activate the OpenGL context represented by this @context.

In OpenGL terms, calls eglMakeCurrent or similar with this context and the
currently set window.  See gst_gl_context_set_window() for details.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="activate">
<parameter_description> %TRUE to activate, %FALSE to deactivate
</parameter_description>
</parameter>
</parameters>
<return> Whether the activation succeeded

</return>
</function>

<function name="gst_gl_context_can_share">
<description>
Note: This will always fail for two wrapped #GstGLContext's


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="other_context">
<parameter_description> another #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> whether @context and @other_context are able to share OpenGL
resources.

</return>
</function>

<function name="gst_gl_context_check_feature">
<description>
Some features require that the context be created before it is possible to
determine their existence and so will fail if that is not the case.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="feature">
<parameter_description> a platform specific feature
</parameter_description>
</parameter>
</parameters>
<return> Whether @feature is supported by @context

</return>
</function>

<function name="gst_gl_context_check_gl_version">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="api">
<parameter_description> api type required
</parameter_description>
</parameter>
<parameter name="maj">
<parameter_description> major version required
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> minor version required
</parameter_description>
</parameter>
</parameters>
<return> whether OpenGL context implements the required api and specified
version.

</return>
</function>

<function name="gst_gl_context_create">
<description>
Creates an OpenGL context in the current thread with the specified
@other_context as a context to share shareable OpenGL objects with.  See the
OpenGL specification for what is shared between contexts.

If an error occurs, and @error is not %NULL, then error will contain details
of the error and %FALSE will be returned.

Should only be called once.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext:
</parameter_description>
</parameter>
<parameter name="other_context">
<parameter_description> a #GstGLContext to share OpenGL objects with
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> whether the context could successfully be created

</return>
</function>

<function name="gst_gl_context_destroy">
<description>
Destroys an OpenGL context.

Should only be called after gst_gl_context_create() has been successfully
called for this context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext:
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_context_fill_info">
<description>
Fills @context's info (version, extensions, vtable, etc) from the GL
context in the current thread.  Typically used with wrapped contexts to
allow wrapped contexts to be used as regular #GstGLContext's.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext:
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_context_get_current">
<description>
See also gst_gl_context_activate().


</description>
<parameters>
</parameters>
<return> the #GstGLContext active in the current thread or %NULL

</return>
</function>

<function name="gst_gl_context_get_current_gl_api">
<description>
If an error occurs, @major and @minor aren't modified and %GST_GL_API_NONE is
returned.


</description>
<parameters>
<parameter name="platform">
<parameter_description> the #GstGLPlatform to retreive the API for
</parameter_description>
</parameter>
<parameter name="major">
<parameter_description> the major version
</parameter_description>
</parameter>
<parameter name="minor">
<parameter_description> the minor version
</parameter_description>
</parameter>
</parameters>
<return> The version supported by the OpenGL context current in the calling
thread or %GST_GL_API_NONE

</return>
</function>

<function name="gst_gl_context_get_current_gl_context">
<description>

</description>
<parameters>
<parameter name="context_type">
<parameter_description> a #GstGLPlatform specifying the type of context to retrieve
</parameter_description>
</parameter>
</parameters>
<return> The OpenGL context handle current in the calling thread or %NULL

</return>
</function>

<function name="gst_gl_context_get_display">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext:
</parameter_description>
</parameter>
</parameters>
<return> the #GstGLDisplay associated with this @context

</return>
</function>

<function name="gst_gl_context_get_gl_api">
<description>
Get the currently enabled OpenGL api.

The currently available API may be limited by the #GstGLDisplay in use and/or
the #GstGLWindow chosen.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> the available OpenGL api

</return>
</function>

<function name="gst_gl_context_get_gl_context">
<description>
Gets the backing OpenGL context used by @context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext:
</parameter_description>
</parameter>
</parameters>
<return> The platform specific backing OpenGL context

</return>
</function>

<function name="gst_gl_context_get_gl_platform">
<description>
Gets the OpenGL platform that used by @context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext:
</parameter_description>
</parameter>
</parameters>
<return> The platform specific backing OpenGL context

</return>
</function>

<function name="gst_gl_context_get_gl_version">
<description>
Returns the OpenGL version implemented by @context.  See
gst_gl_context_get_gl_api() for retreiving the OpenGL api implemented by
@context.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="maj">
<parameter_description> resulting major version
</parameter_description>
</parameter>
<parameter name="min">
<parameter_description> resulting minor version
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_context_get_proc_address">
<description>
Get a function pointer to a specified opengl function, @name.  If the the
specific function does not exist, NULL is returned instead.

Platform specfic functions (names starting 'egl', 'glX', 'wgl', etc) can also
be retrieved using this method.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> an opengl function name
</parameter_description>
</parameter>
</parameters>
<return> a function pointer or NULL

</return>
</function>

<function name="gst_gl_context_get_thread">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> The #GThread, @context is current in or NULL

</return>
</function>

<function name="gst_gl_context_get_window">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> the currently set window

</return>
</function>

<function name="gst_gl_context_new">
<description>
Create a new #GstGLContext with the specified @display


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLContext

</return>
</function>

<function name="gst_gl_context_new_wrapped">
<description>
Wraps an existing OpenGL context into a #GstGLContext.  


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
<parameter name="handle">
<parameter_description> the OpenGL context to wrap
</parameter_description>
</parameter>
<parameter name="context_type">
<parameter_description> a #GstGLPlatform specifying the type of context in @handle
</parameter_description>
</parameter>
<parameter name="available_apis">
<parameter_description> a #GstGLAPI containing the available OpenGL apis in @handle
</parameter_description>
</parameter>
</parameters>
<return> a #GstGLContext wrapping @handle

</return>
</function>

<function name="gst_gl_context_set_window">
<description>
Set's the current window on @context to @window.  The window can only be
changed before gst_gl_context_create() has been called and the @window is not
already running.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return> Whether the window was successfully updated

</return>
</function>

<function name="gst_gl_context_thread_add">
<description>
Execute @func in the OpenGL thread of @context with @data

MT-safe


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GstGLContextThreadFunc
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> user data to call @func with
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_display_add_context">
<description>

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> whether @context was successfully added. %FALSE may be returned
if there already exists another context for @context's active thread.

Must be called with the object lock held.

</return>
</function>

<function name="gst_gl_display_create_context">
<description>
It requires the display's object lock to be held.


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
<parameter name="other_context">
<parameter_description> other #GstGLContext to share resources with.
</parameter_description>
</parameter>
<parameter name="p_context">
<parameter_description> resulting #GstGLContext
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> resulting #GError
</parameter_description>
</parameter>
</parameters>
<return> whether a new context could be created.

</return>
</function>

<function name="gst_gl_display_egl_new">
<description>
Create a new #GstGLDisplayEGL from the x11 display name.  See XOpenDisplay()
for details on what is a valid name.


</description>
<parameters>
<parameter name="name">
<parameter_description> a display name
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLDisplayEGL or %NULL
</return>
</function>

<function name="gst_gl_display_egl_new_with_display">
<description>
Creates a new display connection from a X11 Display.


</description>
<parameters>
<parameter name="display">
<parameter_description> an existing, x11 display
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLDisplayEGL
</return>
</function>

<function name="gst_gl_display_filter_gl_api">
<description>
limit the use of OpenGL to the requested @gl_api.  This is intended to allow
application and elements to request a specific set of OpenGL API's based on
what they support.  See gst_gl_context_get_gl_api() for the retreiving the
API supported by a #GstGLContext.

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
<parameter name="gl_api">
<parameter_description> a #GstGLAPI to filter with
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_display_get_gl_api">
<description>
see gst_gl_display_filter_gl_api() for what the returned value represents


</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
</parameters>
<return> the #GstGLAPI configured for @display
</return>
</function>

<function name="gst_gl_display_get_gl_context_for_thread">
<description>

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
<parameter name="thread">
<parameter_description> a #GThread
</parameter_description>
</parameter>
</parameters>
<return> the #GstGLContext current on @thread or %NULL

Must be called with the object lock held.

</return>
</function>

<function name="gst_gl_display_get_handle_type">
<description>

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
</parameters>
<return> the #GstGLDisplayType of @display

</return>
</function>

<function name="gst_gl_display_new">
<description>

</description>
<parameters>
</parameters>
<return> a new #GstGLDisplay

</return>
</function>

<function name="gst_gl_display_wayland_new">
<description>
Create a new #GstGLDisplayWayland from the wayland display name.  See wl_display_connect()
for details on what is a valid name.


</description>
<parameters>
<parameter name="name">
<parameter_description> a display name
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLDisplayWayland or %NULL
</return>
</function>

<function name="gst_gl_display_wayland_new_with_display">
<description>
Creates a new display connection from a wl_display Display.


</description>
<parameters>
<parameter name="display">
<parameter_description> an existing, wayland display
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLDisplayWayland
</return>
</function>

<function name="gst_gl_display_x11_new">
<description>
Create a new #GstGLDisplayX11 from the x11 display name.  See XOpenDisplay()
for details on what is a valid name.


</description>
<parameters>
<parameter name="name">
<parameter_description> a display name
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLDisplayX11 or %NULL
</return>
</function>

<function name="gst_gl_display_x11_new_with_display">
<description>
Creates a new display connection from a X11 Display.


</description>
<parameters>
<parameter name="display">
<parameter_description> an existing, x11 display
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLDisplayX11
</return>
</function>

<function name="gst_gl_download_new">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLDownload object
</return>
</function>

<function name="gst_gl_download_perform">
<description>
Downloads the contents of @inbuf into @outbuf.

The output buffer contents must match the #GstVideoFormat passed
to gst_gl_download_set_format(), and the input buffer must
contain #GstGLMemory memory items.

This method supports downloading multiple views.


</description>
<parameters>
<parameter name="download">
<parameter_description> a #GstGLDownload
</parameter_description>
</parameter>
<parameter name="inbuf">
<parameter_description> a #GstBuffer input buffer
</parameter_description>
</parameter>
<parameter name="outbuf">
<parameter_description> a #GstBuffer output buffer
</parameter_description>
</parameter>
</parameters>
<return> whether the download was successful
</return>
</function>

<function name="gst_gl_download_perform_with_data">
<description>
Downloads @texture_id into @data. @data size and format is specified by
the #GstVideoFormat passed to gst_gl_download_set_format()

This method can only be used for download a single view.


</description>
<parameters>
<parameter name="download">
<parameter_description> a #GstGLDownload
</parameter_description>
</parameter>
<parameter name="texture_id">
<parameter_description> the texture id to download
</parameter_description>
</parameter>
<parameter name="texture_target">
<parameter_description> the GL texture target
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> where the downloaded data should go
</parameter_description>
</parameter>
</parameters>
<return> whether the download was successful
</return>
</function>

<function name="gst_gl_download_set_format">
<description>
Initializes @download with the information required for download.

</description>
<parameters>
<parameter name="download">
<parameter_description> a #GstGLDownload
</parameter_description>
</parameter>
<parameter name="out_info">
<parameter_description> a #GstVideoInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_filter_draw_texture">
<description>
Draws @texture into the OpenGL scene at the specified @width and @height.

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstGLFilter
</parameter_description>
</parameter>
<parameter name="texture">
<parameter_description> the texture to draw
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of @texture
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of texture
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_filter_filter_texture">
<description>
Perform automatic upload if needed, call filter_texture vfunc and then an
automatic download if needed.


</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstGLFilter
</parameter_description>
</parameter>
<parameter name="inbuf">
<parameter_description> an input buffer
</parameter_description>
</parameter>
<parameter name="outbuf">
<parameter_description> an output buffer
</parameter_description>
</parameter>
</parameters>
<return> whether the transformation succeeded
</return>
</function>

<function name="gst_gl_filter_render_to_target">
<description>
Transforms @input into @output using @func on through FBO.  @resize should
only ever be %TRUE whenever @input is the input texture of @filter.

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstGLFilter
</parameter_description>
</parameter>
<parameter name="resize">
<parameter_description> whether to automatically resize the texture between the input size
and the output size
</parameter_description>
</parameter>
<parameter name="input">
<parameter_description> the input texture
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the output texture
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> the function to transform @input into @output. called with @data
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data associated with @func
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_filter_render_to_target_with_shader">
<description>
Transforms @input into @output using @shader on FBO.  @resize should
only ever be %TRUE whenever @input is the input texture of @filter.

See also: gst_gl_filter_render_to_target()

</description>
<parameters>
<parameter name="filter">
<parameter_description> a #GstGLFilter
</parameter_description>
</parameter>
<parameter name="resize">
<parameter_description> whether to automatically resize the texture between the input size
and the output size
</parameter_description>
</parameter>
<parameter name="input">
<parameter_description> the input texture
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> the output texture
</parameter_description>
</parameter>
<parameter name="shader">
<parameter_description> the shader to use.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_memory_alloc">
<description>
Allocated a new #GstGlMemory.


</description>
<parameters>
<parameter name="context">
<parameter_description>a #GstGLContext
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GstAllocationParams
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> the #GstVideoInfo of the memory
</parameter_description>
</parameter>
<parameter name="plane">
<parameter_description> the plane this memory will represent
</parameter_description>
</parameter>
<parameter name="valign">
<parameter_description> the #GstVideoAlignment applied to @info
</parameter_description>
</parameter>
</parameters>
<return> a #GstMemory object with a GL texture specified by @vinfo
from @context
</return>
</function>

<function name="gst_gl_memory_copy_into_texture">
<description>
Copies @gl_mem into the texture specfified by @tex_id.  The format of @tex_id
is specified by @tex_type, @width and @height.

If @respecify is %TRUE, then the copy is performed in terms of the texture
data.  This is useful for splitting RGBA textures into RG or R textures or
vice versa. The requirement for this to succeed is that the backing texture
data must be the same size, i.e. say a RGBA8 texture is converted into a RG8
texture, then the RG texture must have twice as many pixels available for
output as the RGBA texture.

Otherwise, if @respecify is %FALSE, then the copy is performed per texel
using glCopyTexImage.  See the OpenGL specification for details on the
mappings between texture formats.


</description>
<parameters>
<parameter name="gl_mem">
<parameter_description>a #GstGLMemory
</parameter_description>
</parameter>
<parameter name="tex_id">
<parameter_description>OpenGL texture id
</parameter_description>
</parameter>
<parameter name="tex_type">
<parameter_description> a #GstVideoGLTextureType
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width of @tex_id
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height of @tex_id
</parameter_description>
</parameter>
<parameter name="stride">
<parameter_description> stride of the backing texture data
</parameter_description>
</parameter>
<parameter name="respecify">
<parameter_description> whether to copy the data or copy per texel
</parameter_description>
</parameter>
</parameters>
<return> Whether the copy suceeded
</return>
</function>

<function name="gst_gl_memory_init">
<description>
Initializes the GL Memory allocator. It is safe to call this function
multiple times.  This must be called before any other GstGLMemory operation.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_gl_memory_setup_buffer">
<description>
Adds the required #GstGLMemory&lt;!--  --&gt;s with the correct configuration to
@buffer based on @info. This version handles padding through @valign.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="params">
<parameter_description> a #GstAllocationParams
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GstVideoInfo
</parameter_description>
</parameter>
<parameter name="valign">
<parameter_description> the #GstVideoAlignment applied to @info
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> whether the memory's were sucessfully added.
</return>
</function>

<function name="gst_gl_memory_setup_wrapped">
<description>
Wraps per plane data pointer in @data into the corresponding entry in
@textures based on @info and padding from @valign. Note that the @notify
will be called as many time as there is planes.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GstVideoInfo
</parameter_description>
</parameter>
<parameter name="valign">
<parameter_description> a #GstVideoInfo
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a list of per plane data pointers
</parameter_description>
</parameter>
<parameter name="textures">
<parameter_description> a list of #GstGLMemory
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the destroy function
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> A function called each time a memory is freed
</parameter_description>
</parameter>
</parameters>
<return> whether the memory's were sucessfully created.
</return>
</function>

<function name="gst_gl_memory_wrapped">
<description>
Wrapped @data into a #GstGLMemory. This version will account for padding
added to the allocation and expressed through @valign.


</description>
<parameters>
<parameter name="context">
<parameter_description>a #GstGLContext
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> the #GstVideoInfo of the memory and data
</parameter_description>
</parameter>
<parameter name="plane">
<parameter_description> the plane this memory will represent
</parameter_description>
</parameter>
<parameter name="valign">
<parameter_description> the #GstVideoAlignment applied to @info
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> the data to wrap
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data called with for @notify
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> function called with @user_data when @data needs to be freed
</parameter_description>
</parameter>
</parameters>
<return> a #GstGLMemory object with a GL texture specified by @v_info
from @context and contents specified by @data
</return>
</function>

<function name="gst_gl_memory_wrapped_texture">
<description>
Wraps a texture handle into a #GstGLMemory.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
<parameter name="texture_id">
<parameter_description> the GL texture handle
</parameter_description>
</parameter>
<parameter name="texture_target">
<parameter_description> the GL texture target
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> the #GstVideoInfo of the memory
</parameter_description>
</parameter>
<parameter name="plane">
<parameter_description> The plane this memory will represent
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> Destroy callback for the user data
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GstGLMemory
</return>
</function>

<function name="gst_gl_platform_from_string">
<description>

</description>
<parameters>
<parameter name="platform_s">
<parameter_description> a space seperated string of OpenGL platformss
</parameter_description>
</parameter>
</parameters>
<return> The #GstGLPlatform represented by @platform_s
</return>
</function>

<function name="gst_gl_platform_to_string">
<description>

</description>
<parameters>
<parameter name="api">
<parameter_description> a #GstGLPlatform to stringify
</parameter_description>
</parameter>
</parameters>
<return> A space seperated string of the OpenGL platforms enabled in @api
</return>
</function>

<function name="gst_gl_upload_get_caps">
<description>

</description>
<parameters>
<parameter name="upload">
<parameter_description> a #GstGLUpload
</parameter_description>
</parameter>
<parameter name="in_caps">
<parameter_description> the input #GstCaps
</parameter_description>
</parameter>
<parameter name="out_caps">
<parameter_description> the output #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> The #GstCaps set by gst_gl_upload_set_caps()
</return>
</function>

<function name="gst_gl_upload_meta_add_to_buffer">
<description>
Adds a #GstVideoGLTextureUploadMeta on @buffer using @upload


</description>
<parameters>
<parameter name="upload">
<parameter_description> a #GstGLUploadMeta
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
</parameters>
<return> whether it was successful
</return>
</function>

<function name="gst_gl_upload_meta_get_format">
<description>

</description>
<parameters>
<parameter name="upload">
<parameter_description> a #GstGLUpload
</parameter_description>
</parameter>
</parameters>
<return> The #GstVideoInfo set by
gst_gl_upload_meta_set_format()
</return>
</function>

<function name="gst_gl_upload_meta_new">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLUploadMeta object
</return>
</function>

<function name="gst_gl_upload_meta_set_format">
<description>
Initializes @upload with the information required for upload.

</description>
<parameters>
<parameter name="upload">
<parameter_description> a #GstGLUpload
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> input #GstVideoInfo
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_upload_new">
<description>

</description>
<parameters>
<parameter name="context">
<parameter_description> a #GstGLContext
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLUpload object
</return>
</function>

<function name="gst_gl_upload_perform_with_buffer">
<description>
Uploads @buffer to the texture given by @tex_id.  @tex_id is valid
until gst_gl_upload_release_buffer() is called.


</description>
<parameters>
<parameter name="upload">
<parameter_description> a #GstGLUpload
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a #GstBuffer
</parameter_description>
</parameter>
<parameter name="outbuf_ptr">
<parameter_description> resulting buffer
</parameter_description>
</parameter>
</parameters>
<return> whether the upload was successful
</return>
</function>

<function name="gst_gl_upload_propose_allocation">
<description>
Adds the required allocation parameters to support uploading.

</description>
<parameters>
<parameter name="upload">
<parameter_description> a #GstGLUpload
</parameter_description>
</parameter>
<parameter name="decide_query">
<parameter_description> a #GstQuery from a decide allocation
</parameter_description>
</parameter>
<parameter name="query">
<parameter_description> the proposed allocation query
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_upload_release_buffer">
<description>
Releases any buffers currently referenced by @upload

</description>
<parameters>
<parameter name="upload">
<parameter_description> a #GstGLUpload
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_upload_set_caps">
<description>
Initializes @upload with the information required for upload.


</description>
<parameters>
<parameter name="upload">
<parameter_description> a #GstGLUpload
</parameter_description>
</parameter>
<parameter name="in_caps">
<parameter_description> input #GstCaps
</parameter_description>
</parameter>
<parameter name="out_caps">
<parameter_description> output #GstCaps
</parameter_description>
</parameter>
</parameters>
<return> whether @in_caps and @out_caps could be set on @upload
</return>
</function>

<function name="gst_gl_view_convert_set_caps">
<description>
Initializes @viewconvert with the information required for conversion.

</description>
<parameters>
<parameter name="viewconvert">
<parameter_description> a #GstGLViewConvert
</parameter_description>
</parameter>
<parameter name="in_caps">
<parameter_description> input #GstCaps
</parameter_description>
</parameter>
<parameter name="out_caps">
<parameter_description> output #GstCaps
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_draw">
<description>
Redraw the window contents.  Implementations should invoke the draw callback.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_draw_unlocked">
<description>
Redraw the window contents.  Implementations should invoke the draw callback.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_get_context">
<description>

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return> the #GstGLContext associated with this @window

</return>
</function>

<function name="gst_gl_window_get_display">
<description>

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return> the windowing system display handle for this @window

</return>
</function>

<function name="gst_gl_window_get_surface_dimensions">
<description>

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> resulting surface width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> resulting surface height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_get_window_handle">
<description>

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return> the window handle we are currently rendering into

</return>
</function>

<function name="gst_gl_window_handle_events">
<description>
Tell a @window that it should handle events from the window system. These
events are forwarded upstream as navigation events. In some window systems
events are not propagated in the window hierarchy if a client is listening
for them. This method allows you to disable events handling completely
from the @window.

</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="handle_events">
<parameter_description> a #gboolean indicating if events should be handled or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_is_running">
<description>
Whether the runloop is running


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_new">
<description>

</description>
<parameters>
<parameter name="display">
<parameter_description> a #GstGLDisplay
</parameter_description>
</parameter>
</parameters>
<return> a new #GstGLWindow using @display's connection

</return>
</function>

<function name="gst_gl_window_quit">
<description>
Quit the runloop's execution.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_run">
<description>
Start the execution of the runloop.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_run_navigation">
<description>
Start the execution of the navigation runloop.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_send_message">
<description>
Invoke @callback with data on the window thread.  @callback is guarenteed to
have executed when this function returns.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to invoke
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to invoke @callback with
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_send_message_async">
<description>
Invoke @callback with @data on the window thread.  The callback may not
have been executed when this function returns.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to invoke
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to invoke @callback with
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> called when @data is not needed anymore
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_set_close_callback">
<description>
Sets the callback called when the window is about to close.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to invoke
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to invoke @callback with
</parameter_description>
</parameter>
<parameter name="destroy_notify">
<parameter_description> called when @data is not needed any more
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_set_draw_callback">
<description>
Sets the draw callback called everytime gst_gl_window_draw() is called


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to invoke
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to invoke @callback with
</parameter_description>
</parameter>
<parameter name="destroy_notify">
<parameter_description> called when @data is not needed any more
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_set_preferred_size">
<description>
Set the preferred width and height of the window.  Implementations are free
to ignore this information.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> new preferred width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> new preferred height
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_set_render_rectangle">
<description>
Tell a @window that it should render into a specific region of the window
according to the #GstVideoOverlay interface.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x position
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y position
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height
</parameter_description>
</parameter>
</parameters>
<return> whether the specified region could be set
</return>
</function>

<function name="gst_gl_window_set_resize_callback">
<description>
Sets the resize callback called everytime a resize of the window occurs.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> function to invoke
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> data to invoke @callback with
</parameter_description>
</parameter>
<parameter name="destroy_notify">
<parameter_description> called when @data is not needed any more
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_set_window_handle">
<description>
Sets the window that this @window should render into.  Some implementations
require this to be called with a valid handle before drawing can commence.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
<parameter name="handle">
<parameter_description> handle to the window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_show">
<description>
Present the window to the screen.


</description>
<parameters>
<parameter name="window">
<parameter_description> a #GstGLWindow
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_x11_trap_x_errors">
<description>
Traps every X error until gst_gl_window_x11_untrap_x_errors() is called.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_gl_window_x11_untrap_x_errors">
<description>
Removes the X error trap and returns the current status.


</description>
<parameters>
</parameters>
<return> the trapped error code, or 0 for success
</return>
</function>

<function name="gst_h263_parse">
<description>
Parses @data and fills @packet with the information of the next packet
found.

Note that the type of the packet is meaningless in this case.


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpeg4Packet to fill
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset from which to start the parsing
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpeg4ParseResult
</return>
</function>

<function name="gst_h264_nal_parser_free">
<description>
Frees @nalparser and sets it to %NULL

</description>
<parameters>
<parameter name="nalparser">
<parameter_description> the #GstH264NalParser to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h264_nal_parser_new">
<description>
Creates a new #GstH264NalParser. It should be freed with
gst_h264_nal_parser_free after use.


</description>
<parameters>
</parameters>
<return> a new #GstH264NalParser
</return>
</function>

<function name="gst_h264_parse_pps">
<description>
Parses @data, and fills the @pps structure.

The resulting @pps data structure shall be deallocated with the
gst_h264_pps_clear() function when it is no longer needed, or prior
to parsing a new PPS NAL unit.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H264_NAL_PPS #GstH264NalUnit to parse
</parameter_description>
</parameter>
<parameter name="pps">
<parameter_description> The #GstH264PPS to fill.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parse_sps">
<description>
Parses @data, and fills the @sps structure.


</description>
<parameters>
<parameter name="nalu">
<parameter_description> The #GST_H264_NAL_SPS #GstH264NalUnit to parse
</parameter_description>
</parameter>
<parameter name="sps">
<parameter_description> The #GstH264SPS to fill.
</parameter_description>
</parameter>
<parameter name="parse_vui_params">
<parameter_description> Whether to parse the vui_params or not
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parse_subset_sps">
<description>
Parses @data, and fills in the @sps structure.

This function fully parses @data and allocates all the necessary
data structures needed for MVC extensions. The resulting @sps
structure shall be deallocated with gst_h264_sps_clear() when it is
no longer needed.

Note: if the caller doesn't need any of the MVC-specific data, then
gst_h264_parser_parse_sps() is more efficient because those extra
syntax elements are not parsed and no extra memory is allocated.


</description>
<parameters>
<parameter name="nalu">
<parameter_description> The #GST_H264_NAL_SUBSET_SPS #GstH264NalUnit to parse
</parameter_description>
</parameter>
<parameter name="sps">
<parameter_description> The #GstH264SPS to fill.
</parameter_description>
</parameter>
<parameter name="parse_vui_params">
<parameter_description> Whether to parse the vui_params or not
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult

</return>
</function>

<function name="gst_h264_parser_identify_nalu">
<description>
Parses @data and fills @nalu from the next nalu data from @data


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset from which to parse @data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GstH264NalUnit where to store parsed nal headers
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parser_identify_nalu_avc">
<description>
Parses @data and sets @nalu.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse, must be the beging of the Nal unit
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset from which to parse @data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="nal_length_size">
<parameter_description> the size in bytes of the AVC nal length prefix.
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GstH264NalUnit where to store parsed nal headers
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parser_identify_nalu_unchecked">
<description>
Parses @data and fills @nalu from the next nalu data from @data.

This differs from @gst_h264_parser_identify_nalu in that it doesn't
check whether the packet is complete or not.

Note: Only use this function if you already know the provided @data
is a complete NALU, else use @gst_h264_parser_identify_nalu.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset from which to parse @data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GstH264NalUnit where to store parsed nal headers
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parser_parse_nal">
<description>
This function should be called in the case one doesn't need to
parse a specific structure. It is necessary to do so to make
sure @nalparser is up to date.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GstH264NalUnit to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parser_parse_pps">
<description>
Parses @data, and fills the @pps structure.

The resulting @pps data structure shall be deallocated with the
gst_h264_pps_clear() function when it is no longer needed, or prior
to parsing a new PPS NAL unit.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H264_NAL_PPS #GstH264NalUnit to parse
</parameter_description>
</parameter>
<parameter name="pps">
<parameter_description> The #GstH264PPS to fill.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parser_parse_sei">
<description>
Parses @data, create and fills the @messages array.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H264_NAL_SEI #GstH264NalUnit to parse
</parameter_description>
</parameter>
<parameter name="messages">
<parameter_description> The GArray of #GstH264SEIMessage to fill. The caller must free it when done.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parser_parse_slice_hdr">
<description>
Parses @data, and fills the @slice structure.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H264_NAL_SLICE #GstH264NalUnit to parse
</parameter_description>
</parameter>
<parameter name="slice">
<parameter_description> The #GstH264SliceHdr to fill.
</parameter_description>
</parameter>
<parameter name="parse_pred_weight_table">
<parameter_description> Whether to parse the pred_weight_table or not
</parameter_description>
</parameter>
<parameter name="parse_dec_ref_pic_marking">
<parameter_description> Whether to parse the dec_ref_pic_marking or not
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parser_parse_sps">
<description>
Parses @data, and fills the @sps structure.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H264_NAL_SPS #GstH264NalUnit to parse
</parameter_description>
</parameter>
<parameter name="sps">
<parameter_description> The #GstH264SPS to fill.
</parameter_description>
</parameter>
<parameter name="parse_vui_params">
<parameter_description> Whether to parse the vui_params or not
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult
</return>
</function>

<function name="gst_h264_parser_parse_subset_sps">
<description>
Parses @data, and fills in the @sps structure.

This function fully parses @data and allocates all the necessary
data structures needed for MVC extensions. The resulting @sps
structure shall be deallocated with gst_h264_sps_clear() when it is
no longer needed.

Note: if the caller doesn't need any of the MVC-specific data, then
gst_h264_parser_parse_sps() is more efficient because those extra
syntax elements are not parsed and no extra memory is allocated.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH264NalParser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H264_NAL_SUBSET_SPS #GstH264NalUnit to parse
</parameter_description>
</parameter>
<parameter name="sps">
<parameter_description> The #GstH264SPS to fill.
</parameter_description>
</parameter>
<parameter name="parse_vui_params">
<parameter_description> Whether to parse the vui_params or not
</parameter_description>
</parameter>
</parameters>
<return> a #GstH264ParserResult

</return>
</function>

<function name="gst_h264_pps_clear">
<description>
Clears all @pps internal resources.


</description>
<parameters>
<parameter name="pps">
<parameter_description> The #GstH264PPS to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h264_quant_matrix_4x4_get_raster_from_zigzag">
<description>
Converts quantization matrix @quant from zigzag scan order to
raster scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h264_quant_matrix_4x4_get_zigzag_from_raster">
<description>
Converts quantization matrix @quant from raster scan order to
zigzag scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h264_quant_matrix_8x8_get_raster_from_zigzag">
<description>
Converts quantization matrix @quant from zigzag scan order to
raster scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h264_quant_matrix_8x8_get_zigzag_from_raster">
<description>
Converts quantization matrix @quant from raster scan order to
zigzag scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h264_sps_clear">
<description>
Clears all @sps internal resources.


</description>
<parameters>
<parameter name="sps">
<parameter_description> The #GstH264SPS to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h264_video_calculate_framerate">
<description>
Calculate framerate of a video sequence using @sps VUI information,
@field_pic_flag from a slice header and @pic_struct from #GstH264PicTiming SEI
message.

If framerate is variable or can't be determined, @fps_num will be set to 0
and @fps_den to 1.

</description>
<parameters>
<parameter name="sps">
<parameter_description> Current Sequence Parameter Set
</parameter_description>
</parameter>
<parameter name="field_pic_flag">
<parameter_description> Current @field_pic_flag, obtained from latest slice header
</parameter_description>
</parameter>
<parameter name="pic_struct">
<parameter_description> @pic_struct value if available, 0 otherwise
</parameter_description>
</parameter>
<parameter name="fps_num">
<parameter_description> The resulting fps numerator
</parameter_description>
</parameter>
<parameter name="fps_den">
<parameter_description> The resulting fps denominator
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h265_parse_pps">
<description>
Parses @data, and fills the @pps structure.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H265_NAL_PPS #GstH265NalUnit to parse
</parameter_description>
</parameter>
<parameter name="pps">
<parameter_description> The #GstH265PPS to fill.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parse_sps">
<description>
parser: The #GstH265Parser
@nalu: The #GST_H265_NAL_SPS #GstH265NalUnit to parse
@sps: The #GstH265SPS to fill.
@parse_vui_params: Whether to parse the vui_params or not

Parses @data, and fills the @sps structure.


</description>
<parameters>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parse_vps">
<description>
Parses @data, and fills the @vps structure.


</description>
<parameters>
<parameter name="nalu">
<parameter_description> The #GST_H265_NAL_VPS #GstH265NalUnit to parse
</parameter_description>
</parameter>
<parameter name="sps">
<parameter_description> The #GstH265VPS to fill.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_free">
<description>
Frees @parser and sets it to %NULL

</description>
<parameters>
<parameter name="parser">
<parameter_description> the #GstH265Parser to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h265_parser_identify_nalu">
<description>
Parses @data and fills @nalu from the next nalu data from @data


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset from which to parse @data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GstH265NalUnit where to store parsed nal headers
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_identify_nalu_hevc">
<description>
Parses @data and sets @nalu.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse, must be the beging of the Nal unit
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset from which to parse @data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="nal_length_size">
<parameter_description> the size in bytes of the HEVC nal length prefix.
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GstH265NalUnit where to store parsed nal headers
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_identify_nalu_unchecked">
<description>
Parses @data and fills @nalu from the next nalu data from @data.

This differs from @gst_h265_parser_identify_nalu in that it doesn't
check whether the packet is complete or not.

Note: Only use this function if you already know the provided @data
is a complete NALU, else use @gst_h265_parser_identify_nalu.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset from which to parse @data
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GstH265NalUnit where to store parsed nal headers
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_new">
<description>
Creates a new #GstH265Parser. It should be freed with
gst_h265_parser_free after use.


</description>
<parameters>
</parameters>
<return> a new #GstH265Parser
</return>
</function>

<function name="gst_h265_parser_parse_nal">
<description>
This function should be called in the case one doesn't need to
parse a specific structure. It is necessary to do so to make
sure @parser is up to date.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GstH265NalUnit to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_parse_pps">
<description>
Parses @data, and fills the @pps structure.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H265_NAL_PPS #GstH265NalUnit to parse
</parameter_description>
</parameter>
<parameter name="pps">
<parameter_description> The #GstH265PPS to fill.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_parse_sei">
<description>
Parses @data, create and fills the @messages array.


</description>
<parameters>
<parameter name="nalparser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H265_NAL_SEI #GstH265NalUnit to parse
</parameter_description>
</parameter>
<parameter name="messages">
<parameter_description> The GArray of #GstH265SEIMessage to fill. The caller must free it when done.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_parse_slice_hdr">
<description>
Parses @data, and fills the @slice structure.
The resulting @slice_hdr structure shall be deallocated with
gst_h265_slice_hdr_free() when it is no longer needed


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H265_NAL_SLICE #GstH265NalUnit to parse
</parameter_description>
</parameter>
<parameter name="slice">
<parameter_description> The #GstH265SliceHdr to fill.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_parse_sps">
<description>
Parses @data, and fills the @sps structure.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H265_NAL_SPS #GstH265NalUnit to parse
</parameter_description>
</parameter>
<parameter name="sps">
<parameter_description> The #GstH265SPS to fill.
</parameter_description>
</parameter>
<parameter name="parse_vui_params">
<parameter_description> Whether to parse the vui_params or not
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_parser_parse_vps">
<description>
Parses @data, and fills the @vps structure.


</description>
<parameters>
<parameter name="parser">
<parameter_description> a #GstH265Parser
</parameter_description>
</parameter>
<parameter name="nalu">
<parameter_description> The #GST_H265_NAL_VPS #GstH265NalUnit to parse
</parameter_description>
</parameter>
<parameter name="vps">
<parameter_description> The #GstH265VPS to fill.
</parameter_description>
</parameter>
</parameters>
<return> a #GstH265ParserResult
</return>
</function>

<function name="gst_h265_quant_matrix_4x4_get_raster_from_zigzag">
<description>
Converts quantization matrix @quant from zigzag scan order to
raster scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h265_quant_matrix_4x4_get_zigzag_from_raster">
<description>
Converts quantization matrix @quant from raster scan order to
zigzag scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h265_quant_matrix_8x8_get_raster_from_zigzag">
<description>
Converts quantization matrix @quant from zigzag scan order to
raster scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h265_quant_matrix_8x8_get_zigzag_from_raster">
<description>
Converts quantization matrix @quant from raster scan order to
zigzag scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_h265_sei_copy">
<description>
Copies @src_sei into @dst_sei


</description>
<parameters>
<parameter name="dst_sei">
<parameter_description> The destination #GstH265SEIMessage to copy into
</parameter_description>
</parameter>
<parameter name="src_sei">
<parameter_description> The source #GstH265SEIMessage to copy from
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if everything went fine, %FALSE otherwise
</return>
</function>

<function name="gst_h265_sei_free">
<description>
sei: The #GstH265SEIMessage to free

Frees @sei fields.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_h265_slice_hdr_copy">
<description>
Copies @src_slice into @dst_slice


</description>
<parameters>
<parameter name="dst_slice">
<parameter_description> The destination #GstH265SliceHdr to copy into
</parameter_description>
</parameter>
<parameter name="src_slice">
<parameter_description> The source #GstH265SliceHdr to copy from
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if everything went fine, %FALSE otherwise
</return>
</function>

<function name="gst_h265_slice_hdr_free">
<description>
slice_hdr: The #GstH265SliceHdr to free

Frees @slice_hdr fields.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_insert_bin_append">
<description>
This action signal adds the filter like element after any other element
in the bin.

Same as the #GstInsertBin::append signal.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been
added or not, or %NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_insert_bin_insert_after">
<description>
This action signal adds the filter like element after the @sibling
element in the bin.

Same as the #GstInsertBin::insert-after signal.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the #GstElement to add @element after
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been
added or not, or %NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_insert_bin_insert_before">
<description>
This action signal adds the filter like element before the @sibling
element in the bin.

Same as the #GstInsertBin::insert-before signal.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
<parameter name="sibling">
<parameter_description> the #GstElement to add @element before
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been
added or not, or %NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_insert_bin_new">
<description>
Creates a new #GstInsertBin


</description>
<parameters>
<parameter name="name">
<parameter_description> The name of the new #GstInsertBin element (or %NULL)
</parameter_description>
</parameter>
</parameters>
<return> The new #GstInsertBin

</return>
</function>

<function name="gst_insert_bin_prepend">
<description>
This action signal adds the filter like element before any other element
in the bin.

Same as the #GstInsertBin::prepend signal.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to add
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been
added or not, or %NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_insert_bin_remove">
<description>
This action signal removed the filter like element from the bin.

Same as the #GstInsertBin::remove signal.


</description>
<parameters>
<parameter name="element">
<parameter_description> the #GstElement to remove
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> the callback to call when the element has been
removed or not, or %NULL
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> The data to pass to the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_is_gl_base_buffer">
<description>

</description>
<parameters>
<parameter name="mem">
<parameter_description>a #GstMemory
</parameter_description>
</parameter>
</parameters>
<return> whether the memory at @mem is a #GstGLBaseBuffer
</return>
</function>

<function name="gst_is_gl_memory">
<description>

</description>
<parameters>
<parameter name="mem">
<parameter_description>a #GstMemory
</parameter_description>
</parameter>
</parameters>
<return> whether the memory at @mem is a #GstGLMemory
</return>
</function>

<function name="gst_jpeg_get_default_huffman_tables">
<description>
Fills in @huf_tables with the default AC/DC Huffman tables, as
specified by the JPEG standard.


</description>
<parameters>
<parameter name="huf_tables">
<parameter_description> The default DC/AC Huffman tables to fill in
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_jpeg_get_default_quantization_table">
<description>
Fills in @quant_tables with the default quantization tables, as
specified by the JPEG standard.


</description>
<parameters>
<parameter name="quant_tables">
<parameter_description> The default luma/chroma quant-tables in zigzag mode
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_jpeg_parse">
<description>
Parses the JPEG bitstream contained in @data, and returns the
detected segment as a #GstJpegSegment.

Note that a valid segment may be returned with a length that exceeds
the available data. It is up to the caller to make sure there's enough
data available when parsing the segment.


</description>
<parameters>
<parameter name="segment">
<parameter_description> pointer to a #GstJpegSegment structure to fill in
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset from which to start parsing
</parameter_description>
</parameter>
</parameters>
<return> TRUE if a packet start code was found.

</return>
</function>

<function name="gst_jpeg_segment_parse_frame_header">
<description>
Parses the @frame_hdr JPEG frame header structure members from @segment.

The caller must make sure there is enough data for the whole segment
available.


</description>
<parameters>
<parameter name="segment">
<parameter_description> the JPEG segment
</parameter_description>
</parameter>
<parameter name="frame_hdr">
<parameter_description> The #GstJpegFrameHdr structure to fill in
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the frame header was correctly parsed.

</return>
</function>

<function name="gst_jpeg_segment_parse_huffman_table">
<description>
Parses the JPEG Huffman table structure members from @segment.

The caller must make sure there is enough data for the whole segment
available.

Note: @huf_tables represents the complete set of possible Huffman
tables. However, the parser will only write to the Huffman table
specified by the table destination identifier (Th). While doing so,
the @valid flag of the specified Huffman table will also be set to
%TRUE;


</description>
<parameters>
<parameter name="segment">
<parameter_description> the JPEG segment
</parameter_description>
</parameter>
<parameter name="huff_tables">
<parameter_description> The #GstJpegHuffmanTables structure to fill in
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the Huffman table was correctly parsed.

</return>
</function>

<function name="gst_jpeg_segment_parse_quantization_table">
<description>
Parses the JPEG quantization table structure members from @segment.

The caller must make sure there is enough data for the whole segment
available.

Note: @quant_tables represents the complete set of possible
quantization tables. However, the parser will only write to the
quantization table specified by the table destination identifier
(Tq). While doing so, the @valid flag of the specified quantization
table will also be set to %TRUE.


</description>
<parameters>
<parameter name="segment">
<parameter_description> the JPEG segment
</parameter_description>
</parameter>
<parameter name="quant_tables">
<parameter_description> The #GstJpegQuantTables structure to fill in
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the quantization table was correctly parsed.

</return>
</function>

<function name="gst_jpeg_segment_parse_restart_interval">
<description>
The caller must make sure there is enough data for the whole segment
available.


</description>
<parameters>
<parameter name="segment">
<parameter_description> the JPEG segment
</parameter_description>
</parameter>
<parameter name="interval">
<parameter_description> The parsed restart interval value
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the restart interval value was correctly parsed.

</return>
</function>

<function name="gst_jpeg_segment_parse_scan_header">
<description>
Parses the @scan_hdr JPEG scan header structure members from @segment.

The caller must make sure there is enough data for the whole segment
available.


</description>
<parameters>
<parameter name="segment">
<parameter_description> the JPEG segment
</parameter_description>
</parameter>
<parameter name="scan_hdr">
<parameter_description> The #GstJpegScanHdr structure to fill in
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the scan header was correctly parsed

</return>
</function>

<function name="gst_message_new_mpegts_section">
<description>
Creates a new #GstMessage for a @GstMpegtsSection.


</description>
<parameters>
<parameter name="parent">
<parameter_description> The creator of the message
</parameter_description>
</parameter>
<parameter name="section">
<parameter_description> The #GstMpegtsSection to put in a message
</parameter_description>
</parameter>
</parameters>
<return> The new #GstMessage to be posted, or %NULL if the
section is not valid.
</return>
</function>

<function name="gst_message_parse_mpegts_section">
<description>
Returns the #GstMpegtsSection contained in a message.


</description>
<parameters>
<parameter name="message">
<parameter_description> a #GstMessage
</parameter_description>
</parameter>
</parameters>
<return> the contained #GstMpegtsSection, or %NULL.
</return>
</function>

<function name="gst_mpeg4_next_resync">
<description>
Parses @data and fills @packet with the information of the next resync packet
found.


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpeg4Packet to fill
</parameter_description>
</parameter>
<parameter name="vop">
<parameter_description> The previously parsed #GstMpeg4VideoObjectPlane
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset from which to start the parsing
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpeg4ParseResult
</return>
</function>

<function name="gst_mpeg4_parse">
<description>
Parses @data and fills @packet with the information of the next packet
found.


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpeg4Packet to fill
</parameter_description>
</parameter>
<parameter name="skip_user_data">
<parameter_description> %TRUE to skip user data packet %FALSE otherwize
</parameter_description>
</parameter>
<parameter name="vop">
<parameter_description> The last parsed #GstMpeg4VideoObjectPlane or %NULL if you do
not need to detect the resync codes.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> offset from which to start the parsing
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpeg4ParseResult
</return>
</function>

<function name="gst_mpeg4_parse_group_of_vop">
<description>
Parses @data containing the group of video object plane packet, and fills
the @gov structure.


</description>
<parameters>
<parameter name="gov">
<parameter_description> The #GstMpeg4GroupOfVOP structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpeg4ParseResult
</return>
</function>

<function name="gst_mpeg4_parse_video_object_layer">
<description>
Parses @data containing the video object layer packet, and fills
the @vol structure.


</description>
<parameters>
<parameter name="vol">
<parameter_description> The #GstMpeg4VideoObjectLayer structure to fill
</parameter_description>
</parameter>
<parameter name="vo">
<parameter_description> The #GstMpeg4VisualObject currently being parsed or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpeg4ParseResult
</return>
</function>

<function name="gst_mpeg4_parse_video_object_plane">
<description>
Parses @data containing the video object plane packet, and fills the @vol
structure.


</description>
<parameters>
<parameter name="vop">
<parameter_description> The #GstMpeg4VideoObjectPlane currently being parsed
</parameter_description>
</parameter>
<parameter name="sprite_trajectory">
<parameter_description> A #GstMpeg4SpriteTrajectory to fill or %NULL
</parameter_description>
</parameter>
<parameter name="vol">
<parameter_description> The #GstMpeg4VideoObjectLayer structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpeg4ParseResult
</return>
</function>

<function name="gst_mpeg4_parse_video_packet_header">
<description>
Parsers @data containing the video packet header
and fills the @videopackethdr structure

</description>
<parameters>
<parameter name="videopackethdr">
<parameter_description> The #GstMpeg4VideoPacketHdr structure to fill
</parameter_description>
</parameter>
<parameter name="vol">
<parameter_description> The last parsed #GstMpeg4VideoObjectLayer, will be updated
with the informations found during the parsing
</parameter_description>
</parameter>
<parameter name="vop">
<parameter_description> The last parsed #GstMpeg4VideoObjectPlane, will be updated
with the informations found during the parsing
</parameter_description>
</parameter>
<parameter name="sprite_trajectory">
<parameter_description> A #GstMpeg4SpriteTrajectory to fill or %NULL
with the informations found during the parsing
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse, should be set after the resync marker.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the data to parse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mpeg4_parse_video_plane_with_short_header">
<description>

</description>
<parameters>
<parameter name="shorthdr">
<parameter_description> The #GstMpeg4VideoPlaneShortHdr to parse
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mpeg4_parse_visual_object">
<description>
Parses @data containing the visual object packet, and fills
the @vo structure.


</description>
<parameters>
<parameter name="vo">
<parameter_description> The #GstMpeg4VisualObject structure to fill
</parameter_description>
</parameter>
<parameter name="signal_type">
<parameter_description> The #GstMpeg4VideoSignalType to fill or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse, should contain the vo_start_code
but not the start code prefix
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpeg4ParseResult
</return>
</function>

<function name="gst_mpeg4_parse_visual_object_sequence">
<description>
Parses @data containing the visual object sequence packet, and fills
the @vos structure.


</description>
<parameters>
<parameter name="vos">
<parameter_description> The #GstMpeg4VisualObjectSequence structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse, should contain the visual_object_sequence_start_code
but not the start code prefix
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpeg4ParseResult
</return>
</function>

<function name="gst_mpeg_video_packet_parse_gop">
<description>
Parses the @gop MPEG Video Group of Picture structure members from
video @packet


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="gop">
<parameter_description> The #GstMpegVideoGop structure to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the gop could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_packet_parse_picture_extension">
<description>
Parse the @ext MPEG Video Picture Extension structure members from
video @packet


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="ext">
<parameter_description> The #GstMpegVideoPictureExt structure to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the picture extension could be parsed correctly,
%FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_packet_parse_picture_header">
<description>
Parsers the @pichdr MPEG Video Picture Header structure members
from video @packet


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="pichdr">
<parameter_description> The #GstMpegVideoPictureHdr structure to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the picture sequence could be parsed correctly, %FALSE
otherwize.

</return>
</function>

<function name="gst_mpeg_video_packet_parse_quant_matrix_extension">
<description>
Parses the @quant MPEG Video Quantization Matrix Extension
structure members from video @packet


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The #GstMpegVideoQuantMatrixExt structure to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the quant matrix extension could be parsed correctly,
%FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_packet_parse_sequence_display_extension">
<description>
Parses the @seqext MPEG Video Sequence Display Extension structure
members from video @packet


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="seqdisplayext">
<parameter_description> The #GstMpegVideoSequenceDisplayExt
structure to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the seqext could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_packet_parse_sequence_extension">
<description>
Parses the @seqext MPEG Video Sequence Extension structure members
from video @packet


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="seqext">
<parameter_description> The #GstMpegVideoSequenceExt structure to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the seqext could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_packet_parse_sequence_header">
<description>
Parses the @seqhdr MPEG Video Sequence Header structure members
from video @packet


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="seqhdr">
<parameter_description> The #GstMpegVideoSequenceHdr structure to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the seqhdr could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_packet_parse_sequence_scalable_extension">
<description>
Parses the @seqscaleext MPEG Video Sequence Scalable Extension structure
members from video @packet


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="seqscaleext">
<parameter_description> The #GstMpegVideoSequenceScalableExt structure to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the seqext could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_packet_parse_slice_header">
<description>
Parses the @GstMpegVideoSliceHdr  structure members from @data


</description>
<parameters>
<parameter name="packet">
<parameter_description> The #GstMpegVideoPacket that carries the data
</parameter_description>
</parameter>
<parameter name="slice_hdr">
<parameter_description> The #GstMpegVideoSliceHdr structure to fill
</parameter_description>
</parameter>
<parameter name="seqhdr">
<parameter_description> The #GstMpegVideoSequenceHdr header
</parameter_description>
</parameter>
<parameter name="seqscaleext">
<parameter_description> The #GstMpegVideoSequenceScalableExt header
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the slice could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_parse">
<description>
Parses the MPEG 1/2 video bitstream contained in @data, and returns the
offset, and if known also the size, in @packet. This function will scan
the data to find the next packet if needed.


</description>
<parameters>
<parameter name="packet">
<parameter_description> a #GstMpegVideoPacket to fill with the data and offset of the
next packet found
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset from which to start parsing
</parameter_description>
</parameter>
</parameters>
<return> TRUE if a packet start code was found, otherwise FALSE.
</return>
</function>

<function name="gst_mpeg_video_parse_gop">
<description>
Parses the @gop Mpeg Video Group of Picture structure members from @data

Deprecated: Use gst_mpeg_video_packet_parse_gop() instead.

</description>
<parameters>
<parameter name="gop">
<parameter_description> The #GstMpegVideoGop structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data from which to parse the gop
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset in byte from which to start the parsing
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the gop could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_parse_picture_extension">
<description>
Parse the @ext Mpeg Video Picture Extension structure members from @data

Deprecated: Use gst_mpeg_video_packet_parse_picture_extension() instead.

</description>
<parameters>
<parameter name="ext">
<parameter_description> The #GstMpegVideoPictureExt structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data from which to parse the picture extension
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset in byte from which to start the parsing
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the picture extension could be parsed correctly,
%FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_parse_picture_header">
<description>
Parsers the @hdr Mpeg Video Picture Header structure members from @data

Deprecated: Use gst_mpeg_video_packet_parse_picture_header() instead.

</description>
<parameters>
<parameter name="hdr">
<parameter_description> The #GstMpegVideoPictureHdr structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data from which to parse the picture header
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset in byte from which to start the parsing
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the picture sequence could be parsed correctly, %FALSE
otherwize.

</return>
</function>

<function name="gst_mpeg_video_parse_quant_matrix_extension">
<description>
Parses the @quant Mpeg Video Quant Matrix Extension structure members from
@data

Deprecated: Use gst_mpeg_video_packet_parse_quant_matrix_extension() instead.

</description>
<parameters>
<parameter name="quant">
<parameter_description> The #GstMpegVideoQuantMatrixExt structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data from which to parse the Quantization Matrix extension
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset in byte from which to start the parsing
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the quant matrix extension could be parsed correctly,
%FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_parse_sequence_extension">
<description>
Parses the @seqext Mpeg Video Sequence Extension structure members from @data

Deprecated: Use gst_mpeg_video_packet_parse_sequence_extension() instead.

</description>
<parameters>
<parameter name="seqext">
<parameter_description> The #GstMpegVideoSequenceExt structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data from which to parse the sequence extension
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset in byte from which to start parsing @data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the seqext could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_parse_sequence_header">
<description>
Parses the @seqhdr Mpeg Video Sequence Header structure members from @data

Deprecated: Use gst_mpeg_video_packet_parse_sequence_header() instead.

</description>
<parameters>
<parameter name="seqhdr">
<parameter_description> The #GstMpegVideoSequenceHdr structure to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data from which to parse the sequence header
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset in byte from which to start parsing @data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the seqhdr could be parsed correctly, %FALSE otherwize.

</return>
</function>

<function name="gst_mpeg_video_quant_matrix_get_raster_from_zigzag">
<description>
Converts quantization matrix @quant from zigzag scan order to
raster scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mpeg_video_quant_matrix_get_zigzag_from_raster">
<description>
Converts quantization matrix @quant from raster scan order to
zigzag scan order and store the resulting factors into @out_quant.

Note: it is an error to pass the same table in both @quant and
@out_quant arguments.


</description>
<parameters>
<parameter name="out_quant">
<parameter_description> The resulting quantization matrix
</parameter_description>
</parameter>
<parameter name="quant">
<parameter_description> The source quantization matrix
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mpegts_descriptor_free">
<description>
Frees @desc

</description>
<parameters>
<parameter name="desc">
<parameter_description> The descriptor to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mpegts_descriptor_from_custom">
<description>
Creates a #GstMpegtsDescriptor with custom @tag and @data


</description>
<parameters>
<parameter name="tag">
<parameter_description> descriptor tag
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> descriptor data (after tag and length field)
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of @data
</parameter_description>
</parameter>
</parameters>
<return> #GstMpegtsDescriptor
</return>
</function>

<function name="gst_mpegts_descriptor_from_dvb_network_name">
<description>
Creates a #GstMpegtsDescriptor to be a %GST_MTS_DESC_DVB_NETWORK_NAME,
with the network name @name. The data field of the #GstMpegtsDescriptor
will be allocated, and transferred to the caller.


</description>
<parameters>
<parameter name="name">
<parameter_description> the network name to set
</parameter_description>
</parameter>
</parameters>
<return> the #GstMpegtsDescriptor or %NULL on fail
</return>
</function>

<function name="gst_mpegts_descriptor_from_dvb_service">
<description>
Fills a #GstMpegtsDescriptor to be a %GST_MTS_DESC_DVB_SERVICE.
The data field of the #GstMpegtsDescriptor will be allocated,
and transferred to the caller.


</description>
<parameters>
<parameter name="service_type">
<parameter_description> Service type defined as a #GstMpegtsDVBServiceType
</parameter_description>
</parameter>
<parameter name="service_name">
<parameter_description> Name of the service
</parameter_description>
</parameter>
<parameter name="service_provider">
<parameter_description> Name of the service provider
</parameter_description>
</parameter>
</parameters>
<return> the #GstMpegtsDescriptor or %NULL on fail
</return>
</function>

<function name="gst_mpegts_descriptor_from_dvb_subtitling">
<description>

</description>
<parameters>
<parameter name="lang">
<parameter_description> a string containing the ISO639 language
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> subtitling type
</parameter_description>
</parameter>
<parameter name="composition">
<parameter_description> composition page id
</parameter_description>
</parameter>
<parameter name="ancillary">
<parameter_description> ancillary page id
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mpegts_descriptor_from_registration">
<description>
Creates a %GST_MTS_DESC_REGISTRATION #GstMpegtsDescriptor

Return: #GstMpegtsDescriptor, %NULL on failure

</description>
<parameters>
<parameter name="format_identifier">
<parameter_description> a 4 character format identifier string
</parameter_description>
</parameter>
<parameter name="additional_info">
<parameter_description> pointer to optional additional info
</parameter_description>
</parameter>
<parameter name="additional_info_length">
<parameter_description> length of the optional @additional_info
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_mpegts_descriptor_parse_ca">
<description>
Extracts the Conditional Access information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_CA #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="ca_system_id">
<parameter_description> the type of CA system used
</parameter_description>
</parameter>
<parameter name="ca_pid">
<parameter_description> The PID containing ECM or EMM data
</parameter_description>
</parameter>
<parameter name="private_data">
<parameter_description> The private data
</parameter_description>
</parameter>
<parameter name="private_data_size">
<parameter_description> The size of @private_data in bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_cable_delivery_system">
<description>
Extracts the cable delivery system information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_CABLE_DELIVERY_SYSTEM #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GstMpegtsCableDeliverySystemDescriptor to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_bouquet_name">
<description>
Extracts the bouquet name from @descriptor.


</description>
<parameters>
<parameter name="bouquet_name">
<parameter_description> the bouquet name
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_ca_identifier">
<description>
Extracts ca id's from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_CA_IDENTIFIER #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> a list of ca identifier.
Edge entry identifies the CA system. Allocations of the value of this field
are found in http://www.dvbservices.com
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_component">
<description>
Extracts the DVB component information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_COMPONENT #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GstMpegtsComponentDescriptor to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_content">
<description>
Extracts the DVB content information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_CONTENT #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="content">
<parameter_description> #GstMpegtsContent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_data_broadcast">
<description>
Parses out the data broadcast from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_DATA_BROADCAST #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> #GstMpegtsDataBroadcastDescriptor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_data_broadcast_id">
<description>
Parses out the data broadcast id from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_DATA_BROADCAST_ID #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="data_broadcast_id">
<parameter_description> the data broadcast id
</parameter_description>
</parameter>
<parameter name="id_selector_bytes">
<parameter_description> the selector bytes, if present
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of #id_selector_bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_extended_event">
<description>
Extracts the DVB extended event information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_EXTENDED_EVENT #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GstMpegtsExtendedEventDescriptor to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_frequency_list">
<description>
Parses out a list of frequencies from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_FREQUENCY_LIST #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> %FALSE in Hz, %TRUE in kHz
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description> a list of all frequencies in Hz/kHz
depending on %offset
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_linkage">
<description>
Extracts the DVB linkage information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_LINKAGE #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GstMpegtsDVBLinkageDescriptor to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_multilingual_bouquet_name">
<description>
Parses out the multilingual bouquet name from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_MULTILINGUAL_BOUQUET_NAME
#GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="bouquet_name_items">
<parameter_description>
a #GstMpegtsDvbMultilingualBouquetNameItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_multilingual_component">
<description>
Parses out the multilingual component from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_MULTILINGUAL_COMPONENT
#GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="component_tag">
<parameter_description> the component tag
</parameter_description>
</parameter>
<parameter name="component_description_items">
<parameter_description>
a #GstMpegtsDvbMultilingualComponentItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_multilingual_network_name">
<description>
Parses out the multilingual network name from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_MULTILINGUAL_NETWORK_NAME
#GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="network_name_items">
<parameter_description>
a #GstMpegtsDvbMultilingualNetworkNameItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_multilingual_service_name">
<description>
Parses out the multilingual service name from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_MULTILINGUAL_SERVICE_NAME
#GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="service_name_items">
<parameter_description>
a #GstMpegtsDvbMultilingualServiceNameItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_network_name">
<description>
Parses out the dvb network name from the @descriptor:


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_NETWORK_NAME #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the extracted name
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_parental_rating">
<description>
Extracts the DVB parental rating information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_PARENTAL_RATING #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="rating">
<parameter_description>
#GstMpegtsDVBParentalRatingItem
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_private_data_specifier">
<description>
Parses out the private data specifier from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_PRIVATE_DATA_SPECIFIER #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="private_data_specifier">
<parameter_description> the private data specifier id
registered by http://www.dvbservices.com/
</parameter_description>
</parameter>
<parameter name="private_data">
<parameter_description> additional data or NULL
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> length of %private_data
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_scrambling">
<description>
Parses out the scrambling mode from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_SCRAMBLING #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="scrambling_mode">
<parameter_description> This 8-bit field identifies the selected
mode of the scrambling algorithm (#GstMpegtsDVBScramblingModeType).
The technical details of the scrambling algorithm are available only
to bona-fide users upon signature of a Non Disclosure Agreement (NDA)
administered by the DVB Common Scrambling Algorithm Custodian.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_service">
<description>
Extracts the dvb service information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_SERVICE #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="service_type">
<parameter_description> the service type
</parameter_description>
</parameter>
<parameter name="service_name">
<parameter_description> the service name
</parameter_description>
</parameter>
<parameter name="provider_name">
<parameter_description> the provider name
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_service_list">
<description>
Parses out a list of services from the @descriptor:


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_SERVICE_LIST #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="list">
<parameter_description>
the list of services
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_short_event">
<description>
Extracts the DVB short event information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_SHORT_EVENT #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="language_code">
<parameter_description> the language code
</parameter_description>
</parameter>
<parameter name="event_name">
<parameter_description> the event name
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> the event text
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_stream_identifier">
<description>
Extracts the component tag from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_CONTENT #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="component_tag">
<parameter_description> the component tag
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happended correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_stuffing">
<description>
Parses out the stuffing bytes from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_STUFFING #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="stuffing_bytes">
<parameter_description> the stuffing bytes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_subtitling_idx">
<description>
Extracts the DVB subtitling informatio from specific table id in @descriptor.

Note: Use #gst_tag_get_language_code if you want to get the the
ISO 639-1 language code from the returned ISO 639-2 one.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_SUBTITLING #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> Table id of the entry to parse
</parameter_description>
</parameter>
<parameter name="lang">
<parameter_description> the language code
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of subtitling
</parameter_description>
</parameter>
<parameter name="composition_page_id">
<parameter_description> the composition page id
</parameter_description>
</parameter>
<parameter name="ancillary_page_id">
<parameter_description> the ancillary page id
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_subtitling_nb">
<description>

</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_SUBTITLING #GstMpegtsDescriptor
</parameter_description>
</parameter>
</parameters>
<return> The number of entries in @descriptor
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_t2_delivery_system">
<description>
Parses out the DVB-T2 delivery system from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_EXT_DVB_T2_DELIVERY_SYSTEM #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> #GstMpegtsT2DeliverySystemDescriptor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_teletext_idx">
<description>
Parses teletext number @idx in the @descriptor. The language is in ISO639 format.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_TELETEXT #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> The id of the teletext to get
</parameter_description>
</parameter>
<parameter name="language_code">
<parameter_description> a null-terminated string
</parameter_description>
</parameter>
<parameter name="teletext_type">
<parameter_description> #GstMpegtsDVBTeletextType
</parameter_description>
</parameter>
<parameter name="magazine_number">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="page_number">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return> FALSE on out-of-bounds and errors
</return>
</function>

<function name="gst_mpegts_descriptor_parse_dvb_teletext_nb">
<description>
Find the number of teletext entries in @descriptor


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_TELETEXT #GstMpegtsDescriptor
</parameter_description>
</parameter>
</parameters>
<return> Number of teletext entries
</return>
</function>

<function name="gst_mpegts_descriptor_parse_iso_639_language">
<description>
Extracts the iso 639-2 language information from @descriptor.

Note: Use #gst_tag_get_language_code if you want to get the the
ISO 639-1 language code from the returned ISO 639-2 one.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_ISO_639_LANGUAGE #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GstMpegtsISO639LanguageDescriptor to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_iso_639_language_idx">
<description>
Extracts the iso 639-2 language information from specific table id in @descriptor.

Note: Use #gst_tag_get_language_code if you want to get the the
ISO 639-1 language code from the returned ISO 639-2 one.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_ISO_639_LANGUAGE #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="idx">
<parameter_description> Table id of the language to parse
</parameter_description>
</parameter>
<parameter name="lang">
<parameter_description> 4-byte gchar array to hold the language code
</parameter_description>
</parameter>
<parameter name="audio_type">
<parameter_description> the #GstMpegtsIso639AudioType to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_iso_639_language_nb">
<description>

</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_ISO_639_LANGUAGE #GstMpegtsDescriptor
</parameter_description>
</parameter>
</parameters>
<return> The number of languages in @descriptor
</return>
</function>

<function name="gst_mpegts_descriptor_parse_logical_channel">
<description>
Extracts the logical channels from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DTG_LOGICAL_CHANNEL #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GstMpegtsLogicalChannelDescriptor to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_satellite_delivery_system">
<description>
Extracts the satellite delivery system information from @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_SATELLITE_DELIVERY_SYSTEM #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GstMpegtsSatelliteDeliverySystemDescriptor to fill
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if parsing succeeded, else %FALSE.
</return>
</function>

<function name="gst_mpegts_descriptor_parse_terrestrial_delivery_system">
<description>
Parses out the terrestrial delivery system from the @descriptor.


</description>
<parameters>
<parameter name="descriptor">
<parameter_description> a %GST_MTS_DESC_DVB_TERRESTRIAL_DELIVERY_SYSTEM #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> #GstMpegtsTerrestrialDeliverySystemDescriptor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the parsing happened correctly, else %FALSE.
</return>
</function>

<function name="gst_mpegts_dvb_linkage_descriptor_get_event">
<description>

</description>
<parameters>
<parameter name="desc">
<parameter_description> the #GstMpegtsDVBLinkageDescriptor
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsDVBLinkageEvent or %NULL if an error happened
</return>
</function>

<function name="gst_mpegts_dvb_linkage_descriptor_get_extended_event">
<description>

</description>
<parameters>
<parameter name="desc">
<parameter_description> the #GstMpegtsDVBLinkageDescriptor
</parameter_description>
</parameter>
</parameters>
<return> an #GstMpegtsDVBLinkageExtendedEvent array or %NULL if an error happened
</return>
</function>

<function name="gst_mpegts_dvb_linkage_descriptor_get_mobile_hand_over">
<description>

</description>
<parameters>
<parameter name="desc">
<parameter_description> the #GstMpegtsDVBLinkageDescriptor
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsDVBLinkageMobileHandOver or %NULL if an error happened
</return>
</function>

<function name="gst_mpegts_find_descriptor">
<description>
Finds the first descriptor of type @tag in the array.

Note: To look for descriptors that can be present more than once in an
array of descriptors, iterate the #GArray manually.


</description>
<parameters>
<parameter name="descriptors">
<parameter_description> an array
of #GstMpegtsDescriptor
</parameter_description>
</parameter>
<parameter name="tag">
<parameter_description> the tag to look for
</parameter_description>
</parameter>
</parameters>
<return> the first descriptor matchin @tag, else %NULL.
</return>
</function>

<function name="gst_mpegts_initialize">
<description>
Initializes the MPEG-TS helper library. Must be called before any
usage.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_mpegts_nit_new">
<description>
Allocates and initializes a #GstMpegtsNIT.


</description>
<parameters>
</parameters>
<return> A newly allocated #GstMpegtsNIT
</return>
</function>

<function name="gst_mpegts_nit_stream_new">
<description>
Allocates and initializes a #GstMpegtsNITStream


</description>
<parameters>
</parameters>
<return> A newly allocated #GstMpegtsNITStream
</return>
</function>

<function name="gst_mpegts_parse_descriptors">
<description>
Parses the descriptors present in @buffer and returns them as an
array.

Note: The data provided in @buffer will not be copied.


</description>
<parameters>
<parameter name="buffer">
<parameter_description> descriptors to parse
</parameter_description>
</parameter>
<parameter name="buf_len">
<parameter_description> Size of @buffer
</parameter_description>
</parameter>
</parameters>
<return> an
array of the parsed descriptors or %NULL if there was an error.
Release with #g_array_unref when done with it.
</return>
</function>

<function name="gst_mpegts_pat_new">
<description>
Allocates a new #GPtrArray for #GstMpegtsPatProgram


</description>
<parameters>
</parameters>
<return> A newly allocated #GPtrArray
</return>
</function>

<function name="gst_mpegts_pat_program_new">
<description>
Allocates a new #GstMpegtsPatProgram.


</description>
<parameters>
</parameters>
<return> A newly allocated #GstMpegtsPatProgram
</return>
</function>

<function name="gst_mpegts_pmt_new">
<description>
Allocates and initializes a new #GstMpegtsPMT.


</description>
<parameters>
</parameters>
<return> #GstMpegtsPMT
</return>
</function>

<function name="gst_mpegts_pmt_stream_new">
<description>
Allocates and initializes a new #GstMpegtsPMTStream.


</description>
<parameters>
</parameters>
<return> #GstMpegtsPMTStream
</return>
</function>

<function name="gst_mpegts_sdt_new">
<description>
Allocates and initializes a #GstMpegtsSDT.


</description>
<parameters>
</parameters>
<return> A newly allocated #GstMpegtsSDT
</return>
</function>

<function name="gst_mpegts_sdt_service_new">
<description>
Allocates and initializes a #GstMpegtsSDTService.


</description>
<parameters>
</parameters>
<return> A newly allocated #GstMpegtsSDTService
</return>
</function>

<function name="gst_mpegts_section_from_nit">
<description>
Ownership of @nit is taken. The data in @nit is managed by the #GstMpegtsSection


</description>
<parameters>
<parameter name="nit">
<parameter_description> a #GstMpegtsNIT to create the #GstMpegtsSection from
</parameter_description>
</parameter>
</parameters>
<return> the #GstMpegtsSection
</return>
</function>

<function name="gst_mpegts_section_from_pat">
<description>
Creates a PAT #GstMpegtsSection from the @programs array of #GstMpegtsPatPrograms


</description>
<parameters>
<parameter name="programs">
<parameter_description> an array of #GstMpegtsPatProgram
</parameter_description>
</parameter>
<parameter name="ts_id">
<parameter_description> Transport stream ID of the PAT
</parameter_description>
</parameter>
</parameters>
<return> a #GstMpegtsSection
</return>
</function>

<function name="gst_mpegts_section_from_pmt">
<description>
Creates a #GstMpegtsSection from @pmt that is bound to @pid


</description>
<parameters>
<parameter name="pmt">
<parameter_description> a #GstMpegtsPMT to create a #GstMpegtsSection from
</parameter_description>
</parameter>
<parameter name="pid">
<parameter_description> The PID that the #GstMpegtsPMT belongs to
</parameter_description>
</parameter>
</parameters>
<return> #GstMpegtsSection
</return>
</function>

<function name="gst_mpegts_section_from_sdt">
<description>
Ownership of @sdt is taken. The data in @sdt is managed by the #GstMpegtsSection


</description>
<parameters>
<parameter name="sdt">
<parameter_description> a #GstMpegtsSDT to create the #GstMpegtsSection from
</parameter_description>
</parameter>
</parameters>
<return> the #GstMpegtsSection
</return>
</function>

<function name="gst_mpegts_section_get_atsc_cvct">
<description>
Returns the #GstMpegtsAtscVCT contained in the @section


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_ATSC_CVCT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsAtscVCT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_atsc_eit">
<description>
Returns the #GstMpegtsAtscEIT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_ATSC_EIT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsAtscEIT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_atsc_ett">
<description>
Returns the #GstMpegtsAtscETT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_ATSC_ETT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsAtscETT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_atsc_mgt">
<description>
Returns the #GstMpegtsAtscMGT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_ATSC_MGT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsAtscMGT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_atsc_stt">
<description>
Returns the #GstMpegtsAtscSTT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_ATSC_STT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsAtscSTT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_atsc_tvct">
<description>
Returns the #GstMpegtsAtscVCT contained in the @section


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_ATSC_TVCT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsAtscVCT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_bat">
<description>
Returns the #GstMpegtsBAT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_BAT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsBAT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_cat">
<description>
Returns the array of #GstMpegtsDescriptor contained in the Conditional
Access Table.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_CAT
</parameter_description>
</parameter>
</parameters>
<return> The
#GstMpegtsDescriptor contained in the section, or %NULL if an error
happened. Release with #g_array_unref when done.
</return>
</function>

<function name="gst_mpegts_section_get_data">
<description>
Gets the original unparsed section data.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection
</parameter_description>
</parameter>
</parameters>
<return> The original unparsed section data.
</return>
</function>

<function name="gst_mpegts_section_get_eit">
<description>
Returns the #GstMpegtsEIT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_EIT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsEIT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_nit">
<description>
Returns the #GstMpegtsNIT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_NIT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsNIT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_pat">
<description>
Parses a Program Association Table (ITU H.222.0, ISO/IEC 13818-1).


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_PAT
</parameter_description>
</parameter>
</parameters>
<return> The
#GstMpegtsPatProgram contained in the section, or %NULL if an error
happened. Release with #g_ptr_array_unref when done.
</return>
</function>

<function name="gst_mpegts_section_get_pmt">
<description>
Returns the #GstMpegtsPMT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_PMT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsPMT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_sdt">
<description>
Returns the #GstMpegtsSDT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_SDT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsSDT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_tdt">
<description>
Returns the #GstDateTime of the TDT


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_TDT
</parameter_description>
</parameter>
</parameters>
<return> The #GstDateTime contained in the section, or %NULL
if an error happened. Release with #gst_date_time_unref when done.
</return>
</function>

<function name="gst_mpegts_section_get_tot">
<description>
Returns the #GstMpegtsTOT contained in the @section.


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_TOT
</parameter_description>
</parameter>
</parameters>
<return> The #GstMpegtsTOT contained in the section, or %NULL if an error
happened.
</return>
</function>

<function name="gst_mpegts_section_get_tsdt">
<description>
Returns the array of #GstMpegtsDescriptor contained in the section


</description>
<parameters>
<parameter name="section">
<parameter_description> a #GstMpegtsSection of type %GST_MPEGTS_SECTION_TSDT
</parameter_description>
</parameter>
</parameters>
<return> The
#GstMpegtsDescriptor contained in the section, or %NULL if an error
happened. Release with #g_array_unref when done.
</return>
</function>

<function name="gst_mpegts_section_new">
<description>
Creates a new #GstMpegtsSection from the provided @data.

Note: Ensuring @data is big enough to contain the full section is the
responsibility of the caller. If it is not big enough, %NULL will be
returned.

Note: it is the responsibility of the caller to ensure @data does point
to the beginning of the section.


</description>
<parameters>
<parameter name="pid">
<parameter_description> the PID to which this section belongs
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a pointer to the beginning of the section (i.e. the first byte
should contain the table_id field).
</parameter_description>
</parameter>
<parameter name="data_size">
<parameter_description> size of the @data argument.
</parameter_description>
</parameter>
</parameters>
<return> A new #GstMpegtsSection if the data was valid,
else %NULL
</return>
</function>

<function name="gst_mpegts_section_packetize">
<description>
If the data in @section has already been packetized, the data pointer is returned
immediately. Otherwise, the data field is allocated and populated.


</description>
<parameters>
<parameter name="section">
<parameter_description> the #GstMpegtsSection that holds the data
</parameter_description>
</parameter>
<parameter name="output_size">
<parameter_description> #gsize to hold the size of the data
</parameter_description>
</parameter>
</parameters>
<return> pointer to section data, or %NULL on fail
</return>
</function>

<function name="gst_mpegts_section_send_event">
<description>
Creates a custom #GstEvent with a @GstMpegtsSection.
The #GstEvent is sent to the @element #GstElement.


</description>
<parameters>
<parameter name="element">
<parameter_description> The #GstElement to send to section event to
</parameter_description>
</parameter>
<parameter name="section">
<parameter_description> The #GstMpegtsSection to put in the event
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the event is sent
</return>
</function>

<function name="gst_photography_get_aperture">
<description>
Get the aperture value for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="aperture">
<parameter_description> aperture value to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_capabilities">
<description>
Get #GstPhotographyCaps bitmask value that indicates what photography
interface features the #GstElement supports


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
</parameters>
<return> #GstPhotographyCaps value
</return>
</function>

<function name="gst_photography_get_color_tone_mode">
<description>
Get the color tone mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="tone_mode">
<parameter_description> #GstPhotographyColorToneMode to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_config">
<description>
Get all configuration settings at once.


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="config">
<parameter_description> #GstPhotographySettings containg the configuration
</parameter_description>
</parameter>
</parameters>
<return> TRUE if configuration was got successfully, otherwise FALSE.
</return>
</function>

<function name="gst_photography_get_ev_compensation">
<description>
Get the ev compensation value for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="ev_comp">
<parameter_description> ev compensation value to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_exposure">
<description>
Get the fixed exposure time (in us) for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="exposure">
<parameter_description> exposure time to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_flash_mode">
<description>
Get the flash mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flash_mode">
<parameter_description> #GstPhotographyFlashMode to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_flicker_mode">
<description>
Get the flicker mode value for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flicker_mode">
<parameter_description> flicker mode value to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_focus_mode">
<description>
Get the focus mode value for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="focus_mode">
<parameter_description> focus_mode value to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_iso_speed">
<description>
Get the ISO value (light sensivity) for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="iso_speed">
<parameter_description> ISO speed value to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_noise_reduction">
<description>
Get the noise reduction mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="noise_reduction">
<parameter_description> #GstPhotographyNoiseReductionMode to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise

</return>
</function>

<function name="gst_photography_get_scene_mode">
<description>
Get the scene mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="scene_mode">
<parameter_description> #GstPhotographySceneMode to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_white_balance_mode">
<description>
Get the white balance mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="wb_mode">
<parameter_description> #GstPhotographyWhiteBalanceMode to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_get_zoom">
<description>
Get the zoom value for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="zoom">
<parameter_description> zoom value to get
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if getting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_prepare_for_capture">
<description>
Start preparations for capture. Preparations can take indeterminate
amount of time and @func callback is called after preparations are
done. Image capture will begin after callback returns.


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> callback that is called after capturing has been prepared
</parameter_description>
</parameter>
<parameter name="capture_caps">
<parameter_description> #GstCaps defining the desired format of the captured image
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data that will be passed to the callback @func
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if preparations were started (caps were OK), otherwise %FALSE.
</return>
</function>

<function name="gst_photography_set_aperture">
<description>
Set the aperture value for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="aperture">
<parameter_description> aperture value to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_autofocus">
<description>
Start or stop autofocusing. %GST_PHOTOGRAPHY_AUTOFOCUS_DONE
message is posted to bus when autofocusing has finished.

</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="on">
<parameter_description> %TRUE to start autofocusing, %FALSE to stop autofocusing
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_photography_set_color_tone_mode">
<description>
Set the color tone mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="tone_mode">
<parameter_description> #GstPhotographyColorToneMode to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_config">
<description>
Set all configuration settings at once.


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="config">
<parameter_description> #GstPhotographySettings containg the configuration
</parameter_description>
</parameter>
</parameters>
<return> TRUE if configuration was set successfully, otherwise FALSE.
</return>
</function>

<function name="gst_photography_set_ev_compensation">
<description>
Set the ev compensation value for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="ev_comp">
<parameter_description> ev compensation value to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_exposure">
<description>
Set the fixed exposure time (in us) for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="exposure">
<parameter_description> exposure time to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_flash_mode">
<description>
Set the flash mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flash_mode">
<parameter_description> #GstPhotographyFlashMode to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_flicker_mode">
<description>
Set the flicker mode value for the #GstElement.


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="flicker_mode">
<parameter_description> flicker mode value to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_focus_mode">
<description>
Set the focus mode value for the #GstElement.


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="focus_mode">
<parameter_description> focus mode value to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_iso_speed">
<description>
Set the ISO value (light sensivity) for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="iso_speed">
<parameter_description> ISO speed value to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_noise_reduction">
<description>
Set the noise reduction mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="noise_reduction">
<parameter_description> #GstPhotographyNoiseReductionMode to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise

</return>
</function>

<function name="gst_photography_set_scene_mode">
<description>
Set the scene mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="scene_mode">
<parameter_description> #GstPhotographySceneMode to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_white_balance_mode">
<description>
Set the white balance mode for the #GstElement


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="wb_mode">
<parameter_description> #GstPhotographyWhiteBalanceMode to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_photography_set_zoom">
<description>
Set the zoom value for the #GstElement.
E.g. 1.0 to get original image and 3.0 for 3x zoom and so on.


</description>
<parameters>
<parameter name="photo">
<parameter_description> #GstPhotography interface of a #GstElement
</parameter_description>
</parameter>
<parameter name="zoom">
<parameter_description> zoom value to set
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if setting the value succeeded, %FALSE otherwise
</return>
</function>

<function name="gst_uri_downloader_fetch_uri_with_range">
<description>
Returns the downloaded #GstFragment

</description>
<parameters>
<parameter name="downloader">
<parameter_description> the #GstUriDownloader
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> the uri
</parameter_description>
</parameter>
<parameter name="range_start">
<parameter_description> the starting byte index
</parameter_description>
</parameter>
<parameter name="range_end">
<parameter_description> the final byte index, use -1 for unspecified
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_vc1_bitplane_free">
<description>
Frees @bitplanes.

</description>
<parameters>
<parameter name="bitplanes">
<parameter_description> the #GstVC1BitPlanes to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_vc1_bitplane_free_1">
<description>
Frees @bitplanes fields.

</description>
<parameters>
<parameter name="bitplanes">
<parameter_description> The #GstVC1BitPlanes to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_vc1_bitplanes_ensure_size">
<description>
Fills the @bitplanes structure from @seqhdr, this function
should be called after #gst_vc1_parse_sequence_header if
in simple or main mode, or after #gst_vc1_parse_entry_point_header
if in advanced mode.


</description>
<parameters>
<parameter name="bitplanes">
<parameter_description> The #GstVC1BitPlanes to reset
</parameter_description>
</parameter>
<parameter name="seqhdr">
<parameter_description> The #GstVC1SeqHdr from which to set @bitplanes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if everything went fine, %FALSE otherwize
</return>
</function>

<function name="gst_vc1_bitplanes_new">
<description>
Creates a new #GstVC1BitPlanes. It should be freed with
gst_vc1_bitplanes_free() after use.


</description>
<parameters>
</parameters>
<return> a new #GstVC1BitPlanes
</return>
</function>

<function name="gst_vc1_identify_next_bdu">
<description>
Parses @data and fills @bdu fields


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="bdu">
<parameter_description> The #GstVC1BDU where to store parsed bdu headers
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_entry_point_header">
<description>
Parses @data, and sets @entrypoint fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="entrypoint">
<parameter_description> The #GstVC1EntryPointHdr to set.
</parameter_description>
</parameter>
<parameter name="seqhdr">
<parameter_description> The #GstVC1SeqHdr currently being parsed
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1EntryPointHdr
</return>
</function>

<function name="gst_vc1_parse_field_header">
<description>
Parses @data, and fills @fieldhdr fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="fieldhdr">
<parameter_description> The #GstVC1FrameHdr to fill.
</parameter_description>
</parameter>
<parameter name="seqhdr">
<parameter_description> The #GstVC1SeqHdr currently being parsed
</parameter_description>
</parameter>
<parameter name="bitplanes">
<parameter_description> The #GstVC1BitPlanes to store bitplanes in or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_frame_header">
<description>
Parses @data, and fills @entrypoint fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="framehdr">
<parameter_description> The #GstVC1FrameHdr to fill.
</parameter_description>
</parameter>
<parameter name="seqhdr">
<parameter_description> The #GstVC1SeqHdr currently being parsed
</parameter_description>
</parameter>
<parameter name="bitplanes">
<parameter_description> The #GstVC1BitPlanes to store bitplanes in or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_frame_layer">
<description>
Parses @data, and fills @framelayer fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="framelayer">
<parameter_description> The #GstVC1FrameLayer to fill.
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_sequence_header">
<description>
Parses @data, and fills @seqhdr fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="seqhdr">
<parameter_description> The #GstVC1SeqHdr to set.
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_sequence_header_struct_a">
<description>
Parses @data, and fills @structa fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="structa">
<parameter_description> The #GstVC1SeqStructA to set.
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_sequence_header_struct_b">
<description>
Parses @data, and fills @structb fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="structb">
<parameter_description> The #GstVC1SeqStructB to set.
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_sequence_header_struct_c">
<description>
Parses @data, and fills @structc fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="structc">
<parameter_description> The #GstVC1SeqStructC to set.
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_sequence_layer">
<description>
Parses @data, and fills @seqlayer fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="seqlayer">
<parameter_description> The #GstVC1SeqLayer to set.
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult
</return>
</function>

<function name="gst_vc1_parse_slice_header">
<description>
Parses @data, and fills @slicehdr fields.


</description>
<parameters>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of @data
</parameter_description>
</parameter>
<parameter name="slicehdr">
<parameter_description> The #GstVC1SliceHdr to fill
</parameter_description>
</parameter>
<parameter name="seqhdr">
<parameter_description> The #GstVC1SeqHdr that was previously parsed
</parameter_description>
</parameter>
</parameters>
<return> a #GstVC1ParserResult

</return>
</function>

<function name="gst_vp8_parser_init">
<description>
Initializes the supplied @parser structure with its default values.


</description>
<parameters>
<parameter name="parser">
<parameter_description> The #GstVp8Parser to initialize
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="gst_vp8_parser_parse_frame_header">
<description>
Parses the VP8 bitstream contained in @data, and fills in @frame_hdr
with the information. The supplied @data shall point to a complete
frame since there is no sync code specified for VP8 bitstreams. Thus,
the @size argument shall represent the whole frame size.


</description>
<parameters>
<parameter name="parser">
<parameter_description> The #GstVp8Parser
</parameter_description>
</parameter>
<parameter name="frame_hdr">
<parameter_description> The #GstVp8FrameHdr to fill
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> The data to parse
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> The size of the @data to parse
</parameter_description>
</parameter>
</parameters>
<return> a #GstVp8ParserResult

</return>
</function>

<function name="gst_wayland_video_begin_geometry_change">
<description>
Notifies the video sink that we are about to change its
geometry (probably using set_render_rectangle()). This is useful
in order to allow the sink to synchronize resizing/moving of the
video area with the parent surface and avoid glitches, in cases
where the video area is being painted asynchronously from another
thread, like in waylandsink.

Please note that any calls to this method MUST be matched by
calls to end_geometry_change() and AFTER the parent surface has
commited its geometry changes.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="gst_wayland_video_end_geometry_change">
<description>
Notifies the video sink that we just finished changing the
geometry of both itself and its parent surface. This should
have been earlier preceeded by a call to begin_geometry_change()
which notified the sink before any of these changes had happened.

It is important to call this method only AFTER the parent surface
has commited its geometry changes, otherwise no synchronization
is actually achieved.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="has_next_period">
<description>
Checks if there is a next period following the current one.
DASH can have multiple medias chained in its manifest, when one finishes
this function is called to verify if there is a new period to be played
in sequence.


</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if there is another period
</return>
</function>

<function name="reset">
<description>
Reset the internal state of the subclass, getting ready to restart with
a new stream afterwards

</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="seek">
<description>
The demuxer should seek on all its streams to the specified position
in the seek event


</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
<parameter name="seek">
<parameter_description> a seek #GstEvent
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if successful
</return>
</function>

<function name="start_fragment">
<description>
Notifies the subclass that the given stream is starting the download
of a new fragment. Can be used to reset/init internal state that is
needed before each fragment, like decryption engines.


</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
<parameter name="stream">
<parameter_description> #GstAdaptiveDemuxStream
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if successful.
</return>
</function>

<function name="stream_get_fragment_waiting_time">
<description>
For live streams, requests how much time should be waited before starting
to download the fragment. This is useful to avoid downloading a fragment that
isn't available yet.


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GstAdaptiveDemuxStream
</parameter_description>
</parameter>
</parameters>
<return> The waiting time in microsseconds
</return>
</function>

<function name="stream_select_bitrate">
<description>
The stream should try to select the bitrate that is the greater, but not
greater than the requested bitrate. If it needs a codec change it should
create the new stream using gst_adaptive_demux_stream_new(). If it only
needs a caps change it should set the new caps using
gst_adaptive_demux_stream_set_caps().


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GstAdaptiveDemuxStream
</parameter_description>
</parameter>
<parameter name="bitrate">
<parameter_description> the bitrate to select (in bytes per second)
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if the stream changed bitrate, #FALSE otherwise
</return>
</function>

<function name="stream_update_fragment_info">
<description>
Requests the stream to set the information about the current fragment to its
current fragment struct


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GstAdaptiveDemuxStream
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK in success, #GST_FLOW_ERROR on error and #GST_FLOW_EOS
if there is no fragment.
</return>
</function>

<function name="update_manifest">
<description>
During live streaming, this will be called for the subclass to update its
manifest with the new version. By default it fetches the manifest URI
and passes it to GstAdaptiveDemux::update_manifest_data().


</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK is all succeeded, #GST_FLOW_EOS if the stream ended
or #GST_FLOW_ERROR if an error happened
</return>
</function>

<function name="update_manifest_data">
<description>
During live streaming, this will be called for the subclass to update its
manifest with the new version


</description>
<parameters>
<parameter name="demux">
<parameter_description> #GstAdaptiveDemux
</parameter_description>
</parameter>
<parameter name="buf">
<parameter_description> Downloaded manifest data
</parameter_description>
</parameter>
</parameters>
<return> #GST_FLOW_OK is all succeeded, #GST_FLOW_EOS if the stream ended
or #GST_FLOW_ERROR if an error happened
</return>
</function>

</root>
