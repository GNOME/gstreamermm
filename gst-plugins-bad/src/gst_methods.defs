;; -*- scheme -*-
; object definitions ...
(define-object AdaptiveDemux
  (in-module "Gst")
  (parent "GstBin")
  (c-name "GstAdaptiveDemux")
  (gtype-id "GST_TYPE_ADAPTIVE_DEMUX")
)

(define-object Aggregator
  (in-module "Gst")
  (parent "GstElement")
  (c-name "GstAggregator")
  (gtype-id "GST_TYPE_AGGREGATOR")
)

(define-object AggregatorPad
  (in-module "Gst")
  (parent "GstPad")
  (c-name "GstAggregatorPad")
  (gtype-id "GST_TYPE_AGGREGATOR_PAD")
)

(define-object BaseCameraSrc
  (in-module "Gst")
  (parent "GstBin")
  (c-name "GstBaseCameraSrc")
  (gtype-id "GST_TYPE_BASE_CAMERA_SRC")
)

(define-object Fragment
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstFragment")
  (gtype-id "GST_TYPE_FRAGMENT")
)

(define-object GLBaseFilter
  (in-module "Gst")
  (parent "GstBaseTransform")
  (c-name "GstGLBaseFilter")
  (gtype-id "GST_TYPE_GL_BASE_FILTER")
)

(define-object GLBaseMemoryAllocator
  (in-module "Gst")
  (parent "GstAllocator")
  (c-name "GstGLBaseMemoryAllocator")
  (gtype-id "GST_TYPE_GL_BASE_MEMORY_ALLOCATOR")
)

(define-object GLBufferAllocator
  (in-module "Gst")
  (parent "GstGLBaseMemoryAllocator")
  (c-name "GstGLBufferAllocator")
  (gtype-id "GST_TYPE_GL_BUFFER_ALLOCATOR")
)

(define-object GLBufferPool
  (in-module "Gst")
  (parent "GstBufferPool")
  (c-name "GstGLBufferPool")
  (gtype-id "GST_TYPE_GL_BUFFER_POOL")
)

(define-object GLColorConvert
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLColorConvert")
  (gtype-id "GST_TYPE_GL_COLOR_CONVERT")
)

(define-object GLContext
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLContext")
  (gtype-id "GST_TYPE_GL_CONTEXT")
)

(define-object GLControlBindingProxy
  (in-module "Gst")
  (parent "GstControlBinding")
  (c-name "GstGLControlBindingProxy")
  (gtype-id "GST_TYPE_GL_CONTROL_BINDING_PROXY")
)

(define-object GLDisplay
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLDisplay")
  (gtype-id "GST_TYPE_GL_DISPLAY")
)

(define-object GLFilter
  (in-module "Gst")
  (parent "GstGLBaseFilter")
  (c-name "GstGLFilter")
  (gtype-id "GST_TYPE_GL_FILTER")
)

(define-object GLFramebuffer
  (in-module "Gst")
  (parent "GObject")
  (c-name "GstGLFramebuffer")
  (gtype-id "GST_TYPE_GL_FRAMEBUFFER")
)

(define-object GLMemoryAllocator
  (in-module "Gst")
  (parent "GstGLBaseMemoryAllocator")
  (c-name "GstGLMemoryAllocator")
  (gtype-id "GST_TYPE_GL_MEMORY_ALLOCATOR")
)

(define-object GLMemoryPBOAllocator
  (in-module "Gst")
  (parent "GstGLMemoryAllocator")
  (c-name "GstGLMemoryPBOAllocator")
  (gtype-id "GST_TYPE_GL_MEMORY_PBO_ALLOCATOR")
)

(define-object GLOverlayCompositor
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLOverlayCompositor")
  (gtype-id "GST_TYPE_GL_OVERLAY_COMPOSITOR")
)

(define-object GLSLStage
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLSLStage")
  (gtype-id "GST_TYPE_GLSL_STAGE")
)

(define-object GLShader
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLShader")
  (gtype-id "GST_TYPE_GL_SHADER")
)

(define-object GLUpload
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLUpload")
  (gtype-id "GST_TYPE_GL_UPLOAD")
)

(define-object GLViewConvert
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLViewConvert")
  (gtype-id "GST_TYPE_GL_VIEW_CONVERT")
)

(define-object GLWindow
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstGLWindow")
  (gtype-id "GST_TYPE_GL_WINDOW")
)

(define-object InsertBin
  (in-module "Gst")
  (parent "GstBin")
  (c-name "GstInsertBin")
  (gtype-id "GST_TYPE_INSERT_BIN")
)

(define-object UriDownloader
  (in-module "Gst")
  (parent "GstObject")
  (c-name "GstUriDownloader")
  (gtype-id "GST_TYPE_URI_DOWNLOADER")
)

(define-object VideoAggregator
  (in-module "Gst")
  (parent "GstAggregator")
  (c-name "GstVideoAggregator")
  (gtype-id "GST_TYPE_VIDEO_AGGREGATOR")
)

(define-object VideoAggregatorPad
  (in-module "Gst")
  (parent "GstAggregatorPad")
  (c-name "GstVideoAggregatorPad")
  (gtype-id "GST_TYPE_VIDEO_AGGREGATOR_PAD")
)

;; Enumerations and flags ...

(define-enum CameraBinMode
  (in-module "Gst")
  (c-name "GstCameraBinMode")
  (gtype-id "GST_TYPE_CAMERA_BIN_MODE")
  (values
    '("image" "MODE_IMAGE")
    '("video" "MODE_VIDEO")
  )
)

(define-enum JpegMarker
  (in-module "Gst")
  (c-name "GstJpegMarker")
  (gtype-id "GST_TYPE_JPEG_MARKER")
  (values
    '("sof0" "GST_JPEG_MARKER_SOF0")
    '("sof1" "GST_JPEG_MARKER_SOF1")
    '("sof2" "GST_JPEG_MARKER_SOF2")
    '("sof3" "GST_JPEG_MARKER_SOF3")
    '("sof5" "GST_JPEG_MARKER_SOF5")
    '("sof6" "GST_JPEG_MARKER_SOF6")
    '("sof7" "GST_JPEG_MARKER_SOF7")
    '("sof9" "GST_JPEG_MARKER_SOF9")
    '("sof10" "GST_JPEG_MARKER_SOF10")
    '("sof11" "GST_JPEG_MARKER_SOF11")
    '("sof13" "GST_JPEG_MARKER_SOF13")
    '("sof14" "GST_JPEG_MARKER_SOF14")
    '("sof15" "GST_JPEG_MARKER_SOF15")
    '("dht" "GST_JPEG_MARKER_DHT")
    '("dac" "GST_JPEG_MARKER_DAC")
    '("rst0" "GST_JPEG_MARKER_RST0")
    '("rst1" "GST_JPEG_MARKER_RST1")
    '("rst2" "GST_JPEG_MARKER_RST2")
    '("rst3" "GST_JPEG_MARKER_RST3")
    '("rst4" "GST_JPEG_MARKER_RST4")
    '("rst5" "GST_JPEG_MARKER_RST5")
    '("rst6" "GST_JPEG_MARKER_RST6")
    '("rst7" "GST_JPEG_MARKER_RST7")
    '("soi" "GST_JPEG_MARKER_SOI")
    '("eoi" "GST_JPEG_MARKER_EOI")
    '("sos" "GST_JPEG_MARKER_SOS")
    '("dqt" "GST_JPEG_MARKER_DQT")
    '("dnl" "GST_JPEG_MARKER_DNL")
    '("dri" "GST_JPEG_MARKER_DRI")
    '("app0" "GST_JPEG_MARKER_APP0")
    '("app1" "GST_JPEG_MARKER_APP1")
    '("app2" "GST_JPEG_MARKER_APP2")
    '("app3" "GST_JPEG_MARKER_APP3")
    '("app4" "GST_JPEG_MARKER_APP4")
    '("app5" "GST_JPEG_MARKER_APP5")
    '("app6" "GST_JPEG_MARKER_APP6")
    '("app7" "GST_JPEG_MARKER_APP7")
    '("app8" "GST_JPEG_MARKER_APP8")
    '("app9" "GST_JPEG_MARKER_APP9")
    '("app10" "GST_JPEG_MARKER_APP10")
    '("app11" "GST_JPEG_MARKER_APP11")
    '("app12" "GST_JPEG_MARKER_APP12")
    '("app13" "GST_JPEG_MARKER_APP13")
    '("app14" "GST_JPEG_MARKER_APP14")
    '("app15" "GST_JPEG_MARKER_APP15")
    '("com" "GST_JPEG_MARKER_COM")
  )
)

(define-enum JpegProfile
  (in-module "Gst")
  (c-name "GstJpegProfile")
  (gtype-id "GST_TYPE_JPEG_PROFILE")
  (values
    '("baseline" "GST_JPEG_PROFILE_BASELINE")
    '("extended" "GST_JPEG_PROFILE_EXTENDED")
    '("progressive" "GST_JPEG_PROFILE_PROGRESSIVE")
    '("lossless" "GST_JPEG_PROFILE_LOSSLESS")
  )
)

(define-enum JpegEntropyCodingMode
  (in-module "Gst")
  (c-name "GstJpegEntropyCodingMode")
  (gtype-id "GST_TYPE_JPEG_ENTROPY_CODING_MODE")
  (values
    '("huffman" "GST_JPEG_ENTROPY_CODING_HUFFMAN")
    '("arithmetic" "GST_JPEG_ENTROPY_CODING_ARITHMETIC")
  )
)

(define-enum MpegVideoPacketTypeCode
  (in-module "Gst")
  (c-name "GstMpegVideoPacketTypeCode")
  (gtype-id "GST_TYPE_MPEG_VIDEO_PACKET_TYPE_CODE")
  (values
    '("picture" "GST_MPEG_VIDEO_PACKET_PICTURE")
    '("slice-min" "GST_MPEG_VIDEO_PACKET_SLICE_MIN")
    '("slice-max" "GST_MPEG_VIDEO_PACKET_SLICE_MAX")
    '("user-data" "GST_MPEG_VIDEO_PACKET_USER_DATA")
    '("sequence" "GST_MPEG_VIDEO_PACKET_SEQUENCE")
    '("extension" "GST_MPEG_VIDEO_PACKET_EXTENSION")
    '("sequence-end" "GST_MPEG_VIDEO_PACKET_SEQUENCE_END")
    '("gop" "GST_MPEG_VIDEO_PACKET_GOP")
    '("none" "GST_MPEG_VIDEO_PACKET_NONE")
  )
)

(define-enum MpegVideoPacketExtensionCode
  (in-module "Gst")
  (c-name "GstMpegVideoPacketExtensionCode")
  (gtype-id "GST_TYPE_MPEG_VIDEO_PACKET_EXTENSION_CODE")
  (values
    '("sequence" "GST_MPEG_VIDEO_PACKET_EXT_SEQUENCE")
    '("sequence-display" "GST_MPEG_VIDEO_PACKET_EXT_SEQUENCE_DISPLAY")
    '("quant-matrix" "GST_MPEG_VIDEO_PACKET_EXT_QUANT_MATRIX")
    '("sequence-scalable" "GST_MPEG_VIDEO_PACKET_EXT_SEQUENCE_SCALABLE")
    '("picture" "GST_MPEG_VIDEO_PACKET_EXT_PICTURE")
  )
)

(define-enum MpegVideoSequenceScalableMode
  (in-module "Gst")
  (c-name "GstMpegVideoSequenceScalableMode")
  (gtype-id "GST_TYPE_MPEG_VIDEO_SEQUENCE_SCALABLE_MODE")
  (values
    '("data-partitioning" "GST_MPEG_VIDEO_SEQ_SCALABLE_MODE_DATA_PARTITIONING")
    '("spatial" "GST_MPEG_VIDEO_SEQ_SCALABLE_MODE_SPATIAL")
    '("snr" "GST_MPEG_VIDEO_SEQ_SCALABLE_MODE_SNR")
    '("temporal" "GST_MPEG_VIDEO_SEQ_SCALABLE_MODE_TEMPORAL")
  )
)

(define-enum MpegVideoLevel
  (in-module "Gst")
  (c-name "GstMpegVideoLevel")
  (gtype-id "GST_TYPE_MPEG_VIDEO_LEVEL")
  (values
    '("high" "GST_MPEG_VIDEO_LEVEL_HIGH")
    '("high-1440" "GST_MPEG_VIDEO_LEVEL_HIGH_1440")
    '("main" "GST_MPEG_VIDEO_LEVEL_MAIN")
    '("low" "GST_MPEG_VIDEO_LEVEL_LOW")
  )
)

(define-enum MpegVideoProfile
  (in-module "Gst")
  (c-name "GstMpegVideoProfile")
  (gtype-id "GST_TYPE_MPEG_VIDEO_PROFILE")
  (values
    '("422" "GST_MPEG_VIDEO_PROFILE_422")
    '("high" "GST_MPEG_VIDEO_PROFILE_HIGH")
    '("spatially-scalable" "GST_MPEG_VIDEO_PROFILE_SPATIALLY_SCALABLE")
    '("snr-scalable" "GST_MPEG_VIDEO_PROFILE_SNR_SCALABLE")
    '("main" "GST_MPEG_VIDEO_PROFILE_MAIN")
    '("simple" "GST_MPEG_VIDEO_PROFILE_SIMPLE")
  )
)

(define-enum MpegVideoChromaFormat
  (in-module "Gst")
  (c-name "GstMpegVideoChromaFormat")
  (gtype-id "GST_TYPE_MPEG_VIDEO_CHROMA_FORMAT")
  (values
    '("res" "GST_MPEG_VIDEO_CHROMA_RES")
    '("420" "GST_MPEG_VIDEO_CHROMA_420")
    '("422" "GST_MPEG_VIDEO_CHROMA_422")
    '("444" "GST_MPEG_VIDEO_CHROMA_444")
  )
)

(define-enum MpegVideoPictureType
  (in-module "Gst")
  (c-name "GstMpegVideoPictureType")
  (gtype-id "GST_TYPE_MPEG_VIDEO_PICTURE_TYPE")
  (values
    '("i" "GST_MPEG_VIDEO_PICTURE_TYPE_I")
    '("p" "GST_MPEG_VIDEO_PICTURE_TYPE_P")
    '("b" "GST_MPEG_VIDEO_PICTURE_TYPE_B")
    '("d" "GST_MPEG_VIDEO_PICTURE_TYPE_D")
  )
)

(define-enum MpegVideoPictureStructure
  (in-module "Gst")
  (c-name "GstMpegVideoPictureStructure")
  (gtype-id "GST_TYPE_MPEG_VIDEO_PICTURE_STRUCTURE")
  (values
    '("top-field" "GST_MPEG_VIDEO_PICTURE_STRUCTURE_TOP_FIELD")
    '("bottom-field" "GST_MPEG_VIDEO_PICTURE_STRUCTURE_BOTTOM_FIELD")
    '("frame" "GST_MPEG_VIDEO_PICTURE_STRUCTURE_FRAME")
  )
)

(define-flags GLAPI
  (in-module "Gst")
  (c-name "GstGLAPI")
  (gtype-id "GST_TYPE_GLAPI")
  (values
    '("none" "GST_GL_API_NONE")
    '("opengl" "GST_GL_API_OPENGL")
    '("opengl3" "GST_GL_API_OPENGL3")
    '("gles1" "GST_GL_API_GLES1")
    '("gles2" "GST_GL_API_GLES2")
    '("any" "GST_GL_API_ANY")
  )
)

(define-flags GLPlatform
  (in-module "Gst")
  (c-name "GstGLPlatform")
  (gtype-id "GST_TYPE_GL_PLATFORM")
  (values
    '("none" "GST_GL_PLATFORM_NONE")
    '("egl" "GST_GL_PLATFORM_EGL")
    '("glx" "GST_GL_PLATFORM_GLX")
    '("wgl" "GST_GL_PLATFORM_WGL")
    '("cgl" "GST_GL_PLATFORM_CGL")
    '("eagl" "GST_GL_PLATFORM_EAGL")
    '("any" "GST_GL_PLATFORM_ANY")
  )
)

(define-enum GLBaseMemoryError
  (in-module "Gst")
  (c-name "GstGLBaseMemoryError")
  (gtype-id "GST_TYPE_GL_BASE_MEMORY_ERROR")
  (values
    '("failed" "GST_GL_BASE_MEMORY_ERROR_FAILED")
    '("old-libs" "GST_GL_BASE_MEMORY_ERROR_OLD_LIBS")
    '("resource-unavailable" "GST_GL_BASE_MEMORY_ERROR_RESOURCE_UNAVAILABLE")
  )
)

(define-flags GLBaseMemoryTransfer
  (in-module "Gst")
  (c-name "GstGLBaseMemoryTransfer")
  (gtype-id "GST_TYPE_GL_BASE_MEMORY_TRANSFER")
  (values
    '("download" "GST_GL_BASE_MEMORY_TRANSFER_NEED_DOWNLOAD")
    '("upload" "GST_GL_BASE_MEMORY_TRANSFER_NEED_UPLOAD")
  )
)

(define-enum GLContextError
  (in-module "Gst")
  (c-name "GstGLContextError")
  (gtype-id "GST_TYPE_GL_CONTEXT_ERROR")
  (values
    '("failed" "GST_GL_CONTEXT_ERROR_FAILED")
    '("wrong-config" "GST_GL_CONTEXT_ERROR_WRONG_CONFIG")
    '("wrong-api" "GST_GL_CONTEXT_ERROR_WRONG_API")
    '("old-libs" "GST_GL_CONTEXT_ERROR_OLD_LIBS")
    '("create-context" "GST_GL_CONTEXT_ERROR_CREATE_CONTEXT")
    '("resource-unavailable" "GST_GL_CONTEXT_ERROR_RESOURCE_UNAVAILABLE")
  )
)

(define-flags GLDisplayType
  (in-module "Gst")
  (c-name "GstGLDisplayType")
  (gtype-id "GST_TYPE_GL_DISPLAY_TYPE")
  (values
    '("none" "GST_GL_DISPLAY_TYPE_NONE")
    '("x11" "GST_GL_DISPLAY_TYPE_X11")
    '("wayland" "GST_GL_DISPLAY_TYPE_WAYLAND")
    '("cocoa" "GST_GL_DISPLAY_TYPE_COCOA")
    '("win32" "GST_GL_DISPLAY_TYPE_WIN32")
    '("dispmanx" "GST_GL_DISPLAY_TYPE_DISPMANX")
    '("egl" "GST_GL_DISPLAY_TYPE_EGL")
    '("any" "GST_GL_DISPLAY_TYPE_ANY")
  )
)

(define-enum GLTextureTarget
  (in-module "Gst")
  (c-name "GstGLTextureTarget")
  (gtype-id "GST_TYPE_GL_TEXTURE_TARGET")
  (values
    '("none" "GST_GL_TEXTURE_TARGET_NONE")
    '("2d" "GST_GL_TEXTURE_TARGET_2D")
    '("rectangle" "GST_GL_TEXTURE_TARGET_RECTANGLE")
    '("external-oes" "GST_GL_TEXTURE_TARGET_EXTERNAL_OES")
  )
)

(define-enum GLQueryType
  (in-module "Gst")
  (c-name "GstGLQueryType")
  (gtype-id "GST_TYPE_GL_QUERY_TYPE")
  (values
    '("none" "GST_GL_QUERY_NONE")
    '("time-elapsed" "GST_GL_QUERY_TIME_ELAPSED")
    '("timestamp" "GST_GL_QUERY_TIMESTAMP")
  )
)

(define-enum GLSLError
  (in-module "Gst")
  (c-name "GstGLSLError")
  (gtype-id "GST_TYPE_GLSL_ERROR")
  (values
    '("compile" "GST_GLSL_ERROR_COMPILE")
    '("link" "GST_GLSL_ERROR_LINK")
    '("program" "GST_GLSL_ERROR_PROGRAM")
  )
)

(define-enum GLSLVersion
  (in-module "Gst")
  (c-name "GstGLSLVersion")
  (gtype-id "GST_TYPE_GLSL_VERSION")
  (values
    '("none" "GST_GLSL_VERSION_NONE")
    '("100" "GST_GLSL_VERSION_100")
    '("110" "GST_GLSL_VERSION_110")
    '("120" "GST_GLSL_VERSION_120")
    '("130" "GST_GLSL_VERSION_130")
    '("140" "GST_GLSL_VERSION_140")
    '("150" "GST_GLSL_VERSION_150")
    '("300" "GST_GLSL_VERSION_300")
    '("310" "GST_GLSL_VERSION_310")
    '("320" "GST_GLSL_VERSION_320")
    '("330" "GST_GLSL_VERSION_330")
    '("400" "GST_GLSL_VERSION_400")
    '("410" "GST_GLSL_VERSION_410")
    '("420" "GST_GLSL_VERSION_420")
    '("430" "GST_GLSL_VERSION_430")
    '("440" "GST_GLSL_VERSION_440")
    '("450" "GST_GLSL_VERSION_450")
    '("any" "GST_GLSL_VERSION_ANY")
  )
)

(define-flags GLSLProfile
  (in-module "Gst")
  (c-name "GstGLSLProfile")
  (gtype-id "GST_TYPE_GLSL_PROFILE")
  (values
    '("none" "GST_GLSL_PROFILE_NONE")
    '("es" "GST_GLSL_PROFILE_ES")
    '("core" "GST_GLSL_PROFILE_CORE")
    '("compatibility" "GST_GLSL_PROFILE_COMPATIBILITY")
    '("any" "GST_GLSL_PROFILE_ANY")
  )
)

(define-enum GLUploadReturn
  (in-module "Gst")
  (c-name "GstGLUploadReturn")
  (gtype-id "GST_TYPE_GL_UPLOAD_RETURN")
  (values
    '("done" "GST_GL_UPLOAD_DONE")
    '("error" "GST_GL_UPLOAD_ERROR")
    '("unsupported" "GST_GL_UPLOAD_UNSUPPORTED")
    '("unshared-gl-context" "GST_GL_UPLOAD_UNSHARED_GL_CONTEXT")
  )
)

(define-enum GLDisplayProjection
  (in-module "Gst")
  (c-name "GstGLDisplayProjection")
  (gtype-id "GST_TYPE_GL_DISPLAY_PROJECTION")
  (values
    '("ortho2d" "GST_GL_DISPLAY_PROJECTION_ORTHO2D")
    '("perspective" "GST_GL_DISPLAY_PROJECTION_PERSPECTIVE")
  )
)

(define-enum GLWindowError
  (in-module "Gst")
  (c-name "GstGLWindowError")
  (gtype-id "GST_TYPE_GL_WINDOW_ERROR")
  (values
    '("failed" "GST_GL_WINDOW_ERROR_FAILED")
    '("old-libs" "GST_GL_WINDOW_ERROR_OLD_LIBS")
    '("resource-unavailable" "GST_GL_WINDOW_ERROR_RESOURCE_UNAVAILABLE")
  )
)

(define-flags PhotographyNoiseReduction
  (in-module "Gst")
  (c-name "GstPhotographyNoiseReduction")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_NOISE_REDUCTION")
  (values
    '("bayer" "GST_PHOTOGRAPHY_NOISE_REDUCTION_BAYER")
    '("ycc" "GST_PHOTOGRAPHY_NOISE_REDUCTION_YCC")
    '("temporal=" "GST_PHOTOGRAPHY_NOISE_REDUCTION_TEMPORAL=")
    '("fixed" "GST_PHOTOGRAPHY_NOISE_REDUCTION_FIXED")
    '("extra" "GST_PHOTOGRAPHY_NOISE_REDUCTION_EXTRA")
  )
)

(define-enum PhotographyWhiteBalanceMode
  (in-module "Gst")
  (c-name "GstPhotographyWhiteBalanceMode")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_WHITE_BALANCE_MODE")
  (values
    '("auto" "GST_PHOTOGRAPHY_WB_MODE_AUTO")
    '("daylight" "GST_PHOTOGRAPHY_WB_MODE_DAYLIGHT")
    '("cloudy" "GST_PHOTOGRAPHY_WB_MODE_CLOUDY")
    '("sunset" "GST_PHOTOGRAPHY_WB_MODE_SUNSET")
    '("tungsten" "GST_PHOTOGRAPHY_WB_MODE_TUNGSTEN")
    '("fluorescent" "GST_PHOTOGRAPHY_WB_MODE_FLUORESCENT")
    '("manual" "GST_PHOTOGRAPHY_WB_MODE_MANUAL")
    '("warm-fluorescent" "GST_PHOTOGRAPHY_WB_MODE_WARM_FLUORESCENT")
    '("shade" "GST_PHOTOGRAPHY_WB_MODE_SHADE")
  )
)

(define-enum PhotographyColorToneMode
  (in-module "Gst")
  (c-name "GstPhotographyColorToneMode")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_COLOR_TONE_MODE")
  (values
    '("normal" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_NORMAL")
    '("sepia" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_SEPIA")
    '("negative" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_NEGATIVE")
    '("grayscale" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_GRAYSCALE")
    '("natural" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_NATURAL")
    '("vivid" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_VIVID")
    '("colorswap" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_COLORSWAP")
    '("solarize" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_SOLARIZE")
    '("out-of-focus" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_OUT_OF_FOCUS")
    '("sky-blue" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_SKY_BLUE")
    '("grass-green" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_GRASS_GREEN")
    '("skin-whiten" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_SKIN_WHITEN")
    '("posterize" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_POSTERIZE")
    '("whiteboard" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_WHITEBOARD")
    '("blackboard" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_BLACKBOARD")
    '("aqua" "GST_PHOTOGRAPHY_COLOR_TONE_MODE_AQUA")
  )
)

(define-enum PhotographySceneMode
  (in-module "Gst")
  (c-name "GstPhotographySceneMode")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_SCENE_MODE")
  (values
    '("manual" "GST_PHOTOGRAPHY_SCENE_MODE_MANUAL")
    '("closeup" "GST_PHOTOGRAPHY_SCENE_MODE_CLOSEUP")
    '("portrait" "GST_PHOTOGRAPHY_SCENE_MODE_PORTRAIT")
    '("landscape" "GST_PHOTOGRAPHY_SCENE_MODE_LANDSCAPE")
    '("sport" "GST_PHOTOGRAPHY_SCENE_MODE_SPORT")
    '("night" "GST_PHOTOGRAPHY_SCENE_MODE_NIGHT")
    '("auto" "GST_PHOTOGRAPHY_SCENE_MODE_AUTO")
    '("action" "GST_PHOTOGRAPHY_SCENE_MODE_ACTION")
    '("night-portrait" "GST_PHOTOGRAPHY_SCENE_MODE_NIGHT_PORTRAIT")
    '("theatre" "GST_PHOTOGRAPHY_SCENE_MODE_THEATRE")
    '("beach" "GST_PHOTOGRAPHY_SCENE_MODE_BEACH")
    '("snow" "GST_PHOTOGRAPHY_SCENE_MODE_SNOW")
    '("sunset" "GST_PHOTOGRAPHY_SCENE_MODE_SUNSET")
    '("steady-photo" "GST_PHOTOGRAPHY_SCENE_MODE_STEADY_PHOTO")
    '("fireworks" "GST_PHOTOGRAPHY_SCENE_MODE_FIREWORKS")
    '("party" "GST_PHOTOGRAPHY_SCENE_MODE_PARTY")
    '("candlelight" "GST_PHOTOGRAPHY_SCENE_MODE_CANDLELIGHT")
    '("barcode" "GST_PHOTOGRAPHY_SCENE_MODE_BARCODE")
  )
)

(define-enum PhotographyFlashMode
  (in-module "Gst")
  (c-name "GstPhotographyFlashMode")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_FLASH_MODE")
  (values
    '("auto" "GST_PHOTOGRAPHY_FLASH_MODE_AUTO")
    '("off" "GST_PHOTOGRAPHY_FLASH_MODE_OFF")
    '("on" "GST_PHOTOGRAPHY_FLASH_MODE_ON")
    '("fill-in" "GST_PHOTOGRAPHY_FLASH_MODE_FILL_IN")
    '("red-eye" "GST_PHOTOGRAPHY_FLASH_MODE_RED_EYE")
  )
)

(define-enum PhotographyFocusStatus
  (in-module "Gst")
  (c-name "GstPhotographyFocusStatus")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_FOCUS_STATUS")
  (values
    '("none" "GST_PHOTOGRAPHY_FOCUS_STATUS_NONE")
    '("running" "GST_PHOTOGRAPHY_FOCUS_STATUS_RUNNING")
    '("fail" "GST_PHOTOGRAPHY_FOCUS_STATUS_FAIL")
    '("success" "GST_PHOTOGRAPHY_FOCUS_STATUS_SUCCESS")
  )
)

(define-flags PhotographyCaps
  (in-module "Gst")
  (c-name "GstPhotographyCaps")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_CAPS")
  (values
    '("none" "GST_PHOTOGRAPHY_CAPS_NONE")
    '("ev-comp" "GST_PHOTOGRAPHY_CAPS_EV_COMP")
    '("iso-speed" "GST_PHOTOGRAPHY_CAPS_ISO_SPEED")
    '("wb-mode" "GST_PHOTOGRAPHY_CAPS_WB_MODE")
    '("tone" "GST_PHOTOGRAPHY_CAPS_TONE")
    '("scene" "GST_PHOTOGRAPHY_CAPS_SCENE")
    '("flash" "GST_PHOTOGRAPHY_CAPS_FLASH")
    '("zoom" "GST_PHOTOGRAPHY_CAPS_ZOOM")
    '("focus" "GST_PHOTOGRAPHY_CAPS_FOCUS")
    '("aperture" "GST_PHOTOGRAPHY_CAPS_APERTURE")
    '("exposure" "GST_PHOTOGRAPHY_CAPS_EXPOSURE")
    '("shake" "GST_PHOTOGRAPHY_CAPS_SHAKE")
    '("white-balance" "GST_PHOTOGRAPHY_CAPS_WHITE_BALANCE")
    '("noise-reduction" "GST_PHOTOGRAPHY_CAPS_NOISE_REDUCTION")
    '("flicker-reduction" "GST_PHOTOGRAPHY_CAPS_FLICKER_REDUCTION")
    '("all" "GST_PHOTOGRAPHY_CAPS_ALL")
  )
)

(define-enum PhotographyShakeRisk
  (in-module "Gst")
  (c-name "GstPhotographyShakeRisk")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_SHAKE_RISK")
  (values
    '("low" "GST_PHOTOGRAPHY_SHAKE_RISK_LOW")
    '("medium" "GST_PHOTOGRAPHY_SHAKE_RISK_MEDIUM")
    '("high" "GST_PHOTOGRAPHY_SHAKE_RISK_HIGH")
  )
)

(define-enum PhotographyFlickerReductionMode
  (in-module "Gst")
  (c-name "GstPhotographyFlickerReductionMode")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_FLICKER_REDUCTION_MODE")
  (values
    '("off" "GST_PHOTOGRAPHY_FLICKER_REDUCTION_OFF")
    '("50hz" "GST_PHOTOGRAPHY_FLICKER_REDUCTION_50HZ")
    '("60hz" "GST_PHOTOGRAPHY_FLICKER_REDUCTION_60HZ")
    '("auto" "GST_PHOTOGRAPHY_FLICKER_REDUCTION_AUTO")
  )
)

(define-enum PhotographyFocusMode
  (in-module "Gst")
  (c-name "GstPhotographyFocusMode")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_FOCUS_MODE")
  (values
    '("auto" "GST_PHOTOGRAPHY_FOCUS_MODE_AUTO")
    '("macro" "GST_PHOTOGRAPHY_FOCUS_MODE_MACRO")
    '("portrait" "GST_PHOTOGRAPHY_FOCUS_MODE_PORTRAIT")
    '("infinity" "GST_PHOTOGRAPHY_FOCUS_MODE_INFINITY")
    '("hyperfocal" "GST_PHOTOGRAPHY_FOCUS_MODE_HYPERFOCAL")
    '("extended" "GST_PHOTOGRAPHY_FOCUS_MODE_EXTENDED")
    '("continuous-normal" "GST_PHOTOGRAPHY_FOCUS_MODE_CONTINUOUS_NORMAL")
    '("continuous-extended" "GST_PHOTOGRAPHY_FOCUS_MODE_CONTINUOUS_EXTENDED")
    '("manual" "GST_PHOTOGRAPHY_FOCUS_MODE_MANUAL")
  )
)

(define-enum PhotographyExposureMode
  (in-module "Gst")
  (c-name "GstPhotographyExposureMode")
  (gtype-id "GST_TYPE_PHOTOGRAPHY_EXPOSURE_MODE")
  (values
    '("auto" "GST_PHOTOGRAPHY_EXPOSURE_MODE_AUTO")
    '("manual" "GST_PHOTOGRAPHY_EXPOSURE_MODE_MANUAL")
  )
)

(define-enum MpegtsSectionATSCTableID
  (in-module "Gst")
  (c-name "GstMpegtsSectionATSCTableID")
  (gtype-id "GST_TYPE_MPEGTS_SECTION_ATSC_TABLE_ID")
  (values
    '("master-guide" "GST_MTS_TABLE_ID_ATSC_MASTER_GUIDE")
    '("terrestrial-virtual-channel" "GST_MTS_TABLE_ID_ATSC_TERRESTRIAL_VIRTUAL_CHANNEL")
    '("cable-virtual-channel" "GST_MTS_TABLE_ID_ATSC_CABLE_VIRTUAL_CHANNEL")
    '("rating-region" "GST_MTS_TABLE_ID_ATSC_RATING_REGION")
    '("event-information" "GST_MTS_TABLE_ID_ATSC_EVENT_INFORMATION")
    '("channel-or-event-extended-text" "GST_MTS_TABLE_ID_ATSC_CHANNEL_OR_EVENT_EXTENDED_TEXT")
    '("system-time" "GST_MTS_TABLE_ID_ATSC_SYSTEM_TIME")
    '("data-event" "GST_MTS_TABLE_ID_ATSC_DATA_EVENT")
    '("data-service" "GST_MTS_TABLE_ID_ATSC_DATA_SERVICE")
    '("network-resource" "GST_MTS_TABLE_ID_ATSC_NETWORK_RESOURCE")
    '("long-term-service" "GST_MTS_TABLE_ID_ATSC_LONG_TERM_SERVICE")
    '("directed-channel-change" "GST_MTS_TABLE_ID_ATSC_DIRECTED_CHANNEL_CHANGE")
    '("directed-channel-change-section-code" "GST_MTS_TABLE_ID_ATSC_DIRECTED_CHANNEL_CHANGE_SECTION_CODE")
    '("aggregate-event-information" "GST_MTS_TABLE_ID_ATSC_AGGREGATE_EVENT_INFORMATION")
    '("aggregate-extended-text" "GST_MTS_TABLE_ID_ATSC_AGGREGATE_EXTENDED_TEXT")
    '("aggregate-data-event" "GST_MTS_TABLE_ID_ATSC_AGGREGATE_DATA_EVENT")
    '("satellite-virtual-channel" "GST_MTS_TABLE_ID_ATSC_SATELLITE_VIRTUAL_CHANNEL")
  )
)

(define-enum MpegtsAtscMGTTableType
  (in-module "Gst")
  (c-name "GstMpegtsAtscMGTTableType")
  (gtype-id "GST_TYPE_MPEGTS_ATSC_MGT_TABLE_TYPE")
  (values
    '("eit0" "GST_MPEGTS_ATSC_MGT_TABLE_TYPE_EIT0")
    '("eit127" "GST_MPEGTS_ATSC_MGT_TABLE_TYPE_EIT127")
    '("ett0" "GST_MPEGTS_ATSC_MGT_TABLE_TYPE_ETT0")
    '("ett127" "GST_MPEGTS_ATSC_MGT_TABLE_TYPE_ETT127")
  )
)

(define-enum MpegtsDVBDescriptorType
  (in-module "Gst")
  (c-name "GstMpegtsDVBDescriptorType")
  (gtype-id "GST_TYPE_MPEGTS_DVB_DESCRIPTOR_TYPE")
  (values
    '("network-name" "GST_MTS_DESC_DVB_NETWORK_NAME")
    '("service-list" "GST_MTS_DESC_DVB_SERVICE_LIST")
    '("stuffing" "GST_MTS_DESC_DVB_STUFFING")
    '("satellite-delivery-system" "GST_MTS_DESC_DVB_SATELLITE_DELIVERY_SYSTEM")
    '("cable-delivery-system" "GST_MTS_DESC_DVB_CABLE_DELIVERY_SYSTEM")
    '("vbi-data" "GST_MTS_DESC_DVB_VBI_DATA")
    '("vbi-teletext" "GST_MTS_DESC_DVB_VBI_TELETEXT")
    '("bouquet-name" "GST_MTS_DESC_DVB_BOUQUET_NAME")
    '("service" "GST_MTS_DESC_DVB_SERVICE")
    '("country-availability" "GST_MTS_DESC_DVB_COUNTRY_AVAILABILITY")
    '("linkage" "GST_MTS_DESC_DVB_LINKAGE")
    '("nvod-reference" "GST_MTS_DESC_DVB_NVOD_REFERENCE")
    '("time-shifted-service" "GST_MTS_DESC_DVB_TIME_SHIFTED_SERVICE")
    '("short-event" "GST_MTS_DESC_DVB_SHORT_EVENT")
    '("extended-event" "GST_MTS_DESC_DVB_EXTENDED_EVENT")
    '("time-shifted-event" "GST_MTS_DESC_DVB_TIME_SHIFTED_EVENT")
    '("component" "GST_MTS_DESC_DVB_COMPONENT")
    '("mosaic" "GST_MTS_DESC_DVB_MOSAIC")
    '("stream-identifier" "GST_MTS_DESC_DVB_STREAM_IDENTIFIER")
    '("ca-identifier" "GST_MTS_DESC_DVB_CA_IDENTIFIER")
    '("content" "GST_MTS_DESC_DVB_CONTENT")
    '("parental-rating" "GST_MTS_DESC_DVB_PARENTAL_RATING")
    '("teletext" "GST_MTS_DESC_DVB_TELETEXT")
    '("telephone" "GST_MTS_DESC_DVB_TELEPHONE")
    '("local-time-offset" "GST_MTS_DESC_DVB_LOCAL_TIME_OFFSET")
    '("subtitling" "GST_MTS_DESC_DVB_SUBTITLING")
    '("terrestrial-delivery-system" "GST_MTS_DESC_DVB_TERRESTRIAL_DELIVERY_SYSTEM")
    '("multilingual-network-name" "GST_MTS_DESC_DVB_MULTILINGUAL_NETWORK_NAME")
    '("multilingual-bouquet-name" "GST_MTS_DESC_DVB_MULTILINGUAL_BOUQUET_NAME")
    '("multilingual-service-name" "GST_MTS_DESC_DVB_MULTILINGUAL_SERVICE_NAME")
    '("multilingual-component" "GST_MTS_DESC_DVB_MULTILINGUAL_COMPONENT")
    '("private-data-specifier" "GST_MTS_DESC_DVB_PRIVATE_DATA_SPECIFIER")
    '("service-move" "GST_MTS_DESC_DVB_SERVICE_MOVE")
    '("short-smoothing-buffer" "GST_MTS_DESC_DVB_SHORT_SMOOTHING_BUFFER")
    '("frequency-list" "GST_MTS_DESC_DVB_FREQUENCY_LIST")
    '("partial-transport-stream" "GST_MTS_DESC_DVB_PARTIAL_TRANSPORT_STREAM")
    '("data-broadcast" "GST_MTS_DESC_DVB_DATA_BROADCAST")
    '("scrambling" "GST_MTS_DESC_DVB_SCRAMBLING")
    '("data-broadcast-id" "GST_MTS_DESC_DVB_DATA_BROADCAST_ID")
    '("transport-stream" "GST_MTS_DESC_DVB_TRANSPORT_STREAM")
    '("dsng" "GST_MTS_DESC_DVB_DSNG")
    '("pdc" "GST_MTS_DESC_DVB_PDC")
    '("ac3" "GST_MTS_DESC_DVB_AC3")
    '("ancillary-data" "GST_MTS_DESC_DVB_ANCILLARY_DATA")
    '("cell-list" "GST_MTS_DESC_DVB_CELL_LIST")
    '("cell-frequency-link" "GST_MTS_DESC_DVB_CELL_FREQUENCY_LINK")
    '("announcement-support" "GST_MTS_DESC_DVB_ANNOUNCEMENT_SUPPORT")
    '("application-signalling" "GST_MTS_DESC_DVB_APPLICATION_SIGNALLING")
    '("adaptation-field-data" "GST_MTS_DESC_DVB_ADAPTATION_FIELD_DATA")
    '("service-identifier" "GST_MTS_DESC_DVB_SERVICE_IDENTIFIER")
    '("service-availability" "GST_MTS_DESC_DVB_SERVICE_AVAILABILITY")
    '("default-authority" "GST_MTS_DESC_DVB_DEFAULT_AUTHORITY")
    '("related-content" "GST_MTS_DESC_DVB_RELATED_CONTENT")
    '("tva-id" "GST_MTS_DESC_DVB_TVA_ID")
    '("content-identifier" "GST_MTS_DESC_DVB_CONTENT_IDENTIFIER")
    '("timeslice-fec-identifier" "GST_MTS_DESC_DVB_TIMESLICE_FEC_IDENTIFIER")
    '("ecm-repetition-rate" "GST_MTS_DESC_DVB_ECM_REPETITION_RATE")
    '("s2-satellite-delivery-system" "GST_MTS_DESC_DVB_S2_SATELLITE_DELIVERY_SYSTEM")
    '("enhanced-ac3" "GST_MTS_DESC_DVB_ENHANCED_AC3")
    '("dts" "GST_MTS_DESC_DVB_DTS")
    '("aac" "GST_MTS_DESC_DVB_AAC")
    '("xait-location" "GST_MTS_DESC_DVB_XAIT_LOCATION")
    '("fta-content-management" "GST_MTS_DESC_DVB_FTA_CONTENT_MANAGEMENT")
    '("extension" "GST_MTS_DESC_DVB_EXTENSION")
  )
)

(define-enum MpegtsDVBExtendedDescriptorType
  (in-module "Gst")
  (c-name "GstMpegtsDVBExtendedDescriptorType")
  (gtype-id "GST_TYPE_MPEGTS_DVB_EXTENDED_DESCRIPTOR_TYPE")
  (values
    '("image-icon" "GST_MTS_DESC_EXT_DVB_IMAGE_ICON")
    '("cpcm-delivery-signalling" "GST_MTS_DESC_EXT_DVB_CPCM_DELIVERY_SIGNALLING")
    '("cp" "GST_MTS_DESC_EXT_DVB_CP")
    '("cp-identifier" "GST_MTS_DESC_EXT_DVB_CP_IDENTIFIER")
    '("t2-delivery-system" "GST_MTS_DESC_EXT_DVB_T2_DELIVERY_SYSTEM")
    '("sh-delivery-system" "GST_MTS_DESC_EXT_DVB_SH_DELIVERY_SYSTEM")
    '("supplementary-audio" "GST_MTS_DESC_EXT_DVB_SUPPLEMENTARY_AUDIO")
    '("network-change-notify" "GST_MTS_DESC_EXT_DVB_NETWORK_CHANGE_NOTIFY")
    '("message" "GST_MTS_DESC_EXT_DVB_MESSAGE")
    '("target-region" "GST_MTS_DESC_EXT_DVB_TARGET_REGION")
    '("target-region-name" "GST_MTS_DESC_EXT_DVB_TARGET_REGION_NAME")
    '("service-relocated" "GST_MTS_DESC_EXT_DVB_SERVICE_RELOCATED")
    '("xait-pid" "GST_MTS_DESC_EXT_DVB_XAIT_PID")
    '("c2-delivery-system" "GST_MTS_DESC_EXT_DVB_C2_DELIVERY_SYSTEM")
    '("dts-hd-audio-stream" "GST_MTS_DESC_EXT_DVB_DTS_HD_AUDIO_STREAM")
    '("dts-neutral" "GST_MTS_DESC_EXT_DVB_DTS_NEUTRAL")
    '("video-depth-range" "GST_MTS_DESC_EXT_DVB_VIDEO_DEPTH_RANGE")
    '("t2mi" "GST_MTS_DESC_EXT_DVB_T2MI")
    '("uri-linkage" "GST_MTS_DESC_EXT_DVB_URI_LINKAGE")
  )
)

(define-enum MpegtsModulationType
  (in-module "Gst")
  (c-name "GstMpegtsModulationType")
  (gtype-id "GST_TYPE_MPEGTS_MODULATION_TYPE")
  (values
    '("qpsk" "GST_MPEGTS_MODULATION_QPSK")
    '("qam-16" "GST_MPEGTS_MODULATION_QAM_16")
    '("qam-32" "GST_MPEGTS_MODULATION_QAM_32")
    '("qam-64" "GST_MPEGTS_MODULATION_QAM_64")
    '("qam-128" "GST_MPEGTS_MODULATION_QAM_128")
    '("qam-256" "GST_MPEGTS_MODULATION_QAM_256")
    '("qam-auto" "GST_MPEGTS_MODULATION_QAM_AUTO")
    '("vsb-8" "GST_MPEGTS_MODULATION_VSB_8")
    '("vsb-16" "GST_MPEGTS_MODULATION_VSB_16")
    '("psk-8" "GST_MPEGTS_MODULATION_PSK_8")
    '("apsk-16" "GST_MPEGTS_MODULATION_APSK_16")
    '("apsk-32" "GST_MPEGTS_MODULATION_APSK_32")
    '("dqpsk" "GST_MPEGTS_MODULATION_DQPSK")
    '("qam-4-nr-" "GST_MPEGTS_MODULATION_QAM_4_NR_")
    '("none" "GST_MPEGTS_MODULATION_NONE")
  )
)

(define-enum MpegtsDVBCodeRate
  (in-module "Gst")
  (c-name "GstMpegtsDVBCodeRate")
  (gtype-id "GST_TYPE_MPEGTS_DVB_CODE_RATE")
  (values
    '("none" "GST_MPEGTS_FEC_NONE")
    '("1-2" "GST_MPEGTS_FEC_1_2")
    '("2-3" "GST_MPEGTS_FEC_2_3")
    '("3-4" "GST_MPEGTS_FEC_3_4")
    '("4-5" "GST_MPEGTS_FEC_4_5")
    '("5-6" "GST_MPEGTS_FEC_5_6")
    '("6-7" "GST_MPEGTS_FEC_6_7")
    '("7-8" "GST_MPEGTS_FEC_7_8")
    '("8-9" "GST_MPEGTS_FEC_8_9")
    '("auto" "GST_MPEGTS_FEC_AUTO")
    '("3-5" "GST_MPEGTS_FEC_3_5")
    '("9-10" "GST_MPEGTS_FEC_9_10")
    '("2-5" "GST_MPEGTS_FEC_2_5")
  )
)

(define-enum MpegtsSatelliteRolloff
  (in-module "Gst")
  (c-name "GstMpegtsSatelliteRolloff")
  (gtype-id "GST_TYPE_MPEGTS_SATELLITE_ROLLOFF")
  (values
    '("35" "GST_MPEGTS_ROLLOFF_35")
    '("20" "GST_MPEGTS_ROLLOFF_20")
    '("25" "GST_MPEGTS_ROLLOFF_25")
    '("reserved" "GST_MPEGTS_ROLLOFF_RESERVED")
    '("auto" "GST_MPEGTS_ROLLOFF_AUTO")
  )
)

(define-enum MpegtsSatellitePolarizationType
  (in-module "Gst")
  (c-name "GstMpegtsSatellitePolarizationType")
  (gtype-id "GST_TYPE_MPEGTS_SATELLITE_POLARIZATION_TYPE")
  (values
    '("linear-horizontal" "GST_MPEGTS_POLARIZATION_LINEAR_HORIZONTAL")
    '("linear-vertical" "GST_MPEGTS_POLARIZATION_LINEAR_VERTICAL")
    '("circular-left" "GST_MPEGTS_POLARIZATION_CIRCULAR_LEFT")
    '("circular-right" "GST_MPEGTS_POLARIZATION_CIRCULAR_RIGHT")
  )
)

(define-enum MpegtsCableOuterFECScheme
  (in-module "Gst")
  (c-name "GstMpegtsCableOuterFECScheme")
  (gtype-id "GST_TYPE_MPEGTS_CABLE_OUTER_FEC_SCHEME")
  (values
    '("undefined" "GST_MPEGTS_CABLE_OUTER_FEC_UNDEFINED")
    '("none" "GST_MPEGTS_CABLE_OUTER_FEC_NONE")
    '("rs-204-188" "GST_MPEGTS_CABLE_OUTER_FEC_RS_204_188")
  )
)

(define-enum MpegtsDVBServiceType
  (in-module "Gst")
  (c-name "GstMpegtsDVBServiceType")
  (gtype-id "GST_TYPE_MPEGTS_DVB_SERVICE_TYPE")
  (values
    '("reserved-00" "GST_DVB_SERVICE_RESERVED_00")
    '("digital-television" "GST_DVB_SERVICE_DIGITAL_TELEVISION")
    '("digital-radio-sound" "GST_DVB_SERVICE_DIGITAL_RADIO_SOUND")
    '("teletext" "GST_DVB_SERVICE_TELETEXT")
    '("nvod-reference" "GST_DVB_SERVICE_NVOD_REFERENCE")
    '("nvod-time-shifted" "GST_DVB_SERVICE_NVOD_TIME_SHIFTED")
    '("mosaic" "GST_DVB_SERVICE_MOSAIC")
    '("fm-radio" "GST_DVB_SERVICE_FM_RADIO")
    '("dvb-srm" "GST_DVB_SERVICE_DVB_SRM")
    '("reserved-09" "GST_DVB_SERVICE_RESERVED_09")
    '("advanced-codec-digital-radio-sound" "GST_DVB_SERVICE_ADVANCED_CODEC_DIGITAL_RADIO_SOUND")
    '("advanced-codec-mosaic" "GST_DVB_SERVICE_ADVANCED_CODEC_MOSAIC")
    '("data-broadcast" "GST_DVB_SERVICE_DATA_BROADCAST")
    '("reserved-0d-common-interface" "GST_DVB_SERVICE_RESERVED_0D_COMMON_INTERFACE")
    '("rcs-map" "GST_DVB_SERVICE_RCS_MAP")
    '("rcs-fls" "GST_DVB_SERVICE_RCS_FLS")
    '("dvb-mhp" "GST_DVB_SERVICE_DVB_MHP")
    '("mpeg2-hd-digital-television" "GST_DVB_SERVICE_MPEG2_HD_DIGITAL_TELEVISION")
    '("advanced-codec-sd-digital-television" "GST_DVB_SERVICE_ADVANCED_CODEC_SD_DIGITAL_TELEVISION")
    '("advanced-codec-sd-nvod-time-shifted" "GST_DVB_SERVICE_ADVANCED_CODEC_SD_NVOD_TIME_SHIFTED")
    '("advanced-codec-sd-nvod-reference" "GST_DVB_SERVICE_ADVANCED_CODEC_SD_NVOD_REFERENCE")
    '("advanced-codec-hd-digital-television" "GST_DVB_SERVICE_ADVANCED_CODEC_HD_DIGITAL_TELEVISION")
    '("advanced-codec-hd-nvod-time-shifted" "GST_DVB_SERVICE_ADVANCED_CODEC_HD_NVOD_TIME_SHIFTED")
    '("advanced-codec-hd-nvod-reference" "GST_DVB_SERVICE_ADVANCED_CODEC_HD_NVOD_REFERENCE")
    '("advanced-codec-stereo-hd-digital-television" "GST_DVB_SERVICE_ADVANCED_CODEC_STEREO_HD_DIGITAL_TELEVISION")
    '("advanced-codec-stereo-hd-nvod-time-shifted" "GST_DVB_SERVICE_ADVANCED_CODEC_STEREO_HD_NVOD_TIME_SHIFTED")
    '("advanced-codec-stereo-hd-nvod-reference" "GST_DVB_SERVICE_ADVANCED_CODEC_STEREO_HD_NVOD_REFERENCE")
    '("reserved-ff" "GST_DVB_SERVICE_RESERVED_FF")
  )
)

(define-enum MpegtsDVBLinkageType
  (in-module "Gst")
  (c-name "GstMpegtsDVBLinkageType")
  (gtype-id "GST_TYPE_MPEGTS_DVB_LINKAGE_TYPE")
  (values
    '("reserved-00" "GST_MPEGTS_DVB_LINKAGE_RESERVED_00")
    '("information" "GST_MPEGTS_DVB_LINKAGE_INFORMATION")
    '("epg" "GST_MPEGTS_DVB_LINKAGE_EPG")
    '("ca-replacement" "GST_MPEGTS_DVB_LINKAGE_CA_REPLACEMENT")
    '("ts-containing-complete-si" "GST_MPEGTS_DVB_LINKAGE_TS_CONTAINING_COMPLETE_SI")
    '("service-replacement" "GST_MPEGTS_DVB_LINKAGE_SERVICE_REPLACEMENT")
    '("data-broadcast" "GST_MPEGTS_DVB_LINKAGE_DATA_BROADCAST")
    '("rcs-map" "GST_MPEGTS_DVB_LINKAGE_RCS_MAP")
    '("mobile-hand-over" "GST_MPEGTS_DVB_LINKAGE_MOBILE_HAND_OVER")
    '("system-software-update" "GST_MPEGTS_DVB_LINKAGE_SYSTEM_SOFTWARE_UPDATE")
    '("ts-containing-ssu" "GST_MPEGTS_DVB_LINKAGE_TS_CONTAINING_SSU")
    '("ip-mac-notification" "GST_MPEGTS_DVB_LINKAGE_IP_MAC_NOTIFICATION")
    '("ts-containing-int" "GST_MPEGTS_DVB_LINKAGE_TS_CONTAINING_INT")
    '("event" "GST_MPEGTS_DVB_LINKAGE_EVENT")
    '("extended-event" "GST_MPEGTS_DVB_LINKAGE_EXTENDED_EVENT")
  )
)

(define-enum MpegtsDVBLinkageHandOverType
  (in-module "Gst")
  (c-name "GstMpegtsDVBLinkageHandOverType")
  (gtype-id "GST_TYPE_MPEGTS_DVB_LINKAGE_HAND_OVER_TYPE")
  (values
    '("reserved" "GST_MPEGTS_DVB_LINKAGE_HAND_OVER_RESERVED")
    '("identical" "GST_MPEGTS_DVB_LINKAGE_HAND_OVER_IDENTICAL")
    '("local-variation" "GST_MPEGTS_DVB_LINKAGE_HAND_OVER_LOCAL_VARIATION")
    '("associated" "GST_MPEGTS_DVB_LINKAGE_HAND_OVER_ASSOCIATED")
  )
)

(define-enum MpegtsComponentStreamContent
  (in-module "Gst")
  (c-name "GstMpegtsComponentStreamContent")
  (gtype-id "GST_TYPE_MPEGTS_COMPONENT_STREAM_CONTENT")
  (values
    '("mpeg2-video" "GST_MPEGTS_STREAM_CONTENT_MPEG2_VIDEO")
    '("mpeg1-layer2-audio" "GST_MPEGTS_STREAM_CONTENT_MPEG1_LAYER2_AUDIO")
    '("teletext-or-subtitle" "GST_MPEGTS_STREAM_CONTENT_TELETEXT_OR_SUBTITLE")
    '("ac-3" "GST_MPEGTS_STREAM_CONTENT_AC_3")
    '("avc" "GST_MPEGTS_STREAM_CONTENT_AVC")
    '("aac" "GST_MPEGTS_STREAM_CONTENT_AAC")
    '("dts" "GST_MPEGTS_STREAM_CONTENT_DTS")
    '("srm-cpcm" "GST_MPEGTS_STREAM_CONTENT_SRM_CPCM")
  )
)

(define-enum MpegtsContentNibbleHi
  (in-module "Gst")
  (c-name "GstMpegtsContentNibbleHi")
  (gtype-id "GST_TYPE_MPEGTS_CONTENT_NIBBLE_HI")
  (values
    '("movie-drama" "GST_MPEGTS_CONTENT_MOVIE_DRAMA")
    '("news-current-affairs" "GST_MPEGTS_CONTENT_NEWS_CURRENT_AFFAIRS")
    '("show-game-show" "GST_MPEGTS_CONTENT_SHOW_GAME_SHOW")
    '("sports" "GST_MPEGTS_CONTENT_SPORTS")
    '("children-youth-program" "GST_MPEGTS_CONTENT_CHILDREN_YOUTH_PROGRAM")
    '("music-ballet-dance" "GST_MPEGTS_CONTENT_MUSIC_BALLET_DANCE")
    '("arts-culture" "GST_MPEGTS_CONTENT_ARTS_CULTURE")
    '("social-political-economics" "GST_MPEGTS_CONTENT_SOCIAL_POLITICAL_ECONOMICS")
    '("education-science-factual" "GST_MPEGTS_CONTENT_EDUCATION_SCIENCE_FACTUAL")
    '("leisure-hobbies" "GST_MPEGTS_CONTENT_LEISURE_HOBBIES")
    '("special-characteristics" "GST_MPEGTS_CONTENT_SPECIAL_CHARACTERISTICS")
  )
)

(define-enum MpegtsDVBTeletextType
  (in-module "Gst")
  (c-name "GstMpegtsDVBTeletextType")
  (gtype-id "GST_TYPE_MPEGTS_DVB_TELETEXT_TYPE")
  (values
    '("initial-page" "INITIAL_PAGE")
    '("subtitle-page" "SUBTITLE_PAGE")
    '("additional-info-page" "ADDITIONAL_INFO_PAGE")
    '("programme-schedule-page" "PROGRAMME_SCHEDULE_PAGE")
    '("hearing-impaired-page" "HEARING_IMPAIRED_PAGE")
  )
)

(define-enum MpegtsTerrestrialTransmissionMode
  (in-module "Gst")
  (c-name "GstMpegtsTerrestrialTransmissionMode")
  (gtype-id "GST_TYPE_MPEGTS_TERRESTRIAL_TRANSMISSION_MODE")
  (values
    '("2k" "GST_MPEGTS_TRANSMISSION_MODE_2K")
    '("8k" "GST_MPEGTS_TRANSMISSION_MODE_8K")
    '("auto" "GST_MPEGTS_TRANSMISSION_MODE_AUTO")
    '("4k" "GST_MPEGTS_TRANSMISSION_MODE_4K")
    '("1k" "GST_MPEGTS_TRANSMISSION_MODE_1K")
    '("16k" "GST_MPEGTS_TRANSMISSION_MODE_16K")
    '("32k" "GST_MPEGTS_TRANSMISSION_MODE_32K")
    '("c1" "GST_MPEGTS_TRANSMISSION_MODE_C1")
    '("c3780" "GST_MPEGTS_TRANSMISSION_MODE_C3780")
  )
)

(define-enum MpegtsTerrestrialGuardInterval
  (in-module "Gst")
  (c-name "GstMpegtsTerrestrialGuardInterval")
  (gtype-id "GST_TYPE_MPEGTS_TERRESTRIAL_GUARD_INTERVAL")
  (values
    '("1-32" "GST_MPEGTS_GUARD_INTERVAL_1_32")
    '("1-16" "GST_MPEGTS_GUARD_INTERVAL_1_16")
    '("1-8" "GST_MPEGTS_GUARD_INTERVAL_1_8")
    '("1-4" "GST_MPEGTS_GUARD_INTERVAL_1_4")
    '("auto" "GST_MPEGTS_GUARD_INTERVAL_AUTO")
    '("1-128" "GST_MPEGTS_GUARD_INTERVAL_1_128")
    '("19-128" "GST_MPEGTS_GUARD_INTERVAL_19_128")
    '("19-256" "GST_MPEGTS_GUARD_INTERVAL_19_256")
    '("pn420" "GST_MPEGTS_GUARD_INTERVAL_PN420")
    '("pn595" "GST_MPEGTS_GUARD_INTERVAL_PN595")
    '("pn945" "GST_MPEGTS_GUARD_INTERVAL_PN945")
  )
)

(define-enum MpegtsTerrestrialHierarchy
  (in-module "Gst")
  (c-name "GstMpegtsTerrestrialHierarchy")
  (gtype-id "GST_TYPE_MPEGTS_TERRESTRIAL_HIERARCHY")
  (values
    '("none" "GST_MPEGTS_HIERARCHY_NONE")
    '("1" "GST_MPEGTS_HIERARCHY_1")
    '("2" "GST_MPEGTS_HIERARCHY_2")
    '("4" "GST_MPEGTS_HIERARCHY_4")
    '("auto" "GST_MPEGTS_HIERARCHY_AUTO")
  )
)

(define-enum MpegtsDVBScramblingModeType
  (in-module "Gst")
  (c-name "GstMpegtsDVBScramblingModeType")
  (gtype-id "GST_TYPE_MPEGTS_DVB_SCRAMBLING_MODE_TYPE")
  (values
    '("reserved" "GST_MPEGTS_DVB_SCRAMBLING_MODE_RESERVED")
    '("csa1" "GST_MPEGTS_DVB_SCRAMBLING_MODE_CSA1")
    '("csa2" "GST_MPEGTS_DVB_SCRAMBLING_MODE_CSA2")
    '("csa3-standard" "GST_MPEGTS_DVB_SCRAMBLING_MODE_CSA3_STANDARD")
    '("csa3-minimal-enhanced" "GST_MPEGTS_DVB_SCRAMBLING_MODE_CSA3_MINIMAL_ENHANCED")
    '("csa3-full-enhanced" "GST_MPEGTS_DVB_SCRAMBLING_MODE_CSA3_FULL_ENHANCED")
    '("cissa" "GST_MPEGTS_DVB_SCRAMBLING_MODE_CISSA")
    '("atis-0" "GST_MPEGTS_DVB_SCRAMBLING_MODE_ATIS_0")
    '("atis-f" "GST_MPEGTS_DVB_SCRAMBLING_MODE_ATIS_F")
  )
)

(define-enum MpegtsSectionDVBTableID
  (in-module "Gst")
  (c-name "GstMpegtsSectionDVBTableID")
  (gtype-id "GST_TYPE_MPEGTS_SECTION_DVB_TABLE_ID")
  (values
    '("network-information-actual-network" "GST_MTS_TABLE_ID_NETWORK_INFORMATION_ACTUAL_NETWORK")
    '("network-information-other-network" "GST_MTS_TABLE_ID_NETWORK_INFORMATION_OTHER_NETWORK")
    '("service-description-actual-ts" "GST_MTS_TABLE_ID_SERVICE_DESCRIPTION_ACTUAL_TS")
    '("service-description-other-ts" "GST_MTS_TABLE_ID_SERVICE_DESCRIPTION_OTHER_TS")
    '("bouquet-association" "GST_MTS_TABLE_ID_BOUQUET_ASSOCIATION")
    '("event-information-actual-ts-present" "GST_MTS_TABLE_ID_EVENT_INFORMATION_ACTUAL_TS_PRESENT")
    '("event-information-other-ts-present" "GST_MTS_TABLE_ID_EVENT_INFORMATION_OTHER_TS_PRESENT")
    '("event-information-actual-ts-schedule-1" "GST_MTS_TABLE_ID_EVENT_INFORMATION_ACTUAL_TS_SCHEDULE_1")
    '("event-information-actual-ts-schedule-n" "GST_MTS_TABLE_ID_EVENT_INFORMATION_ACTUAL_TS_SCHEDULE_N")
    '("event-information-other-ts-schedule-1" "GST_MTS_TABLE_ID_EVENT_INFORMATION_OTHER_TS_SCHEDULE_1")
    '("event-information-other-ts-schedule-n" "GST_MTS_TABLE_ID_EVENT_INFORMATION_OTHER_TS_SCHEDULE_N")
    '("time-date" "GST_MTS_TABLE_ID_TIME_DATE")
    '("running-status" "GST_MTS_TABLE_ID_RUNNING_STATUS")
    '("stuffing" "GST_MTS_TABLE_ID_STUFFING")
    '("time-offset" "GST_MTS_TABLE_ID_TIME_OFFSET")
    '("application-information-table" "GST_MTS_TABLE_ID_APPLICATION_INFORMATION_TABLE")
    '("container" "GST_MTS_TABLE_ID_CONTAINER")
    '("related-content" "GST_MTS_TABLE_ID_RELATED_CONTENT")
    '("content-identifier" "GST_MTS_TABLE_ID_CONTENT_IDENTIFIER")
    '("mpe-fec" "GST_MTS_TABLE_ID_MPE_FEC")
    '("resolution-notification" "GST_MTS_TABLE_ID_RESOLUTION_NOTIFICATION")
    '("mpe-ifec" "GST_MTS_TABLE_ID_MPE_IFEC")
    '("discontinuity-information" "GST_MTS_TABLE_ID_DISCONTINUITY_INFORMATION")
    '("selection-information" "GST_MTS_TABLE_ID_SELECTION_INFORMATION")
    '("ca-message-ecm-0" "GST_MTS_TABLE_ID_CA_MESSAGE_ECM_0")
    '("ca-message-ecm-1" "GST_MTS_TABLE_ID_CA_MESSAGE_ECM_1")
    '("ca-message-system-private-1" "GST_MTS_TABLE_ID_CA_MESSAGE_SYSTEM_PRIVATE_1")
    '("ca-message-system-private-n" "GST_MTS_TABLE_ID_CA_MESSAGE_SYSTEM_PRIVATE_N")
    '("sct" "GST_MTS_TABLE_ID_SCT")
    '("fct" "GST_MTS_TABLE_ID_FCT")
    '("tct" "GST_MTS_TABLE_ID_TCT")
    '("spt" "GST_MTS_TABLE_ID_SPT")
    '("cmt" "GST_MTS_TABLE_ID_CMT")
    '("tbtp" "GST_MTS_TABLE_ID_TBTP")
    '("pcr-packet-payload" "GST_MTS_TABLE_ID_PCR_PACKET_PAYLOAD")
    '("transmission-mode-support-payload" "GST_MTS_TABLE_ID_TRANSMISSION_MODE_SUPPORT_PAYLOAD")
    '("tim" "GST_MTS_TABLE_ID_TIM")
    '("ll-fec-parity-data-table" "GST_MTS_TABLE_ID_LL_FEC_PARITY_DATA_TABLE")
  )
)

(define-enum MpegtsRunningStatus
  (in-module "Gst")
  (c-name "GstMpegtsRunningStatus")
  (gtype-id "GST_TYPE_MPEGTS_RUNNING_STATUS")
  (values
    '("undefined" "GST_MPEGTS_RUNNING_STATUS_UNDEFINED")
    '("not-running" "GST_MPEGTS_RUNNING_STATUS_NOT_RUNNING")
    '("starts-in-few-seconds" "GST_MPEGTS_RUNNING_STATUS_STARTS_IN_FEW_SECONDS")
    '("pausing" "GST_MPEGTS_RUNNING_STATUS_PAUSING")
    '("running" "GST_MPEGTS_RUNNING_STATUS_RUNNING")
    '("off-air" "GST_MPEGTS_RUNNING_STATUS_OFF_AIR")
  )
)

(define-enum MpegtsDescriptorType
  (in-module "Gst")
  (c-name "GstMpegtsDescriptorType")
  (gtype-id "GST_TYPE_MPEGTS_DESCRIPTOR_TYPE")
  (values
    '("reserved-00" "GST_MTS_DESC_RESERVED_00")
    '("reserved-01" "GST_MTS_DESC_RESERVED_01")
    '("video-stream" "GST_MTS_DESC_VIDEO_STREAM")
    '("audio-stream" "GST_MTS_DESC_AUDIO_STREAM")
    '("hierarchy" "GST_MTS_DESC_HIERARCHY")
    '("registration" "GST_MTS_DESC_REGISTRATION")
    '("data-stream-alignment" "GST_MTS_DESC_DATA_STREAM_ALIGNMENT")
    '("target-background-grid" "GST_MTS_DESC_TARGET_BACKGROUND_GRID")
    '("video-window" "GST_MTS_DESC_VIDEO_WINDOW")
    '("ca" "GST_MTS_DESC_CA")
    '("iso-639-language" "GST_MTS_DESC_ISO_639_LANGUAGE")
    '("system-clock" "GST_MTS_DESC_SYSTEM_CLOCK")
    '("multiplex-buffer-utilisation" "GST_MTS_DESC_MULTIPLEX_BUFFER_UTILISATION")
    '("copyright" "GST_MTS_DESC_COPYRIGHT")
    '("maximum-bitrate" "GST_MTS_DESC_MAXIMUM_BITRATE")
    '("private-data-indicator" "GST_MTS_DESC_PRIVATE_DATA_INDICATOR")
    '("smoothing-buffer" "GST_MTS_DESC_SMOOTHING_BUFFER")
    '("std" "GST_MTS_DESC_STD")
    '("ibp" "GST_MTS_DESC_IBP")
    '("dsmcc-carousel-identifier" "GST_MTS_DESC_DSMCC_CAROUSEL_IDENTIFIER")
    '("dsmcc-association-tag" "GST_MTS_DESC_DSMCC_ASSOCIATION_TAG")
    '("dsmcc-deferred-association-tag" "GST_MTS_DESC_DSMCC_DEFERRED_ASSOCIATION_TAG")
    '("dsmcc-npt-reference" "GST_MTS_DESC_DSMCC_NPT_REFERENCE")
    '("dsmcc-npt-endpoint" "GST_MTS_DESC_DSMCC_NPT_ENDPOINT")
    '("dsmcc-stream-mode" "GST_MTS_DESC_DSMCC_STREAM_MODE")
    '("dsmcc-stream-event" "GST_MTS_DESC_DSMCC_STREAM_EVENT")
    '("mpeg4-video" "GST_MTS_DESC_MPEG4_VIDEO")
    '("mpeg4-audio" "GST_MTS_DESC_MPEG4_AUDIO")
    '("iod" "GST_MTS_DESC_IOD")
    '("sl" "GST_MTS_DESC_SL")
    '("fmc" "GST_MTS_DESC_FMC")
    '("external-es-id" "GST_MTS_DESC_EXTERNAL_ES_ID")
    '("mux-code" "GST_MTS_DESC_MUX_CODE")
    '("fmx-buffer-size" "GST_MTS_DESC_FMX_BUFFER_SIZE")
    '("multiplex-buffer" "GST_MTS_DESC_MULTIPLEX_BUFFER")
    '("content-labeling" "GST_MTS_DESC_CONTENT_LABELING")
    '("metadata-pointer" "GST_MTS_DESC_METADATA_POINTER")
    '("metadata" "GST_MTS_DESC_METADATA")
    '("metadata-std" "GST_MTS_DESC_METADATA_STD")
    '("avc-video" "GST_MTS_DESC_AVC_VIDEO")
    '("ipmp" "GST_MTS_DESC_IPMP")
    '("avc-timing-and-hrd" "GST_MTS_DESC_AVC_TIMING_AND_HRD")
    '("mpeg2-aac-audio" "GST_MTS_DESC_MPEG2_AAC_AUDIO")
    '("flex-mux-timing" "GST_MTS_DESC_FLEX_MUX_TIMING")
    '("mpeg4-text" "GST_MTS_DESC_MPEG4_TEXT")
    '("mpeg4-audio-extension" "GST_MTS_DESC_MPEG4_AUDIO_EXTENSION")
    '("auxiliary-video-stream" "GST_MTS_DESC_AUXILIARY_VIDEO_STREAM")
    '("svc-extension" "GST_MTS_DESC_SVC_EXTENSION")
    '("mvc-extension" "GST_MTS_DESC_MVC_EXTENSION")
    '("j2k-video" "GST_MTS_DESC_J2K_VIDEO")
    '("mvc-operation-point" "GST_MTS_DESC_MVC_OPERATION_POINT")
    '("mpeg2-stereoscopic-video-format" "GST_MTS_DESC_MPEG2_STEREOSCOPIC_VIDEO_FORMAT")
    '("stereoscopic-program-info" "GST_MTS_DESC_STEREOSCOPIC_PROGRAM_INFO")
    '("stereoscopic-video-info" "GST_MTS_DESC_STEREOSCOPIC_VIDEO_INFO")
  )
)

(define-enum MpegtsMiscDescriptorType
  (in-module "Gst")
  (c-name "GstMpegtsMiscDescriptorType")
  (gtype-id "GST_TYPE_MPEGTS_MISC_DESCRIPTOR_TYPE")
  (values
    '("ac3-audio-stream" "GST_MTS_DESC_AC3_AUDIO_STREAM")
    '("dtg-logical-channel" "GST_MTS_DESC_DTG_LOGICAL_CHANNEL")
  )
)

(define-enum MpegtsATSCDescriptorType
  (in-module "Gst")
  (c-name "GstMpegtsATSCDescriptorType")
  (gtype-id "GST_TYPE_MPEGTS_ATSC_DESCRIPTOR_TYPE")
  (values
    '("stuffing" "GST_MTS_DESC_ATSC_STUFFING")
    '("ac3" "GST_MTS_DESC_ATSC_AC3")
    '("caption-service" "GST_MTS_DESC_ATSC_CAPTION_SERVICE")
    '("content-advisory" "GST_MTS_DESC_ATSC_CONTENT_ADVISORY")
    '("extended-channel-name" "GST_MTS_DESC_ATSC_EXTENDED_CHANNEL_NAME")
    '("service-location" "GST_MTS_DESC_ATSC_SERVICE_LOCATION")
    '("time-shifted-service" "GST_MTS_DESC_ATSC_TIME_SHIFTED_SERVICE")
    '("component-name" "GST_MTS_DESC_ATSC_COMPONENT_NAME")
    '("dcc-departing-request" "GST_MTS_DESC_ATSC_DCC_DEPARTING_REQUEST")
    '("dcc-arriving-request" "GST_MTS_DESC_ATSC_DCC_ARRIVING_REQUEST")
    '("redistribution-control" "GST_MTS_DESC_ATSC_REDISTRIBUTION_CONTROL")
    '("genre" "GST_MTS_DESC_ATSC_GENRE")
    '("private-information" "GST_MTS_DESC_ATSC_PRIVATE_INFORMATION")
    '("enhanced-signaling" "GST_MTS_DESC_ATSC_ENHANCED_SIGNALING")
    '("data-service" "GST_MTS_DESC_ATSC_DATA_SERVICE")
    '("pid-count" "GST_MTS_DESC_ATSC_PID_COUNT")
    '("download-descriptor" "GST_MTS_DESC_ATSC_DOWNLOAD_DESCRIPTOR")
    '("multiprotocol-encapsulation" "GST_MTS_DESC_ATSC_MULTIPROTOCOL_ENCAPSULATION")
    '("module-link" "GST_MTS_DESC_ATSC_MODULE_LINK")
    '("crc32" "GST_MTS_DESC_ATSC_CRC32")
    '("group-link" "GST_MTS_DESC_ATSC_GROUP_LINK")
  )
)

(define-enum MpegtsISDBDescriptorType
  (in-module "Gst")
  (c-name "GstMpegtsISDBDescriptorType")
  (gtype-id "GST_TYPE_MPEGTS_ISDB_DESCRIPTOR_TYPE")
  (values
    '("hierarchical-transmission" "GST_MTS_DESC_ISDB_HIERARCHICAL_TRANSMISSION")
    '("digital-copy-control" "GST_MTS_DESC_ISDB_DIGITAL_COPY_CONTROL")
    '("network-identification" "GST_MTS_DESC_ISDB_NETWORK_IDENTIFICATION")
    '("partial-ts-time" "GST_MTS_DESC_ISDB_PARTIAL_TS_TIME")
    '("audio-component" "GST_MTS_DESC_ISDB_AUDIO_COMPONENT")
    '("hyperlink" "GST_MTS_DESC_ISDB_HYPERLINK")
    '("target-region" "GST_MTS_DESC_ISDB_TARGET_REGION")
    '("data-content" "GST_MTS_DESC_ISDB_DATA_CONTENT")
    '("video-decode-control" "GST_MTS_DESC_ISDB_VIDEO_DECODE_CONTROL")
    '("download-content" "GST_MTS_DESC_ISDB_DOWNLOAD_CONTENT")
    '("ca-emm-ts" "GST_MTS_DESC_ISDB_CA_EMM_TS")
    '("ca-contract-information" "GST_MTS_DESC_ISDB_CA_CONTRACT_INFORMATION")
    '("ca-service" "GST_MTS_DESC_ISDB_CA_SERVICE")
    '("ts-information" "GST_MTS_DESC_ISDB_TS_INFORMATION")
    '("extended-broadcaster" "GST_MTS_DESC_ISDB_EXTENDED_BROADCASTER")
    '("logo-transmission" "GST_MTS_DESC_ISDB_LOGO_TRANSMISSION")
    '("basic-local-event" "GST_MTS_DESC_ISDB_BASIC_LOCAL_EVENT")
    '("reference" "GST_MTS_DESC_ISDB_REFERENCE")
    '("node-relation" "GST_MTS_DESC_ISDB_NODE_RELATION")
    '("short-node-information" "GST_MTS_DESC_ISDB_SHORT_NODE_INFORMATION")
    '("stc-reference" "GST_MTS_DESC_ISDB_STC_REFERENCE")
    '("series" "GST_MTS_DESC_ISDB_SERIES")
    '("event-group" "GST_MTS_DESC_ISDB_EVENT_GROUP")
    '("si-parameter" "GST_MTS_DESC_ISDB_SI_PARAMETER")
    '("broadcaster-name" "GST_MTS_DESC_ISDB_BROADCASTER_NAME")
    '("component-group" "GST_MTS_DESC_ISDB_COMPONENT_GROUP")
    '("si-prime-ts" "GST_MTS_DESC_ISDB_SI_PRIME_TS")
    '("board-information" "GST_MTS_DESC_ISDB_BOARD_INFORMATION")
    '("ldt-linkage" "GST_MTS_DESC_ISDB_LDT_LINKAGE")
    '("connected-transmission" "GST_MTS_DESC_ISDB_CONNECTED_TRANSMISSION")
    '("content-availability" "GST_MTS_DESC_ISDB_CONTENT_AVAILABILITY")
    '("service-group" "GST_MTS_DESC_ISDB_SERVICE_GROUP")
  )
)

(define-enum MpegtsSectionType
  (in-module "Gst")
  (c-name "GstMpegtsSectionType")
  (gtype-id "GST_TYPE_MPEGTS_SECTION_TYPE")
  (values
    '("unknown" "GST_MPEGTS_SECTION_UNKNOWN")
    '("pat" "GST_MPEGTS_SECTION_PAT")
    '("pmt" "GST_MPEGTS_SECTION_PMT")
    '("cat" "GST_MPEGTS_SECTION_CAT")
    '("tsdt" "GST_MPEGTS_SECTION_TSDT")
    '("eit" "GST_MPEGTS_SECTION_EIT")
    '("nit" "GST_MPEGTS_SECTION_NIT")
    '("bat" "GST_MPEGTS_SECTION_BAT")
    '("sdt" "GST_MPEGTS_SECTION_SDT")
    '("tdt" "GST_MPEGTS_SECTION_TDT")
    '("tot" "GST_MPEGTS_SECTION_TOT")
    '("atsc-tvct" "GST_MPEGTS_SECTION_ATSC_TVCT")
    '("atsc-cvct" "GST_MPEGTS_SECTION_ATSC_CVCT")
    '("atsc-mgt" "GST_MPEGTS_SECTION_ATSC_MGT")
    '("atsc-ett" "GST_MPEGTS_SECTION_ATSC_ETT")
    '("atsc-eit" "GST_MPEGTS_SECTION_ATSC_EIT")
    '("atsc-stt" "GST_MPEGTS_SECTION_ATSC_STT")
  )
)

(define-enum MpegtsSectionTableID
  (in-module "Gst")
  (c-name "GstMpegtsSectionTableID")
  (gtype-id "GST_TYPE_MPEGTS_SECTION_TABLE_ID")
  (values
    '("program-association" "GST_MTS_TABLE_ID_PROGRAM_ASSOCIATION")
    '("conditional-access" "GST_MTS_TABLE_ID_CONDITIONAL_ACCESS")
    '("ts-program-map" "GST_MTS_TABLE_ID_TS_PROGRAM_MAP")
    '("ts-description" "GST_MTS_TABLE_ID_TS_DESCRIPTION")
    '("14496-scene-description" "GST_MTS_TABLE_ID_14496_SCENE_DESCRIPTION")
    '("14496-objet-descriptor" "GST_MTS_TABLE_ID_14496_OBJET_DESCRIPTOR")
    '("metadata" "GST_MTS_TABLE_ID_METADATA")
    '("ipmp-control-information" "GST_MTS_TABLE_ID_IPMP_CONTROL_INFORMATION")
    '("dsm-cc-multiproto-encapsulated-data" "GST_MTS_TABLE_ID_DSM_CC_MULTIPROTO_ENCAPSULATED_DATA")
    '("dsm-cc-u-n-messages" "GST_MTS_TABLE_ID_DSM_CC_U_N_MESSAGES")
    '("dsm-cc-download-data-messages" "GST_MTS_TABLE_ID_DSM_CC_DOWNLOAD_DATA_MESSAGES")
    '("dsm-cc-stream-descriptors" "GST_MTS_TABLE_ID_DSM_CC_STREAM_DESCRIPTORS")
    '("dsm-cc-private-data" "GST_MTS_TABLE_ID_DSM_CC_PRIVATE_DATA")
    '("dsm-cc-addressable-sections" "GST_MTS_TABLE_ID_DSM_CC_ADDRESSABLE_SECTIONS")
    '("unset" "GST_MTS_TABLE_ID_UNSET")
  )
)

(define-enum MpegtsStreamType
  (in-module "Gst")
  (c-name "GstMpegtsStreamType")
  (gtype-id "GST_TYPE_MPEGTS_STREAM_TYPE")
  (values
    '("reserved-00" "GST_MPEGTS_STREAM_TYPE_RESERVED_00")
    '("video-mpeg1" "GST_MPEGTS_STREAM_TYPE_VIDEO_MPEG1")
    '("video-mpeg2" "GST_MPEGTS_STREAM_TYPE_VIDEO_MPEG2")
    '("audio-mpeg1" "GST_MPEGTS_STREAM_TYPE_AUDIO_MPEG1")
    '("audio-mpeg2" "GST_MPEGTS_STREAM_TYPE_AUDIO_MPEG2")
    '("private-sections" "GST_MPEGTS_STREAM_TYPE_PRIVATE_SECTIONS")
    '("private-pes-packets" "GST_MPEGTS_STREAM_TYPE_PRIVATE_PES_PACKETS")
    '("mheg" "GST_MPEGTS_STREAM_TYPE_MHEG")
    '("dsm-cc" "GST_MPEGTS_STREAM_TYPE_DSM_CC")
    '("h-222-1" "GST_MPEGTS_STREAM_TYPE_H_222_1")
    '("dsmcc-a" "GST_MPEGTS_STREAM_TYPE_DSMCC_A")
    '("dsmcc-b" "GST_MPEGTS_STREAM_TYPE_DSMCC_B")
    '("dsmcc-c" "GST_MPEGTS_STREAM_TYPE_DSMCC_C")
    '("dsmcc-d" "GST_MPEGTS_STREAM_TYPE_DSMCC_D")
    '("auxiliary" "GST_MPEGTS_STREAM_TYPE_AUXILIARY")
    '("audio-aac-adts" "GST_MPEGTS_STREAM_TYPE_AUDIO_AAC_ADTS")
    '("video-mpeg4" "GST_MPEGTS_STREAM_TYPE_VIDEO_MPEG4")
    '("audio-aac-latm" "GST_MPEGTS_STREAM_TYPE_AUDIO_AAC_LATM")
    '("sl-flexmux-pes-packets" "GST_MPEGTS_STREAM_TYPE_SL_FLEXMUX_PES_PACKETS")
    '("sl-flexmux-sections" "GST_MPEGTS_STREAM_TYPE_SL_FLEXMUX_SECTIONS")
    '("synchronized-download" "GST_MPEGTS_STREAM_TYPE_SYNCHRONIZED_DOWNLOAD")
    '("metadata-pes-packets" "GST_MPEGTS_STREAM_TYPE_METADATA_PES_PACKETS")
    '("metadata-sections" "GST_MPEGTS_STREAM_TYPE_METADATA_SECTIONS")
    '("metadata-data-carousel" "GST_MPEGTS_STREAM_TYPE_METADATA_DATA_CAROUSEL")
    '("metadata-object-carousel" "GST_MPEGTS_STREAM_TYPE_METADATA_OBJECT_CAROUSEL")
    '("metadata-synchronized-download" "GST_MPEGTS_STREAM_TYPE_METADATA_SYNCHRONIZED_DOWNLOAD")
    '("mpeg2-ipmp" "GST_MPEGTS_STREAM_TYPE_MPEG2_IPMP")
    '("video-h264" "GST_MPEGTS_STREAM_TYPE_VIDEO_H264")
    '("audio-aac-clean" "GST_MPEGTS_STREAM_TYPE_AUDIO_AAC_CLEAN")
    '("mpeg4-timed-text" "GST_MPEGTS_STREAM_TYPE_MPEG4_TIMED_TEXT")
    '("video-rvc" "GST_MPEGTS_STREAM_TYPE_VIDEO_RVC")
    '("video-h264-svc-sub-bitstream" "GST_MPEGTS_STREAM_TYPE_VIDEO_H264_SVC_SUB_BITSTREAM")
    '("video-h264-mvc-sub-bitstream" "GST_MPEGTS_STREAM_TYPE_VIDEO_H264_MVC_SUB_BITSTREAM")
    '("video-jp2k" "GST_MPEGTS_STREAM_TYPE_VIDEO_JP2K")
    '("video-mpeg2-stereo-additional-view" "GST_MPEGTS_STREAM_TYPE_VIDEO_MPEG2_STEREO_ADDITIONAL_VIEW")
    '("video-h264-stereo-additional-view" "GST_MPEGTS_STREAM_TYPE_VIDEO_H264_STEREO_ADDITIONAL_VIEW")
    '("video-hevc" "GST_MPEGTS_STREAM_TYPE_VIDEO_HEVC")
    '("ipmp-stream" "GST_MPEGTS_STREAM_TYPE_IPMP_STREAM")
  )
)

(define-enum MpegtsScteStreamType
  (in-module "Gst")
  (c-name "GstMpegtsScteStreamType")
  (gtype-id "GST_TYPE_MPEGTS_SCTE_STREAM_TYPE")
  (values
    '("subtitling" "GST_MPEGTS_STREAM_TYPE_SCTE_SUBTITLING")
    '("isoch-data" "GST_MPEGTS_STREAM_TYPE_SCTE_ISOCH_DATA")
    '("dst-nrt" "GST_MPEGTS_STREAM_TYPE_SCTE_DST_NRT")
    '("dsmcc-dcb" "GST_MPEGTS_STREAM_TYPE_SCTE_DSMCC_DCB")
    '("signaling" "GST_MPEGTS_STREAM_TYPE_SCTE_SIGNALING")
    '("sync-data" "GST_MPEGTS_STREAM_TYPE_SCTE_SYNC_DATA")
    '("async-data" "GST_MPEGTS_STREAM_TYPE_SCTE_ASYNC_DATA")
  )
)

(define-enum MpegtsSectionSCTETableID
  (in-module "Gst")
  (c-name "GstMpegtsSectionSCTETableID")
  (gtype-id "GST_TYPE_MPEGTS_SECTION_SCTE_TABLE_ID")
  (values
    '("eas" "GST_MTS_TABLE_ID_SCTE_EAS")
    '("ebif" "GST_MTS_TABLE_ID_SCTE_EBIF")
    '("reserved" "GST_MTS_TABLE_ID_SCTE_RESERVED")
    '("eiss" "GST_MTS_TABLE_ID_SCTE_EISS")
    '("dii" "GST_MTS_TABLE_ID_SCTE_DII")
    '("ddb" "GST_MTS_TABLE_ID_SCTE_DDB")
    '("splice" "GST_MTS_TABLE_ID_SCTE_SPLICE")
  )
)


;; From gstadaptivedemux.h

(define-function gst_adaptive_demux_get_type
  (c-name "gst_adaptive_demux_get_type")
  (return-type "GType")
)

(define-method set_stream_struct_size
  (of-object "GstAdaptiveDemux")
  (c-name "gst_adaptive_demux_set_stream_struct_size")
  (return-type "none")
  (parameters
    '("gsize" "struct_size")
  )
)

(define-method stream_new
  (of-object "GstAdaptiveDemux")
  (c-name "gst_adaptive_demux_stream_new")
  (return-type "GstAdaptiveDemuxStream*")
  (parameters
    '("GstPad*" "pad")
  )
)

(define-method find_stream_for_pad
  (of-object "GstAdaptiveDemux")
  (c-name "gst_adaptive_demux_find_stream_for_pad")
  (return-type "GstAdaptiveDemuxStream*")
  (parameters
    '("GstPad*" "pad")
  )
)

(define-method set_caps
  (of-object "GstAdaptiveDemuxStream")
  (c-name "gst_adaptive_demux_stream_set_caps")
  (return-type "none")
  (parameters
    '("GstCaps*" "caps")
  )
)

(define-method set_tags
  (of-object "GstAdaptiveDemuxStream")
  (c-name "gst_adaptive_demux_stream_set_tags")
  (return-type "none")
  (parameters
    '("GstTagList*" "tags")
  )
)

(define-method clear
  (of-object "GstAdaptiveDemuxStreamFragment")
  (c-name "gst_adaptive_demux_stream_fragment_clear")
  (return-type "none")
)

(define-method push_buffer
  (of-object "GstAdaptiveDemuxStream")
  (c-name "gst_adaptive_demux_stream_push_buffer")
  (return-type "GstFlowReturn")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-method stream_advance_fragment
  (of-object "GstAdaptiveDemux")
  (c-name "gst_adaptive_demux_stream_advance_fragment")
  (return-type "GstFlowReturn")
  (parameters
    '("GstAdaptiveDemuxStream*" "stream")
    '("GstClockTime" "duration")
  )
)

(define-method queue_event
  (of-object "GstAdaptiveDemuxStream")
  (c-name "gst_adaptive_demux_stream_queue_event")
  (return-type "none")
  (parameters
    '("GstEvent*" "event")
  )
)



;; From gstaggregator.h

(define-function gst_aggregator_pad_get_type
  (c-name "gst_aggregator_pad_get_type")
  (return-type "GType")
)

(define-method steal_buffer
  (of-object "GstAggregatorPad")
  (c-name "gst_aggregator_pad_steal_buffer")
  (return-type "GstBuffer*")
)

(define-method get_buffer
  (of-object "GstAggregatorPad")
  (c-name "gst_aggregator_pad_get_buffer")
  (return-type "GstBuffer*")
)

(define-method drop_buffer
  (of-object "GstAggregatorPad")
  (c-name "gst_aggregator_pad_drop_buffer")
  (return-type "gboolean")
)

(define-method is_eos
  (of-object "GstAggregatorPad")
  (c-name "gst_aggregator_pad_is_eos")
  (return-type "gboolean")
)

(define-method finish_buffer
  (of-object "GstAggregator")
  (c-name "gst_aggregator_finish_buffer")
  (return-type "GstFlowReturn")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-method set_src_caps
  (of-object "GstAggregator")
  (c-name "gst_aggregator_set_src_caps")
  (return-type "none")
  (parameters
    '("GstCaps*" "caps")
  )
)

(define-method set_latency
  (of-object "GstAggregator")
  (c-name "gst_aggregator_set_latency")
  (return-type "none")
  (parameters
    '("GstClockTime" "min_latency")
    '("GstClockTime" "max_latency")
  )
)

(define-function gst_aggregator_get_type
  (c-name "gst_aggregator_get_type")
  (return-type "GType")
)

(define-method iterate_sinkpads
  (of-object "GstAggregator")
  (c-name "gst_aggregator_iterate_sinkpads")
  (return-type "gboolean")
  (parameters
    '("GstAggregatorPadForeachFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method get_latency
  (of-object "GstAggregator")
  (c-name "gst_aggregator_get_latency")
  (return-type "GstClockTime")
)



;; From gstbasecamerasrc.h

(define-function gst_base_camera_src_get_type
  (c-name "gst_base_camera_src_get_type")
  (return-type "GType")
)

(define-method set_mode
  (of-object "GstBaseCameraSrc")
  (c-name "gst_base_camera_src_set_mode")
  (return-type "gboolean")
  (parameters
    '("GstCameraBinMode" "mode")
  )
)

(define-method setup_zoom
  (of-object "GstBaseCameraSrc")
  (c-name "gst_base_camera_src_setup_zoom")
  (return-type "none")
)

(define-method setup_preview
  (of-object "GstBaseCameraSrc")
  (c-name "gst_base_camera_src_setup_preview")
  (return-type "none")
  (parameters
    '("GstCaps*" "preview_caps")
  )
)

(define-method finish_capture
  (of-object "GstBaseCameraSrc")
  (c-name "gst_base_camera_src_finish_capture")
  (return-type "none")
)

(define-method post_preview
  (of-object "GstBaseCameraSrc")
  (c-name "gst_base_camera_src_post_preview")
  (return-type "none")
  (parameters
    '("GstSample*" "sample")
  )
)



;; From gstcamerabin-enum.h

(define-function gst_camerabin_mode_get_type
  (c-name "gst_camerabin_mode_get_type")
  (return-type "GType")
)



;; From gstcamerabinpreview.h

(define-function gst_camerabin_create_preview_pipeline
  (c-name "gst_camerabin_create_preview_pipeline")
  (return-type "GstCameraBinPreviewPipelineData*")
  (parameters
    '("GstElement*" "element")
    '("GstElement*" "filter")
  )
)

(define-function gst_camerabin_destroy_preview_pipeline
  (c-name "gst_camerabin_destroy_preview_pipeline")
  (return-type "none")
  (parameters
    '("GstCameraBinPreviewPipelineData*" "preview")
  )
)

(define-function gst_camerabin_preview_pipeline_post
  (c-name "gst_camerabin_preview_pipeline_post")
  (return-type "gboolean")
  (parameters
    '("GstCameraBinPreviewPipelineData*" "preview")
    '("GstSample*" "sample")
  )
)

(define-function gst_camerabin_preview_set_caps
  (c-name "gst_camerabin_preview_set_caps")
  (return-type "none")
  (parameters
    '("GstCameraBinPreviewPipelineData*" "preview")
    '("GstCaps*" "caps")
  )
)

(define-function gst_camerabin_preview_set_filter
  (c-name "gst_camerabin_preview_set_filter")
  (return-type "gboolean")
  (parameters
    '("GstCameraBinPreviewPipelineData*" "preview")
    '("GstElement*" "filter")
  )
)



;; From dboolhuff.h

(define-function vp8dx_decode_bool
  (c-name "vp8dx_decode_bool")
  (return-type "int")
  (parameters
    '("BOOL_DECODER*" "br")
    '("int" "probability")
  )
)

(define-function vp8_decode_value
  (c-name "vp8_decode_value")
  (return-type "int")
  (parameters
    '("BOOL_DECODER*" "br")
    '("int" "bits")
  )
)

(define-function vp8dx_bool_error
  (c-name "vp8dx_bool_error")
  (return-type "int")
  (parameters
    '("BOOL_DECODER*" "br")
  )
)



;; From gsth264parser.h

(define-function gst_h264_nal_parser_new
  (c-name "gst_h264_nal_parser_new")
  (is-constructor-of "GstH264NalParser")
  (return-type "GstH264NalParser*")
)

(define-function gst_h264_parser_identify_nalu
  (c-name "gst_h264_parser_identify_nalu")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("const-guint8*" "data")
    '("guint" "offset")
    '("gsize" "size")
    '("GstH264NalUnit*" "nalu")
  )
)

(define-function gst_h264_parser_identify_nalu_unchecked
  (c-name "gst_h264_parser_identify_nalu_unchecked")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("const-guint8*" "data")
    '("guint" "offset")
    '("gsize" "size")
    '("GstH264NalUnit*" "nalu")
  )
)

(define-function gst_h264_parser_identify_nalu_avc
  (c-name "gst_h264_parser_identify_nalu_avc")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("const-guint8*" "data")
    '("guint" "offset")
    '("gsize" "size")
    '("guint8" "nal_length_size")
    '("GstH264NalUnit*" "nalu")
  )
)

(define-function gst_h264_parser_parse_nal
  (c-name "gst_h264_parser_parse_nal")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("GstH264NalUnit*" "nalu")
  )
)

(define-function gst_h264_parser_parse_slice_hdr
  (c-name "gst_h264_parser_parse_slice_hdr")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("GstH264NalUnit*" "nalu")
    '("GstH264SliceHdr*" "slice")
    '("gboolean" "parse_pred_weight_table")
    '("gboolean" "parse_dec_ref_pic_marking")
  )
)

(define-function gst_h264_parser_parse_subset_sps
  (c-name "gst_h264_parser_parse_subset_sps")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("GstH264NalUnit*" "nalu")
    '("GstH264SPS*" "sps")
    '("gboolean" "parse_vui_params")
  )
)

(define-function gst_h264_parser_parse_sps
  (c-name "gst_h264_parser_parse_sps")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("GstH264NalUnit*" "nalu")
    '("GstH264SPS*" "sps")
    '("gboolean" "parse_vui_params")
  )
)

(define-function gst_h264_parser_parse_pps
  (c-name "gst_h264_parser_parse_pps")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("GstH264NalUnit*" "nalu")
    '("GstH264PPS*" "pps")
  )
)

(define-function gst_h264_parser_parse_sei
  (c-name "gst_h264_parser_parse_sei")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("GstH264NalUnit*" "nalu")
    '("GArray**" "messages")
  )
)

(define-method free
  (of-object "GstH264NalParser")
  (c-name "gst_h264_nal_parser_free")
  (return-type "none")
)

(define-function gst_h264_parse_subset_sps
  (c-name "gst_h264_parse_subset_sps")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalUnit*" "nalu")
    '("GstH264SPS*" "sps")
    '("gboolean" "parse_vui_params")
  )
)

(define-function gst_h264_parse_sps
  (c-name "gst_h264_parse_sps")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalUnit*" "nalu")
    '("GstH264SPS*" "sps")
    '("gboolean" "parse_vui_params")
  )
)

(define-function gst_h264_parse_pps
  (c-name "gst_h264_parse_pps")
  (return-type "GstH264ParserResult")
  (parameters
    '("GstH264NalParser*" "nalparser")
    '("GstH264NalUnit*" "nalu")
    '("GstH264PPS*" "pps")
  )
)

(define-method clear
  (of-object "GstH264SPS")
  (c-name "gst_h264_sps_clear")
  (return-type "none")
)

(define-method clear
  (of-object "GstH264PPS")
  (c-name "gst_h264_pps_clear")
  (return-type "none")
)

(define-function gst_h264_quant_matrix_8x8_get_zigzag_from_raster
  (c-name "gst_h264_quant_matrix_8x8_get_zigzag_from_raster")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[64]")
    '("const-guint8" "quant[64]")
  )
)

(define-function gst_h264_quant_matrix_8x8_get_raster_from_zigzag
  (c-name "gst_h264_quant_matrix_8x8_get_raster_from_zigzag")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[64]")
    '("const-guint8" "quant[64]")
  )
)

(define-function gst_h264_quant_matrix_4x4_get_zigzag_from_raster
  (c-name "gst_h264_quant_matrix_4x4_get_zigzag_from_raster")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[16]")
    '("const-guint8" "quant[16]")
  )
)

(define-function gst_h264_quant_matrix_4x4_get_raster_from_zigzag
  (c-name "gst_h264_quant_matrix_4x4_get_raster_from_zigzag")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[16]")
    '("const-guint8" "quant[16]")
  )
)

(define-function gst_h264_video_calculate_framerate
  (c-name "gst_h264_video_calculate_framerate")
  (return-type "none")
  (parameters
    '("const-GstH264SPS*" "sps")
    '("guint" "field_pic_flag")
    '("guint" "pic_struct")
    '("gint*" "fps_num")
    '("gint*" "fps_den")
  )
)



;; From gsth265parser.h

(define-function gst_h265_parser_new
  (c-name "gst_h265_parser_new")
  (is-constructor-of "GstH265Parser")
  (return-type "GstH265Parser*")
)

(define-method identify_nalu
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_identify_nalu")
  (return-type "GstH265ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("guint" "offset")
    '("gsize" "size")
    '("GstH265NalUnit*" "nalu")
  )
)

(define-method identify_nalu_unchecked
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_identify_nalu_unchecked")
  (return-type "GstH265ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("guint" "offset")
    '("gsize" "size")
    '("GstH265NalUnit*" "nalu")
  )
)

(define-method identify_nalu_hevc
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_identify_nalu_hevc")
  (return-type "GstH265ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("guint" "offset")
    '("gsize" "size")
    '("guint8" "nal_length_size")
    '("GstH265NalUnit*" "nalu")
  )
)

(define-method parse_nal
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_parse_nal")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265NalUnit*" "nalu")
  )
)

(define-method parse_slice_hdr
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_parse_slice_hdr")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265NalUnit*" "nalu")
    '("GstH265SliceHdr*" "slice")
  )
)

(define-method parse_vps
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_parse_vps")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265NalUnit*" "nalu")
    '("GstH265VPS*" "vps")
  )
)

(define-method parse_sps
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_parse_sps")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265NalUnit*" "nalu")
    '("GstH265SPS*" "sps")
    '("gboolean" "parse_vui_params")
  )
)

(define-method parse_pps
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_parse_pps")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265NalUnit*" "nalu")
    '("GstH265PPS*" "pps")
  )
)

(define-method parse_sei
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_parse_sei")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265NalUnit*" "nalu")
    '("GArray**" "messages")
  )
)

(define-method free
  (of-object "GstH265Parser")
  (c-name "gst_h265_parser_free")
  (return-type "none")
)

(define-function gst_h265_parse_vps
  (c-name "gst_h265_parse_vps")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265NalUnit*" "nalu")
    '("GstH265VPS*" "vps")
  )
)

(define-function gst_h265_parse_sps
  (c-name "gst_h265_parse_sps")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265Parser*" "parser")
    '("GstH265NalUnit*" "nalu")
    '("GstH265SPS*" "sps")
    '("gboolean" "parse_vui_params")
  )
)

(define-function gst_h265_parse_pps
  (c-name "gst_h265_parse_pps")
  (return-type "GstH265ParserResult")
  (parameters
    '("GstH265Parser*" "parser")
    '("GstH265NalUnit*" "nalu")
    '("GstH265PPS*" "pps")
  )
)

(define-method copy
  (of-object "GstH265SliceHdr")
  (c-name "gst_h265_slice_hdr_copy")
  (return-type "gboolean")
  (parameters
    '("const-GstH265SliceHdr*" "src_slice")
  )
)

(define-method free
  (of-object "GstH265SliceHdr")
  (c-name "gst_h265_slice_hdr_free")
  (return-type "none")
)

(define-function gst_h265_sei_copy
  (c-name "gst_h265_sei_copy")
  (return-type "gboolean")
  (parameters
    '("GstH265SEIMessage*" "dest_sei")
    '("const-GstH265SEIMessage*" "src_sei")
  )
)

(define-function gst_h265_sei_free
  (c-name "gst_h265_sei_free")
  (return-type "none")
  (parameters
    '("GstH265SEIMessage*" "sei")
  )
)

(define-function gst_h265_quant_matrix_4x4_get_zigzag_from_raster
  (c-name "gst_h265_quant_matrix_4x4_get_zigzag_from_raster")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[16]")
    '("const-guint8" "quant[16]")
  )
)

(define-function gst_h265_quant_matrix_4x4_get_raster_from_zigzag
  (c-name "gst_h265_quant_matrix_4x4_get_raster_from_zigzag")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[16]")
    '("const-guint8" "quant[16]")
  )
)

(define-function gst_h265_quant_matrix_8x8_get_zigzag_from_raster
  (c-name "gst_h265_quant_matrix_8x8_get_zigzag_from_raster")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[64]")
    '("const-guint8" "quant[64]")
  )
)

(define-function gst_h265_quant_matrix_8x8_get_raster_from_zigzag
  (c-name "gst_h265_quant_matrix_8x8_get_raster_from_zigzag")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[64]")
    '("const-guint8" "quant[64]")
  )
)

(define-function gst_h265_quant_matrix_4x4_get_uprightdiagonal_from_raster
  (c-name "gst_h265_quant_matrix_4x4_get_uprightdiagonal_from_raster")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[16]")
    '("const-guint8" "quant[16]")
  )
)

(define-function gst_h265_quant_matrix_4x4_get_raster_from_uprightdiagonal
  (c-name "gst_h265_quant_matrix_4x4_get_raster_from_uprightdiagonal")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[16]")
    '("const-guint8" "quant[16]")
  )
)

(define-function gst_h265_quant_matrix_8x8_get_uprightdiagonal_from_raster
  (c-name "gst_h265_quant_matrix_8x8_get_uprightdiagonal_from_raster")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[64]")
    '("const-guint8" "quant[64]")
  )
)

(define-function gst_h265_quant_matrix_8x8_get_raster_from_uprightdiagonal
  (c-name "gst_h265_quant_matrix_8x8_get_raster_from_uprightdiagonal")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[64]")
    '("const-guint8" "quant[64]")
  )
)



;; From gstjpegparser.h

(define-function gst_jpeg_parse
  (c-name "gst_jpeg_parse")
  (return-type "gboolean")
  (parameters
    '("GstJpegSegment*" "seg")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-method parse_frame_header
  (of-object "GstJpegSegment")
  (c-name "gst_jpeg_segment_parse_frame_header")
  (return-type "gboolean")
  (parameters
    '("GstJpegFrameHdr*" "frame_hdr")
  )
)

(define-method parse_scan_header
  (of-object "GstJpegSegment")
  (c-name "gst_jpeg_segment_parse_scan_header")
  (return-type "gboolean")
  (parameters
    '("GstJpegScanHdr*" "scan_hdr")
  )
)

(define-method parse_huffman_table
  (of-object "GstJpegSegment")
  (c-name "gst_jpeg_segment_parse_huffman_table")
  (return-type "gboolean")
  (parameters
    '("GstJpegHuffmanTables*" "huff_tables")
  )
)

(define-method parse_restart_interval
  (of-object "GstJpegSegment")
  (c-name "gst_jpeg_segment_parse_restart_interval")
  (return-type "gboolean")
  (parameters
    '("guint*" "interval")
  )
)

(define-method parse_quantization_table
  (of-object "GstJpegSegment")
  (c-name "gst_jpeg_segment_parse_quantization_table")
  (return-type "gboolean")
  (parameters
    '("GstJpegQuantTables*" "quant_tables")
  )
)

(define-function gst_jpeg_get_default_quantization_tables
  (c-name "gst_jpeg_get_default_quantization_tables")
  (return-type "none")
  (parameters
    '("GstJpegQuantTables*" "quant_tables")
  )
)

(define-function gst_jpeg_get_default_huffman_tables
  (c-name "gst_jpeg_get_default_huffman_tables")
  (return-type "none")
  (parameters
    '("GstJpegHuffmanTables*" "huff_tables")
  )
)



;; From gstmpeg4parser.h

(define-function gst_h263_parse
  (c-name "gst_h263_parse")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4Packet*" "packet")
    '("const-guint8*" "data")
    '("guint" "offset")
    '("gsize" "size")
  )
)

(define-function gst_mpeg4_parse
  (c-name "gst_mpeg4_parse")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4Packet*" "packet")
    '("gboolean" "skip_user_data")
    '("GstMpeg4VideoObjectPlane*" "vop")
    '("const-guint8*" "data")
    '("guint" "offset")
    '("gsize" "size")
  )
)

(define-function gst_mpeg4_parse_video_object_plane
  (c-name "gst_mpeg4_parse_video_object_plane")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4VideoObjectPlane*" "vop")
    '("GstMpeg4SpriteTrajectory*" "sprite_trajectory")
    '("GstMpeg4VideoObjectLayer*" "vol")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)

(define-function gst_mpeg4_parse_group_of_vop
  (c-name "gst_mpeg4_parse_group_of_vop")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4GroupOfVOP*" "gov")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)

(define-function gst_mpeg4_parse_video_object_layer
  (c-name "gst_mpeg4_parse_video_object_layer")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4VideoObjectLayer*" "vol")
    '("GstMpeg4VisualObject*" "vo")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)

(define-function gst_mpeg4_parse_visual_object
  (c-name "gst_mpeg4_parse_visual_object")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4VisualObject*" "vo")
    '("GstMpeg4VideoSignalType*" "signal_type")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)

(define-function gst_mpeg4_parse_visual_object_sequence
  (c-name "gst_mpeg4_parse_visual_object_sequence")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4VisualObjectSequence*" "vos")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)

(define-function gst_mpeg4_parse_video_plane_short_header
  (c-name "gst_mpeg4_parse_video_plane_short_header")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4VideoPlaneShortHdr*" "shorthdr")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)

(define-function gst_mpeg4_parse_video_packet_header
  (c-name "gst_mpeg4_parse_video_packet_header")
  (return-type "GstMpeg4ParseResult")
  (parameters
    '("GstMpeg4VideoPacketHdr*" "videopackethdr")
    '("GstMpeg4VideoObjectLayer*" "vol")
    '("GstMpeg4VideoObjectPlane*" "vop")
    '("GstMpeg4SpriteTrajectory*" "sprite_trajectory")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)



;; From gstmpegvideometa.h

(define-function gst_mpeg_video_meta_api_get_type
  (c-name "gst_mpeg_video_meta_api_get_type")
  (return-type "GType")
)

(define-function gst_mpeg_video_meta_get_info
  (c-name "gst_mpeg_video_meta_get_info")
  (return-type "const-GstMetaInfo*")
)

(define-method add_mpeg_video_meta
  (of-object "GstBuffer")
  (c-name "gst_buffer_add_mpeg_video_meta")
  (return-type "GstMpegVideoMeta*")
  (parameters
    '("const-GstMpegVideoSequenceHdr*" "seq_hdr")
    '("const-GstMpegVideoSequenceExt*" "seq_ext")
    '("const-GstMpegVideoSequenceDisplayExt*" "disp_ext")
    '("const-GstMpegVideoPictureHdr*" "pic_hdr")
    '("const-GstMpegVideoPictureExt*" "pic_ext")
    '("const-GstMpegVideoQuantMatrixExt*" "quant_ext")
  )
)



;; From gstmpegvideoparser.h

(define-function gst_mpeg_video_parse
  (c-name "gst_mpeg_video_parse")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoPacket*" "packet")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-method parse_sequence_header
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_sequence_header")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSequenceHdr*" "seqhdr")
  )
)

(define-method parse_sequence_extension
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_sequence_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSequenceExt*" "seqext")
  )
)

(define-method parse_sequence_display_extension
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_sequence_display_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSequenceDisplayExt*" "seqdisplayext")
  )
)

(define-method parse_sequence_scalable_extension
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_sequence_scalable_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSequenceScalableExt*" "seqscaleext")
  )
)

(define-method parse_picture_header
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_picture_header")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoPictureHdr*" "pichdr")
  )
)

(define-method parse_picture_extension
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_picture_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoPictureExt*" "picext")
  )
)

(define-method parse_gop
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_gop")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoGop*" "gop")
  )
)

(define-method parse_slice_header
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_slice_header")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSliceHdr*" "slice_hdr")
    '("GstMpegVideoSequenceHdr*" "seq_hdr")
    '("GstMpegVideoSequenceScalableExt*" "seqscaleext")
  )
)

(define-method parse_quant_matrix_extension
  (of-object "GstMpegVideoPacket")
  (c-name "gst_mpeg_video_packet_parse_quant_matrix_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoQuantMatrixExt*" "quant")
  )
)

(define-function gst_mpeg_video_finalise_mpeg2_sequence_header
  (c-name "gst_mpeg_video_finalise_mpeg2_sequence_header")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSequenceHdr*" "hdr")
    '("GstMpegVideoSequenceExt*" "seqext")
    '("GstMpegVideoSequenceDisplayExt*" "displayext")
  )
)

(define-function gst_mpeg_video_parse_picture_header
  (c-name "gst_mpeg_video_parse_picture_header")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoPictureHdr*" "hdr")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-function gst_mpeg_video_parse_picture_extension
  (c-name "gst_mpeg_video_parse_picture_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoPictureExt*" "ext")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-function gst_mpeg_video_parse_gop
  (c-name "gst_mpeg_video_parse_gop")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoGop*" "gop")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-function gst_mpeg_video_parse_sequence_header
  (c-name "gst_mpeg_video_parse_sequence_header")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSequenceHdr*" "seqhdr")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-function gst_mpeg_video_parse_sequence_extension
  (c-name "gst_mpeg_video_parse_sequence_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSequenceExt*" "seqext")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-function gst_mpeg_video_parse_sequence_display_extension
  (c-name "gst_mpeg_video_parse_sequence_display_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoSequenceDisplayExt*" "seqdisplayext")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-function gst_mpeg_video_parse_quant_matrix_extension
  (c-name "gst_mpeg_video_parse_quant_matrix_extension")
  (return-type "gboolean")
  (parameters
    '("GstMpegVideoQuantMatrixExt*" "quant")
    '("const-guint8*" "data")
    '("gsize" "size")
    '("guint" "offset")
  )
)

(define-function gst_mpeg_video_quant_matrix_get_raster_from_zigzag
  (c-name "gst_mpeg_video_quant_matrix_get_raster_from_zigzag")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[64]")
    '("const-guint8" "quant[64]")
  )
)

(define-function gst_mpeg_video_quant_matrix_get_zigzag_from_raster
  (c-name "gst_mpeg_video_quant_matrix_get_zigzag_from_raster")
  (return-type "none")
  (parameters
    '("guint8" "out_quant[64]")
    '("const-guint8" "quant[64]")
  )
)



;; From gstvc1parser.h

(define-function gst_vc1_identify_next_bdu
  (c-name "gst_vc1_identify_next_bdu")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1BDU*" "bdu")
  )
)

(define-function gst_vc1_parse_sequence_header
  (c-name "gst_vc1_parse_sequence_header")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1SeqHdr*" "seqhdr")
  )
)

(define-function gst_vc1_parse_entry_point_header
  (c-name "gst_vc1_parse_entry_point_header")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1EntryPointHdr*" "entrypoint")
    '("GstVC1SeqHdr*" "seqhdr")
  )
)

(define-function gst_vc1_parse_sequence_layer
  (c-name "gst_vc1_parse_sequence_layer")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1SeqLayer*" "seqlayer")
  )
)

(define-function gst_vc1_parse_sequence_header_struct_a
  (c-name "gst_vc1_parse_sequence_header_struct_a")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1SeqStructA*" "structa")
  )
)

(define-function gst_vc1_parse_sequence_header_struct_b
  (c-name "gst_vc1_parse_sequence_header_struct_b")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1SeqStructB*" "structb")
  )
)

(define-function gst_vc1_parse_sequence_header_struct_c
  (c-name "gst_vc1_parse_sequence_header_struct_c")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1SeqStructC*" "structc")
  )
)

(define-function gst_vc1_parse_frame_layer
  (c-name "gst_vc1_parse_frame_layer")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1FrameLayer*" "framelayer")
  )
)

(define-function gst_vc1_parse_frame_header
  (c-name "gst_vc1_parse_frame_header")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1FrameHdr*" "framehdr")
    '("GstVC1SeqHdr*" "seqhdr")
    '("GstVC1BitPlanes*" "bitplanes")
  )
)

(define-function gst_vc1_parse_field_header
  (c-name "gst_vc1_parse_field_header")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1FrameHdr*" "fieldhdr")
    '("GstVC1SeqHdr*" "seqhdr")
    '("GstVC1BitPlanes*" "bitplanes")
  )
)

(define-function gst_vc1_parse_slice_header
  (c-name "gst_vc1_parse_slice_header")
  (return-type "GstVC1ParserResult")
  (parameters
    '("const-guint8*" "data")
    '("gsize" "size")
    '("GstVC1SliceHdr*" "slicehdr")
    '("GstVC1SeqHdr*" "seqhdr")
  )
)

(define-function gst_vc1_bitplanes_new
  (c-name "gst_vc1_bitplanes_new")
  (is-constructor-of "GstVc1Bitplanes")
  (return-type "GstVC1BitPlanes*")
)

(define-method free
  (of-object "GstVC1BitPlanes")
  (c-name "gst_vc1_bitplanes_free")
  (return-type "none")
)

(define-method free_1
  (of-object "GstVC1BitPlanes")
  (c-name "gst_vc1_bitplanes_free_1")
  (return-type "none")
)

(define-method ensure_size
  (of-object "GstVC1BitPlanes")
  (c-name "gst_vc1_bitplanes_ensure_size")
  (return-type "gboolean")
  (parameters
    '("GstVC1SeqHdr*" "seqhdr")
  )
)



;; From gstvp8parser.h

(define-method init
  (of-object "GstVp8Parser")
  (c-name "gst_vp8_parser_init")
  (return-type "none")
)

(define-method parse_frame_header
  (of-object "GstVp8Parser")
  (c-name "gst_vp8_parser_parse_frame_header")
  (return-type "GstVp8ParserResult")
  (parameters
    '("GstVp8FrameHdr*" "frame_hdr")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)



;; From gstvp8rangedecoder.h

(define-method init
  (of-object "GstVp8RangeDecoder")
  (c-name "gst_vp8_range_decoder_init")
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "buf")
    '("guint" "buf_size")
  )
)

(define-method read
  (of-object "GstVp8RangeDecoder")
  (c-name "gst_vp8_range_decoder_read")
  (return-type "gint")
  (parameters
    '("guint8" "prob")
  )
)

(define-method read_literal
  (of-object "GstVp8RangeDecoder")
  (c-name "gst_vp8_range_decoder_read_literal")
  (return-type "gint")
  (parameters
    '("gint" "bits")
  )
)

(define-method get_pos
  (of-object "GstVp8RangeDecoder")
  (c-name "gst_vp8_range_decoder_get_pos")
  (return-type "guint")
)

(define-method get_state
  (of-object "GstVp8RangeDecoder")
  (c-name "gst_vp8_range_decoder_get_state")
  (return-type "none")
  (parameters
    '("GstVp8RangeDecoderState*" "state")
  )
)



;; From gstvp9parser.h

(define-function gst_vp9_parser_new
  (c-name "gst_vp9_parser_new")
  (is-constructor-of "GstVp9Parser")
  (return-type "GstVp9Parser*")
)

(define-method parse_frame_header
  (of-object "GstVp9Parser")
  (c-name "gst_vp9_parser_parse_frame_header")
  (return-type "GstVp9ParserResult")
  (parameters
    '("GstVp9FrameHdr*" "frame_hdr")
    '("const-guint8*" "data")
    '("gsize" "size")
  )
)

(define-method free
  (of-object "GstVp9Parser")
  (c-name "gst_vp9_parser_free")
  (return-type "none")
)



;; From nalutils.h

(define-function ceil_log2
  (c-name "ceil_log2")
  (return-type "guint")
  (parameters
    '("guint32" "v")
  )
)



;; From parserutils.h



;; From vp8utils.h



;; From vp9utils.h



;; From gl.h



;; From gstglapi.h

(define-method to_string
  (of-object "GstGLAPI")
  (c-name "gst_gl_api_to_string")
  (return-type "gchar*")
)

(define-function gst_gl_api_from_string
  (c-name "gst_gl_api_from_string")
  (return-type "GstGLAPI")
  (parameters
    '("const-gchar*" "api_s")
  )
)

(define-method to_string
  (of-object "GstGLPlatform")
  (c-name "gst_gl_platform_to_string")
  (return-type "gchar*")
)

(define-function gst_gl_platform_from_string
  (c-name "gst_gl_platform_from_string")
  (return-type "GstGLPlatform")
  (parameters
    '("const-gchar*" "platform_s")
  )
)



;; From gstglbasefilter.h

(define-function gst_gl_base_filter_get_type
  (c-name "gst_gl_base_filter_get_type")
  (return-type "GType")
)



;; From gstglbasememory.h

(define-function gst_gl_base_memory_allocator_get_type
  (c-name "gst_gl_base_memory_allocator_get_type")
  (return-type "GType")
)

(define-function gst_gl_base_memory_error_quark
  (c-name "gst_gl_base_memory_error_quark")
  (return-type "GQuark")
)

(define-function gst_gl_allocation_params_get_type
  (c-name "gst_gl_allocation_params_get_type")
  (return-type "GType")
)

(define-method init
  (of-object "GstGLAllocationParams")
  (c-name "gst_gl_allocation_params_init")
  (return-type "gboolean")
  (parameters
    '("gsize" "struct_size")
    '("guint" "alloc_flags")
    '("GstGLAllocationParamsCopyFunc" "copy")
    '("GstGLAllocationParamsFreeFunc" "free")
    '("GstGLContext*" "context")
    '("gsize" "alloc_size")
    '("GstAllocationParams*" "alloc_params")
    '("gpointer" "wrapped_data")
    '("guint" "gl_handle")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method copy
  (of-object "GstGLAllocationParams")
  (c-name "gst_gl_allocation_params_copy")
  (return-type "GstGLAllocationParams*")
)

(define-method free
  (of-object "GstGLAllocationParams")
  (c-name "gst_gl_allocation_params_free")
  (return-type "none")
)

(define-method free_data
  (of-object "GstGLAllocationParams")
  (c-name "gst_gl_allocation_params_free_data")
  (return-type "none")
)

(define-method copy_data
  (of-object "GstGLAllocationParams")
  (c-name "gst_gl_allocation_params_copy_data")
  (return-type "none")
  (parameters
    '("GstGLAllocationParams*" "dest")
  )
)

(define-function gst_gl_base_memory_init_once
  (c-name "gst_gl_base_memory_init_once")
  (return-type "none")
)

(define-function gst_is_gl_base_memory
  (c-name "gst_is_gl_base_memory")
  (return-type "gboolean")
  (parameters
    '("GstMemory*" "mem")
  )
)

(define-method init
  (of-object "GstGLBaseMemory")
  (c-name "gst_gl_base_memory_init")
  (return-type "none")
  (parameters
    '("GstAllocator*" "allocator")
    '("GstMemory*" "parent")
    '("GstGLContext*" "context")
    '("GstAllocationParams*" "params")
    '("gsize" "size")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method alloc_data
  (of-object "GstGLBaseMemory")
  (c-name "gst_gl_base_memory_alloc_data")
  (return-type "gboolean")
)

(define-method memcpy
  (of-object "GstGLBaseMemory")
  (c-name "gst_gl_base_memory_memcpy")
  (return-type "gboolean")
  (parameters
    '("GstGLBaseMemory*" "dest")
    '("gssize" "offset")
    '("gssize" "size")
  )
)

(define-function gst_gl_base_memory_alloc
  (c-name "gst_gl_base_memory_alloc")
  (return-type "GstGLBaseMemory*")
  (parameters
    '("GstGLBaseMemoryAllocator*" "allocator")
    '("GstGLAllocationParams*" "params")
  )
)



;; From gstglbuffer.h

(define-function gst_gl_buffer_allocator_get_type
  (c-name "gst_gl_buffer_allocator_get_type")
  (return-type "GType")
)

(define-function gst_gl_buffer_allocation_params_new
  (c-name "gst_gl_buffer_allocation_params_new")
  (is-constructor-of "GstGlBufferAllocationParams")
  (return-type "GstGLBufferAllocationParams*")
  (parameters
    '("GstGLContext*" "context")
    '("gsize" "alloc_size")
    '("GstAllocationParams*" "alloc_params")
    '("guint" "gl_target")
    '("guint" "gl_usage")
  )
)

(define-function gst_gl_buffer_init_once
  (c-name "gst_gl_buffer_init_once")
  (return-type "none")
)

(define-function gst_is_gl_buffer
  (c-name "gst_is_gl_buffer")
  (return-type "gboolean")
  (parameters
    '("GstMemory*" "mem")
  )
)

(define-function gst_gl_buffer_alloc
  (c-name "gst_gl_buffer_alloc")
  (return-type "GstGLBuffer*")
  (parameters
    '("GstGLContext*" "context")
    '("guint" "gl_target")
    '("guint" "gl_usage")
    '("GstAllocationParams*" "params")
    '("gsize" "maxsize")
  )
)



;; From gstglbufferpool.h

(define-function gst_gl_buffer_pool_get_type
  (c-name "gst_gl_buffer_pool_get_type")
  (return-type "GType")
)

(define-function gst_gl_buffer_pool_new
  (c-name "gst_gl_buffer_pool_new")
  (is-constructor-of "GstGlBufferPool")
  (return-type "GstBufferPool*")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-method replace_last_buffer
  (of-object "GstGLBufferPool")
  (c-name "gst_gl_buffer_pool_replace_last_buffer")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_buffer_pool_config_get_gl_allocation_params
  (c-name "gst_buffer_pool_config_get_gl_allocation_params")
  (return-type "GstGLAllocationParams*")
  (parameters
    '("GstStructure*" "config")
  )
)

(define-function gst_buffer_pool_config_set_gl_allocation_params
  (c-name "gst_buffer_pool_config_set_gl_allocation_params")
  (return-type "none")
  (parameters
    '("GstStructure*" "config")
    '("GstGLAllocationParams*" "params")
  )
)



;; From gstglcolorconvert.h

(define-function gst_gl_color_convert_get_type
  (c-name "gst_gl_color_convert_get_type")
  (return-type "GType")
)

(define-function gst_gl_color_convert_new
  (c-name "gst_gl_color_convert_new")
  (is-constructor-of "GstGlColorConvert")
  (return-type "GstGLColorConvert*")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-function gst_gl_color_convert_transform_caps
  (c-name "gst_gl_color_convert_transform_caps")
  (return-type "GstCaps*")
  (parameters
    '("GstGLContext*" "convert")
    '("GstPadDirection" "direction")
    '("GstCaps*" "caps")
    '("GstCaps*" "filter")
  )
)

(define-function gst_gl_color_convert_fixate_caps
  (c-name "gst_gl_color_convert_fixate_caps")
  (return-type "GstCaps*")
  (parameters
    '("GstGLContext*" "convert")
    '("GstPadDirection" "direction")
    '("GstCaps*" "caps")
    '("GstCaps*" "other")
  )
)

(define-method set_caps
  (of-object "GstGLColorConvert")
  (c-name "gst_gl_color_convert_set_caps")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "in_caps")
    '("GstCaps*" "out_caps")
  )
)

(define-method decide_allocation
  (of-object "GstGLColorConvert")
  (c-name "gst_gl_color_convert_decide_allocation")
  (return-type "gboolean")
  (parameters
    '("GstQuery*" "query")
  )
)

(define-method perform
  (of-object "GstGLColorConvert")
  (c-name "gst_gl_color_convert_perform")
  (return-type "GstBuffer*")
  (parameters
    '("GstBuffer*" "inbuf")
  )
)



;; From gstglconfig.h



;; From gstglcontext.h

(define-function gst_gl_context_get_type
  (c-name "gst_gl_context_get_type")
  (return-type "GType")
)

(define-function gst_gl_context_error_quark
  (c-name "gst_gl_context_error_quark")
  (return-type "GQuark")
)

(define-function gst_gl_context_new
  (c-name "gst_gl_context_new")
  (is-constructor-of "GstGlContext")
  (return-type "GstGLContext*")
  (parameters
    '("GstGLDisplay*" "display")
  )
)

(define-function gst_gl_context_new_wrapped
  (c-name "gst_gl_context_new_wrapped")
  (return-type "GstGLContext*")
  (parameters
    '("GstGLDisplay*" "display")
    '("guintptr" "handle")
    '("GstGLPlatform" "context_type")
    '("GstGLAPI" "available_apis")
  )
)

(define-method activate
  (of-object "GstGLContext")
  (c-name "gst_gl_context_activate")
  (return-type "gboolean")
  (parameters
    '("gboolean" "activate")
  )
)

(define-method get_thread
  (of-object "GstGLContext")
  (c-name "gst_gl_context_get_thread")
  (return-type "GThread*")
)

(define-function gst_gl_context_get_current
  (c-name "gst_gl_context_get_current")
  (return-type "GstGLContext*")
)

(define-method get_display
  (of-object "GstGLContext")
  (c-name "gst_gl_context_get_display")
  (return-type "GstGLDisplay*")
)

(define-method get_proc_address
  (of-object "GstGLContext")
  (c-name "gst_gl_context_get_proc_address")
  (return-type "gpointer")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_gl_platform
  (of-object "GstGLContext")
  (c-name "gst_gl_context_get_gl_platform")
  (return-type "GstGLPlatform")
)

(define-method get_gl_api
  (of-object "GstGLContext")
  (c-name "gst_gl_context_get_gl_api")
  (return-type "GstGLAPI")
)

(define-method get_gl_context
  (of-object "GstGLContext")
  (c-name "gst_gl_context_get_gl_context")
  (return-type "guintptr")
)

(define-method can_share
  (of-object "GstGLContext")
  (c-name "gst_gl_context_can_share")
  (return-type "gboolean")
  (parameters
    '("GstGLContext*" "other_context")
  )
)

(define-method create
  (of-object "GstGLContext")
  (c-name "gst_gl_context_create")
  (return-type "gboolean")
  (parameters
    '("GstGLContext*" "other_context")
    '("GError**" "error")
  )
)

(define-method destroy
  (of-object "GstGLContext")
  (c-name "gst_gl_context_destroy")
  (return-type "none")
)

(define-function gst_gl_context_default_get_proc_address
  (c-name "gst_gl_context_default_get_proc_address")
  (return-type "gpointer")
  (parameters
    '("GstGLAPI" "gl_api")
    '("const-gchar*" "name")
  )
)

(define-function gst_gl_context_get_proc_address_with_platform
  (c-name "gst_gl_context_get_proc_address_with_platform")
  (return-type "gpointer")
  (parameters
    '("GstGLPlatform" "context_type")
    '("GstGLAPI" "gl_api")
    '("const-gchar*" "name")
  )
)

(define-method set_window
  (of-object "GstGLContext")
  (c-name "gst_gl_context_set_window")
  (return-type "gboolean")
  (parameters
    '("GstGLWindow*" "window")
  )
)

(define-method get_window
  (of-object "GstGLContext")
  (c-name "gst_gl_context_get_window")
  (return-type "GstGLWindow*")
)

(define-method get_gl_version
  (of-object "GstGLContext")
  (c-name "gst_gl_context_get_gl_version")
  (return-type "none")
  (parameters
    '("gint*" "maj")
    '("gint*" "min")
  )
)

(define-method check_gl_version
  (of-object "GstGLContext")
  (c-name "gst_gl_context_check_gl_version")
  (return-type "gboolean")
  (parameters
    '("GstGLAPI" "api")
    '("gint" "maj")
    '("gint" "min")
  )
)

(define-method check_feature
  (of-object "GstGLContext")
  (c-name "gst_gl_context_check_feature")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "feature")
  )
)

(define-function gst_gl_context_get_current_gl_context
  (c-name "gst_gl_context_get_current_gl_context")
  (return-type "guintptr")
  (parameters
    '("GstGLPlatform" "context_type")
  )
)

(define-function gst_gl_context_get_current_gl_api
  (c-name "gst_gl_context_get_current_gl_api")
  (return-type "GstGLAPI")
  (parameters
    '("GstGLPlatform" "platform")
    '("guint*" "major")
    '("guint*" "minor")
  )
)

(define-method is_shared
  (of-object "GstGLContext")
  (c-name "gst_gl_context_is_shared")
  (return-type "gboolean")
)

(define-method set_shared_with
  (of-object "GstGLContext")
  (c-name "gst_gl_context_set_shared_with")
  (return-type "none")
  (parameters
    '("GstGLContext*" "share")
  )
)

(define-method fill_info
  (of-object "GstGLContext")
  (c-name "gst_gl_context_fill_info")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method thread_add
  (of-object "GstGLContext")
  (c-name "gst_gl_context_thread_add")
  (return-type "none")
  (parameters
    '("GstGLContextThreadFunc" "func")
    '("gpointer" "data")
  )
)



;; From gstglcontrolbindingproxy.h

(define-function gst_gl_control_binding_proxy_get_type
  (c-name "gst_gl_control_binding_proxy_get_type")
  (return-type "GType")
)

(define-function gst_gl_control_binding_proxy_new
  (c-name "gst_gl_control_binding_proxy_new")
  (is-constructor-of "GstGlControlBindingProxy")
  (return-type "GstControlBinding*")
  (parameters
    '("GstObject*" "object")
    '("const-gchar*" "property_name")
    '("GstObject*" "ref_object")
    '("const-gchar*" "ref_property_name")
  )
)

(define-function gst_gl_object_add_control_binding_proxy
  (c-name "gst_gl_object_add_control_binding_proxy")
  (return-type "none")
  (parameters
    '("GstObject*" "object")
    '("GstObject*" "ref_object")
    '("const-gchar*" "prop")
  )
)



;; From gstgldebug.h

(define-function gst_gl_async_debug_new
  (c-name "gst_gl_async_debug_new")
  (is-constructor-of "GstGlAsyncDebug")
  (return-type "GstGLAsyncDebug*")
)

(define-method free
  (of-object "GstGLAsyncDebug")
  (c-name "gst_gl_async_debug_free")
  (return-type "none")
)

(define-method init
  (of-object "GstGLAsyncDebug")
  (c-name "gst_gl_async_debug_init")
  (return-type "none")
)

(define-method unset
  (of-object "GstGLAsyncDebug")
  (c-name "gst_gl_async_debug_unset")
  (return-type "none")
)

(define-method freeze
  (of-object "GstGLAsyncDebug")
  (c-name "gst_gl_async_debug_freeze")
  (return-type "none")
)

(define-method thaw
  (of-object "GstGLAsyncDebug")
  (c-name "gst_gl_async_debug_thaw")
  (return-type "none")
)

(define-function GST_GL_ASYNC_CAT_LEVEL_LOG
  (c-name "GST_GL_ASYNC_CAT_LEVEL_LOG")
  (return-type "none")
  (parameters
    '("GstGLAsyncDebug*" "ad")
    '("GstDebugCategory*" "cat")
    '("GstDebugLevel" "level")
    '("GObject*" "object")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-function gst_gl_insert_debug_marker
  (c-name "gst_gl_insert_debug_marker")
  (return-type "none")
  (parameters
    '("GstGLContext*" "context")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method output_log_msg
  (of-object "GstGLAsyncDebug")
  (c-name "gst_gl_async_debug_output_log_msg")
  (return-type "none")
)

(define-method store_log_msg
  (of-object "GstGLAsyncDebug")
  (c-name "gst_gl_async_debug_store_log_msg")
  (return-type "none")
  (parameters
    '("GstDebugCategory*" "cat")
    '("GstDebugLevel" "level")
    '("const-gchar*" "file")
    '("const-gchar*" "function")
    '("gint" "line")
    '("GObject*" "object")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method store_log_msg_valist
  (of-object "GstGLAsyncDebug")
  (c-name "gst_gl_async_debug_store_log_msg_valist")
  (return-type "none")
  (parameters
    '("GstDebugCategory*" "cat")
    '("GstDebugLevel" "level")
    '("const-gchar*" "file")
    '("const-gchar*" "function")
    '("gint" "line")
    '("GObject*" "object")
    '("const-gchar*" "format")
    '("va_list" "varargs")
  )
)



;; From gstgldisplay.h

(define-function gst_gl_display_get_type
  (c-name "gst_gl_display_get_type")
  (return-type "GType")
)

(define-function gst_gl_display_new
  (c-name "gst_gl_display_new")
  (is-constructor-of "GstGlDisplay")
  (return-type "GstGLDisplay*")
)

(define-method get_handle
  (of-object "GstGLDisplay")
  (c-name "gst_gl_display_get_handle")
  (return-type "guintptr")
)

(define-method get_handle_type
  (of-object "GstGLDisplay")
  (c-name "gst_gl_display_get_handle_type")
  (return-type "GstGLDisplayType")
)

(define-method filter_gl_api
  (of-object "GstGLDisplay")
  (c-name "gst_gl_display_filter_gl_api")
  (return-type "none")
  (parameters
    '("GstGLAPI" "gl_api")
  )
)

(define-method get_gl_api
  (of-object "GstGLDisplay")
  (c-name "gst_gl_display_get_gl_api")
  (return-type "GstGLAPI")
)

(define-method get_gl_api_unlocked
  (of-object "GstGLDisplay")
  (c-name "gst_gl_display_get_gl_api_unlocked")
  (return-type "GstGLAPI")
)

(define-method set_gl_display
  (of-object "GstContext")
  (c-name "gst_context_set_gl_display")
  (return-type "none")
  (parameters
    '("GstGLDisplay*" "display")
  )
)

(define-method get_gl_display
  (of-object "GstContext")
  (c-name "gst_context_get_gl_display")
  (return-type "gboolean")
  (parameters
    '("GstGLDisplay**" "display")
  )
)

(define-method create_context
  (of-object "GstGLDisplay")
  (c-name "gst_gl_display_create_context")
  (return-type "gboolean")
  (parameters
    '("GstGLContext*" "other_context")
    '("GstGLContext**" "p_context")
    '("GError**" "error")
  )
)

(define-method get_gl_context_for_thread
  (of-object "GstGLDisplay")
  (c-name "gst_gl_display_get_gl_context_for_thread")
  (return-type "GstGLContext*")
  (parameters
    '("GThread*" "thread")
  )
)

(define-method add_context
  (of-object "GstGLDisplay")
  (c-name "gst_gl_display_add_context")
  (return-type "gboolean")
  (parameters
    '("GstGLContext*" "context")
  )
)



;; From gstgl_enums.h



;; From gstglfeature.h

(define-function gst_gl_check_extension
  (c-name "gst_gl_check_extension")
  (return-type "gboolean")
  (parameters
    '("const-char*" "name")
    '("const-gchar*" "ext")
  )
)



;; From gstglfilter.h

(define-function gst_gl_filter_get_type
  (c-name "gst_gl_filter_get_type")
  (return-type "GType")
)

(define-method filter_texture
  (of-object "GstGLFilter")
  (c-name "gst_gl_filter_filter_texture")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "inbuf")
    '("GstBuffer*" "outbuf")
  )
)

(define-method render_to_target
  (of-object "GstGLFilter")
  (c-name "gst_gl_filter_render_to_target")
  (return-type "none")
  (parameters
    '("gboolean" "resize")
    '("GLuint" "input")
    '("GLuint" "target")
    '("GLCB" "func")
    '("gpointer" "data")
  )
)

(define-method render_to_target_with_shader
  (of-object "GstGLFilter")
  (c-name "gst_gl_filter_render_to_target_with_shader")
  (return-type "none")
  (parameters
    '("gboolean" "resize")
    '("GLuint" "input")
    '("GLuint" "target")
    '("GstGLShader*" "shader")
  )
)

(define-method draw_texture
  (of-object "GstGLFilter")
  (c-name "gst_gl_filter_draw_texture")
  (return-type "none")
  (parameters
    '("GLuint" "texture")
    '("guint" "width")
    '("guint" "height")
  )
)



;; From gstglformat.h

(define-function gst_gl_format_type_n_bytes
  (c-name "gst_gl_format_type_n_bytes")
  (return-type "guint")
  (parameters
    '("guint" "format")
    '("guint" "type")
  )
)

(define-function gst_gl_texture_type_n_bytes
  (c-name "gst_gl_texture_type_n_bytes")
  (return-type "guint")
  (parameters
    '("GstVideoGLTextureType" "tex_format")
  )
)

(define-function gst_gl_format_from_gl_texture_type
  (c-name "gst_gl_format_from_gl_texture_type")
  (return-type "guint")
  (parameters
    '("GstVideoGLTextureType" "tex_format")
  )
)

(define-function gst_gl_texture_type_from_format
  (c-name "gst_gl_texture_type_from_format")
  (return-type "GstVideoGLTextureType")
  (parameters
    '("GstGLContext*" "context")
    '("GstVideoFormat" "v_format")
    '("guint" "plane")
  )
)

(define-function gst_gl_sized_gl_format_from_gl_format_type
  (c-name "gst_gl_sized_gl_format_from_gl_format_type")
  (return-type "guint")
  (parameters
    '("GstGLContext*" "context")
    '("guint" "format")
    '("guint" "type")
  )
)

(define-function gst_gl_texture_target_from_string
  (c-name "gst_gl_texture_target_from_string")
  (return-type "GstGLTextureTarget")
  (parameters
    '("const-gchar*" "str")
  )
)

(define-method to_string
  (of-object "GstGLTextureTarget")
  (c-name "gst_gl_texture_target_to_string")
  (return-type "const-gchar*")
)

(define-method to_gl
  (of-object "GstGLTextureTarget")
  (c-name "gst_gl_texture_target_to_gl")
  (return-type "guint")
)

(define-function gst_gl_texture_target_from_gl
  (c-name "gst_gl_texture_target_from_gl")
  (return-type "GstGLTextureTarget")
  (parameters
    '("guint" "target")
  )
)

(define-method to_buffer_pool_option
  (of-object "GstGLTextureTarget")
  (c-name "gst_gl_texture_target_to_buffer_pool_option")
  (return-type "const-gchar*")
)



;; From gstglframebuffer.h

(define-function gst_gl_framebuffer_get_type
  (c-name "gst_gl_framebuffer_get_type")
  (return-type "GType")
)

(define-function gst_gl_framebuffer_new
  (c-name "gst_gl_framebuffer_new")
  (is-constructor-of "GstGlFramebuffer")
  (return-type "GstGLFramebuffer*")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-method generate
  (of-object "GstGLFramebuffer")
  (c-name "gst_gl_framebuffer_generate")
  (return-type "gboolean")
  (parameters
    '("gint" "width")
    '("gint" "height")
    '("guint*" "fbo")
    '("guint*" "depthbuffer")
  )
)

(define-method use_v2
  (of-object "GstGLFramebuffer")
  (c-name "gst_gl_framebuffer_use_v2")
  (return-type "gboolean")
  (parameters
    '("gint" "texture_fbo_width")
    '("gint" "texture_fbo_height")
    '("GLuint" "fbo")
    '("GLuint" "depth_buffer")
    '("GLuint" "texture_fbo")
    '("GLCB_V2" "cb")
    '("gpointer" "stuff")
  )
)

(define-method delete
  (of-object "GstGLFramebuffer")
  (c-name "gst_gl_framebuffer_delete")
  (return-type "none")
  (parameters
    '("guint" "fbo")
    '("guint" "depth")
  )
)



;; From gstgl_fwd.h



;; From gstglmemory.h

(define-function gst_gl_memory_allocator_get_type
  (c-name "gst_gl_memory_allocator_get_type")
  (return-type "GType")
)

(define-method init_full
  (of-object "GstGLVideoAllocationParams")
  (c-name "gst_gl_video_allocation_params_init_full")
  (return-type "gboolean")
  (parameters
    '("gsize" "struct_size")
    '("guint" "alloc_flags")
    '("GstGLAllocationParamsCopyFunc" "copy")
    '("GstGLAllocationParamsFreeFunc" "free")
    '("GstGLContext*" "context")
    '("GstAllocationParams*" "alloc_params")
    '("GstVideoInfo*" "v_info")
    '("guint" "plane")
    '("GstVideoAlignment*" "valign")
    '("GstGLTextureTarget" "target")
    '("gpointer" "wrapped_data")
    '("guint" "gl_handle")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-function gst_gl_video_allocation_params_new
  (c-name "gst_gl_video_allocation_params_new")
  (is-constructor-of "GstGlVideoAllocationParams")
  (return-type "GstGLVideoAllocationParams*")
  (parameters
    '("GstGLContext*" "context")
    '("GstAllocationParams*" "alloc_params")
    '("GstVideoInfo*" "v_info")
    '("guint" "plane")
    '("GstVideoAlignment*" "valign")
    '("GstGLTextureTarget" "target")
  )
)

(define-function gst_gl_video_allocation_params_new_wrapped_data
  (c-name "gst_gl_video_allocation_params_new_wrapped_data")
  (return-type "GstGLVideoAllocationParams*")
  (parameters
    '("GstGLContext*" "context")
    '("GstAllocationParams*" "alloc_params")
    '("GstVideoInfo*" "v_info")
    '("guint" "plane")
    '("GstVideoAlignment*" "valign")
    '("GstGLTextureTarget" "target")
    '("gpointer" "wrapped_data")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-function gst_gl_video_allocation_params_new_wrapped_texture
  (c-name "gst_gl_video_allocation_params_new_wrapped_texture")
  (return-type "GstGLVideoAllocationParams*")
  (parameters
    '("GstGLContext*" "context")
    '("GstAllocationParams*" "alloc_params")
    '("GstVideoInfo*" "v_info")
    '("guint" "plane")
    '("GstVideoAlignment*" "valign")
    '("GstGLTextureTarget" "target")
    '("guint" "tex_id")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method free_data
  (of-object "GstGLVideoAllocationParams")
  (c-name "gst_gl_video_allocation_params_free_data")
  (return-type "none")
)

(define-method copy_data
  (of-object "GstGLVideoAllocationParams")
  (c-name "gst_gl_video_allocation_params_copy_data")
  (return-type "none")
  (parameters
    '("GstGLVideoAllocationParams*" "dest_vid")
  )
)

(define-function gst_gl_memory_init_once
  (c-name "gst_gl_memory_init_once")
  (return-type "none")
)

(define-function gst_is_gl_memory
  (c-name "gst_is_gl_memory")
  (return-type "gboolean")
  (parameters
    '("GstMemory*" "mem")
  )
)

(define-method init
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_init")
  (return-type "none")
  (parameters
    '("GstAllocator*" "allocator")
    '("GstMemory*" "parent")
    '("GstGLContext*" "context")
    '("GstGLTextureTarget" "target")
    '("GstAllocationParams*" "params")
    '("GstVideoInfo*" "info")
    '("guint" "plane")
    '("GstVideoAlignment*" "valign")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method copy_into
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_copy_into")
  (return-type "gboolean")
  (parameters
    '("guint" "tex_id")
    '("GstGLTextureTarget" "target")
    '("GstVideoGLTextureType" "tex_type")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method copy_teximage
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_copy_teximage")
  (return-type "gboolean")
  (parameters
    '("guint" "tex_id")
    '("GstGLTextureTarget" "out_target")
    '("GstVideoGLTextureType" "out_tex_type")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method read_pixels
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_read_pixels")
  (return-type "gboolean")
  (parameters
    '("gpointer" "read_pointer")
  )
)

(define-method texsubimage
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_texsubimage")
  (return-type "none")
  (parameters
    '("gpointer" "read_pointer")
  )
)

(define-method get_texture_width
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_get_texture_width")
  (return-type "gint")
)

(define-method get_texture_height
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_get_texture_height")
  (return-type "gint")
)

(define-method get_texture_type
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_get_texture_type")
  (return-type "GstVideoGLTextureType")
)

(define-method get_texture_target
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_get_texture_target")
  (return-type "GstGLTextureTarget")
)

(define-method get_texture_id
  (of-object "GstGLMemory")
  (c-name "gst_gl_memory_get_texture_id")
  (return-type "guint")
)

(define-function gst_gl_memory_setup_buffer
  (c-name "gst_gl_memory_setup_buffer")
  (return-type "gboolean")
  (parameters
    '("GstGLMemoryAllocator*" "allocator")
    '("GstBuffer*" "buffer")
    '("GstGLVideoAllocationParams*" "params")
  )
)

(define-function gst_gl_memory_allocator_get_default
  (c-name "gst_gl_memory_allocator_get_default")
  (return-type "GstGLMemoryAllocator*")
  (parameters
    '("GstGLContext*" "context")
  )
)



;; From gstglmemorypbo.h

(define-function gst_gl_memory_pbo_allocator_get_type
  (c-name "gst_gl_memory_pbo_allocator_get_type")
  (return-type "GType")
)

(define-function gst_gl_memory_pbo_init_once
  (c-name "gst_gl_memory_pbo_init_once")
  (return-type "none")
)

(define-function gst_is_gl_memory_pbo
  (c-name "gst_is_gl_memory_pbo")
  (return-type "gboolean")
  (parameters
    '("GstMemory*" "mem")
  )
)

(define-method download_transfer
  (of-object "GstGLMemoryPBO")
  (c-name "gst_gl_memory_pbo_download_transfer")
  (return-type "none")
)

(define-method upload_transfer
  (of-object "GstGLMemoryPBO")
  (c-name "gst_gl_memory_pbo_upload_transfer")
  (return-type "none")
)

(define-method copy_into_texture
  (of-object "GstGLMemoryPBO")
  (c-name "gst_gl_memory_pbo_copy_into_texture")
  (return-type "gboolean")
  (parameters
    '("guint" "tex_id")
    '("GstGLTextureTarget" "target")
    '("GstVideoGLTextureType" "tex_type")
    '("gint" "width")
    '("gint" "height")
    '("gint" "stride")
    '("gboolean" "respecify")
  )
)



;; From gstgloverlaycompositor.h

(define-function gst_gl_overlay_compositor_get_type
  (c-name "gst_gl_overlay_compositor_get_type")
  (return-type "GType")
)

(define-function gst_gl_overlay_compositor_new
  (c-name "gst_gl_overlay_compositor_new")
  (is-constructor-of "GstGlOverlayCompositor")
  (return-type "GstGLOverlayCompositor*")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-method free_overlays
  (of-object "GstGLOverlayCompositor")
  (c-name "gst_gl_overlay_compositor_free_overlays")
  (return-type "none")
)

(define-method upload_overlays
  (of-object "GstGLOverlayCompositor")
  (c-name "gst_gl_overlay_compositor_upload_overlays")
  (return-type "none")
  (parameters
    '("GstBuffer*" "buf")
  )
)

(define-method draw_overlays
  (of-object "GstGLOverlayCompositor")
  (c-name "gst_gl_overlay_compositor_draw_overlays")
  (return-type "none")
)

(define-function gst_gl_overlay_compositor_add_caps
  (c-name "gst_gl_overlay_compositor_add_caps")
  (return-type "GstCaps*")
  (parameters
    '("GstCaps*" "caps")
  )
)



;; From gstglquery.h

(define-method init
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_init")
  (return-type "none")
  (parameters
    '("GstGLContext*" "context")
    '("GstGLQueryType" "query_type")
  )
)

(define-method unset
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_unset")
  (return-type "none")
)

(define-function gst_gl_query_new
  (c-name "gst_gl_query_new")
  (is-constructor-of "GstGlQuery")
  (return-type "GstGLQuery*")
  (parameters
    '("GstGLContext*" "context")
    '("GstGLQueryType" "query_type")
  )
)

(define-method free
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_free")
  (return-type "none")
)

(define-method start
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_start")
  (return-type "none")
)

(define-method end
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_end")
  (return-type "none")
)

(define-method counter
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_counter")
  (return-type "none")
)

(define-method result
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_result")
  (return-type "guint64")
)

(define-method start_log
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_start_log")
  (return-type "none")
  (parameters
    '("GstDebugCategory*" "cat")
    '("GstDebugLevel" "level")
    '("GObject*" "object")
    '("const-gchar*" "format")
  )
  (varargs #t)
)

(define-method counter_log
  (of-object "GstGLQuery")
  (c-name "gst_gl_query_counter_log")
  (return-type "none")
  (parameters
    '("GstDebugCategory*" "cat")
    '("GstDebugLevel" "level")
    '("GObject*" "object")
    '("const-gchar*" "format")
  )
  (varargs #t)
)



;; From gstglshader.h

(define-function gst_gl_shader_get_type
  (c-name "gst_gl_shader_get_type")
  (return-type "GType")
)

(define-function gst_gl_shader_new
  (c-name "gst_gl_shader_new")
  (is-constructor-of "GstGlShader")
  (return-type "GstGLShader*")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-function gst_gl_shader_new_with_stages
  (c-name "gst_gl_shader_new_with_stages")
  (return-type "GstGLShader*")
  (parameters
    '("GstGLContext*" "context")
    '("GError**" "error")
  )
  (varargs #t)
)

(define-function gst_gl_shader_new_link_with_stages
  (c-name "gst_gl_shader_new_link_with_stages")
  (return-type "GstGLShader*")
  (parameters
    '("GstGLContext*" "context")
    '("GError**" "error")
  )
  (varargs #t)
)

(define-function gst_gl_shader_new_default
  (c-name "gst_gl_shader_new_default")
  (return-type "GstGLShader*")
  (parameters
    '("GstGLContext*" "context")
    '("GError**" "error")
  )
)

(define-method attach
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_attach")
  (return-type "gboolean")
  (parameters
    '("GstGLSLStage*" "stage")
  )
)

(define-method attach_unlocked
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_attach_unlocked")
  (return-type "gboolean")
  (parameters
    '("GstGLSLStage*" "stage")
  )
)

(define-method detach
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_detach")
  (return-type "none")
  (parameters
    '("GstGLSLStage*" "stage")
  )
)

(define-method detach_unlocked
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_detach_unlocked")
  (return-type "none")
  (parameters
    '("GstGLSLStage*" "stage")
  )
)

(define-method compile_attach_stage
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_compile_attach_stage")
  (return-type "gboolean")
  (parameters
    '("GstGLSLStage*" "stage")
    '("GError**" "error")
  )
)

(define-method link
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_link")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method is_linked
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_is_linked")
  (return-type "gboolean")
)

(define-method get_program_handle
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_get_program_handle")
  (return-type "int")
)

(define-method release
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_release")
  (return-type "none")
)

(define-method release_unlocked
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_release_unlocked")
  (return-type "none")
)

(define-method use
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_use")
  (return-type "none")
)

(define-method clear_shader
  (of-object "GstGLContext")
  (c-name "gst_gl_context_clear_shader")
  (return-type "none")
)

(define-method set_uniform_1i
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_1i")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "value")
  )
)

(define-method set_uniform_1iv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_1iv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guint" "count")
    '("gint*" "value")
  )
)

(define-method set_uniform_1f
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_1f")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gfloat" "value")
  )
)

(define-method set_uniform_1fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_1fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guint" "count")
    '("gfloat*" "value")
  )
)

(define-method set_uniform_2i
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_2i")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "v0")
    '("gint" "v1")
  )
)

(define-method set_uniform_2iv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_2iv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guint" "count")
    '("gint*" "value")
  )
)

(define-method set_uniform_2f
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_2f")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gfloat" "v0")
    '("gfloat" "v1")
  )
)

(define-method set_uniform_2fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_2fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guint" "count")
    '("gfloat*" "value")
  )
)

(define-method set_uniform_3i
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_3i")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "v0")
    '("gint" "v1")
    '("gint" "v2")
  )
)

(define-method set_uniform_3iv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_3iv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guint" "count")
    '("gint*" "value")
  )
)

(define-method set_uniform_3f
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_3f")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gfloat" "v0")
    '("gfloat" "v1")
    '("gfloat" "v2")
  )
)

(define-method set_uniform_3fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_3fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guint" "count")
    '("gfloat*" "value")
  )
)

(define-method set_uniform_4i
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_4i")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "v0")
    '("gint" "v1")
    '("gint" "v2")
    '("gint" "v3")
  )
)

(define-method set_uniform_4iv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_4iv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guint" "count")
    '("gint*" "value")
  )
)

(define-method set_uniform_4f
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_4f")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gfloat" "v0")
    '("gfloat" "v1")
    '("gfloat" "v2")
    '("gfloat" "v3")
  )
)

(define-method set_uniform_4fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_4fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("guint" "count")
    '("gfloat*" "value")
  )
)

(define-method set_uniform_matrix_2fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_2fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method set_uniform_matrix_3fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_3fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method set_uniform_matrix_4fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_4fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method set_uniform_matrix_2x3fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_2x3fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method set_uniform_matrix_2x4fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_2x4fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method set_uniform_matrix_3x2fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_3x2fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method set_uniform_matrix_3x4fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_3x4fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method set_uniform_matrix_4x2fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_4x2fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method set_uniform_matrix_4x3fv
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_set_uniform_matrix_4x3fv")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gint" "count")
    '("gboolean" "transpose")
    '("const-gfloat*" "value")
  )
)

(define-method get_attribute_location
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_get_attribute_location")
  (return-type "gint")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method bind_attribute_location
  (of-object "GstGLShader")
  (c-name "gst_gl_shader_bind_attribute_location")
  (return-type "none")
  (parameters
    '("guint" "index")
    '("const-gchar*" "name")
  )
)



;; From gstglshaderstrings.h



;; From gstglsl.h

(define-function gst_glsl_error_quark
  (c-name "gst_glsl_error_quark")
  (return-type "GQuark")
)

(define-function gst_glsl_version_from_string
  (c-name "gst_glsl_version_from_string")
  (return-type "GstGLSLVersion")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method to_string
  (of-object "GstGLSLVersion")
  (c-name "gst_glsl_version_to_string")
  (return-type "const-gchar*")
)

(define-function gst_glsl_profile_from_string
  (c-name "gst_glsl_profile_from_string")
  (return-type "GstGLSLProfile")
  (parameters
    '("const-gchar*" "string")
  )
)

(define-method to_string
  (of-object "GstGLSLProfile")
  (c-name "gst_glsl_profile_to_string")
  (return-type "const-gchar*")
)

(define-method profile_to_string
  (of-object "GstGLSLVersion")
  (c-name "gst_glsl_version_profile_to_string")
  (return-type "gchar*")
  (parameters
    '("GstGLSLProfile" "profile")
  )
)

(define-function gst_glsl_version_profile_from_string
  (c-name "gst_glsl_version_profile_from_string")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "string")
    '("GstGLSLVersion*" "version")
    '("GstGLSLProfile*" "profile")
  )
)

(define-function gst_glsl_string_get_version_profile
  (c-name "gst_glsl_string_get_version_profile")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "s")
    '("GstGLSLVersion*" "version")
    '("GstGLSLProfile*" "profile")
  )
)

(define-function gst_gl_version_to_glsl_version
  (c-name "gst_gl_version_to_glsl_version")
  (return-type "GstGLSLVersion")
  (parameters
    '("GstGLAPI" "gl_api")
    '("gint" "maj")
    '("gint" "min")
  )
)

(define-method supports_glsl_profile_version
  (of-object "GstGLContext")
  (c-name "gst_gl_context_supports_glsl_profile_version")
  (return-type "gboolean")
  (parameters
    '("GstGLSLVersion" "version")
    '("GstGLSLProfile" "profile")
  )
)



;; From gstglsl_private.h

(define-function GSTGLAPI
  (c-name "GSTGLAPI")
  (return-type "GLuint")
  (parameters
    '("*" "CreateProgram")
  )
)



;; From gstglslstage.h

(define-function gst_glsl_stage_get_type
  (c-name "gst_glsl_stage_get_type")
  (return-type "GType")
)

(define-function gst_glsl_stage_new
  (c-name "gst_glsl_stage_new")
  (is-constructor-of "GstGlslStage")
  (return-type "GstGLSLStage*")
  (parameters
    '("GstGLContext*" "context")
    '("guint" "type")
  )
)

(define-function gst_glsl_stage_new_with_string
  (c-name "gst_glsl_stage_new_with_string")
  (return-type "GstGLSLStage*")
  (parameters
    '("GstGLContext*" "context")
    '("guint" "type")
    '("GstGLSLVersion" "version")
    '("GstGLSLProfile" "profile")
    '("const-gchar*" "str")
  )
)

(define-function gst_glsl_stage_new_with_strings
  (c-name "gst_glsl_stage_new_with_strings")
  (return-type "GstGLSLStage*")
  (parameters
    '("GstGLContext*" "context")
    '("guint" "type")
    '("GstGLSLVersion" "version")
    '("GstGLSLProfile" "profile")
    '("gint" "n_strings")
    '("const-gchar**" "str")
  )
)

(define-function gst_glsl_stage_new_default_fragment
  (c-name "gst_glsl_stage_new_default_fragment")
  (return-type "GstGLSLStage*")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-function gst_glsl_stage_new_default_vertex
  (c-name "gst_glsl_stage_new_default_vertex")
  (return-type "GstGLSLStage*")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-method get_handle
  (of-object "GstGLSLStage")
  (c-name "gst_glsl_stage_get_handle")
  (return-type "guint")
)

(define-method get_profile
  (of-object "GstGLSLStage")
  (c-name "gst_glsl_stage_get_profile")
  (return-type "GstGLSLProfile")
)

(define-method get_version
  (of-object "GstGLSLStage")
  (c-name "gst_glsl_stage_get_version")
  (return-type "GstGLSLVersion")
)

(define-method get_shader_type
  (of-object "GstGLSLStage")
  (c-name "gst_glsl_stage_get_shader_type")
  (return-type "guint")
)

(define-method set_strings
  (of-object "GstGLSLStage")
  (c-name "gst_glsl_stage_set_strings")
  (return-type "gboolean")
  (parameters
    '("GstGLSLVersion" "version")
    '("GstGLSLProfile" "profile")
    '("gint" "n_strings")
    '("const-gchar**" "str")
  )
)

(define-method compile
  (of-object "GstGLSLStage")
  (c-name "gst_glsl_stage_compile")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)



;; From gstglsyncmeta.h

(define-function gst_gl_sync_meta_api_get_type
  (c-name "gst_gl_sync_meta_api_get_type")
  (return-type "GType")
)

(define-function gst_gl_sync_meta_get_info
  (c-name "gst_gl_sync_meta_get_info")
  (return-type "const-GstMetaInfo*")
)

(define-function gst_buffer_add_gl_sync_meta
  (c-name "gst_buffer_add_gl_sync_meta")
  (return-type "GstGLSyncMeta*")
  (parameters
    '("GstGLContext*" "context")
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_buffer_add_gl_sync_meta_full
  (c-name "gst_buffer_add_gl_sync_meta_full")
  (return-type "GstGLSyncMeta*")
  (parameters
    '("GstGLContext*" "context")
    '("GstBuffer*" "buffer")
    '("gpointer" "data")
  )
)

(define-method set_sync_point
  (of-object "GstGLSyncMeta")
  (c-name "gst_gl_sync_meta_set_sync_point")
  (return-type "none")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-method wait
  (of-object "GstGLSyncMeta")
  (c-name "gst_gl_sync_meta_wait")
  (return-type "none")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-method wait_cpu
  (of-object "GstGLSyncMeta")
  (c-name "gst_gl_sync_meta_wait_cpu")
  (return-type "none")
  (parameters
    '("GstGLContext*" "context")
  )
)



;; From gstglupload.h

(define-function gst_gl_upload_get_type
  (c-name "gst_gl_upload_get_type")
  (return-type "GType")
)

(define-function gst_gl_upload_get_input_template_caps
  (c-name "gst_gl_upload_get_input_template_caps")
  (return-type "GstCaps*")
)

(define-function gst_gl_upload_new
  (c-name "gst_gl_upload_new")
  (is-constructor-of "GstGlUpload")
  (return-type "GstGLUpload*")
  (parameters
    '("GstGLContext*" "context")
  )
)

(define-function gst_gl_upload_transform_caps
  (c-name "gst_gl_upload_transform_caps")
  (return-type "GstCaps*")
  (parameters
    '("GstGLContext*" "context")
    '("GstPadDirection" "direction")
    '("GstCaps*" "caps")
    '("GstCaps*" "filter")
  )
)

(define-method set_caps
  (of-object "GstGLUpload")
  (c-name "gst_gl_upload_set_caps")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "in_caps")
    '("GstCaps*" "out_caps")
  )
)

(define-method get_caps
  (of-object "GstGLUpload")
  (c-name "gst_gl_upload_get_caps")
  (return-type "none")
  (parameters
    '("GstCaps**" "in_caps")
    '("GstCaps**" "out_caps")
  )
)

(define-method propose_allocation
  (of-object "GstGLUpload")
  (c-name "gst_gl_upload_propose_allocation")
  (return-type "none")
  (parameters
    '("GstQuery*" "decide_query")
    '("GstQuery*" "query")
  )
)

(define-method perform_with_buffer
  (of-object "GstGLUpload")
  (c-name "gst_gl_upload_perform_with_buffer")
  (return-type "GstGLUploadReturn")
  (parameters
    '("GstBuffer*" "buffer")
    '("GstBuffer**" "outbuf_ptr")
  )
)



;; From gstglutils.h

(define-method gen_texture
  (of-object "GstGLContext")
  (c-name "gst_gl_context_gen_texture")
  (return-type "none")
  (parameters
    '("GLuint*" "pTexture")
    '("GstVideoFormat" "v_format")
    '("GLint" "width")
    '("GLint" "height")
  )
)

(define-method del_texture
  (of-object "GstGLContext")
  (c-name "gst_gl_context_del_texture")
  (return-type "none")
  (parameters
    '("GLuint*" "pTexture")
  )
)

(define-function gst_gl_generate_texture_full
  (c-name "gst_gl_generate_texture_full")
  (return-type "none")
  (parameters
    '("GstGLContext*" "context")
    '("const-GstVideoInfo*" "info")
    '("const-guint" "comp")
    '("gint[]" "stride")
    '("gsize[]" "offset")
    '("gsize[]" "size")
    '("GLuint*" "pTexture")
  )
)

(define-method gen_fbo
  (of-object "GstGLContext")
  (c-name "gst_gl_context_gen_fbo")
  (return-type "gboolean")
  (parameters
    '("gint" "width")
    '("gint" "height")
    '("GLuint*" "fbo")
    '("GLuint*" "depthbuffer")
  )
)

(define-method use_fbo_v2
  (of-object "GstGLContext")
  (c-name "gst_gl_context_use_fbo_v2")
  (return-type "gboolean")
  (parameters
    '("gint" "texture_fbo_width")
    '("gint" "texture_fbo_height")
    '("GLuint" "fbo")
    '("GLuint" "depth_buffer")
    '("GLuint" "texture_fbo")
    '("GLCB_V2" "cb")
    '("gpointer" "stuff")
  )
)

(define-method del_fbo
  (of-object "GstGLContext")
  (c-name "gst_gl_context_del_fbo")
  (return-type "none")
  (parameters
    '("GLuint" "fbo")
    '("GLuint" "depth_buffer")
  )
)

(define-method gen_shader
  (of-object "GstGLContext")
  (c-name "gst_gl_context_gen_shader")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "shader_vertex_source")
    '("const-gchar*" "shader_fragment_source")
    '("GstGLShader**" "shader")
  )
)

(define-method del_shader
  (of-object "GstGLContext")
  (c-name "gst_gl_context_del_shader")
  (return-type "none")
  (parameters
    '("GstGLShader*" "shader")
  )
)

(define-method check_framebuffer_status
  (of-object "GstGLContext")
  (c-name "gst_gl_context_check_framebuffer_status")
  (return-type "gboolean")
)

(define-method set_error
  (of-object "GstGLContext")
  (c-name "gst_gl_context_set_error")
  (return-type "none")
  (parameters
    '("const-char*" "format")
  )
  (varargs #t)
)

(define-function gst_gl_context_get_error
  (c-name "gst_gl_context_get_error")
  (return-type "gchar*")
)

(define-function gst_gl_ensure_element_data
  (c-name "gst_gl_ensure_element_data")
  (return-type "gboolean")
  (parameters
    '("gpointer" "element")
    '("GstGLDisplay**" "display_ptr")
    '("GstGLContext**" "other_context_ptr")
  )
)

(define-function gst_gl_handle_set_context
  (c-name "gst_gl_handle_set_context")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstContext*" "context")
    '("GstGLDisplay**" "display")
    '("GstGLContext**" "other_context")
  )
)

(define-function gst_gl_handle_context_query
  (c-name "gst_gl_handle_context_query")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstQuery*" "query")
    '("GstGLDisplay**" "display")
    '("GstGLContext**" "other_context")
  )
)

(define-function gst_gl_run_query
  (c-name "gst_gl_run_query")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
    '("GstQuery*" "query")
    '("GstPadDirection" "direction")
  )
)

(define-function gst_gl_get_plane_data_size
  (c-name "gst_gl_get_plane_data_size")
  (return-type "gsize")
  (parameters
    '("GstVideoInfo*" "info")
    '("GstVideoAlignment*" "align")
    '("guint" "plane")
  )
)

(define-function gst_gl_get_plane_start
  (c-name "gst_gl_get_plane_start")
  (return-type "gsize")
  (parameters
    '("GstVideoInfo*" "info")
    '("GstVideoAlignment*" "valign")
    '("guint" "plane")
  )
)

(define-function gst_gl_caps_replace_all_caps_features
  (c-name "gst_gl_caps_replace_all_caps_features")
  (return-type "GstCaps*")
  (parameters
    '("const-GstCaps*" "caps")
    '("const-gchar*" "feature_name")
  )
)

(define-function gst_gl_value_set_texture_target_from_mask
  (c-name "gst_gl_value_set_texture_target_from_mask")
  (return-type "gboolean")
  (parameters
    '("GValue*" "value")
    '("GstGLTextureTarget" "target_mask")
  )
)

(define-function gst_gl_value_set_texture_target
  (c-name "gst_gl_value_set_texture_target")
  (return-type "gboolean")
  (parameters
    '("GValue*" "value")
    '("GstGLTextureTarget" "target")
  )
)

(define-function gst_gl_value_get_texture_target_mask
  (c-name "gst_gl_value_get_texture_target_mask")
  (return-type "GstGLTextureTarget")
  (parameters
    '("const-GValue*" "value")
  )
)



;; From gstglviewconvert.h

(define-function gst_gl_stereo_downmix_mode_get_type
  (c-name "gst_gl_stereo_downmix_mode_get_type")
  (return-type "GType")
)

(define-function gst_gl_view_convert_get_type
  (c-name "gst_gl_view_convert_get_type")
  (return-type "GType")
)

(define-function gst_gl_view_convert_new
  (c-name "gst_gl_view_convert_new")
  (is-constructor-of "GstGlViewConvert")
  (return-type "GstGLViewConvert*")
)

(define-method set_caps
  (of-object "GstGLViewConvert")
  (c-name "gst_gl_view_convert_set_caps")
  (return-type "gboolean")
  (parameters
    '("GstCaps*" "in_caps")
    '("GstCaps*" "out_caps")
  )
)

(define-method transform_caps
  (of-object "GstGLViewConvert")
  (c-name "gst_gl_view_convert_transform_caps")
  (return-type "GstCaps*")
  (parameters
    '("GstPadDirection" "direction")
    '("GstCaps*" "caps")
    '("GstCaps*" "filter")
  )
)

(define-method fixate_caps
  (of-object "GstGLViewConvert")
  (c-name "gst_gl_view_convert_fixate_caps")
  (return-type "GstCaps*")
  (parameters
    '("GstPadDirection" "direction")
    '("GstCaps*" "caps")
    '("GstCaps*" "othercaps")
  )
)

(define-method submit_input_buffer
  (of-object "GstGLViewConvert")
  (c-name "gst_gl_view_convert_submit_input_buffer")
  (return-type "GstFlowReturn")
  (parameters
    '("gboolean" "is_discont")
    '("GstBuffer*" "input")
  )
)

(define-method get_output
  (of-object "GstGLViewConvert")
  (c-name "gst_gl_view_convert_get_output")
  (return-type "GstFlowReturn")
  (parameters
    '("GstBuffer**" "outbuf_ptr")
  )
)

(define-method perform
  (of-object "GstGLViewConvert")
  (c-name "gst_gl_view_convert_perform")
  (return-type "GstBuffer*")
  (parameters
    '("GstBuffer*" "inbuf")
  )
)

(define-method reset
  (of-object "GstGLViewConvert")
  (c-name "gst_gl_view_convert_reset")
  (return-type "none")
)

(define-method set_context
  (of-object "GstGLViewConvert")
  (c-name "gst_gl_view_convert_set_context")
  (return-type "none")
  (parameters
    '("GstGLContext*" "context")
  )
)



;; From gstglwindow.h

(define-function gst_gl_window_error_quark
  (c-name "gst_gl_window_error_quark")
  (return-type "GQuark")
)

(define-function gst_gl_window_get_type
  (c-name "gst_gl_window_get_type")
  (return-type "GType")
)

(define-function gst_gl_window_new
  (c-name "gst_gl_window_new")
  (is-constructor-of "GstGlWindow")
  (return-type "GstGLWindow*")
  (parameters
    '("GstGLDisplay*" "display")
  )
)

(define-method set_draw_callback
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_set_draw_callback")
  (return-type "none")
  (parameters
    '("GstGLWindowCB" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy_notify")
  )
)

(define-method set_resize_callback
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_set_resize_callback")
  (return-type "none")
  (parameters
    '("GstGLWindowResizeCB" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy_notify")
  )
)

(define-method set_close_callback
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_set_close_callback")
  (return-type "none")
  (parameters
    '("GstGLWindowCB" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy_notify")
  )
)

(define-method set_window_handle
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_set_window_handle")
  (return-type "none")
  (parameters
    '("guintptr" "handle")
  )
)

(define-method get_window_handle
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_get_window_handle")
  (return-type "guintptr")
)

(define-method run
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_run")
  (return-type "none")
)

(define-method quit
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_quit")
  (return-type "none")
)

(define-method is_running
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_is_running")
  (return-type "gboolean")
)

(define-method send_message
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_send_message")
  (return-type "none")
  (parameters
    '("GstGLWindowCB" "callback")
    '("gpointer" "data")
  )
)

(define-method send_message_async
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_send_message_async")
  (return-type "none")
  (parameters
    '("GstGLWindowCB" "callback")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method handle_events
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_handle_events")
  (return-type "none")
  (parameters
    '("gboolean" "handle_events")
  )
)

(define-method send_key_event
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_send_key_event")
  (return-type "none")
  (parameters
    '("const-char*" "event_type")
    '("const-char*" "key_str")
  )
)

(define-method send_key_event_async
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_send_key_event_async")
  (return-type "none")
  (parameters
    '("const-char*" "event_type")
    '("const-char*" "key_str")
  )
)

(define-method send_mouse_event
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_send_mouse_event")
  (return-type "none")
  (parameters
    '("const-char*" "event_type")
    '("int" "button")
    '("double" "posx")
    '("double" "posy")
  )
)

(define-method send_mouse_event_async
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_send_mouse_event_async")
  (return-type "none")
  (parameters
    '("const-char*" "event_type")
    '("int" "button")
    '("double" "posx")
    '("double" "posy")
  )
)

(define-method queue_resize
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_queue_resize")
  (return-type "none")
)

(define-method draw
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_draw")
  (return-type "none")
)

(define-method show
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_show")
  (return-type "none")
)

(define-method set_preferred_size
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_set_preferred_size")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_surface_dimensions
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_get_surface_dimensions")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method set_render_rectangle
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_set_render_rectangle")
  (return-type "gboolean")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method resize
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_resize")
  (return-type "none")
  (parameters
    '("guint" "width")
    '("guint" "height")
  )
)

(define-method get_context
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_get_context")
  (return-type "GstGLContext*")
)

(define-method get_display
  (of-object "GstGLWindow")
  (c-name "gst_gl_window_get_display")
  (return-type "guintptr")
)



;; From gstinsertbin.h

(define-function gst_insert_bin_get_type
  (c-name "gst_insert_bin_get_type")
  (return-type "GType")
)

(define-function gst_insert_bin_new
  (c-name "gst_insert_bin_new")
  (is-constructor-of "GstInsertBin")
  (return-type "GstElement*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method prepend
  (of-object "GstInsertBin")
  (c-name "gst_insert_bin_prepend")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
    '("GstInsertBinCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method append
  (of-object "GstInsertBin")
  (c-name "gst_insert_bin_append")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
    '("GstInsertBinCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method insert_before
  (of-object "GstInsertBin")
  (c-name "gst_insert_bin_insert_before")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
    '("GstElement*" "sibling")
    '("GstInsertBinCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method insert_after
  (of-object "GstInsertBin")
  (c-name "gst_insert_bin_insert_after")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
    '("GstElement*" "sibling")
    '("GstInsertBinCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method remove
  (of-object "GstInsertBin")
  (c-name "gst_insert_bin_remove")
  (return-type "none")
  (parameters
    '("GstElement*" "element")
    '("GstInsertBinCallback" "callback")
    '("gpointer" "user_data")
  )
)



;; From photography-enumtypes.h

(define-function gst_photography_noise_reduction_get_type
  (c-name "gst_photography_noise_reduction_get_type")
  (return-type "GType")
)

(define-function gst_photography_white_balance_mode_get_type
  (c-name "gst_photography_white_balance_mode_get_type")
  (return-type "GType")
)

(define-function gst_photography_color_tone_mode_get_type
  (c-name "gst_photography_color_tone_mode_get_type")
  (return-type "GType")
)

(define-function gst_photography_scene_mode_get_type
  (c-name "gst_photography_scene_mode_get_type")
  (return-type "GType")
)

(define-function gst_photography_flash_mode_get_type
  (c-name "gst_photography_flash_mode_get_type")
  (return-type "GType")
)

(define-function gst_photography_focus_status_get_type
  (c-name "gst_photography_focus_status_get_type")
  (return-type "GType")
)

(define-function gst_photography_caps_get_type
  (c-name "gst_photography_caps_get_type")
  (return-type "GType")
)

(define-function gst_photography_shake_risk_get_type
  (c-name "gst_photography_shake_risk_get_type")
  (return-type "GType")
)

(define-function gst_photography_flicker_reduction_mode_get_type
  (c-name "gst_photography_flicker_reduction_mode_get_type")
  (return-type "GType")
)

(define-function gst_photography_focus_mode_get_type
  (c-name "gst_photography_focus_mode_get_type")
  (return-type "GType")
)

(define-function gst_photography_exposure_mode_get_type
  (c-name "gst_photography_exposure_mode_get_type")
  (return-type "GType")
)



;; From photography.h

(define-function gst_photography_get_type
  (c-name "gst_photography_get_type")
  (return-type "GType")
)

(define-method get_ev_compensation
  (of-object "GstPhotography")
  (c-name "gst_photography_get_ev_compensation")
  (return-type "gboolean")
  (parameters
    '("gfloat*" "ev_comp")
  )
)

(define-method get_iso_speed
  (of-object "GstPhotography")
  (c-name "gst_photography_get_iso_speed")
  (return-type "gboolean")
  (parameters
    '("guint*" "iso_speed")
  )
)

(define-method get_aperture
  (of-object "GstPhotography")
  (c-name "gst_photography_get_aperture")
  (return-type "gboolean")
  (parameters
    '("guint*" "aperture")
  )
)

(define-method get_exposure
  (of-object "GstPhotography")
  (c-name "gst_photography_get_exposure")
  (return-type "gboolean")
  (parameters
    '("guint32*" "exposure")
  )
)

(define-method get_white_balance_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_get_white_balance_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyWhiteBalanceMode*" "wb_mode")
  )
)

(define-method get_color_tone_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_get_color_tone_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyColorToneMode*" "tone_mode")
  )
)

(define-method get_scene_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_get_scene_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographySceneMode*" "scene_mode")
  )
)

(define-method get_flash_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_get_flash_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyFlashMode*" "flash_mode")
  )
)

(define-method get_noise_reduction
  (of-object "GstPhotography")
  (c-name "gst_photography_get_noise_reduction")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyNoiseReduction*" "noise_reduction")
  )
)

(define-method get_zoom
  (of-object "GstPhotography")
  (c-name "gst_photography_get_zoom")
  (return-type "gboolean")
  (parameters
    '("gfloat*" "zoom")
  )
)

(define-method get_flicker_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_get_flicker_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyFlickerReductionMode*" "mode")
  )
)

(define-method get_focus_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_get_focus_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyFocusMode*" "mode")
  )
)

(define-method set_ev_compensation
  (of-object "GstPhotography")
  (c-name "gst_photography_set_ev_compensation")
  (return-type "gboolean")
  (parameters
    '("gfloat" "ev_comp")
  )
)

(define-method set_iso_speed
  (of-object "GstPhotography")
  (c-name "gst_photography_set_iso_speed")
  (return-type "gboolean")
  (parameters
    '("guint" "iso_speed")
  )
)

(define-method set_aperture
  (of-object "GstPhotography")
  (c-name "gst_photography_set_aperture")
  (return-type "gboolean")
  (parameters
    '("guint" "aperture")
  )
)

(define-method set_exposure
  (of-object "GstPhotography")
  (c-name "gst_photography_set_exposure")
  (return-type "gboolean")
  (parameters
    '("guint" "exposure")
  )
)

(define-method set_white_balance_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_set_white_balance_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyWhiteBalanceMode" "wb_mode")
  )
)

(define-method set_color_tone_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_set_color_tone_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyColorToneMode" "tone_mode")
  )
)

(define-method set_scene_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_set_scene_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographySceneMode" "scene_mode")
  )
)

(define-method set_flash_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_set_flash_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyFlashMode" "flash_mode")
  )
)

(define-method set_noise_reduction
  (of-object "GstPhotography")
  (c-name "gst_photography_set_noise_reduction")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyNoiseReduction" "noise_reduction")
  )
)

(define-method set_zoom
  (of-object "GstPhotography")
  (c-name "gst_photography_set_zoom")
  (return-type "gboolean")
  (parameters
    '("gfloat" "zoom")
  )
)

(define-method set_flicker_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_set_flicker_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyFlickerReductionMode" "mode")
  )
)

(define-method set_focus_mode
  (of-object "GstPhotography")
  (c-name "gst_photography_set_focus_mode")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyFocusMode" "mode")
  )
)

(define-method get_capabilities
  (of-object "GstPhotography")
  (c-name "gst_photography_get_capabilities")
  (return-type "GstPhotographyCaps")
)

(define-method prepare_for_capture
  (of-object "GstPhotography")
  (c-name "gst_photography_prepare_for_capture")
  (return-type "gboolean")
  (parameters
    '("GstPhotographyCapturePrepared" "func")
    '("GstCaps*" "capture_caps")
    '("gpointer" "user_data")
  )
)

(define-method set_autofocus
  (of-object "GstPhotography")
  (c-name "gst_photography_set_autofocus")
  (return-type "none")
  (parameters
    '("gboolean" "on")
  )
)

(define-method set_config
  (of-object "GstPhotography")
  (c-name "gst_photography_set_config")
  (return-type "gboolean")
  (parameters
    '("GstPhotographySettings*" "config")
  )
)

(define-method get_config
  (of-object "GstPhotography")
  (c-name "gst_photography_get_config")
  (return-type "gboolean")
  (parameters
    '("GstPhotographySettings*" "config")
  )
)



;; From gst-atsc-section.h

(define-function gst_mpegts_atsc_vct_get_type
  (c-name "gst_mpegts_atsc_vct_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_atsc_vct_source_get_type
  (c-name "gst_mpegts_atsc_vct_source_get_type")
  (return-type "GType")
)

(define-method get_atsc_tvct
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_atsc_tvct")
  (return-type "const-GstMpegtsAtscVCT*")
)

(define-method get_atsc_cvct
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_atsc_cvct")
  (return-type "const-GstMpegtsAtscVCT*")
)

(define-function gst_mpegts_atsc_mgt_get_type
  (c-name "gst_mpegts_atsc_mgt_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_atsc_mgt_table_get_type
  (c-name "gst_mpegts_atsc_mgt_table_get_type")
  (return-type "GType")
)

(define-method get_atsc_mgt
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_atsc_mgt")
  (return-type "const-GstMpegtsAtscMGT*")
)

(define-method get_string
  (of-object "GstMpegtsAtscStringSegment")
  (c-name "gst_mpegts_atsc_string_segment_get_string")
  (return-type "const-gchar*")
)

(define-function gst_mpegts_atsc_string_segment_get_type
  (c-name "gst_mpegts_atsc_string_segment_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_atsc_mult_string_get_type
  (c-name "gst_mpegts_atsc_mult_string_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_atsc_eit_event_get_type
  (c-name "gst_mpegts_atsc_eit_event_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_atsc_eit_get_type
  (c-name "gst_mpegts_atsc_eit_get_type")
  (return-type "GType")
)

(define-method get_atsc_eit
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_atsc_eit")
  (return-type "const-GstMpegtsAtscEIT*")
)

(define-function gst_mpegts_atsc_ett_get_type
  (c-name "gst_mpegts_atsc_ett_get_type")
  (return-type "GType")
)

(define-method get_atsc_ett
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_atsc_ett")
  (return-type "const-GstMpegtsAtscETT*")
)

(define-function gst_mpegts_atsc_stt_get_type
  (c-name "gst_mpegts_atsc_stt_get_type")
  (return-type "GType")
)

(define-method get_atsc_stt
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_atsc_stt")
  (return-type "const-GstMpegtsAtscSTT*")
)

(define-method get_datetime_utc
  (of-object "GstMpegtsAtscSTT")
  (c-name "gst_mpegts_atsc_stt_get_datetime_utc")
  (return-type "GstDateTime*")
)



;; From gst-dvb-descriptor.h

(define-method parse_dvb_network_name
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_network_name")
  (return-type "gboolean")
  (parameters
    '("gchar**" "name")
  )
)

(define-function gst_mpegts_descriptor_from_dvb_network_name
  (c-name "gst_mpegts_descriptor_from_dvb_network_name")
  (return-type "GstMpegtsDescriptor*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method parse_dvb_stuffing
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_stuffing")
  (return-type "gboolean")
  (parameters
    '("guint8**" "stuffing_bytes")
  )
)

(define-method parse_satellite_delivery_system
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_satellite_delivery_system")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsSatelliteDeliverySystemDescriptor*" "res")
  )
)

(define-method parse_cable_delivery_system
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_cable_delivery_system")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsCableDeliverySystemDescriptor*" "res")
  )
)

(define-method parse_dvb_bouquet_name
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_bouquet_name")
  (return-type "gboolean")
  (parameters
    '("gchar**" "bouquet_name")
  )
)

(define-method parse_dvb_service
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_service")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsDVBServiceType*" "service_type")
    '("gchar**" "service_name")
    '("gchar**" "provider_name")
  )
)

(define-function gst_mpegts_descriptor_from_dvb_service
  (c-name "gst_mpegts_descriptor_from_dvb_service")
  (return-type "GstMpegtsDescriptor*")
  (parameters
    '("GstMpegtsDVBServiceType" "service_type")
    '("const-gchar*" "service_name")
    '("const-gchar*" "service_provider")
  )
)

(define-method parse_dvb_service_list
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_service_list")
  (return-type "gboolean")
  (parameters
    '("GPtrArray**" "list")
  )
)

(define-function gst_mpegts_dvb_linkage_descriptor_get_type
  (c-name "gst_mpegts_dvb_linkage_descriptor_get_type")
  (return-type "GType")
)

(define-method free
  (of-object "GstMpegtsDVBLinkageDescriptor")
  (c-name "gst_mpegts_dvb_linkage_descriptor_free")
  (return-type "none")
)

(define-method get_mobile_hand_over
  (of-object "GstMpegtsDVBLinkageDescriptor")
  (c-name "gst_mpegts_dvb_linkage_descriptor_get_mobile_hand_over")
  (return-type "const-GstMpegtsDVBLinkageMobileHandOver*")
)

(define-method get_event
  (of-object "GstMpegtsDVBLinkageDescriptor")
  (c-name "gst_mpegts_dvb_linkage_descriptor_get_event")
  (return-type "const-GstMpegtsDVBLinkageEvent*")
)

(define-method get_extended_event
  (of-object "GstMpegtsDVBLinkageDescriptor")
  (c-name "gst_mpegts_dvb_linkage_descriptor_get_extended_event")
  (return-type "const-GPtrArray*")
)

(define-method parse_dvb_linkage
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_linkage")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsDVBLinkageDescriptor**" "res")
  )
)

(define-method parse_dvb_short_event
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_short_event")
  (return-type "gboolean")
  (parameters
    '("gchar**" "language_code")
    '("gchar**" "event_name")
    '("gchar**" "text")
  )
)

(define-function gst_mpegts_extended_event_descriptor_get_type
  (c-name "gst_mpegts_extended_event_descriptor_get_type")
  (return-type "GType")
)

(define-method free
  (of-object "GstMpegtsExtendedEventDescriptor")
  (c-name "gst_mpegts_extended_event_descriptor_free")
  (return-type "none")
)

(define-method parse_dvb_extended_event
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_extended_event")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsExtendedEventDescriptor**" "res")
  )
)

(define-function gst_mpegts_component_descriptor_get_type
  (c-name "gst_mpegts_component_descriptor_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_component_descriptor_free
  (c-name "gst_mpegts_dvb_component_descriptor_free")
  (return-type "none")
  (parameters
    '("GstMpegtsComponentDescriptor*" "source")
  )
)

(define-method parse_dvb_component
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_component")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsComponentDescriptor**" "res")
  )
)

(define-method parse_dvb_stream_identifier
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_stream_identifier")
  (return-type "gboolean")
  (parameters
    '("guint8*" "component_tag")
  )
)

(define-method parse_dvb_ca_identifier
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_ca_identifier")
  (return-type "gboolean")
  (parameters
    '("GArray**" "list")
  )
)

(define-method parse_dvb_content
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_content")
  (return-type "gboolean")
  (parameters
    '("GPtrArray**" "content")
  )
)

(define-method parse_dvb_parental_rating
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_parental_rating")
  (return-type "gboolean")
  (parameters
    '("GPtrArray**" "rating")
  )
)

(define-method parse_dvb_teletext_idx
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_teletext_idx")
  (return-type "gboolean")
  (parameters
    '("guint" "idx")
    '("gchar**" "language_code")
    '("GstMpegtsDVBTeletextType*" "teletext_type")
    '("guint8*" "magazine_number")
    '("guint8*" "page_number")
  )
)

(define-method parse_dvb_teletext_nb
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_teletext_nb")
  (return-type "guint")
)

(define-method parse_dvb_subtitling_idx
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_subtitling_idx")
  (return-type "gboolean")
  (parameters
    '("guint" "idx")
    '("gchar**" "lang")
    '("guint8*" "type")
    '("guint16*" "composition_page_id")
    '("guint16*" "ancillary_page_id")
  )
)

(define-method parse_dvb_subtitling_nb
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_subtitling_nb")
  (return-type "guint")
)

(define-function gst_mpegts_descriptor_from_dvb_subtitling
  (c-name "gst_mpegts_descriptor_from_dvb_subtitling")
  (return-type "GstMpegtsDescriptor*")
  (parameters
    '("const-gchar*" "lang")
    '("guint8" "type")
    '("guint16" "composition")
    '("guint16" "ancillary")
  )
)

(define-method parse_terrestrial_delivery_system
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_terrestrial_delivery_system")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsTerrestrialDeliverySystemDescriptor*" "res")
  )
)

(define-method parse_dvb_multilingual_network_name
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_multilingual_network_name")
  (return-type "gboolean")
  (parameters
    '("GPtrArray**" "network_name_items")
  )
)

(define-method parse_dvb_multilingual_bouquet_name
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_multilingual_bouquet_name")
  (return-type "gboolean")
  (parameters
    '("GPtrArray**" "bouquet_name_items")
  )
)

(define-method parse_dvb_multilingual_service_name
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_multilingual_service_name")
  (return-type "gboolean")
  (parameters
    '("GPtrArray**" "service_name_items")
  )
)

(define-method parse_dvb_multilingual_component
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_multilingual_component")
  (return-type "gboolean")
  (parameters
    '("guint8*" "component_tag")
    '("GPtrArray**" "component_description_items")
  )
)

(define-method parse_dvb_private_data_specifier
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_private_data_specifier")
  (return-type "gboolean")
  (parameters
    '("guint32*" "private_data_specifier")
    '("guint8**" "private_data")
    '("guint8*" "length")
  )
)

(define-method parse_dvb_frequency_list
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_frequency_list")
  (return-type "gboolean")
  (parameters
    '("gboolean*" "offset")
    '("GArray**" "list")
  )
)

(define-function gst_mpegts_dvb_data_broadcast_descriptor_get_type
  (c-name "gst_mpegts_dvb_data_broadcast_descriptor_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_data_broadcast_descriptor_free
  (c-name "gst_mpegts_dvb_data_broadcast_descriptor_free")
  (return-type "none")
  (parameters
    '("GstMpegtsDataBroadcastDescriptor*" "source")
  )
)

(define-method parse_dvb_data_broadcast
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_data_broadcast")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsDataBroadcastDescriptor**" "res")
  )
)

(define-method parse_dvb_scrambling
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_scrambling")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsDVBScramblingModeType*" "scrambling_mode")
  )
)

(define-method parse_dvb_data_broadcast_id
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_data_broadcast_id")
  (return-type "gboolean")
  (parameters
    '("guint16*" "data_broadcast_id")
    '("guint8**" "id_selector_bytes")
    '("guint8*" "len")
  )
)

(define-function gst_mpegts_t2_delivery_system_descriptor_get_type
  (c-name "gst_mpegts_t2_delivery_system_descriptor_get_type")
  (return-type "GType")
)

(define-method free
  (of-object "GstMpegtsT2DeliverySystemDescriptor")
  (c-name "gst_mpegts_t2_delivery_system_descriptor_free")
  (return-type "none")
)

(define-method parse_dvb_t2_delivery_system
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_dvb_t2_delivery_system")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsT2DeliverySystemDescriptor**" "res")
  )
)



;; From gst-dvb-section.h

(define-function gst_mpegts_nit_get_type
  (c-name "gst_mpegts_nit_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_nit_stream_get_type
  (c-name "gst_mpegts_nit_stream_get_type")
  (return-type "GType")
)

(define-method get_nit
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_nit")
  (return-type "const-GstMpegtsNIT*")
)

(define-function gst_mpegts_section_from_nit
  (c-name "gst_mpegts_section_from_nit")
  (return-type "GstMpegtsSection*")
  (parameters
    '("GstMpegtsNIT*" "nit")
  )
)

(define-function gst_mpegts_nit_new
  (c-name "gst_mpegts_nit_new")
  (is-constructor-of "GstMpegtsNit")
  (return-type "GstMpegtsNIT*")
)

(define-function gst_mpegts_nit_stream_new
  (c-name "gst_mpegts_nit_stream_new")
  (is-constructor-of "GstMpegtsNitStream")
  (return-type "GstMpegtsNITStream*")
)

(define-function gst_mpegts_bat_get_type
  (c-name "gst_mpegts_bat_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_bat_stream_get_type
  (c-name "gst_mpegts_bat_stream_get_type")
  (return-type "GType")
)

(define-method get_bat
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_bat")
  (return-type "const-GstMpegtsBAT*")
)

(define-function gst_mpegts_sdt_get_type
  (c-name "gst_mpegts_sdt_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_sdt_service_get_type
  (c-name "gst_mpegts_sdt_service_get_type")
  (return-type "GType")
)

(define-method get_sdt
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_sdt")
  (return-type "const-GstMpegtsSDT*")
)

(define-function gst_mpegts_section_from_sdt
  (c-name "gst_mpegts_section_from_sdt")
  (return-type "GstMpegtsSection*")
  (parameters
    '("GstMpegtsSDT*" "sdt")
  )
)

(define-function gst_mpegts_sdt_new
  (c-name "gst_mpegts_sdt_new")
  (is-constructor-of "GstMpegtsSdt")
  (return-type "GstMpegtsSDT*")
)

(define-function gst_mpegts_sdt_service_new
  (c-name "gst_mpegts_sdt_service_new")
  (is-constructor-of "GstMpegtsSdtService")
  (return-type "GstMpegtsSDTService*")
)

(define-function gst_mpegts_eit_get_type
  (c-name "gst_mpegts_eit_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_eit_event_get_type
  (c-name "gst_mpegts_eit_event_get_type")
  (return-type "GType")
)

(define-method get_eit
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_eit")
  (return-type "const-GstMpegtsEIT*")
)

(define-method get_tdt
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_tdt")
  (return-type "GstDateTime*")
)

(define-function gst_mpegts_tot_get_type
  (c-name "gst_mpegts_tot_get_type")
  (return-type "GType")
)

(define-method get_tot
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_tot")
  (return-type "const-GstMpegtsTOT*")
)



;; From gstmpegtsdescriptor.h

(define-function gst_mpegts_descriptor_get_type
  (c-name "gst_mpegts_descriptor_get_type")
  (return-type "GType")
)

(define-method free
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_free")
  (return-type "none")
)

(define-function gst_mpegts_parse_descriptors
  (c-name "gst_mpegts_parse_descriptors")
  (return-type "GPtrArray*")
  (parameters
    '("guint8*" "buffer")
    '("gsize" "buf_len")
  )
)

(define-function gst_mpegts_find_descriptor
  (c-name "gst_mpegts_find_descriptor")
  (return-type "const-GstMpegtsDescriptor*")
  (parameters
    '("GPtrArray*" "descriptors")
    '("guint8" "tag")
  )
)

(define-function gst_mpegts_descriptor_from_registration
  (c-name "gst_mpegts_descriptor_from_registration")
  (return-type "GstMpegtsDescriptor*")
  (parameters
    '("const-gchar*" "format_identifier")
    '("guint8*" "additional_info")
    '("gsize" "additional_info_length")
  )
)

(define-method parse_ca
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_ca")
  (return-type "gboolean")
  (parameters
    '("guint16*" "ca_system_id")
    '("guint16*" "ca_pid")
    '("const-guint8**" "private_data")
    '("gsize*" "private_data_size")
  )
)

(define-function gst_mpegts_iso_639_language_get_type
  (c-name "gst_mpegts_iso_639_language_get_type")
  (return-type "GType")
)

(define-method free
  (of-object "GstMpegtsISO639LanguageDescriptor")
  (c-name "gst_mpegts_iso_639_language_descriptor_free")
  (return-type "none")
)

(define-method parse_iso_639_language
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_iso_639_language")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsISO639LanguageDescriptor**" "res")
  )
)

(define-method parse_iso_639_language_idx
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_iso_639_language_idx")
  (return-type "gboolean")
  (parameters
    '("guint" "idx")
    '("gchar**" "lang")
    '("GstMpegtsIso639AudioType*" "audio_type")
  )
)

(define-method parse_iso_639_language_nb
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_iso_639_language_nb")
  (return-type "guint")
)

(define-method parse_logical_channel
  (of-object "GstMpegtsDescriptor")
  (c-name "gst_mpegts_descriptor_parse_logical_channel")
  (return-type "gboolean")
  (parameters
    '("GstMpegtsLogicalChannelDescriptor*" "res")
  )
)

(define-function gst_mpegts_descriptor_from_custom
  (c-name "gst_mpegts_descriptor_from_custom")
  (return-type "GstMpegtsDescriptor*")
  (parameters
    '("guint8" "tag")
    '("const-guint8*" "data")
    '("gsize" "length")
  )
)

(define-function gst_mpegts_descriptor_from_custom_with_extension
  (c-name "gst_mpegts_descriptor_from_custom_with_extension")
  (return-type "GstMpegtsDescriptor*")
  (parameters
    '("guint8" "tag")
    '("guint8" "tag_extension")
    '("const-guint8*" "data")
    '("gsize" "length")
  )
)



;; From gstmpegts-enumtypes.h

(define-function gst_mpegts_section_type_get_type
  (c-name "gst_mpegts_section_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_section_table_id_get_type
  (c-name "gst_mpegts_section_table_id_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_stream_type_get_type
  (c-name "gst_mpegts_stream_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_descriptor_type_get_type
  (c-name "gst_mpegts_descriptor_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_misc_descriptor_type_get_type
  (c-name "gst_mpegts_misc_descriptor_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_atsc_descriptor_type_get_type
  (c-name "gst_mpegts_atsc_descriptor_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_isdb_descriptor_type_get_type
  (c-name "gst_mpegts_isdb_descriptor_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_iso639_audio_type_get_type
  (c-name "gst_mpegts_iso639_audio_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_section_atsc_table_id_get_type
  (c-name "gst_mpegts_section_atsc_table_id_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_atsc_mgt_table_type_get_type
  (c-name "gst_mpegts_atsc_mgt_table_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_section_dvb_table_id_get_type
  (c-name "gst_mpegts_section_dvb_table_id_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_running_status_get_type
  (c-name "gst_mpegts_running_status_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_scte_stream_type_get_type
  (c-name "gst_mpegts_scte_stream_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_section_scte_table_id_get_type
  (c-name "gst_mpegts_section_scte_table_id_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_descriptor_type_get_type
  (c-name "gst_mpegts_dvb_descriptor_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_extended_descriptor_type_get_type
  (c-name "gst_mpegts_dvb_extended_descriptor_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_modulation_type_get_type
  (c-name "gst_mpegts_modulation_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_code_rate_get_type
  (c-name "gst_mpegts_dvb_code_rate_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_satellite_rolloff_get_type
  (c-name "gst_mpegts_satellite_rolloff_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_satellite_polarization_type_get_type
  (c-name "gst_mpegts_satellite_polarization_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_cable_outer_fec_scheme_get_type
  (c-name "gst_mpegts_cable_outer_fec_scheme_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_service_type_get_type
  (c-name "gst_mpegts_dvb_service_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_linkage_type_get_type
  (c-name "gst_mpegts_dvb_linkage_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_linkage_hand_over_type_get_type
  (c-name "gst_mpegts_dvb_linkage_hand_over_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_component_stream_content_get_type
  (c-name "gst_mpegts_component_stream_content_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_content_nibble_hi_get_type
  (c-name "gst_mpegts_content_nibble_hi_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_teletext_type_get_type
  (c-name "gst_mpegts_dvb_teletext_type_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_terrestrial_transmission_mode_get_type
  (c-name "gst_mpegts_terrestrial_transmission_mode_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_terrestrial_guard_interval_get_type
  (c-name "gst_mpegts_terrestrial_guard_interval_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_terrestrial_hierarchy_get_type
  (c-name "gst_mpegts_terrestrial_hierarchy_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_dvb_scrambling_mode_type_get_type
  (c-name "gst_mpegts_dvb_scrambling_mode_type_get_type")
  (return-type "GType")
)



;; From gstmpegts-private.h



;; From gstmpegtssection.h

(define-function gst_mpegts_section_get_type
  (c-name "gst_mpegts_section_get_type")
  (return-type "GType")
)

(define-method get_data
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_data")
  (return-type "GBytes*")
)

(define-method get_pat
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_pat")
  (return-type "GPtrArray*")
)

(define-function gst_mpegts_pat_program_get_type
  (c-name "gst_mpegts_pat_program_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_pat_new
  (c-name "gst_mpegts_pat_new")
  (is-constructor-of "GstMpegtsPat")
  (return-type "GPtrArray*")
)

(define-function gst_mpegts_pat_program_new
  (c-name "gst_mpegts_pat_program_new")
  (is-constructor-of "GstMpegtsPatProgram")
  (return-type "GstMpegtsPatProgram*")
)

(define-function gst_mpegts_section_from_pat
  (c-name "gst_mpegts_section_from_pat")
  (return-type "GstMpegtsSection*")
  (parameters
    '("GPtrArray*" "programs")
    '("guint16" "ts_id")
  )
)

(define-method get_cat
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_cat")
  (return-type "GPtrArray*")
)

(define-function gst_mpegts_pmt_get_type
  (c-name "gst_mpegts_pmt_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_pmt_stream_get_type
  (c-name "gst_mpegts_pmt_stream_get_type")
  (return-type "GType")
)

(define-function gst_mpegts_pmt_new
  (c-name "gst_mpegts_pmt_new")
  (is-constructor-of "GstMpegtsPmt")
  (return-type "GstMpegtsPMT*")
)

(define-function gst_mpegts_pmt_stream_new
  (c-name "gst_mpegts_pmt_stream_new")
  (is-constructor-of "GstMpegtsPmtStream")
  (return-type "GstMpegtsPMTStream*")
)

(define-method get_pmt
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_pmt")
  (return-type "const-GstMpegtsPMT*")
)

(define-function gst_mpegts_section_from_pmt
  (c-name "gst_mpegts_section_from_pmt")
  (return-type "GstMpegtsSection*")
  (parameters
    '("GstMpegtsPMT*" "pmt")
    '("guint16" "pid")
  )
)

(define-method get_tsdt
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_get_tsdt")
  (return-type "GPtrArray*")
)

(define-function gst_message_new_mpegts_section
  (c-name "gst_message_new_mpegts_section")
  (return-type "GstMessage*")
  (parameters
    '("GstObject*" "parent")
    '("GstMpegtsSection*" "section")
  )
)

(define-method send_event
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_send_event")
  (return-type "gboolean")
  (parameters
    '("GstElement*" "element")
  )
)

(define-method parse_mpegts_section
  (of-object "GstEvent")
  (c-name "gst_event_parse_mpegts_section")
  (return-type "GstMpegtsSection*")
)

(define-method parse_mpegts_section
  (of-object "GstMessage")
  (c-name "gst_message_parse_mpegts_section")
  (return-type "GstMpegtsSection*")
)

(define-function gst_mpegts_section_new
  (c-name "gst_mpegts_section_new")
  (is-constructor-of "GstMpegtsSection")
  (return-type "GstMpegtsSection*")
  (parameters
    '("guint16" "pid")
    '("guint8*" "data")
    '("gsize" "data_size")
  )
)

(define-method packetize
  (of-object "GstMpegtsSection")
  (c-name "gst_mpegts_section_packetize")
  (return-type "guint8*")
  (parameters
    '("gsize*" "output_size")
  )
)



;; From gst-scte-section.h



;; From mpegts.h

(define-function gst_mpegts_initialize
  (c-name "gst_mpegts_initialize")
  (return-type "none")
)



;; From gstfragment.h

(define-function gst_fragment_get_type
  (c-name "gst_fragment_get_type")
  (return-type "GType")
)

(define-method get_buffer
  (of-object "GstFragment")
  (c-name "gst_fragment_get_buffer")
  (return-type "GstBuffer*")
)

(define-method set_caps
  (of-object "GstFragment")
  (c-name "gst_fragment_set_caps")
  (return-type "none")
  (parameters
    '("GstCaps*" "caps")
  )
)

(define-method get_caps
  (of-object "GstFragment")
  (c-name "gst_fragment_get_caps")
  (return-type "GstCaps*")
)

(define-method add_buffer
  (of-object "GstFragment")
  (c-name "gst_fragment_add_buffer")
  (return-type "gboolean")
  (parameters
    '("GstBuffer*" "buffer")
  )
)

(define-function gst_fragment_new
  (c-name "gst_fragment_new")
  (is-constructor-of "GstFragment")
  (return-type "GstFragment*")
)



;; From gsturidownloader_debug.h



;; From gsturidownloader.h

(define-function gst_uri_downloader_get_type
  (c-name "gst_uri_downloader_get_type")
  (return-type "GType")
)

(define-function gst_uri_downloader_new
  (c-name "gst_uri_downloader_new")
  (is-constructor-of "GstUriDownloader")
  (return-type "GstUriDownloader*")
)

(define-method fetch_uri
  (of-object "GstUriDownloader")
  (c-name "gst_uri_downloader_fetch_uri")
  (return-type "GstFragment*")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "referer")
    '("gboolean" "compress")
    '("gboolean" "refresh")
    '("gboolean" "allow_cache")
    '("GError**" "err")
  )
)

(define-method fetch_uri_with_range
  (of-object "GstUriDownloader")
  (c-name "gst_uri_downloader_fetch_uri_with_range")
  (return-type "GstFragment*")
  (parameters
    '("const-gchar*" "uri")
    '("const-gchar*" "referer")
    '("gboolean" "compress")
    '("gboolean" "refresh")
    '("gboolean" "allow_cache")
    '("gint64" "range_start")
    '("gint64" "range_end")
    '("GError**" "err")
  )
)

(define-method reset
  (of-object "GstUriDownloader")
  (c-name "gst_uri_downloader_reset")
  (return-type "none")
)

(define-method cancel
  (of-object "GstUriDownloader")
  (c-name "gst_uri_downloader_cancel")
  (return-type "none")
)

(define-method free
  (of-object "GstUriDownloader")
  (c-name "gst_uri_downloader_free")
  (return-type "none")
)



;; From gstvideoaggregator.h

(define-function gst_videoaggregator_get_type
  (c-name "gst_videoaggregator_get_type")
  (return-type "GType")
)



;; From gstvideoaggregatorpad.h

(define-function gst_videoaggregator_pad_get_type
  (c-name "gst_videoaggregator_pad_get_type")
  (return-type "GType")
)



;; From wayland.h

(define-function gst_is_wayland_display_handle_need_context_message
  (c-name "gst_is_wayland_display_handle_need_context_message")
  (return-type "gboolean")
  (parameters
    '("GstMessage*" "msg")
  )
)

(define-function gst_wayland_display_handle_context_new
  (c-name "gst_wayland_display_handle_context_new")
  (is-constructor-of "GstWaylandDisplayHandleContext")
  (return-type "GstContext*")
  (parameters
    '("struct-wl_display*" "display")
  )
)

(define-function gst_wayland_video_get_type
  (c-name "gst_wayland_video_get_type")
  (return-type "GType")
)

(define-method begin_geometry_change
  (of-object "GstWaylandVideo")
  (c-name "gst_wayland_video_begin_geometry_change")
  (return-type "none")
)

(define-method end_geometry_change
  (of-object "GstWaylandVideo")
  (c-name "gst_wayland_video_end_geometry_change")
  (return-type "none")
)


